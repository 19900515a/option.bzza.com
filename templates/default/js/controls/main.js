/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/

define("base", [],
function() {
    function e(e, t, i) {
        e.removeEventListener ? e.removeEventListener(t, i) : e.detachEvent ? e.detachEvent("on" + t, i) : e["on" + t] = null,
        "click" == t && "ontouchend" in window && (e.removeEventListener ? e.removeEventListener("touchend", n.basicTouchEndHandler) : e.detachEvent ? e.detachEvent("ontouchend", n.basicTouchEndHandler) : e.ontouchend = null)
    }
    function t(t, i, s, a, r) {
        if (!n.valueIsEmpty(o[i]) && o[i] instanceof Array) {
            for (var l = null,
            h = o[i].length, d = !1, c = 0; c < h && (l = o[i][c], l.node != t || l.handler != s && a !== !0 || (r === !0 && e(l.node, l.type, l.handler), o[i].splice(c, 1), d = !0, --c, --h), a === !0 || d !== !0); ++c);
            l = null
        }
    }
    function i(e, i, s) {
        n.valueIsEmpty(o[i]) && (o[i] = []),
        o[i].push({
            node: e,
            handler: s,
            type: i,
            remove: function(e) {
                t(this.node, this.type, this.handler, !1, !!e)
            }
        })
    }
    function s(e) {
        var t = null;
        for (var i in o) for (t = o[i]; 0 !== t.length;) try {
            t[0].remove(e)
        } catch(e) {
            console.log(e.name + ": " + e.message + "\n" + e.stack)
        }
    }
    var n = {},
    o = {};
    n._htmlCache = {},
    String.prototype.splice = function(e, t, i) {
        return this.slice(0, e) + i + this.slice(e + Math.abs(t))
    },
    String.prototype.capitalize = function() {
        return this.charAt(0).toUpperCase() + this.slice(1)
    },
    n.lastKeyDownExecutions = 0,
    n.isHttps = window.isHttps,
    n.Browser = window.Browser,
    window.Browser = null,
    n.SecretString = "zlobnyj_vrazhina_ty_nikogda_ne_vzlomaesh_jetot_parol",
    n.defaultLeverage = 100,
    n.jsonParse = function(e) {
        var t = !1;
        return "string" == typeof e && e.length > 2 && (t = JSON.parse(e)),
        t
    },
    n.chartsMode = {
        tabs: "tabs",
        windows: "windows"
    },
    n.serversModes = {
        fromConfig: 0,
        fromLocalStorage: 1
    },
    n.serversMode = window.serversMode,
    n.savedServers = n.serversMode == n.serversModes.fromLocalStorage && localStorage.getItem("SavedServers") ? JSON.parse(localStorage.getItem("SavedServers")).Servers || [] : [{
        Name: "UTIP Demo",
        CompanyName: "UTIP",
        Url: "http://138.201.128.141",
        Port: "8085",
        Type: "",
        Groups: [{
            Id: 41,
            Name: "Demo"
        }]
    }],
    n.updateHeadTitle = function(e) {
        var t = n.Config.BrokersSettings.TerminalName;
        null != e && "" != e && (t += " - " + e),
        document.title = t
    },
    n.removePixelUnits = function(e) {
        return parseInt(e.replace("px", ""))
    },
    n.getComputedStyle = function(e, t) {
        var i = "";
        return document.defaultView && document.defaultView.getComputedStyle ? i = document.defaultView.getComputedStyle(e, "").getPropertyValue(t) : e.currentStyle && (t = t.replace(/\-(\w)/g,
        function(e, t) {
            return t.toUpperCase()
        }), i = e.currentStyle[t]),
        i
    },
    n.DisplaySize = {
        getWidth: function() {
            return n.Browser.IsMobile ? window.innerWidth: document.documentElement.clientWidth
        },
        getHeight: function() {
            return n.Browser.IsMobile ? window.innerHeight: document.documentElement.clientHeight
        }
    },
    n.initClass = function(e, t) {
        if (t) {
            var i = new Function;
            i.prototype = t.prototype,
            e.prototype = new i,
            e.prototype.constructor = e,
            e.base = t.prototype,
            e.baseClass = t
        }
    },
    n.loadStyle = function(e) {
        var t = document.createElement("link");
        t.setAttribute("rel", "stylesheet"),
        t.setAttribute("type", "text/css"),
        t.setAttribute("href", e),
        document.head.appendChild(t)
    },
    n.addCSSClass = function(e, t) {
        if (t && e) for (var i = t.split(" "), s = i.length, n = 0; n < s; ++n) {
            var o = i[n];
            o && e.classList.add(o)
        }
    },
    n.removeCSSClass = function(e, t) {
        if (t && e) for (var i = t.split(" "), s = i.length, n = 0; n < s; ++n) {
            var o = i[n];
            o && e.classList.remove(o)
        }
    },
    n.getVerticalSeparator = function(e) {
        var t = document.createElement("div");
        return n.addCSSClass(t, "WTVerticalSeparator"),
        e && (t.style.height = e + "px"),
        t
    },
    n.getHorisontalSeparator = function(e) {
        var t = document.createElement("div");
        return n.addCSSClass(t, "WTHorisontalSeparator"),
        e && (t.style.width = e + "px"),
        t
    },
    n.basicTouchEndHandler = function(e) {
        n.Browser.IsMobile || (e.preventDefault(), e.target.click())
    },
    n.rgbToHex = function(e, t, i) {
        if (e && t && i) {
            var s = function(e) {
                var t = e.toString(16);
                return 1 === t.length ? "0" + t: t
            };
            return "#" + s(e) + s(t) + s(i)
        }
        return "#FFFFFF"
    },
    n.rgbToRgba = function(e, t, i, s) {
        return "rgba(" + e + ", " + t + ", " + i + ", " + s + ")"
    },
    n.hexToRgb = function(e) {
        var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
        return t ? {
            r: parseInt(t[1], 16),
            g: parseInt(t[2], 16),
            b: parseInt(t[3], 16)
        }: null
    },
    n.hexToRgba = function(e, t) {
        var i = n.hexToRgb(e);
        return n.rgbToRgba(i.r, i.g, i.b, t)
    },
    n.valueIsEmpty = function(e) {
        return void 0 === e || null === e
    },
    n.removeAllEvents = function() {
        s(!0),
        n.addEvent(document.body, "contextmenu", n.__preventDefault)
    },
    n.removeAllEventsFromArray = function() {
        s(!1)
    },
    n.removeAllEventsByNode = function(e, i, s) {
        t(e, i, null, !0, s)
    },
    n.removeEvent = function(i, s, n) {
        e(i, s, n),
        t(i, s, n, !1, !1)
    },
    n.getAllListeners = function() {
        return o
    },
    n.getEventListenersByNode = function(e) {
        if (!n.valueIsEmpty(o)) {
            var t = {},
            i = null,
            s = null,
            a = null,
            r = null;
            for (var l in o) {
                a = o[l],
                r = a.length;
                for (var h = 0; h < r; ++h) i = a[h],
                i.node == e && (s = i.type, n.valueIsEmpty(t[s]) && (t[s] = []), t[s].push(i))
            }
            return t
        }
    },
    n.addEvent = function(e, t, s, o, a) {
        e.addEventListener ? e.addEventListener(t, s) : e.attachEvent ? e.attachEvent("on" + t, s) : e["on" + t] = s,
        "click" == t && 1 == o && "ontouchend" in window && (e.addEventListener ? e.addEventListener("touchend", n.basicTouchEndHandler, a) : e.attachEvent ? e.attachEvent("ontouchend", n.basicTouchEndHandler, a) : e.ontouchend = n.basicTouchEndHandler),
        i(e, t, s)
    },
    function(e, s) {
        function n(t, i, s, n) {
            t[o](h + i, "wheel" == r ? s: function(t) { ! t && (t = e.event);
                var i = {
                    originalEvent: t,
                    target: t.target || t.srcElement,
                    type: "wheel",
                    deltaMode: "MozMousePixelScroll" == t.type ? 0 : 1,
                    deltaX: 0,
                    deltaZ: 0,
                    preventDefault: function() {
                        t.preventDefault ? t.preventDefault() : t.returnValue = !1
                    }
                };
                return "mousewheel" == r ? (i.deltaY = -.025 * t.wheelDelta, t.wheelDeltaX && (i.deltaX = -.025 * t.wheelDeltaX)) : i.deltaY = t.detail,
                s(i)
            },
            n || !1)
        }
        var o, a, r, l, h = "";
        e.addEventListener ? o = "addEventListener": (o = "attachEvent", h = "on"),
        a = e.removeEventListener ? "removeEventListener": "detachEvent",
        r = l = "onwheel" in s.createElement("div") ? "wheel": void 0 !== s.onmousewheel ? "mousewheel": "DOMMouseScroll",
        e.addWheelListener = function(e, t, s) {
            n(e, r, t, s),
            "DOMMouseScroll" == r && (l = "MozMousePixelScroll", n(e, l, t, s)),
            i(e, h + l, t)
        },
        e.removeWheelListener = function(e, i, s) {
            t(e, h + i, s, !0, !0)
        }
    } (window, document),
    n.htmlToDOM = function(e, t, i) {
        i = !0;
        var s = n._htmlCache[e];
        return s ? s = s.cloneNode(!0) : (s = document.createElement("span"), s._tmpSpan = !0, s.innerHTML = e, i || (n._htmlCache[e] = s.cloneNode(!0))),
        t ? s.childNodes: s.firstChild
    },
    n.swapDOMNodes = function(e, t) {
        t.parentNode.insertBefore(t, e)
    },
    n.getCoords = function(e) {
        var t = e.getBoundingClientRect(),
        i = document.body,
        s = document.documentElement,
        n = window.pageYOffset || s.scrollTop || i.scrollTop,
        o = window.pageXOffset || s.scrollLeft || i.scrollLeft,
        a = s.clientTop || i.clientTop || 0,
        r = s.clientLeft || i.clientLeft || 0,
        l = t.top + n - a,
        h = t.left + o - r,
        d = null != e._offsetHeight ? e._offsetHeight: 0;
        return {
            top: Math.round(l),
            left: Math.round(h),
            right: Math.round(h + t.width),
            bottom: Math.round(l + t.height + d)
        }
    },
    n.getMouseCoord = function(e) {
        var t, i, s, n = e.targetTouches,
        o = e.changedTouches;
        if (n && n.length > 0) {
            var a = n[0];
            i = a.clientX,
            s = a.clientY,
            "CANVAS" == e.target.nodeName && (t = e.target.getBoundingClientRect(), i -= t.left, s -= t.top)
        } else if (o && o.length > 0) {
            var r = o[0];
            i = r.clientX,
            s = r.clientY,
            "CANVAS" == e.target.nodeName && (t = e.target.getBoundingClientRect(), i -= t.left, s -= t.top)
        } else e.clientX && e.clientY && (i = e.offsetX || e.layerX, s = e.offsetY || e.layerY);
        return {
            x: i,
            y: s
        }
    },
    n.imagePreload = function(e) {
        if (e) for (var t = new Array,
        i = 0; i < e.length; i++) {
            var s = new Image;
            s.src = e[i],
            t.push(s)
        }
        return t
    },
    n.blockTradePanels = function(e) {
        for (var t = n.Charts2.getAllGraphicWindows(), i = t.length, s = void 0 === e || null === e, o = 0; o < i; o++) {
            var a = t[o],
            r = a.getTradePanel();
            r && (s && (e = !r.getSymbol().allowTrade()), r._blockPanel(e))
        }
    },
    n.updateSizeTradePanels = function(e, t) {
        function i(e, t) {
            var i = e instanceof n.GraphicWindow;
            if (i) {
                var s = e.tradePanelModule;
                if (s) {
                    var o = n.valueIsEmpty(t) ? s.showed: t,
                    a = s.height,
                    r = s.viewVisualState,
                    l = e.getParentNode(),
                    h = l.getBoundingClientRect(),
                    d = h.width,
                    c = l.offsetHeight,
                    u = ["maximize", "minimize", "hidden"],
                    g = u[0],
                    p = n.tradePanelConst,
                    m = p.viewVisualState,
                    _ = p.width,
                    y = _.max,
                    S = u[1],
                    f = u[2];
                    if (o !== !1) {
                        s.show(),
                        a = s.height,
                        g = Math.round(.15 * d) >= y ? u[0] : Math.round(.15 * d) < y && Math.round(.3 * d) >= _.min ? S: f;
                        var v, C = s.isPositionEditMode();
                        if (g !== f) switch (r) {
                        case m.maximize:
                            (c < a || g === S) && (s.minimize(), c < s.height && s.hide(!0));
                            break;
                        case m.minimize:
                            if (c < a) {
                                if (v = !1, C ? (s.switchStopOrderButtonsState(!1, !1), c < s.height && (s.switchStopOrderButtonsState(!0, !1), v = !0)) : v = !0, v) {
                                    s.hide(!0);
                                    break
                                }
                            } else if (C && (s.switchStopOrderButtonsState(!0, !1), c < s.height)) {
                                s.switchStopOrderButtonsState(!1, !1);
                                break
                            }
                            if (g === S) break;
                            s.maximize(),
                            c < s.height && s.minimize();
                            break;
                        case m.invisible:
                            if (v = !1, s.minimize(), c < s.height) {
                                if (C ? (s.switchStopOrderButtonsState(!1, !1), c < s.height && (s.switchStopOrderButtonsState(!0, !1), v = !0)) : v = !0, v) {
                                    s.hide(!0);
                                    break
                                }
                            } else if (C && (s.switchStopOrderButtonsState(!0, !1), c < s.height)) {
                                s.switchStopOrderButtonsState(!1, !1);
                                break
                            }
                            s.maximize(),
                            (c < s.height || g === S) && (s.minimize(), c < s.height && s.hide(!0))
                        } else s.hide(!0)
                    } else s.hide(!1);
                    if (0 !== e.options.offset) try {
                        e.initSize(),
                        e.updateDataForDraw(),
                        e.getToEnd()
                    } catch(e) {}
                }
            }
        }
        var s = n.getTerminal();
        if (s && s.showChartsAs == n.chartsMode.tabs) {
            var o = n.activeChart;
            e !== o && null !== e || i(o, t)
        } else if (e instanceof n.GraphicWindow) i(e, t);
        else for (var a = n.Charts2.getAllGraphicWindows(), r = a.length, l = 0; l < r; ++l) i(a[l], t)
    },
    n.setSelectedOptionType = function() {
        var e = n.OptionsSettings._selectedOptionType,
        t = 0;
        switch (e) {
        case n.TypesBinaryOption.express:
            t = n.TypesTradePanel.express;
            break;
        case n.TypesBinaryOption.classic:
            t = n.TypesTradePanel.classic;
            break;
        case n.TypesBinaryOption.oneTouch:
            t = n.TypesTradePanel.oneTouch;
            break;
        case n.TypesBinaryOption.range:
            t = n.TypesTradePanel.range;
            break;
        default:
            t = n.TypesTradePanel.express
        }
        return t
    },
    n.getValuesArrayFromObject = function(e) {
        var t = [];
        for (var i in e) t.push(e[i]);
        return t
    },
    n._menuMaster = function(e) {
        this._Listeners = [],
        this._AnyOpened = !1
    };
    var a = n._menuMaster.prototype;
    a.register = function(e) {
        this._Listeners.push(e)
    },
    a.unRegister = function(e) {
        var t = this._Listeners.indexOf(e);
        t !== -1 && this._Listeners.splice(t, 1)
    },
    a.menuShow = function(e) {
        if (e.getIsSingle()) for (var t = 0; t < this._Listeners.length; t++) this._Listeners[t] != e && this._Listeners[t].hide()
    },
    a.menuHide = function() {
        for (var e = 0,
        t = 0; t < this._Listeners.length; t++) e += this._Listeners[t].getIsOpen() ? 1 : 0; ! e && this._Blockscreen && (this._Blockscreen.style.display = "none")
    },
    a.hideAll = function() {
        for (var e = 0; e < this._Listeners.length; e++) this._Listeners[e].hide(); ! this._Blockscreen || n.getMobileSignInDialogWithoutInit() || n.Browser.IsMobile || (this._Blockscreen.style.display = "none"),
        this._AnyOpened = !1
    },
    a.reRenderAll = function() {
        for (var e = 0; e < this._Listeners.length; e++) this._Listeners[e].reRender()
    },
    a.getBlockscreen = function() {
        if (!this._Blockscreen) {
            this._Blockscreen = document.createElement("div"),
            this._Blockscreen.id = "WTBlockscreen";
            var e = document.getElementsByTagName("body")[0];
            e.insertBefore(this._Blockscreen, e.firstChild),
            n.addEvent(this._Blockscreen, "click", this.hideAll.bind(this), !0)
        }
        return this._Blockscreen
    },
    a.setAnyOpened = function(e) {
        this._AnyOpened = e
    },
    a = null,
    n._menuMasterObject = new n._menuMaster,
    document.body.onclick = function(e) {
        window.scrollbar = window.scrollbar || {},
        window.scrollbar.isMenu || n._menuMasterObject.hideAll(),
        window.scrollbar = null
    },
    window.WT_Device.tablet() && document.body.addEventListener("touchstart",
    function(e) {
        window.scrollbar = window.scrollbar || {},
        window.scrollbar.isMenu || n._menuMasterObject.hideAll(),
        window.scrollbar = null
    }),
    n._dialogMaster = function(e) {
        this._Listeners = []
    };
    var r = n._dialogMaster.prototype;
    r.register = function(e) {
        this._Listeners.indexOf(e) == -1 && this._Listeners.push(e)
    },
    r.dialogHide = function() {
        for (var e = 0,
        t = 0; t < this._Listeners.length; t++) {
            var i = this._Listeners[t],
            s = i.getIsOpen(),
            o = i.isBlocked() || i instanceof n.MobileDialogSignIn && !n.Browser.IsMobile;
            e += +( !! s && !!o)
        } ! e && this._Blockscreen && (this._Blockscreen.style.display = "none")
    },
    r.hideAll = function(e) {
        for (var t, i = 0,
        s = !1,
        o = [n.getMobileSignInDialogWithoutInit(), n.getOpenDemoDialogWithoutInit(), n.getMobileDialogServersSearchWithoutInit()]; i < this._Listeners.length;) t = this._Listeners[i],
        s = o.indexOf(t) == -1 && ("ErrorDialog" != t._Class || e),
        s && (t.hide(), t.dispose && t.dispose()),
        t instanceof n.DialogChart || t instanceof n.DialogReport || i++;
        this._Blockscreen && (this._Blockscreen.style.display = "none")
    },
    r.getBlockscreen = function(e) {
        if (this.onBlockscreenTouchEnd = this.onBlockscreenTouchEnd ||
        function() {
            document.getElementById("WTDialogsContainer").style.position = "",
            event.stopPropagation(),
            this.hideAll()
        }.bind(this), !this._Blockscreen) {
            this._Blockscreen = document.createElement("div"),
            this._Blockscreen.id = "WTDialogBlockscreen",
            this._Blockscreen.ontouchmove = function(e) {
                e.preventDefault(),
                e.stopPropagation()
            };
            var t = document.getElementsByTagName("body")[0];
            t.insertBefore(this._Blockscreen, t.firstChild)
        }
        return n.removeEvent(this._Blockscreen, "touchend", this.onBlockscreenTouchEnd),
        e || n.addEvent(this._Blockscreen, "touchend", this.onBlockscreenTouchEnd),
        this._Blockscreen
    },
    r.isBlockScreenEnabled = function() {
        return this._Blockscreen && "none" != this._Blockscreen.style.display
    },
    r.unRegister = function(e) {
        this._Listeners.indexOf(e) > -1 && this._Listeners.splice(this._Listeners.indexOf(e), 1)
    },
    r.isAnyDialogOpen = function() {
        for (var e = 0; e < this._Listeners.length; e++) if (this._Listeners[e].getIsOpen()) return ! 0;
        return ! 1
    },
    r.getOpenedDialog = function() {
        return this._Listeners.filter(function(e) {
            return e.getIsOpen()
        })
    },
    r.onlyMiniDialogsAreOpened = function() {
        return this.onlyTheseDialogsAreOpened(n.DialogConfirm) || this.onlyTheseDialogsAreOpened(n.ErrorDialog)
    },
    r.onlyTheseDialogsAreOpened = function(e) {
        var t = function(t) {
            return t instanceof e
        },
        i = this.getOpenedDialog();
        return 0 !== i.length && i.every(function(e) {
            return t(e)
        })
    },
    r = null,
    n._dialogMasterObject = new n._dialogMaster,
    n.__preventDefault = function(e) {
        e.preventDefault()
    },
    n.stopCustomAndNativeEvents = function(e) {
        e.preventDefault(),
        e.stopPropagation()
    },
    n.addEvent(document.body, "contextmenu", n.__preventDefault),
    n.banLetters = function(e, t) {
        var i = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 45];
        if (t) for (var s = t.length,
        n = 0; n < s; n++) i.push(t[n]);
        i.indexOf(e.event.charCode) == -1 && 8 != e.event.keyCode || !(e.sender.getValue().length < 20 || 8 == e.event.keyCode) ? e.event.preventDefault() : (40 == e.event.charCode && e.sender.getValue().indexOf("(") != -1 && e.event.preventDefault(), 41 != e.event.charCode || e.sender.getValue().indexOf("(") != -1 && e.sender.getValue().indexOf(")") == -1 || e.event.preventDefault(), 45 == e.event.charCode && e.sender.getValue().length < 1 && e.event.preventDefault(), 43 == e.event.charCode && e.sender.getValue().length > 0 && e.event.preventDefault())
    },
    n.numberFormat = function(e, t, i, s) {
        var n, o, a, r, l;
        isNaN(t = Math.abs(t)) && (t = 2),
        void 0 == i && (i = ","),
        void 0 == s && (s = "");
        var h = e < 0 ? "-": "";
        return n = Math.abs(parseInt(e = ( + e || 0).toFixed(t))) + "",
        (o = n.length) > 3 ? o %= 3 : o = 0,
        l = o ? n.substr(0, o) + s: "",
        a = n.substr(o).replace(/(\d{3})(?=\d)/g, "$1" + s),
        r = t ? i + Math.abs(e - (h + n)).toFixed(t).replace(/-/, 0).slice(2) : "",
        h + l + a + r
    },
    n.numberFormatWithNoRound = function(e, t) {
        var i = e + "";
        return i.replace(".", t)
    },
    n.parseFloat = function(e) {
        return "undefined" == typeof e ? 0 : (e += "", parseFloat(e.replace(/,/g, ".").replace(/\s/g, "")))
    },
    n.round = function(e, t) {
        return t = t || 0,
        Math.round(e * Math.pow(10, t)) / Math.pow(10, t)
    },
    n.isNumber = function(e) {
        var t = !1;
        if (e > 0) {
            t = !!(e / e)
        }
        return t
    },
    n.shallowCopy = function(e) {
        if ("object" != typeof e) return e;
        var t = e.valueOf();
        if (e != t) return new e.constructor(t);
        if (e instanceof e.constructor && e.constructor !== Object) {
            var i = clone(e.constructor.prototype);
            for (var s in e) e.hasOwnProperty(s) && (i[s] = e[s])
        } else {
            var i = {};
            for (var s in e) i[s] = e[s]
        }
        return i
    },
    n.cloneObject = function(e) {
        if (null == e || "object" != typeof e) return e;
        var t = e.constructor();
        for (var i in e) e.hasOwnProperty(i) && (t[i] = n.cloneObject(e[i]));
        return t
    },
    n.getKeyByValue = function(e, t) {
        for (var i in e) if (e.hasOwnProperty(i) && e[i] === t) return i
    },
    n.equalsObjects = function(e, t) {
        function i(e, t) {
            return Array.isArray(e) ? e.every(function(e, i) {
                return n.equalsObjects(e, t[i])
            }) : "object" == typeof e && null !== e ? Object.keys(e).every(function(i) {
                return n.equalsObjects(e[i], t[i])
            }) : e === t
        }
        return e === t || !(!e || !t || typeof e != typeof t || e.length !== t.length) && i(e, t)
    },
    n.removeAllEventListenersFromNode = function(e, t) {
        if (!n.valueIsEmpty(e) && !n.valueIsEmpty(t)) {
            var i = window.getEventListeners(e),
            s = i[t];
            if (!n.valueIsEmpty(s)) for (var o = s.length,
            a = 0; a < o; ++a) s[a].remove()
        }
    },
    n.patch_mobileKeyboardUp = function(e, t, i, s) {
        var o = n.Browser,
        a = e.width,
        r = e.height,
        l = WT_Device.ipad(),
        h = !o.IsMobile && !o.IsTablet,
        d = h ? 0 : l ? 1050 : 900;
        if (!e) return ! 1;
        if (!a && 0 !== a || !r && 0 !== r) return ! 1;
        if (t) {
            var c;
            c = n.keyboardIsShown(),
            c === !1 && (d = 0),
            i && (t = t.bind(i)),
            c ? setTimeout(function() {
                t(s)
            },
            d) : t(s)
        }
    },
    n._LangManager = function(e) {
        this._Lang = e,
        this._Listeners = [],
        this._langLoad = this._onLangLoad.bind(this),
        this._init(e)
    };
    var l = n._LangManager.prototype;
    l._init = function(e) {
        n.Lang || (n.Lang = {});
        for (var t = document.documentElement,
        i = t.classList; 0 !== i.length;) i.remove(i[0]);
        if (n.Lang[e]) {
            var s = e !== this._Lang;
            this._Lang = e,
            s && this.changeLang(),
            n.saveUserSettings()
        } else {
            var o = document.createElement("script");
            o.src = "scripts/lang/" + e + ".js?v=" + terminalVersion.toString(),
            o.langName = e,
            o.addEventListener("load", this._langLoad.bind(this)),
            document.body.appendChild(o)
        }
        t.classList.add(e)
    },
    l._onLangLoad = function(e) {
        var t = e.target.langName;
        n.Lang[t] = window[t],
        document.body.removeChild(e.target),
        window[t] = null,
        n.Lang[t] && (this._init(t), n.UserSettings.Lang = this._Lang, this.changeLang(), n.saveUserSettings())
    },
    l.isReversedLanguage = function() {
        var e = this.getLang();
        return "ar" === e || "fa" === e
    },
    l.register = function(e) {
        this._Listeners.push(e)
    },
    l.unRegister = function(e) {
        var t = this._Listeners.indexOf(e);
        t > -1 && this._Listeners.splice(t, 1)
    },
    l.unRegisterAll = function() {
        this._Listeners = []
    },
    l.setLang = function(e) {
        null != e ? this._init(e) : this._init("en")
    },
    l.getLang = function() {
        return this._Lang
    },
    l.changeLang = function() {
        for (var e = 0; e < this._Listeners.length; e++) if (this._Listeners[e]._onChangeLang) try {
            this._Listeners[e]._onChangeLang()
        } catch(e) {}
        n.UserSettings && (n.UserSettings.Lang = this._Lang);
        var t = n.getTerminal();
        if (!n.Browser.IsMobile && t) {
            var i = t.getHeaderPanel();
            i && i.updateAccountBtnText()
        }
    },
    l.getStringByKey = function(e) {
        return !! n.Lang[this._Lang] && n.Lang[this._Lang][e]
    },
    l.setStringByKey = function(e, t) {
        n.Lang[this._Lang] && (n.Lang[this._Lang][e] = t)
    },
    l.getLanguageItems = function() {
        var e = [];
        if (n.Config && n.Config.Language) for (var t in n.Config.Language) e.push({
            Text: n.Config.Language[t],
            Key: t,
            Checked: n.LangManager.getLang() == t
        });
        return e
    },
    l = null,
    n.GetLanguage = function() {
        var e = navigator.language || navigator.browserLanguage,
        t = e.toLowerCase(),
        i = t.split("-");
        switch (null != i[0] && 2 == i[0].length ? i[0] : t) {
        case "ru":
        case "ru-ru":
            e = "ru";
            break;
        case "en":
        case "en-us":
            e = "en";
            break;
        case "ar":
        case "ar-ar":
            e = "ar";
            break;
        case "pl":
        case "pl-pl":
            e = "pl";
            break;
        case "gr":
        case "gr-gr":
        case "ka":
            e = "gr";
            break;
        case "fr":
        case "fr-fr":
            e = "fr";
            break;
        case "es":
        case "es-es":
            e = "es";
            break;
        case "zh":
        case "zh-zh":
            e = "zh";
            break;
        case "fa":
        case "fa-fa":
            e = "fa";
            break;
        case "de":
        case "de-at":
        case "de-be":
        case "de-ch":
        case "de-dk":
        case "de-fr":
        case "de-hu":
        case "de-it":
        case "de-li":
        case "de-lu":
        case "de-pl":
        case "de-de":
            e = "de";
            break;
        case "ko":
        case "ko-ko":
            e = "ko";
            break;
        default:
            e = "en"
        }
        return e
    },
    n.saveColorScheme = function(e) {
        n.UserSettings.Terminal.ColorScheme = e
    },
    n.setConfig = function(e) {
        n.Config = e,
        n.Auth || (n.Auth = n.Authorization())
    },
    n.setTerminalContainer = function(e) {
        n.TerminalContainer = e,
        n.addCSSClass(n.TerminalContainer, "WTTerminalContainer"),
        n.Config.TerminalSettings && n.Config.TerminalSettings.IntegratedWebOfficeEnabled && !n.Browser.IsMobile && n.addCSSClass(n.TerminalContainer, "AuthState"),
        n._Terminal && n._Terminal.addToNode(n.TerminalContainer)
    },
    n.ServerCommandCodes = {
        OpenDemoAccount: 2002,
        ChangePassword: 2003,
        OpenPosition: 1066,
        ClosePosition: 1039,
        CloseOptionPosition: 2066,
        OpenPendingOrder: 1067,
        ChangePendingOrder: 2008,
        DeletePendingOrder: 1068,
        GetOperationHistory: 2011,
        GetServerName: 2012,
        GetClientData: 2013,
        GetPositions: 2014,
        GetPendingOrders: 2015,
        GetDepositOperations: 2016,
        GetQuoteArchiveStartEnd: 2017,
        GetQuoteArchiveLast: 2018,
        GetSymbols: 2023,
        GetExecutedOrders: 2024,
        ChangePosition: 2027,
        GetLastQuotes: 2029,
        GetTraderGroup: 2030,
        ServerDateTime: 2032,
        GetSymbolGroups: 2036,
        GetHolidays: 2038,
        Ping: 2025,
        OpenOptionPosition: 2060,
        GetOptionsSettings: 2061,
        GetOptionPositions: 2062,
        GetOptionDeals: 2063,
        GetOptionsAliasTypeName: 2067,
        GetMTSymbols: 2043,
        OpenMTPosition: 2044,
        GetMTTraderData: 2045,
        GetMTAllOpenOrders: 2046,
        GetMTLastQuotes: 2047,
        CloseMTPosition: 2048,
        GetMTDeals: 2049,
        OpenMTPendingOrder: 2050,
        DeleteMTPendingOrder: 2051,
        GetMTDeposits: 2052,
        ChangeMTPosition: 2053,
        ChangeMTPendingOrder: 2054,
        GetMTExecutedOrders: 2058,
        ChangeMTPassword: 2059,
        GetMT4SymbolsGroupsParameters: 2065,
        cOpClient_CheckWebVersion: 2069
    },
    n.positionTypeCode = {
        Buy: 105,
        Sell: 104
    },
    n.FontIcons = n.cloneObject(window.FontIcons),
    function() {
        for (var e = 0,
        t = ["ms", "moz", "webkit", "o"], i = 0; i < t.length && !window.requestAnimationFrame; ++i) window.requestAnimationFrame = window[t[i] + "RequestAnimationFrame"],
        window.cancelAnimationFrame = window[t[i] + "CancelAnimationFrame"] || window[t[i] + "CancelRequestAnimationFrame"];
        window.requestAnimationFrame && !window.WT_Device.ipad() || (window.requestAnimationFrame = function(t, i) {
            var s = (new Date).getTime(),
            n = Math.max(0, 16 - (s - e)),
            o = window.setTimeout(function() {
                t(s + n)
            },
            n);
            return e = s + n,
            o
        }),
        window.cancelAnimationFrame && !window.WT_Device.ipad() || (window.cancelAnimationFrame = function(e) {
            clearTimeout(e)
        })
    } (),
    n.getOptionLineTypes = function() {
        return ["OpenDateLine", "StopLine", "ExpiryLine"]
    },
    n.getSymbolsListTree = function() {
        var e = n.Browser.IsMobile,
        t = [];
        if (e === !0) if (n.activeChart) t.push(n.activeChart.getMainSymbolName());
        else {
            var i = n.UserSettings.Terminal.OpenedCharts[0];
            i && t.push(i.symbolName)
        } else for (var s = n.Charts2.getAllGraphicWindows(), o = s.length, a = 0; a < o; a++) for (var r = s[a].charts, l = r.length, h = 0; h < l; h++) {
            var d = r[h].getSymbolName();
            t.indexOf(d) === -1 && t.push(r[h].getSymbolName())
        }
        var c, u, g = n.SymbolsData.getSelectedSymbols(),
        p = n.SymbolsData.getSymbolNamesExceptForbidden(),
        m = n.SymbolsData.getSymbolsGroups(),
        _ = {},
        y = [];
        for (c in m) u = {
            Title: m[c].name,
            Data: []
        },
        n.SymbolsData.isGroupEmpty(c) || (_[c] = u, y.push(u));
        return p.forEach(function(e) {
            var i = n.SymbolsData.getSymbols()[e],
            s = t.indexOf(i.getSymbolName()) === -1,
            o = g.indexOf(e) > -1;
            s || o || (s = !0),
            u = _[i.getSymbolGroupID()],
            u.Data.push({
                Title: e,
                IsChecked: o,
                Enabled: s
            })
        }),
        y
    },
    n.getOptionsSettingsListTree = function() {
        var e = [],
        t = {
            Title: n.OptionTypeNames[n.OptionSettingsType.express],
            Data: []
        },
        i = {
            Title: n.OptionTypeNames[n.OptionSettingsType.classic],
            Data: []
        },
        s = {
            Title: n.OptionTypeNames[n.OptionSettingsType.oneTouch],
            Data: []
        },
        o = {
            Title: n.OptionTypeNames[n.OptionSettingsType.range],
            Data: []
        },
        a = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.express, !1),
        r = a.length;
        r > 0 && e.push(t);
        var l = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.classic, !1),
        h = l.length;
        h > 0 && e.push(i);
        var d = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.oneTouch, !1),
        c = d.length;
        c > 0 && e.push(s);
        var u = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.range, !1),
        g = u.length;
        g > 0 && e.push(o);
        var p = [],
        m = n.Charts2.getAllGraphicWindows(),
        _ = m.length;
        if (n.Browser.IsMobile) {
            var y = n.UserSettings.Terminal.OpenedCharts,
            S = y.length;
            if (0 !== S) {
                var f = y[0].symbolName;
                p.indexOf(f) === -1 && p.push(f)
            }
        }
        for (var v = 0; v < _; v++) for (var C = m[v], b = C.charts, T = b.length, P = 0; P < T; P++) {
            var D = C.charts[P].getSymbolName();
            p.indexOf(D) === -1 && p.push(C.charts[P].getSymbolName())
        }
        var I, w = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.classic, !0, !0),
        M = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.express, !0, !0),
        O = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.oneTouch, !0, !0),
        L = n.OptionsSettings.getOptionsByTypeExceptForbidden(n.OptionSettingsType.range, !0, !0);
        for (v = 0; v < r; v++) {
            var k = a[v];
            I = p.indexOf(k.getSymbolName()) != -1 && M.indexOf(k) != -1,
            t.Data.push({
                Title: k.getName(),
                NodeID: k.getID(),
                Enabled: !I,
                IsChecked: k.isShowOption
            })
        }
        for (v = 0; v < c; v++) k = d[v],
        I = p.indexOf(k.getSymbolName()) != -1 && O.indexOf(k) != -1,
        s.Data.push({
            Title: k.getName(),
            NodeID: k.getID(),
            Enabled: !I,
            IsChecked: k.isShowOption
        });
        for (v = 0; v < h; v++) k = l[v],
        I = p.indexOf(k.getSymbolName()) != -1 && w.indexOf(k) != -1,
        i.Data.push({
            Title: k.getName(),
            NodeID: k.getID(),
            Enabled: !I,
            IsChecked: k.isShowOption
        });
        for (v = 0; v < g; v++) k = u[v],
        I = p.indexOf(k.getSymbolName()) != -1 && L.indexOf(k) != -1,
        o.Data.push({
            Title: k.getName(),
            NodeID: k.getID(),
            Enabled: !I,
            IsChecked: k.isShowOption
        });
        return e
    };
    var h = window.innerWidth,
    d = window.innerHeight;
    return n.originalSize = function() {
        return parseInt(h + d)
    },
    n.keyboardIsShown = function() {
        var e = n.originalSize(),
        t = window.innerWidth + window.innerHeight,
        i = 110;
        return document.activeElement instanceof HTMLInputElement && !(t >= e || t <= e && t >= e - i)
    },
    n.isPortraitOrientation = function() {
        var e = n.valueIsEmpty,
        t = !1,
        i = window.screen.orientation;
        if (!e(i)) {
            var s = i.angle;
            e(s) || (t = [0, 180].indexOf(s) !== -1)
        }
        var o = document.documentElement.clientWidth < document.documentElement.clientHeight,
        a = !o && n.keyboardIsShown();
        return o || a || t
    },
    n.getAppHeight = function() {
        return window.cordova ? document.documentElement.clientHeight: window.innerHeight
    },
    n.isPortrait = function() {
        return document.documentElement.clientWidth < document.documentElement.clientHeight
    },
    n.getAppWidth = function() {
        return document.documentElement.clientWidth
    },
    n.preventDefaultMoveNode = function(e, t, i) {
        var s = !1,
        n = e.scrollTop;
        if (document.querySelector("html").scrollTop = 0, document.body.scrollTop = 0, WT_Device.iphone() && i.target != t) {
            if (void 0 != i.target.startTouchY) {
                var o = i.targetTouches[0].screenY - i.target.startTouchY;
                e.scrollTop = e.scrollTop - o,
                i.target.startTouchY = i.targetTouches[0].screenY,
                s = !0
            }
            document.activeElement.blur()
        }
        if (!s) {
            var a = e.scrollHeight - e.offsetHeight;
            n >= a && o < 0 ? (e.scrollTop = a - 1, s = !0) : n <= 0 && o > 0 && (e.scrollTop = 1, s = !0)
        }
        s && (i.preventDefault(), i.stopPropagation())
    },
    n.getTerminal = function() {
        return n._Terminal
    },
    Math.sign = Math.sign ||
    function(e) {
        return e = +e,
        0 === e || isNaN(e) ? e: e > 0 ? 1 : -1
    },
    n
}),
define("ajax", ["base"],
function(e) {
    e.Ajax = function(t) {
        return this instanceof e.Ajax ? (this._Url = t.Url, this.ReadyStateChange = t.ReadyStateChange, this.RequestTimeout = t.RequestTimeout, void(this._Url.toLowerCase().indexOf("https") >= 0 ? e.isHttps = !0 : e.isHttps = !1)) : new e.Ajax(t)
    },
    e.Ajax.getRequest = function(t) {
        var i = !1;
        if (window.XMLHttpRequest) i = new XMLHttpRequest;
        else if (window.ActiveXObject) try {
            i = new ActiveXObject("Microsoft.XMLHTTP")
        } catch(e) {
            i = new ActiveXObject("Msxml2.XMLHTTP")
        }
        return i || e.showErrorDialog("Can't create XMLHttpRequest"),
        i
    };
    var t = e.Ajax.prototype;
    return t._onReadyStateChange = function() {
        this._request && (this.status = 0, this.readyState = this._request.readyState, 4 == this.readyState && (this.status = this._request.status), this.responseText = this._request.responseText, this.ReadyStateChange && this.ReadyStateChange())
    },
    t._onRequestTimeout = function() {
        this.RequestTimeout && this.RequestTimeout()
    },
    t.getRequest = function() {
        return this._request || (this._request = e.Ajax.getRequest()),
        this._request
    },
    t.open = function(e, t) {
        this._isOpen = !0;
        var i = this.getRequest(),
        s = e && "GET" == e.toUpperCase() ? "GET": "POST";
        if (i.onreadystatechange = this._onReadyStateChange.bind(this), i.open(s, this._Url, !0), i.timeout = 3e4, i.setRequestHeader) {
            var n = "json" == t ? "application/json": "application/x-www-form-urlencoded";
            i.setRequestHeader("Content-Type", n + "; charset=utf-8")
        }
    },
    t.send = function(t, i, s) {
        console.log("a7a3_1:"+t);
        this._isOpen || (this.open(i, s), e.isHttps && (this._request.withCredentials = !0)),
        this.getRequest().send(t)
    },
    t.sendAuthData = function(e, t, i) {
        this._isOpen = !0;
        var s = this.getRequest(),
        n = e && "GET" == e.toUpperCase() ? "GET": "POST";
        if (s.onreadystatechange = this._onReadyStateChange.bind(this), s.open(n, this._Url + "/" + t + "/" + i, !0), s.setRequestHeader) {
            var o = "application/x-www-form-urlencoded";
            s.setRequestHeader("Content-Type", o + "; charset=utf-8")
        }
        var a = 5,
        r = 1e3;
        s.timeout = a * r,
        s.ontimeout = this.onErrorHandler,
        s.onerror = this.onErrorHandler,
        s.send("")
    },
    t.onErrorHandler = function() {
        e.getTerminal() && 1 == e.getTerminal().wantToReconnect && (e.Auth.exit(), e._Terminal._restart = !1, hidePreloader(), e.Browser.IsMobile ? e.getMobileSignInDialog().show() : e.AuthModule.show(0)),
        e.interval && clearInterval(e.interval)
    },
    t = null,
    e
}),
define("listener", ["base"],
function(e) {
    e.Listener = function(e) {
        this._Followers = this._Followers || []
    };
    var t = e.Listener.prototype;
    return t.register = function(e) {
        this._Followers.indexOf(e) == -1 && this._Followers.push(e)
    },
    t.unRegister = function(e) {
        var t = this._Followers.indexOf(e);
        t > -1 && (this._Followers[t] = {})
    },
    t.unRegisterAll = function() {
        this._Followers = []
    },
    t.getFollowers = function() {
        return this._Followers
    },
    t.notifyFollowers = function(e, t) {
        var i = 0,
        s = this._Followers.length;
        for (i = 0; i < s; i++) this._Followers[i][e] && this._Followers[i][e].apply(this._Followers[i], [t]);
        this.normalizeFollowersArray()
    },
    t.normalizeFollowersArray = function() {
        for (var e = 0; e < this._Followers.length;) 0 === Object.keys(this._Followers[e]).length ? this._Followers.splice(e, 1) : e++
    },
    e
}),
define("userSettings", ["base", "../../settings/defaultGraphicWindowSettings"],
function(e) {
    var t = null != window.UtipConfig.TerminalSettings,
    i = t ? window.UtipConfig.TerminalSettings.SwiperQuotesWidth: 260,
    s = t ? window.UtipConfig.TerminalSettings.ChartFieldHeightPercentage / 100 * screen.height: 650;
    if (e.UserSettings = e.jsonParse(sessionStorage.getItem("UserSettings")) || e.jsonParse(localStorage.getItem("UserSettings")) || {
        Lang: e.GetLanguage(),
        SelectedSymbols: null,
        Terminal: {
            SwiperQuotesWidth: i,
            Splitter1Height: s,
            OpenedCharts: [],
            SplitterIsCollapse: !1,
            Splitter1IsCollapse: !1,
            LastOpenedChart: [],
            LastIndicators: [],
            LastPeriod: 201,
            LastCrosshair: !1,
            LastAutoScroll: !0,
            LastMaxVisibleBarCount: 100,
            ChartsMode: e.chartsMode.tabs,
            ActiveQuotesTabIndex: 0,
            ColorScheme: "black_color_scheme"
        },
        TableQuotes: {
            VisiblesColumns: ["Symbol", "bid", "ask"],
            AutoArrage: !0
        },
        TableTrade: {
            VisiblesColumns: [],
            Profit: "as_money",
            AutoArrage: !0,
            VisibleAdditionalParameters: []
        },
        TableJornal: {
            VisiblesColumns: [],
            AutoArrage: !0
        },
        OptionsSettingsTable: {
            VisiblesColumns: ["name", "price", "expiry", "stop", "profit"],
            AutoArrage: !0
        },
        ServerNames: [],
        LinesDefaults: {},
        ChartWindows: [],
        WindowsTemplates: e.getDefaultWindowsTemplate()
    },
    e.setDefaultChart = function(t, i) {
        var s = {};
        return s.symbolName = t,
        s.graphicAreas = [{
            modulus: 1,
            showNames: !0,
            objects: [{
                className: "chart",
                symbolName: t,
                volumes: !1,
                volumesModulus: 1
            }]
        }],
        s.position = -1,
        s.options = e.getDefaultWindowsTemplate(),
        s.active = i,
        s
    },
    e.saveUserSettings = function() {
        localStorage.setItem("UserSettings", JSON.stringify(e.UserSettings)),
        sessionStorage.setItem("UserSettings", JSON.stringify(e.UserSettings))
    },
    e.saveServerSettings = function() {
        if (e.getTerminal().useOptions) {
            e.OptionsSettings.saveSettings();
            var t = e.Auth.getServer().Name.replace(" ", "_");
            localStorage.setItem(t, JSON.stringify(e.ServerSettings)),
            sessionStorage.setItem(t, JSON.stringify(e.ServerSettings))
        }
    },
    e.updateWindowsTemplates = function() {
        var t = e.UserSettings.Terminal.OpenedCharts[0],
        i = e.UserSettings.WindowsTemplates,
        s = e.UserSettings.Terminal.OpenedCharts,
        n = e.getDefaultWindowsTemplate(),
        o = "black_color_scheme" === e.UserSettings.Terminal.ColorScheme ? e.getDefaultColorSchemes()[0] : e.getDefaultColorSchemes()[1];
        if (e.valueIsEmpty(t)) return void(i = n);
        for (var a in n) {
            if ("colorScheme" === a && n[a].constructor === Object) for (var r in o) if (!t.options.colorScheme.hasOwnProperty(r)) {
                s.forEach(function(e) {
                    e.options.colorScheme = o
                }),
                i.colorScheme = o;
                break
            }
            t.options.hasOwnProperty(a) || (s.forEach(function(e) {
                e.options[a] = n[a]
            }), i[a] = n[a])
        }
    },
    null == localStorage.getItem("UserSettings")) {
        for (var n = e.getFirstStartCharts(), o = [], a = 0; a < n.length; a++) {
            var r = n[a] === e.getFirstStartActiveChart(),
            l = e.setDefaultChart(n[a], r);
            o.push(l)
        }
        e.UserSettings.Terminal.OpenedCharts = o
    }
    return null != e.UserSettings.Lang ? e.LangManager = new e._LangManager(e.UserSettings.Lang) : e.LangManager = new e._LangManager(e.GetLanguage()),
    e.saveChartWindows = function(t) {
        for (var i = [], s = 0; s < t.length; s++) {
            var n = t[s].getSettingsForSave();
            i.push(n)
        }
        e.UserSettings.ChartWindows = i
    },
    e
}),
define("symbolsData", ["listener", "userSettings"],
function(e) {
    function t(e, t) {
        var i = this.bidDigitCount = e.toFixed(this.getDigits()).length;
        this.generalBidDigitCountDidChange = this.lastBidDigitCount !== i,
        this.generalBidDidChange = t || this.generalBidDigitCountDidChange,
        this.lastBidDigitCount = i
    }
    function i(e) {
        return this.generalBidDidChange = e !== this.lastBid,
        this.lastBid = e,
        this.generalBidDidChange
    }
    function s(e, t) {
        var i = this.askDigitCount = e.toFixed(this.getDigits()).length;
        this.generalAskDigitCountDidChange = this.lastAskDigitCount !== i,
        this.generalAskDidChange = t || this.generalAskDigitCountDidChange,
        this.lastAskDigitCount = i
    }
    function n(e) {
        return this.generalAskDidChange = e !== this.lastAsk,
        this.lastAsk = e,
        this.generalAskDidChange
    }
    e._SymbolsData = function() {
        this._selectAllSymbols = !e.UserSettings.SelectedSymbols > 0,
        this._Holidays = [],
        this._Symbols = {},
        this._SymbolsGroups = {},
        this._LastChangedTime = "",
        this._symbolsDelays = {},
        e._SymbolsData.base.constructor.apply(this, arguments)
    },
    e.initClass(e._SymbolsData, e.Listener);
    var o = e._SymbolsData.prototype;
    o.onRefreshSymbols = function(e) {
        this.notifyFollowers("_onRefreshSymbols", e)
    },
    o.refreshDataByDigitCount = function() {
        this.notifyFollowers("_onRefreshDataBySymbolDigitCount");
        var e, t = this.getSymbols();
        for (var i in t) t.hasOwnProperty(i) && (e = t[i], e.generalBidDidChange = !1, e.generalAskDidChange = !1, e.lastBidDigitCount = e.bidDigitCount, e.lastAskDigitCount = e.askDigitCount)
    },
    o._onGetQuote = function(e, t) {
        var i = e.getSymbolName();
        e._LastChangedTime - this._LastChangedTime > 500 && !t && this.onRefreshSymbols(!1),
        e._LastChangedTime > this._LastChangedTime && (this._LastChangedTime = e._LastChangedTime),
        e.updateQuoteAllowed = e._LastChangedTime - this._symbolsDelays[i] > 500,
        this.notifyFollowers("_onGetQuote", e),
        this._symbolsDelays[i] = e._LastChangedTime
    },
    o.getLastChangedTime = function() {
        return this._LastChangedTime
    },
    o.updateSelectedSymbolsByGraphicWindow = function(t) {
        var i = e.activeChart;
        if (!t) {
            if (!i) return;
            t = i
        }
        for (var s = t.charts,
        n = s.length,
        o = 0; o < n; ++o) {
            var a = s[o],
            r = a.getSymbolName();
            e.UserSettings.SelectedSymbols.indexOf(r) === -1 && e.SymbolsData.getSymbols()[r] && e.UserSettings.SelectedSymbols.push(r)
        }
    },
    o._onGetSymbols = function(e) {
        this.notifyFollowers("_onGetSymbols", e)
    },
    o._onGetGroups = function(e) {
        this.notifyFollowers("_onGetGroups", e)
    },
    o.getHolidays = function() {
        return this._Holidays
    },
    o.getHolidayById = function(e) {
        for (var t = this._Holidays.length,
        i = 0; i < t; i++) if (this._Holidays[i].id === e) return this._Holidays[i];
        return null
    },
    o.getHolidaysByIds = function(e) {
        if (!e) return [];
        for (var t = [], i = e.length, s = 0; s < i; s++) {
            var n = this.getHolidayById(e[s].id);
            n && t.push(n)
        }
        return t
    },
    o.setHolidays = function(e) {
        this._Holidays = e;
        for (var t = 0; t < this._Holidays.length; t++) this._Holidays[t].startDate *= 1e3,
        this._Holidays[t].endDate *= 1e3
    },
    o.setNewQuoteFromSocket = function(e, t) {
        if (e) {
            var i = this.getSymbols()[e.symbol];
            i && (i.setBid(parseFloat(e.bid.replace(",", "."))), i.setAsk(parseFloat(e.ask.replace(",", "."))), i._LastChangedTime = 1e3 * parseInt(e.date), i.needToRefreshGrids = t, this._onGetQuote(i, t))
        }
    },
    o._parseSymbolsGroups = function(e) {
        delete this._SymbolsGroups,
        this._SymbolsGroups = {};
        var t, i, s, n, o, a, r;
        for (t = 0; t < e.length; t++) {
            for (s = e[t], n = s.tradeMode.split(";"), n.splice( - 1), s.tradeMode = {},
            i = 0; i < n.length;) o = n[i++],
            s.tradeMode[o] = {},
            a = n[i++],
            r = n[i++],
            s.tradeMode[o].openHour = parseInt(a),
            s.tradeMode[o].openMinute = parseInt(r),
            s.tradeMode[o].open = (a.length < 2 ? "0": "") + a + ":" + (r.length < 2 ? "0": "") + r,
            a = n[i++],
            r = n[i++],
            s.tradeMode[o].closeHour = parseInt(a),
            s.tradeMode[o].closeMinute = parseInt(r),
            s.tradeMode[o].close = (a.length < 2 ? "0": "") + a + ":" + (r.length < 2 ? "0": "") + r;
            s.HolidaysCount = parseInt(s.HolidaysCount),
            s.HolidaysID && (s.HolidaysID = JSON.parse(s.HolidaysID)),
            this._SymbolsGroups[s.id] = s
        }
        this._onGetGroups(this._SymbolsGroups)
    },
    o._parseMT4SymbolsGroupsParameters = function(t) {
        if (null != t && 0 != t.length) {
            for (var i = {},
            s = 0; s < t.length; s++) i[t[s].groupName] = {
                lotStep: e.parseFloat(t[s].lotStep) / 100,
                maximumLot: e.parseFloat(t[s].maximumLot) / 100,
                minimumLot: e.parseFloat(t[s].minimumLot) / 100
            };
            this._mtSymbolGroupsParameters = i
        }
    },
    o.addSymbolGroup = function(e) {
        this._SymbolsGroups[e.id] = e
    },
    o.getSymbolsGroups = function() {
        return this._SymbolsGroups
    },
    o.getMTSymbolGroupsParameters = function() {
        return this._mtSymbolGroupsParameters
    },
    o.getSymbolsGroupById = function(e) {
        return this._SymbolsGroups[e]
    },
    o.getSymbolGroupByName = function(e) {
        for (var t in this._SymbolsGroups) if (this._SymbolsGroups[t].name == e) return this._SymbolsGroups[t];
        return null
    },
    o.updateSelectedSymbol = function() {
        for (var t, i = [], s = 0; s < e.UserSettings.SelectedSymbols.length; s++) t = e.UserSettings.SelectedSymbols[s],
        this.getSymbols()[t] && i.push(t);
        e.UserSettings.SelectedSymbols = i
    },
    o.getSymbolsExceptIndexes = function() {
        var e = [];
        for (var t in this.getSymbols()) this.getSymbols()[t] && this.getSymbols()[t].allowTrade() && e.push(this.getSymbols()[t].getSymbolName());
        return e
    },
    o.getSelectedSymbolExceptIndexes = function() {
        for (var t, i = [], s = 0; s < e.UserSettings.SelectedSymbols.length; s++) {
            t = e.UserSettings.SelectedSymbols[s];
            var n = this.getSymbols()[t];
            n && "index" != n.getCalculationTypeName() && n.allowTrade() && i.push(t)
        }
        return i
    },
    o.parseMTSymbols = function(t) {
        var i = !0;
        0 != e.UtipFunctions.getPropertyCount(this.getSymbols()) && (i = !1),
        this._selectAllSymbols && (e.UserSettings.SelectedSymbols = []);
        for (var s = 0; s < t.length; s++) this.getSymbols()[t[s].symbolName] = new e.Symbol(t[s]);
        for (var s = 0; s < t.length; s++) this.getSymbols()[t[s].symbolName].setQuoteSymbolInfo();
        for (var n = [], o = Object.keys(this._SymbolsGroups), a = 0; a < o.length; a++) n[a] = new Array;
        for (var r in this.getSymbols()) {
            var l = this.getSymbols()[r].getSymbolGroupID().toString();
            n[o.indexOf(l)].push(this.getSymbols()[r])
        }
        for (var a = 0; a < o.length; a++) {
            var h = this.getSymbolsGroupById(o[a]).name;
            "index" != h && n[a].sort(function(e, t) {
                return e._SymbolName > t._SymbolName ? 1 : e._SymbolName < t._SymbolName ? -1 : e._SymbolName == t._SymbolName ? 0 : void 0
            })
        }
        for (var d, c = 0; c < n.length; c++) for (s = 0; s < n[c].length; s++) d = n[c][s],
        this._selectAllSymbols && e.UserSettings.SelectedSymbols.push(d._SymbolName);
        this._onGetSymbols(this.getSymbols())
    },
    o._getSortedData = function(e, t) {
        for (var i = [], s = Object.keys(this._SymbolsGroups), n = 0; n < s.length; n++) i[n] = [];
        for (var o = 0; o < e.length; o++) {
            var a = e[o].symbolGroupID || this.getSymbols()[e[o]].getSymbolGroupID();
            i[s.indexOf(a)].push(e[o])
        }
        for (var n = 0; n < s.length; n++) {
            var r = this.getSymbolsGroupById(s[n]).name;
            "index" != r && i[n].sort(function(e, t) {
                return (e.symbolName || e) > (t.symbolName || t) ? 1 : (e.symbolName || e) < (t.symbolName || t) ? -1 : (e.symbolName || e) == (t.symbolName || t) ? 0 : void 0
            })
        }
        if (t) {
            var l = [];
            return i.forEach(function(e) {
                l = l.concat(e)
            }),
            l
        }
        return i
    },
    o._parseSymbols = function(t) {
        var i, s, n = !0;
        0 != e.UtipFunctions.getPropertyCount(this.getSymbols()) && (n = !1);
        var o = this._getSortedData(t);
        e.UserSettings.SelectedSymbols = [];
        for (var a = 0; a < o.length; a++) for (i = 0; i < o[a].length; i++) s = o[a][i],
        s.symbolGroupName = this.getSymbolsGroupById(s.symbolGroupID).name,
        s.calculationType = this.getSymbolCalculationTypeNameById(s.calculationTypeID),
        s.isShown = this.getSymbols()[s.symbolName] && this.getSymbols()[s.symbolName].isShown === !0,
        this.getSymbols()[s.symbolName] = new e.Symbol(s),
        this._selectAllSymbols || !e.UserSettings.UnselectedSymbols || 0 === e.UserSettings.UnselectedSymbols.length ? (e.UserSettings.SelectedSymbols.push(s.symbolName), e.UserSettings.UnselectedSymbols = []) : e.UserSettings.UnselectedSymbols.indexOf(s.symbolName) === -1 && e.UserSettings.SelectedSymbols.push(s.symbolName);
        this.setIsShownSymbols(),
        n === !0 && 0 === this.getSelectedSymbols().length && (e.UserSettings.UnselectedSymbols = [], e.UserSettings.SelectedSymbols = Object.keys(this.getSymbols()), this.setIsShownSymbols()),
        this._onGetSymbols(this.getSymbols())
    },
    o.setIsShownSymbols = function() {
        var t = this,
        i = this.getSymbols();
        for (var s in i) i[s].canUse() && (i[s].isShown = !1);
        e.UserSettings.SelectedSymbols.forEach(function(e) {
            var i = t.getSymbols()[e];
            i && (i.isShown = !0)
        }),
        this._selectAllSymbols = !e.UserSettings.SelectedSymbols > 0
    },
    o.getSymbolCalculationTypeNameById = function(t) {
        for (var i = Object.keys(e.Symbol.CalculationTypeID), s = 0; s < i.length; s++) if (e.Symbol.CalculationTypeID[i[s]] == parseInt(t)) return i[s].toLowerCase();
        return null
    },
    o._addSymbol = function(t) {
        t.coverageMarginStrategy ? (t.symbolGroupName = this.getSymbolsGroupById(t.symbolGroupID).name, t.calculationType = this.getSymbolCalculationTypeNameById(t.calculationTypeID)) : (t.symbolGroupName = this.getSymbolsGroupById(t.symbolGroupID).name, t.quoteSymbolName = this.getSymbolByCurrency(t.quoteSymbolCurrency)._SymbolName, t.marginSymbol = this.getSymbolByCurrency(t.marginCurrency)._SymbolName, t.quoteSymbolLocation = this.getSymbolLocation(t.quoteSymbolCurrency), t.marginSymbolLocation = this.getSymbolLocation(t.marginCurrency), t.calculationType = this.getSymbolCalculationTypeNameById(t.calculationTypeID), t.tradeforbidden = t.tradeforbidden || "0"),
        t.isShown = !0,
        this.getSymbols()[t.symbolName] = new e.Symbol(t),
        e.UserSettings.SelectedSymbols.indexOf(t.symbolName) === -1 && (e.UserSettings.SelectedSymbols.push(t.symbolName), e.UserSettings.SelectedSymbols = this._getSortedData(e.UserSettings.SelectedSymbols, !0), e.saveUserSettings()),
        this._onGetSymbols(this.getSymbols())
    },
    o._deleteSymbol = function(t) {
        delete this.getSymbols()[t],
        e.UserSettings.SelectedSymbols.indexOf(t) > -1 && e.UserSettings.SelectedSymbols.splice(e.UserSettings.SelectedSymbols.indexOf(t), 1),
        this._onGetSymbols(this.getSymbols())
    },
    o.getSymbolLocation = function(t, i) {
        return "USD" == t.toUpperCase() ? e.Symbol.SymbolLocation.DirectQuote: this.getSymbols()[t.toUpperCase() + "USD" + i] ? e.Symbol.SymbolLocation.DirectQuote: this.getSymbols()["USD" + t.toUpperCase() + i] ? e.Symbol.SymbolLocation.ReverseQuote: -1
    },
    o.getSymbols = function() {
        return this._Symbols
    },
    o.getSymbolsExceptForbidden = function() {
        var e, t = this.getSymbols(),
        i = {};
        for (var s in t) e = t[s],
        e.canUse() && (i[s] = e);
        return i
    },
    o.getSymbolNamesExceptForbidden = function() {
        var e = this.getSymbols(),
        t = [],
        i = this._getSortedData(Object.keys(this.getSymbols()), !0);
        return i && i.forEach(function(i) {
            e[i] && e[i].canUse() && t.push(i)
        }),
        t
    },
    o.setSymbols = function(e) {
        this._Symbols = e
    },
    o.getSelectedSymbols = function() {
        return this.getShownSymbols()
    },
    o.getSymbolByGroupID = function(e) {
        var t = [];
        for (var i in this.getSymbols()) this.getSymbols()[i].getSymbolGroupID() === e && t.push(this.getSymbols()[i]);
        return t
    },
    o.setSelectedSymbols = function(t) {
        var i = this.getSymbols(),
        s = e.UserSettings.SelectedSymbols.filter(function(e) {
            var t = !(!i[e] || !i[e].isShown) && i[e].isShown;
            return t === !0 && !i[e].canUse()
        });
        e.UserSettings.SelectedSymbols = t.concat(s),
        e.UserSettings.SelectedSymbols = this._getSortedData(e.UserSettings.SelectedSymbols, !0),
        e.UserSettings.UnselectedSymbols = [];
        for (var n in i) e.UserSettings.SelectedSymbols.indexOf(n) === -1 && e.UserSettings.UnselectedSymbols.push(n);
        this.setIsShownSymbols();
        for (var o = 0; o < this._Followers.length; o++) this._Followers[o]._onChangeSelectedSymbols && this._Followers[o]._onChangeSelectedSymbols()
    },
    o.getSymbolByCurrency = function(e, t) {
        if (t = t || "", "USD" == e.toUpperCase()) return {
            _SymbolName: "USDUSD",
            _Bid: 1,
            _Ask: 1
        };
        var i = this.getSymbols()[e.toUpperCase() + "USD" + t];
        return i ? i: i = this.getSymbols()["USD" + e.toUpperCase() + t]
    },
    o.isShowSymbols = function() {
        var e = this.getSelectedSymbols(),
        t = !1;
        if (e.length > 0) for (var i = 0; i < e.length; i++) {
            var s = this.getSymbols()[e[i]];
            if ("index" != s.getSymbolGroupName()) {
                t = !0;
                break
            }
        }
        return t
    },
    o.isGroupEmpty = function(e) {
        var t = this.getSymbols();
        for (var i in t) if (t[i].getSymbolGroupID() == e) return ! 1;
        return ! 0
    },
    o.isSelectedSymbol = function(t) {
        var i = t.getSymbolName();
        return e.UserSettings.SelectedSymbols.indexOf(i) !== -1
    },
    o.getShownSymbols = function() {
        var t = [],
        i = this.getSymbols();
        return 0 !== Object.keys(i).length && e.UserSettings.SelectedSymbols.forEach(function(e) {
            i[e].canUse() && i[e].isShown === !0 && t.push(e)
        }),
        t
    },
    o.isActiveSymbol = function(e) {
        var t = this.getSelectedSymbols().filter(function(t) {
            return t === e
        })[0];
        return null != t
    },
    o = null,
    e.Symbol = function(t) {
        var i = e.SymbolsData.getSymbols()[t.symbolName],
        s = i ? i._Bid: 0,
        n = i ? i._Ask: 0;
        switch (this._SymbolName = t.symbolName || "", this._Bid = t.bid || s, this._Ask = t.ask || n, this._Description = t.description || "", this._SwapLong = t.swapLong || "", this._SwapShort = t.swapShort || "", this._Delay = t.delay || "", this._StopLevel = t.stopLevel || "", this._Digits = t.digits || "", this._ContractSize = 1 * t.contractSize || "", this._SymbolGroupName = t.symbolGroupName || "", this._TradeForbidden = t.tradeforbidden ? 0 != parseInt(t.tradeforbidden) : t.tradeForbidden ? 0 != parseInt(t.tradeForbidden) : 0, this.isShown = t.isShown || !1, e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            this.setUTIPParameters(t);
            break;
        case e.PlatformTypes.ptMT:
            this.setMTParameters(t)
        }
        this._Spread = parseInt((this._Ask - this._Bid) * Math.pow(10, this._Digits)),
        this.needToRefreshGrids = !0,
        this.askDigitCount = 0,
        this.bidDigitCount = 0,
        this.lastAskDigitCount = 0,
        this.lastBidDigitCount = 0,
        this.generalAskDigitCountDidChange = !1,
        this.generalBidDigitCountDidChange = !1,
        this.generalAskDidChange = !1,
        this.generalBidDidChange = !1,
        this.lastAsk = 0,
        this.lastBid = 0
    },
    e.Symbol.SymbolLocation = {
        ReverseQuote: 0,
        DirectQuote: 1
    },
    e.Symbol.CalculationTypeID = {
        Forex: 0,
        CFD: 1,
        Index: 2,
        ForexNonLeverage: 3
    },
    e.Symbol.CoverageMarginStrategy = {
        off: 0,
        max: 1,
        tenPercentageOfMin: 2
    },
    e.Symbol.ProfitCalculationType = {
        Forex: 0,
        CFD: 1,
        Futures: 2,
        ForexNonLeverage: 3
    };
    var a = e.Symbol.prototype;
    return a.allowTrade = function() {
        return ! this._TradeForbidden
    },
    a.setUTIPParameters = function(e) {
        this._QuoteSymbolName = e.quoteSymbolName || "",
        this._QuoteSymbolLocation = parseInt(e.quoteSymbolLocation || 0),
        this._QuoteSymbolCurrency = e.quoteSymbolCurrency || "",
        this._SpreadType = e.spreadType || "",
        this._GapLevel = e.gapLevel || "",
        this._CalculationTypeID = parseInt(e.calculationTypeID),
        this._CalculationType = "forexnonleverage" === e.calculationType ? "forex non-leverage": e.calculationType,
        this._MarginSymbolLocation = e.marginSymbolLocation || "",
        this._MarginSymbol = e.marginSymbol || "",
        this._MarginCurrency = e.marginCurrency || "",
        this._Percentage = parseFloat(e.percentage) || 0,
        this._СoverageMarginStrategy = parseInt(e.coverageMarginStrategy) || 0,
        this._SymbolGroupID = e.symbolGroupID || "",
        this._Commission = e.commission || "",
        this._LastChangedTime = e.lastChangedTime || "",
        this._GPipsCount = e.gPipsCount || 3,
        this._Direction = void 0 !== e.direction ? e.direction: "none"
    },
    a.setQuoteSymbolInfo = function() {
        this._QuoteSymbolName = e.SymbolsData.getSymbolByCurrency(this._QuoteSymbolCurrency, this._Postfix) ? e.SymbolsData.getSymbolByCurrency(this._QuoteSymbolCurrency, this._Postfix)._SymbolName: "USDUSD",
        this._QuoteSymbolLocation = this._QuoteSymbolCurrency ? e.SymbolsData.getSymbolLocation(this._QuoteSymbolCurrency, this._Postfix) : e.Symbol.SymbolLocation.DirectQuote
    },
    a.setMTParameters = function(t) {
        this._LastChangedTime = t.dateTime || "",
        this._Sessions = JSON.parse(t.sessions),
        this._ProfitCalculationTypeID = parseInt(t.profitCalculationTypeID),
        this._QuoteSymbolCurrency = this._ProfitCalculationTypeID == e.Symbol.ProfitCalculationType.Forex || this._ProfitCalculationTypeID == e.Symbol.ProfitCalculationType.ForexNonLeverage ? t.symbolName.substr(3, 3) : t.currency,
        this._Postfix = this._ProfitCalculationTypeID == e.Symbol.ProfitCalculationType.Forex || this._ProfitCalculationTypeID == e.Symbol.ProfitCalculationType.ForexNonLeverage ? t.symbolName.substr(6, 100) : t.source && t.source.length > 0 ? this._SymbolName.replace(t.source, "") : "",
        this._SymbolGroupID = -1,
        this._Direction = "none",
        this._GPipsCount = t.gPipsCount || 3;
        var i = e.SymbolsData.getSymbolsGroups();
        e.SymbolsData.getSymbolGroupByName(t.symbolGroupName) || e.SymbolsData.addSymbolGroup({
            id: e.UtipFunctions.getPropertyCount(i) + 1,
            name: t.symbolGroupName
        }),
        this._SymbolGroupID = e.SymbolsData.getSymbolGroupByName(t.symbolGroupName).id
    },
    e._SymbolsData.getProfitRate = function(t, i, s, n) {
        var o = 1;
        return i == e.Symbol.SymbolLocation.DirectQuote && n == e.Symbol.SymbolLocation.DirectQuote && (o = t / s),
        i == e.Symbol.SymbolLocation.DirectQuote && n == e.Symbol.SymbolLocation.ReverseQuote && (o = t * s),
        i == e.Symbol.SymbolLocation.ReverseQuote && n == e.Symbol.SymbolLocation.DirectQuote && (o = 1 / (t * s)),
        i == e.Symbol.SymbolLocation.ReverseQuote && n == e.Symbol.SymbolLocation.ReverseQuote && (o = s / t),
        o
    },
    a.hasBidDigitCountChanges = function() {
        return this.generalBidDigitCountDidChange
    },
    a.hasAskDigitCountChanges = function() {
        return this.generalAskDigitCountDidChange
    },
    a.hasDigitCountChanges = function() {
        return this.hasBidDigitCountChanges() || this.hasAskDigitCountChanges()
    },
    a.hasBidChanges = function() {
        return this.generalBidDidChange
    },
    a.hasAskChanges = function() {
        return this.generalAskDidChange
    },
    a.hasPricesChanges = function() {
        return this.hasBidChanges() || this.hasAskChanges()
    },
    a.setBid = function(e) {
        var s = this._Bid;
        this._BidDirection = s && s !== e ? s < e: this._Direction,
        this._Bid = e,
        this._Spread = parseInt((this._Ask - e) * Math.pow(10, this._Digits)),
        t.apply(this, [e, i.apply(this, [e])])
    },
    a.setAsk = function(e) {
        var t = this._Digits,
        i = this._Ask;
        this._AskDirection = i && i !== e ? i < e: this._Direction,
        this._Ask = e,
        this._Spread = parseInt(((e - this._Bid) * Math.pow(10, t)).toFixed(t)),
        s.apply(this, [e, n.apply(this, [e])])
    },
    a.getFormattedPrecision = function() {
        return 1 / Math.pow(10, this._Digits)
    },
    a.getPrecision = function() {
        return Math.pow(10, this._Digits)
    },
    a.getSymbolName = function() {
        return this._SymbolName
    },
    a.getDigits = function() {
        return parseInt(this._Digits)
    },
    a.getStopLevel = function() {
        return this._StopLevel
    },
    a.getSessions = function() {
        return this._Sessions
    },
    a.getCoverageMarginStrategy = function() {
        return this._СoverageMarginStrategy
    },
    a.getPercentage = function() {
        return this._Percentage
    },
    a.getCalculationTypeID = function() {
        return this._CalculationTypeID
    },
    a.getSymbolGroupName = function() {
        return this._SymbolGroupName
    },
    a.getCalculationTypeName = function() {
        return this._CalculationType
    },
    a.canUse = function() {
        return ! this._TradeForbidden
    },
    a.getAsk = function() {
        return this._Ask
    },
    a.getBid = function() {
        return this._Bid
    },
    a.getAskDirection = function() {
        return this._AskDirection
    },
    a.getBidDirection = function() {
        return this._BidDirection
    },
    a.getDescription = function() {
        return this._Description
    },
    a.getSpread = function() {
        return this._Spread
    },
    a.getSwapShort = function() {
        return this._SwapShort
    },
    a.getSwapLong = function() {
        return this._SwapLong
    },
    a.getSymbolGroupID = function() {
        return this._SymbolGroupID
    },
    a.getGPipsCount = function() {
        return this._GPipsCount
    },
    a = null,
    e.SymbolsData = new e._SymbolsData,
    e
}),
define("traderData", ["listener"],
function(e) {
    function t() {
        var t = e.SymbolsData.getSymbols()["USD" + this.depositCurrency.toUpperCase()];
        return "USD" == this.depositCurrency.toUpperCase() ? 1 : t ? 0 : (t = e.SymbolsData.getSymbols()[this.depositCurrency.toUpperCase() + "USD"], t ? 1 : void 0)
    }
    e._TraderData = function() {
        this._TraderInfo = null,
        this._TraderGroup = null,
        this._SumsDetails = {},
        this._Positions = [],
        this._PendingOrders = [],
        this._InputSum = null,
        this._Deposits = [],
        this._ExecutedOrders = [],
        this._Deals = [],
        this._OptionDeals = [],
        this._OptionPositions = [],
        e._TraderData.base.constructor.apply(this, arguments)
    },
    e.initClass(e._TraderData, e.Listener);
    var i = e._TraderData.prototype;
    return e._TraderData.positionType = {
        buy: "Buy",
        sell: "Sell"
    },
    e._TraderData.mtOrderType = {
        buy: "0",
        sell: "1",
        buyLimit: "2",
        sellLimit: "3",
        buyStop: "4",
        sellStop: "5"
    },
    e.requestPendingOrderType = {
        BuyLimit: 100,
        SellLimit: 101,
        BuyStop: 102,
        SellStop: 103
    },
    e._TraderData.pendingOrderType = {
        100 : "Buy Limit",
        102 : "Buy Stop",
        101 : "Sell Limit",
        103 : "Sell Stop"
    },
    e.requestPositionType = {
        Buy: 105,
        Sell: 104
    },
    e.requestMTPositionType = {
        Buy: "0",
        Sell: "1"
    },
    e.OptionPositionTypes = {
        highExpress: 0,
        lowExpress: 1,
        highClassic: 2,
        lowClassic: 3,
        top: 4,
        bottom: 5,
        outside: 6,
        inside: 7,
        getHighOrLowOptionType: function(e) {
            var t = parseInt(e);
            return isNaN(t) ? null: t === this.highExpress || t === this.highClassic || t === this.top || t === this.inside ? "high": "low"
        }
    },
    e.OptionPositionTypesNames = {
        high: "high",
        low: "low",
        top: "top",
        bottom: "bottom",
        outside: "outside",
        inside: "inside"
    },
    i.convertMTPositionType = function(t) {
        return t == e._TraderData.mtOrderType.buy ? e._TraderData.positionType.buy: e._TraderData.positionType.sell
    },
    i.convertOrderTypeToMTFormat = function(t) {
        switch (t) {
        case e.requestPositionType.Buy:
            return e._TraderData.mtOrderType.buy;
        case e.requestPositionType.Sell:
            return e._TraderData.mtOrderType.sell;
        case e.requestPendingOrderType.BuyLimit:
            return e._TraderData.mtOrderType.buyLimit;
        case e.requestPendingOrderType.BuyStop:
            return e._TraderData.mtOrderType.buyStop;
        case e.requestPendingOrderType.SellLimit:
            return e._TraderData.mtOrderType.sellLimit;
        case e.requestPendingOrderType.SellStop:
            return e._TraderData.mtOrderType.sellStop
        }
    },
    i.convertMTPendingOrderType = function(t) {
        switch (t) {
        case e._TraderData.mtOrderType.buyLimit:
            return e.requestPendingOrderType.BuyLimit.toString();
        case e._TraderData.mtOrderType.sellLimit:
            return e.requestPendingOrderType.SellLimit.toString();
        case e._TraderData.mtOrderType.buyStop:
            return e.requestPendingOrderType.BuyStop.toString();
        case e._TraderData.mtOrderType.sellStop:
            return e.requestPendingOrderType.SellStop.toString()
        }
    },
    i.clearPositionsData = function() {
        this._OptionPositions = [],
        this._PendingOrders = [],
        this._Positions = []
    },
    i.clearReportData = function() {
        this._Deals = [],
        this._Deposits = [],
        this._OptionDeals = []
    },
    i._onChangedPositions = function() {
        this.notifyFollowers("_onChangedPositions", {})
    },
    i._onGetGroupInfo = function() {
        this.notifyFollowers("_onGetGroupInfo", {})
    },
    i.parseTraderInfo = function(t) {
        this._TraderInfo = t,
        e.Browser.IsMobile || e.getTerminal().getHeaderPanel().updateAccountBtnText()
    },
    i.parseMTTraderInfo = function(i) {
        this._TraderInfo = i,
        this._TraderGroup = {
            id: -1,
            depositCurrency: i.depositCurrency,
            allowDemo: 0 == i.groupName.indexOf("demo") ? "1": "0",
            positionStep: e._TraderData.positionStep.ps0_01,
            getDepositLocation: t
        },
        this._onGetGroupInfo()
    },
    i.parseDeposits = function(t) {
        if (this._Deposits = t.depositsArray, 0 !== this._Deposits.length) {
            for (var i = 0; i < this._Deposits.length; i++) this._Deposits[i].operationDate *= 1e3;
            parseFloat(this._Deposits[this._Deposits.length - 1].equity) > 0 && !e.Browser.IsMobile && e.getTerminal().getSwiperTrade().setDepositMoneyBtnVisible(!1)
        }
    },
    i.parseDeals = function(e) {
        this._Deals = e.dealsArray;
        for (var t = 0; t < this._Deals.length; t++) this._Deals[t].openDate *= 1e3,
        this._Deals[t].closeDate *= 1e3
    },
    i.parseOptionDeals = function(e) {
        this._OptionDeals = e.optionDealsArray;
        for (var t = 0; t < this._OptionDeals.length; t++) this._OptionDeals[t].openDate *= 1e3,
        this._OptionDeals[t].closeDate *= 1e3
    },
    i.parseExecutedOrders = function(e) {
        this._ExecutedOrders = e.executedOrdersArray;
        for (var t = 0; t < this._ExecutedOrders.length; t++) this._ExecutedOrders[t].openDate *= 1e3,
        this._ExecutedOrders[t].closeDate *= 1e3
    },
    i.parseExecutedOrderData = function(e) {
        var t = e.executedOrdersDataArray;
        t.forEach(function(e, t, i) {
            var s = this.getPendingOrderIndexByID(e.orderID);
            void 0 !== s && null !== s && this._PendingOrders.splice(s, 1)
        },
        this),
        this._onChangedPositions()
    },
    i.parsePendingOrders = function(e) {
        this._PendingOrders = e.pendingOrdersArray;
        for (var t = 0; t < this._PendingOrders.length; t++) this._PendingOrders[t].openDate = parseInt(this._PendingOrders[t].openDate),
        this._PendingOrders[t].openDate *= 1e3;
        this._onChangedPositions()
    },
    i.parsePositions = function(e) {
        for (var t = Object.keys(e.sumsDetails), i = t.length; i > 0; i--) this._SumsDetails[t[i]] = e.sumsDetails[t[i]];
        this._calcInputSum(),
        this._Positions = e.positionsArray;
        for (var i = 0; i < this._Positions.length; i++) this._Positions[i].openDate = parseInt(this._Positions[i].openDate),
        this._Positions[i].openDate *= 1e3;
        this._onChangedPositions()
    },
    i.parseOptionPositions = function(e) {
        this._SumsDetails.sumOptionDeals = e.sumsDetails.sumOptionDeals,
        this._SumsDetails.sumOptionPositions = e.sumsDetails.sumOptionPositions,
        this._SumsDetails.sumSpendBonus = e.sumsDetails.sumSpendBonus,
        this._calcInputSum(),
        this._OptionPositions = e.optionPositionsArray;
        for (var t = 0; this._OptionPositions!=null && t < this._OptionPositions.length; t++) this._OptionPositions[t].openDate = parseInt(this._OptionPositions[t].openDate),
        this._OptionPositions[t].openDate *= 1e3,
        this._OptionPositions[t].expiryDate = parseInt(this._OptionPositions[t].expiryDate),
        this._OptionPositions[t].expiryDate *= 1e3;
        this._onChangedPositions()
    },
    i.parseMTPositions = function(t) {
        this._InputSum = e.parseFloat(t.balance || 0),
        this._mtMargin = t.margin,
        this._Positions = [],
        this._PendingOrders = [];
        var i = t.orders;
        i && i.forEach(function(t) {
            t.orderType == e._TraderData.mtOrderType.buy || t.orderType == e._TraderData.mtOrderType.sell ? (t.positionType = this.convertMTPositionType(t.orderType), t.openDate = 1e3 * parseInt(t.openDate), t.volume = parseInt(t.volume) / 100, this._Positions.push(t)) : (t.volume = parseInt(t.volume) / 100, t.pendingOrderType = this.convertMTPendingOrderType(t.orderType), t.openDate = 1e3 * parseInt(t.openDate), this._PendingOrders.push(t))
        },
        this),
        this._onChangedPositions()
    },
    i.getInputSum = function() {
        return this._InputSum
    },
    i.getPositions = function() {
        return this._Positions
    },
    i.getPendingOrders = function() {
        return this._PendingOrders
    },
    i.getOptionPositions = function() {
        return this._OptionPositions
    },
    i._calcInputSum = function() {
        var t = this._SumsDetails;
        e.getTerminal();
        0 !== Object.keys(t).length && (this._InputSum = e.parseFloat(t.sumInput || 0) - e.parseFloat(t.sumOutput || 0) + e.parseFloat(t.sumInputBonus || 0) - e.parseFloat(t.sumOutputBonus || 0) + e.parseFloat(t.sumHistory || 0) + e.parseFloat(t.sumOptionDeals || 0)),
        "undefined" == typeof t.sumOptionDeals && (this._InputSum = null)
    },
    i.parseTraderGroup = function(e) {
        this._TraderGroup = e,
        this._TraderGroup.getDepositLocation = t,
        this._onGetGroupInfo()
    },
    i.getTraderGroup = function() {
        return this._TraderGroup
    },
    e._TraderData.positionStep = {
        ps0_001: "0",
        ps0_01: "1",
        ps0_1: "2",
        ps1: "3"
    },
    i.getPositionStep = function() {
        return this._TraderGroup.positionStep
    },
    i.getDecimalCount = function() {
        var t = this.getPositionStep();
        switch (t) {
        case e._TraderData.positionStep.ps1:
            return 0;
        case e._TraderData.positionStep.ps0_1:
            return 1;
        case e._TraderData.positionStep.ps0_01:
            return 2
        }
    },
    i.getPositionById = function(e) {
        var t, i = null;
        for (t = 0; t < this._Positions.length; t++) if (this._Positions[t].id == e) {
            i = this._Positions[t];
            break
        }
        return i
    },
    i.findPositionById = function(t) {
        var i = null;
        return i = this.getPositionById(t),
        e.valueIsEmpty(i) === !1 ? i: (i = this.getOptionPositionById(t), e.valueIsEmpty(i) === !1 ? i: (i = this.getPendingOrderByID(t), e.valueIsEmpty(i) === !1 ? i: i))
    },
    i.getPositionsBySymbolName = function(e) {
        for (var t = [], i = 0, s = this._Positions.length; i < s; i++) this._Positions[i].symbolName === e && t.push(this._Positions[i]);
        return t
    },
    i.getOptionPositionById = function(e) {
        var t, i = null;
        for (t = 0; t < this._OptionPositions.length; t++) if (this._OptionPositions[t].id == e) {
            i = this._OptionPositions[t];
            break
        }
        return i
    },
    i.getOptionPositionsBySymbolName = function(e) {
        for (var t = [], i = 0, s = this._OptionPositions.length; i < s; i++) this._OptionPositions[i].symbolName === e && t.push(this._OptionPositions[i]);
        return t
    },
    i.getOrderByKey = function(e, t) {
        return e = e.substring(0, e.indexOf("_")),
        this.getOrderByID(e, t)
    },
    i.getOptionPositionByKey = function(e) {
        return e = e.substring(0, e.indexOf("_")),
        this.getOptionPositionById(e)
    },
    i.getOrderByID = function(e, t) {
        var i, s = ["Express", "Classic", "One Touch", "Range"];
        if (s.indexOf(t) == -1) if ("Buy" == t || "Sell" == t) {
            for (i = 0; i < this._Positions.length; i++) if (this._Positions[i].id == e) return this._Positions[i]
        } else for (i = 0; i < this._PendingOrders.length; i++) if (this._PendingOrders[i].id == e) return this._PendingOrders[i]
    },
    i.getPendingOrderByID = function(e) {
        var t, i = null;
        for (t = 0; t < this._PendingOrders.length; t++) if (this._PendingOrders[t].id == e) {
            i = this._PendingOrders[t];
            break
        }
        return i
    },
    i.getPendingOrderIndexByID = function(e) {
        var t;
        for (t = 0; t < this._PendingOrders.length; t++) if (this._PendingOrders[t].id == e) return t
    },
    i.getTraderInfo = function() {
        return this._TraderInfo
    },
    i.getGroup = function() {
        return this._TraderGroup
    },
    i.calcProfit = function(t) {
        var i, s = this.getPositionById(t),
        n = e.SymbolsData.getSymbols()[s.symbolName],
        o = e.TraderData._TraderGroup.getDepositLocation(),
        a = e.SymbolsData.getSymbols()[n._QuoteSymbolName],
        r = e.SymbolsData.getSymbolByCurrency(e.TraderData._TraderGroup.depositCurrency),
        l = "Buy" == s.positionType ? n._Bid: n._Ask,
        h = a ? "Buy" == s.positionType ? a._Bid: a._Ask: 1,
        d = "USDUSD" !== r ? "Buy" == s.positionType ? r._Bid: r._Ask: 1,
        c = a ? n._QuoteSymbolLocation: e.Symbol.SymbolLocation.DirectQuote,
        u = e._SymbolsData.getProfitRate(h, c, d, o);
        return u = e.parseFloat(u),
        i = n._ContractSize * e.parseFloat(s.volume) * ("Buy" == s.positionType ? l - e.parseFloat(s.openPrice) : e.parseFloat(s.openPrice) - l) * u,
        e.getTerminal().platformType == e.PlatformTypes.ptUTIP && (i = i - e.parseFloat(s.commission) + e.parseFloat(s.swap || 0)),
        e.round(i, 2)
    },
    i.getPositionsProfit = function() {
        var t, i = 0,
        s = 0;
        for (t = 0; t < this._Positions.length; t++) s += e.parseFloat(this._Positions[t].commission) + e.parseFloat(this._Positions[t].swap || 0),
        i += this.calcProfit(this._Positions[t].id);
        return i += e.getTerminal().platformType == e.PlatformTypes.ptMT ? s: this.calcOptionPositionsProfit()
    },
    i.calcOptionPositionsProfit = function() {
        var e = 0;
        for (var t in this._OptionPositions) {
            var i = this._OptionPositions[t];
            e += this.calcOptionPositionProfit(i.id)
        }
        return e
    },
    i.getEquity = function() {
        return this.getInputSum() + this.getPositionsProfit()
    },
    i.getBalance = function() {
        return this.getInputSum()
    },
    i.getPositionsMargin = function() {
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            for (var t = 0,
            i = [], s = [], n = 0; n < this._Positions.length; n++) {
                var o = this._Positions[n],
                a = e.parseFloat(o.margin) || 0,
                r = i.indexOf(o.symbolName);
                r == -1 ? (i.push(o.symbolName), s.push([0, 0]), "Buy" == o.positionType ? s[s.length - 1][0] = a: "Sell" == o.positionType && (s[s.length - 1][1] = a)) : "Buy" == o.positionType ? s[r][0] += a: "Sell" == o.positionType && (s[r][1] += a)
            }
            var l = null,
            h = e.SymbolsData.getSymbols();
            for (var d in h) {
                l = h[d];
                var r = i.indexOf(d);
                if (r > -1) {
                    var c = s[r][0],
                    u = s[r][1];
                    switch (l.getCoverageMarginStrategy()) {
                    case e.Symbol.CoverageMarginStrategy.off:
                        t += c + u;
                        break;
                    case e.Symbol.CoverageMarginStrategy.max:
                        t += Math.max(c, u);
                        break;
                    case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
                        t += Math.max(c, u) - .9 * Math.min(c, u)
                    }
                }
            }
            return t;
        case e.PlatformTypes.ptMT:
            return e.TraderData._mtMargin
        }
    },
    i.getFreeEquity = function() {
        return this.getEquity() - this.getPositionsMargin() - this.optionsInvestments() - this.calcOptionPositionsProfit()
    },
    i.getSumBonus = function() {
        return this._SumsDetails ? e.parseFloat(this._SumsDetails.sumInputBonus) - e.parseFloat(this._SumsDetails.sumOutputBonus) + e.parseFloat(this._SumsDetails.sumSpendBonus) : void 0
    },
    i.optionsInvestments = function() {
        var t, i = 0;
        for (t = 0; this._OptionPositions!=null && t < this._OptionPositions.length; t++) i += e.parseFloat(this._OptionPositions[t].investmentSum);
        return i
    },
    i.getPayout = function(t) {
        var i = e.SymbolsData.getSymbols()[t.symbolName],
        s = e.parseFloat(i._Bid),
        n = e.parseFloat(t.openPrice),
        o = parseInt(t.investmentSum),
        a = t.direction == e.OptionPositionTypes.highExpress || t.direction == e.OptionPositionTypes.highClassic,
        r = t.direction == e.OptionPositionTypes.lowExpress || t.direction == e.OptionPositionTypes.lowClassic,
        l = this._TraderGroup.optionEqualityPrices;
        if (s == n && (a || r)) return "0" == l || void 0 === l ? t.investmentSum: 0;
        if (a && n < s || r && n > s) return o + o / 100 * t.payoutPercentage;
        if (t.direction == e.OptionPositionTypes.inside) {
            var h = parseInt(t.interval) / i.getPrecision();
            return s >= n - h && s <= n + h ? o + o / 100 * t.payoutPercentage: 0
        }
        if (t.direction == e.OptionPositionTypes.outside) {
            var h = parseInt(t.interval) / i.getPrecision();
            return s < n - h || s > n + h ? o + o / 100 * t.payoutPercentage: 0
        }
        if (t.direction == e.OptionPositionTypes.top) {
            var h = parseInt(t.interval) / i.getPrecision();
            return s > n + h ? o + o / 100 * t.payoutPercentage: 0
        }
        if (t.direction == e.OptionPositionTypes.bottom) {
            var h = parseInt(t.interval) / i.getPrecision();
            return s < n - h ? o + o / 100 * t.payoutPercentage: 0
        }
        return 0
    },
    i.calcOptionPositionProfit = function(e) {
        var t = this.getOptionPositionById(e);
        return t ? this.getPayout(t) - t.investmentSum: "0"
    },
    i.getOptionDeals = function() {
        return this._OptionDeals
    },
    i.traderIsDemo = function() {
        return parseInt(this._TraderGroup.allowDemo)
    },
    i.getSumsDetails = function() {
        return this._SumsDetails
    },
    i = null,
    e.TraderData = new e._TraderData,
    e
}),
define("templates", ["base"],
function(e) {
    return e._Templates = {},
    e._Templates.Button = '<div class="WTButton"><div class="WTButtonImage"></div><div class="WTButtonText"></div><div class="WTButtonPrice"></div></div>',
    e._Templates.AccountButton = '<div class="WTButton"><div class="WTButtonImage"></div><div class="WTButtonText"></div><div class="WTButtonArrow"></div></div>',
    e._Templates.TableButton = '<div class="TableButton"><div class="WTButtonImage"></div><div class="WTButtonText"></div></div>',
    e._Templates.MenuItem = '<div class="WTMenuItem"><div class="WTMItemImg"></div><div class="WTMItemTxt"></div><div class="WTMItemGap"></div><div class="Hotkey"></div><div class="Arrow"></div></div>',
    e._Templates.ImageMenuItem = '<div class="WTImageMenuItem"><div class="WTMItemTxt"></div><div class ="WTMItemImg"></div></div>',
    e._Templates.LayoutMenuItem = '<div class="WTLayoutMenuItem"></div>',
    e._Templates.Menu = '<div class="WTMenu"><div class="WTMenuLeftIconsBackground"></div></div>',
    e._Templates.Tree = '<div class="WTTree"></div>',
    e._Templates.TreeUlContainer = '<ul class="TreeUlContainer"></ul>',
    e._Templates.TreeNode = '<li class="WTTreeNode"><div class="Expand"></div><div class="CheckBox"></div><div class="WTTreeNodeIcon"></div><div class="Title"></div></li>',
    e._Templates.MobileTreeNode = '<li class="WTTreeNode"><div class="Expand"><div class="CheckBox"></div></div></li>',
    e._Templates.RootTreeNode = '<li class="WTTreeNode"><div class="TitleEnvelope"><div class="Expand"></div><div class="CheckBox"></div><div class="WTTreeNodeIcon"></div><div class="Title"></div></div></li>',
    e._Templates.CheckBoxGroup = '<div class="WTCheckBoxGroup"><div class="WTCheckBoxGroupLabel"></div><div class="WTCheckBoxGroupInputs"></div></div>',
    e._Templates.Input = '<div class="WTInput"><div class="WTInputLabel"></div><img class="WTInputPicture" /><div class="WTInputSelectIcon"></div><input class="WTInputField" /></div>',
    e._Templates.InputPassword = '<div class="WTInput Password"><div class="WTInputLabel"></div><input class="WTInputField" /><div class="PasswordEye"></div></div>',
    e._Templates.CheckBox = '<div class="WTInput CheckBox"><div class="WTInputLabel"></div><div class="WTInputCheckBoxField"><input class="WTInputField" type="checkbox" /></div><div class="Check"></div> </div>',
    e._Templates.InputNumber = '<div class="WTInput"><div class="WTInputLabel"></div><div class="WTInputNumberField"><div class="WTInputFieldIcon"></div><div class="WTInputFieldCaption"></div><input type="text" class="WTInputField" /><div class="InputNumberButton"><div class="Up"></div><div class="Down"></div></div></div></div>',
    e._Templates.InputSelect = '<div class="WTInput Select"><div class="WTInputLabel"></div><div class="WTInputSelectField"><div class="WTInputSelectIcon"></div><div class="WTInputSelectCaption"></div><input type="text" class="WTInputField" /><div class="WTInputDescription"></div><div class="InputSelectButton"><div class="WTInputSelectArrowImg"></div> </div></div></div>',
    e._Templates.InputImage = '<div class="WTInput Select"><div class="WTInputLabel"></div><div class="WTInputImageField"><input type="text" class="WTInputField" /><div class="InputSelectButton"><div class="WTInputSelectArrowImg"></div> </div></div></div>',
    e._Templates.ColorSelect = '<div class="WTInput Select"><div class="WTInputLabel"></div><div class="WTInputSelectField"><input class="WTInputField color" /></div></div>',
    e._Templates.StatusBar = '<div class="WTTerminalStatusBar"><div class="WTTerminalStatusBarLeft"><div class="Equity"><div class="EquityLbl"></div><div class="DepositSymbol"></div><div class="EquityVal"></div></div> <div class="Profit"><div class="ProfitLbl"></div><div class="ProfitVal"></div></div> <div class="Free"><div class="FreeLbl"></div><div class="FreeVal"></div></div> <div class="Margin"><div class="MarginLbl"></div><div class="MarginVal"></div></div> <div class="Level"><div class="LevelLbl"></div><div class="LevelVal"></div></div> <div class="Bonuses"><div class="BonusesLbl"></div><div class="BonusesVal"></div></div> </div><div class="WTTerminalStatusBarRight"><div class="icon-server"></div><div class="Server"></div> <div class="Time"></div> </div></div>',
    e._Templates.StatusBarBalanceNode = '<div class="Balance"><div class="BalanceLbl"></div><div class="BalanceVal"></div></div>',
    e._Templates.AuthContainerContent = '<div class="AuthContainerContent"><div class="LeftBlock"><div class="Logo"><img src="res/img/logo.png" /></div><br /><div class="Name">WebTrader</div><br /><div class="Selectors"></div></div><div class="CenterBlock"><div class="Title"></div></div><div class="CenterBlock2"><div class="Title"></div></div><div class="RightBlock"><div class="Subject"><img class="SubjectImg" src="res/img/error_yellow.png" /><div class="SubjectTitle"></div><div class="HelpText"></div></div></div>',
    e._Templates.Splitter = '<div class="WTSplitter"><div class="WTSplitterContent1"></div><div class="WTSplitterResizer"></div><div class="WTSplitterCollapseBtn"></div><div class="WTSplitterPhantom"></div><div class="WTSplitterContent2"></div></div>',
    e._Templates.Dialog = '<div class="WTDialog"><div class="WTDialogTopBlock"><div class="WTDialogClBtnContainer Right"></div><div class="WTDialogTitle"></div></div><div class="WTDialogContent"></div></div>',
    e._Templates.DialogErrorContent = '<div><div class="Info"><div class="WTErrorImg"></div><div class="WTErrorMessage">Error</div></div></div>',
    e._Templates.DialogConfirmContent = '<div class="DialogConfirmContent"><div class="Info"><div class="WTErrorImg"></div><div class="WTConfirmMessage"></div></div><div class="DFooterControls Right"></div></div>',
    e._Templates.DialogOpenDemoContent = '<div><div class="DContainer"><div class="DLeftControls"></div><div class="DRightControls"></div><div class="DDownRightControls"></div><div class="DDownLeftControls"></div><div class="DBottomControls"></div></div><div class="DFooterControls Center"></div></div>',
    e._Templates.DialogAccountInfoContent = '<div><div class="DPersonalInfoControls"><div class="WTHeadLabel"></div><div class="DInfoBlock"></div></div><div class="WTHorisontalSeparator"></div><div class="DTradeInfoControls"><div class="WTHeadLabel"></div><div class="DInfoBlock"></div></div></div>',
    e._Templates.DialogOptionInfoContent = '<div class="DialogOptionInfoContent"><div class="OptionDescription"><div class="SymbolName"></div><div class="OptionType"></div></div><div class="TableContainer"></div>',
    e._Templates.DialogSymbolInfoContent = '<div class="DialogSymbolInfoContent"><div class="SymbolDescription"></div><div class="WTHorisontalSeparator"></div><div class="SymbolDetails"><div class="Left"><div class="Symbol"></div><div class="Spread"></div><div class="SwapLong"></div><div class="SwapShort"></div><div class="Commission"></div></div><div class="Right"><div class="CalculationType"></div><div class="Digits"></div><div class="GapLevel"></div><div class="StopLevel"></div></div></div><div class="SymbolInfoTable"></div></div>',
    e._Templates.DialogSimbolListContent = '<div><div class="scrollable"><div class="DTreeListContainer scroller-content-wrapper"></div></div><div class="DFooterControls"></div></div>',
    e._Templates.DialogChangePassContent = '<div><div class="DPasContent"><div class="DPasswordTypeInput"></div><div class="DCurrentPassInput"></div><div class="DRulesContainer"></div><div class="DNewPassContainer"></div></div><div class="DFooterControls Right"></div></div>',
    e._Templates.DialogReportContent = e._Templates.DialogOptionsContent = '<div><div class="DTabControlContainer"></div><div class="DFooterControls"></div></div>',
    e._Templates.DialogLineSettingsContent = e._Templates.DialogIndicatorSettingsContent = '<div><div class="DTabControlContainer"></div><div class="topBorder"></div><div class="DFooterControls Right"></div></div>',
    e._Templates.DialogColorSchemeContent = '<div><div class="DTopControls"></div><div class="DCenterControls"><div class="DLeftControls"></div><div class="DRightControls"></div></div><div class="DFooterControls"></div></div>',
    e._Templates.DialogAboutContent = '<div><div class="DVersionLogo"></div><div class="DVersionInfo"></div><div class="DFooterControls  Right"></div></div>',
    e._Templates.DialogBuyOptionContent = '<div class="DialogBuyOptionContent"></div>',
    e._Templates.DialogNewOrderContent = '<div class="DialogNewOrderContent"><div class="DOrderSettsContainer"></div><div class="DFooterControls"></div></div>',
    e._Templates.DialogNewOrderDetails = '<div class="NewOrderDetails"><div class="ExtendedSymbolName"></div><div class="NewOrderInfo"><div class="PipSize"><div class="PipSizeLbl"></div><div class="PipSizeVal"></div></div><div class="MarginSize"><div class="MarginSizeLbl"></div><div class="MarginSizeVal"></div></div></div><div class="NewOrderCurrentQuote"><div class="Bid"></div><div class="Separate">/</div><div class="Ask"></div><div class="Status"></div></div></div>',
    e._Templates.DialogClosePositionContent = '<div class="DialogClosePositionContent"><div class="DClosePosSetts"></div><div class="CurrentPrice"><div class="PriceLbl"></div><div class="PriceVal"></div></div><div class="DCloseBtn"></div></div>',
    e._Templates.DialogModifyPositionContent = '<div class="DialogModifyPositionContent"><div class="TakeProfitRow"></div><div class="StopLossRow"></div><br><div class="CurrentPrice"><div class="PriceLbl"></div><div class="PriceVal"></div></div><div class="DCloseBtn"></div></div>',
    e._Templates.DialogLoginPasswordContent = '<div class="DialogLoginPasswordContent"><div class="ElemsBlock"><div class="RegSuccess"></div><div class="LoginPasswordLbl"></div><div class="LoginPasswordVal"></div></div><div class="DFooterControls  Right"></div></div>',
    e._Templates.TableOptionsInfo = '<div class="TableOptionsInfo"></div>',
    e._Templates.TableOptionsInfoHeader1 = '<div class="DivTableHeader TableOptionsInfoHeader Template1"><div class="Period"></div><div class="Payout"></div><div class="Interval"></div><div class="Stop"></div><div class="EarlyClosing"></div></div>',
    e._Templates.TableOptionsInfoHeader2 = '<div class="DivTableHeader TableOptionsInfoHeader Template2"><div class="Period"></div><div class="Payout"></div><div class="Stop"></div><div class="EarlyClosing"></div></div>',
    e._Templates.TableOptionsInfoRow1 = '<div class="DivTableRow TableOptionsInfoRow Template1"><div class="Period"></div><div class="Payout"></div><div class="Interval"></div><div class="Stop"></div><div class="EarlyClosing"></div></div>',
    e._Templates.TableOptionsInfoRow2 = '<div class="DivTableRow TableOptionsInfoRow Template2"><div class="Period"></div><div class="Payout"></div><div class="Stop"></div><div class="EarlyClosing"></div></div>',
    e._Templates.Swiper = '<div class="WTSwiper"><div class="WTPreSwiperContent"></div><div class="WTSwiperTabsBlock"></div><div class="WTSwiperContent"></div><div class="WTSwiperScrollArrows"></div></div>',
    e._Templates.SwiperTable = '<div class="WTSwiper"><div class="WTSwiperTabsBlock"></div><section class=""><div class="WTSwiperContent"></div></section></div>',
    e._Templates.SwiperChart = '<div class="WTSwiper"><div class="WTSwiperTabsBlock"></div><div class="WTSwiperContentChart"></div><div class="WTSwiperScrollArrows"></div></div>',
    e._Templates.SwiperTrade = '<div class="WTSwiper SwiperTrade"><div class="WTSwiperTabsBlock"></div><div class="WTSwiperContent"></div><div class="WTSwiperScrollArrows"></div><div class="WTSwiperButtonsPlacement"></div></div>',
    e._Templates.ChartWindows = '<div class="ChartWindows"><canvas class="WTSwiperTabsBlock"></canvas></div>',
    e._Templates.TableTotal = '<div class="WTTableTotal"><div class="TotalTitle"></div> : <div class="TotalContent"></div> </div> ',
    e._Templates.HeaderPanel = '<div class="WTHeaderPanel"><div class="mainMenuBtn"></div><div class="WTVerticalSeparator" style="height: 26px;"></div><div class="buySellBtn"></div><div class="pandingOrderBtn"></div><div class="reportBtn"></div><div class=" WTVerticalSeparator" style="height: 26px;"></div><div class="newChartBtn"></div><div class="timeFrameBtn"></div><div class="indicatorsBtn"></div><div class="linesBtn"></div><div class="crosshairBtn"></div><div class="offsetBtn"></div><div class="autoscrollBtn"></div><div class="reduceChartBtn"></div><div class="increaseChartBtn"></div><div class="settingsChartBtn"></div></div>',
    e._Templates.Table = '<div class="WTTableTotal"><table class="WTTable"></table></div> ',
    e._Templates.FixedHeadGrid = '<div class="WTTableContent"><div class="WTTableHeader"></div><div class="WTTableBody"></div></div> ',
    e._Templates.LineSettingsGeneralContent = '<div class="DialogLineSettingsContent"><div class="LineStyleContent"></div></div>',
    e._Templates.LineSettingsOptionsContent = '<div class="DialogLineSettingsContent LineOption"><div class="DLeftControls"></div><div class="DRightControls"></div><div class="DAnyControls"></div></div>',
    e._Templates.LineSettingsLevelsContent = '<div class="DialogLineSettingsContent LevelsSettings"><div class="DLeftControls"></div><div class="DRightControls"></div></div>',
    e._Templates.SelectRangeContent = '<div class="DialogSelectRangeContent"><div class="CenterBlock"><div class="DLeftControls"><div class="CalendarLabel"></div><div class="CalendarPlacement"></div></div><div class="DRightControls"><div class="CalendarLabel"></div><div class="CalendarPlacement"></div></div></div></div>',
    e._Templates.IndicatorSettingsStyleContent = '<div class="DialogIndicatorSettingsContent"><div class="LineStyleContent"></div></div>',
    e._Templates.IndicatorSettingsOptionsContent = '<div class="DialogIndicatorSettingsContent"><div class="DCenterControls"></div><div class="DAnyControls"></div></div>',
    e._Templates.OptionsSettingsContent = '<div class="OptionsSettingsContent"><div class="OptionsSettingsTypeContent"></div><div class="OptionsSettingsTableContent tableContent"></div></div> ',
    e._Templates.BuyOptionContent = '<div class="DialogBuyOptionContent"><div class="BuyOptionContent"><div class="Top"></div><div class="BuyOptionParam"><div class="DLeftControls"></div><div class="DRightControls"></div></div><div class="CurrentPrice"><div class="CurrentPriceLabel"></div><div class="Bid"></div><div class="BottomBorderValue"></div><div class="TopBorderValue"></div><div class="Status"></div></div><div class="Buttons"></div></div></div>',
    e._Templates.LabelsPanel = '<div class="LabelPanelContent"><div class="LabelCaption"></div><div class="LabelValue"></div></div>',
    e._Templates.LabelsPanelWithDots = '<div class="LabelPanelContent"><div class="LabelCaption"></div><div class="Separator"></div><div class="LabelValue"></div></div>',
    e._Templates.DivTable = '<div class="DivTable"></div>',
    e._Templates.DefaultTableRow = '<div class="DivTableRow"><div class="DivTableCell"></div></div>',
    e._Templates.QuotesContent = '<div class="QuotesContent"><div class="QuotesTableContent tableContent"></div></div>',
    e._Templates.TableQuotes = '<div class="TableQuotes DivTable"></div>',
    e._Templates.TableQuotesRow = '<div class="TableQuotesRow DivTableRow"><div class="Symbol"></div><div class="Bid"></div><div class="Ask"></div><div class="Spread"></div><div class="SwapShort"></div><div class="SwapLong"></div><div class="Time"></div><div class="Margin"></div></div>',
    e._Templates.TableQuotesHeader = '<div class="TableQuotesHeader DivTableHeader"><div class="Symbol"></div><div class="Bid"></div><div class="Ask"></div><div class="Spread"></div><div class="SwapShort"></div><div class="SwapLong"></div><div class="Time"></div><div class="Margin"></div></div>',
    e._Templates.OptionsSettingsTable = '<div class="OptionsSettingsTable DivTable"></div>',
    e._Templates.OptionsSettingsTableRow = '<div class="OptionsSettingsTableRow DivTableRow"><div class="Name"></div><div class="Price"></div><div class="Period"></div><div class="Profit"></div></div>',
    e._Templates.OptionsSettingsTableHeader = '<div class="OptionsSettingsTableHeader DivTableHeader"><div class="Name"></div><div class="Price"></div><div class="Period"></div><div class="Profit"></div></div>',
    e._Templates.LevelsContent = '<div class="LevelsContent"><div class="LevelsTableContent tableContent"></div></div>',
    e._Templates.TableLevels = '<div class="TableLevels DivTable"></div>',
    e._Templates.TableLevelsHeader = '<div class="TableLevelsRow DivTableHeader"><div class="Level"></div><div class="Description"></div></div>',
    e._Templates.TableLevelsRow = '<div class="TableLevelsRow DivTableRow"><div class="Level"></div><div class="Description"></div></div>',
    e._Templates.SymbolInfoContent = '<div class="SymbolInfoContent"><div class="SymbolInfoTableContent tableContent"></div></div>',
    e._Templates.TableSymbolInfo = '<div class="TableSymbolInfo DivTable"></div>',
    e._Templates.TableSymbolInfoHeader = '<div class="TableSymbolInfoHeader DivTableHeader"><div class="DayOfWeek"></div><div class="OpenTime"></div><div class="CloseTime"></div></div>',
    e._Templates.TableSymbolInfoRow = '<div class="TableSymbolInfoRow DivTableRow"><div class="DayOfWeek"></div><div class="OpenTime"></div><div class="CloseTime"></div></div>',
    e._Templates.TradeContent = '<div class="TradeContent"><div class="TableTradeContent tableContent"></div></div> ',
    e._Templates.TableTrade = '<div class="TableTrade DivTable"></div>',
    e._Templates.TableTradeRow = '<div class="TableTradeRow DivTableRow"><div class="Symbol"></div><div class="Number"></div><div class="Type"></div><div class="Volume"></div><div class="Date"></div><div class="OpenPrice"></div><div class="AdditionalParameters"></div><div class="CurrentPrice"></div><div class="Profit"></div><div class="Modify"></div><div class="Close"></div></div>',
    e._Templates.TableTradeOptionRow = '<div class="TableTradeRow DivTableRow"><div class="Symbol"></div><div class="Number"></div><div class="Type"></div><div class="Volume"></div><div class="Date"></div><div class="OpenPrice"></div><div class="AdditionalParameters"></div><div class="CurrentPrice"></div><div class="Profit"></div><div class="Modify"></div><div class="Close"></div></div>',
    e._Templates.TableTradeHeader = '<div class="TableTradeHeader DivTableHeader"><div class="Symbol"></div><div class="Number"></div><div class="Type"></div><div class="Volume"></div><div class="Date"></div><div class="OpenPrice"></div><div class="AdditionalParameters"></div><div class="CurrentPrice"></div><div class="Profit"></div><div class="Modify"></div><div class="Close"></div></div>',
    e._Templates.DepositTable = '<div class="DepositTable DivTable"></div>',
    e._Templates.DeposittNode = '<div class="DepositNode"><div class="DepositTableNode"></div></div>',
    e._Templates.DepositContent = '<div class="DepositContent ReportContent"><div class="DepositTableContent ReportTableContent tableContent"></div></div>',
    e._Templates.DepositTableRow = '<div class="DepositTableRow DivTableRow DialogReportTableRow"><div class="Date"></div><div class="Sum"></div><div class="Comment"></div></div>',
    e._Templates.DepositTableTotalRow = '<div class="DepositTableTotalRow DivTableRow DialogReportTableRow"><div class="Total"></div></div>',
    e._Templates.DepositTableHeader = '<div class="DepositTableHeader DivTableHeader DialogHeader"><div class="Date"></div><div class="Sum"></div><div class="Comment"></div></div>',
    e._Templates.ExecutedOrdersTable = '<div class="ExecutedOrdersTable DivTable"></div>',
    e._Templates.ExecutedOrdersNode = '<div class="ExecutedOrdersNode"><div class="ExecutedOrdersTableNode"></div></div>',
    e._Templates.ExecutedOrdersContent = '<div class="ExecutedOrdersContent ReportContent"><div class="ExecutedOrdersTableContent ReportTableContent tableContent"></div></div>',
    e._Templates.ExecutedOrdersTableRow = '<div class="ExecutedOrdersTableRow DivTableRow DialogReportTableRow"><div class="Number"></div><div class="Symbol"></div><div class="Type"></div><div class="Volume"></div><div class="Open_date"></div><div class="Close_date"></div><div class="Price"></div><div class="TakeProfit"></div><div class="StopLoss"></div><div class="Type_of_closure"></div></div>',
    e._Templates.ExecutedOrdersTableHeader = '<div class="ExecutedOrdersTableHeader DivTableHeader DialogHeader"><div class="Number"></div><div class="Symbol"></div><div class="Type"></div><div class="Volume"></div><div class="Open_date"></div><div class="Close_date"></div><div class="Price"></div><div class="TakeProfit"></div><div class="StopLoss"></div><div class="Type_of_closure"></div></div>',
    e._Templates.GeneralReportTable = '<div class="GeneralReportTable DivTable"></div>',
    e._Templates.GeneralReportNode = '<div class="GeneralReportNode"><div class="GeneralReportTableNode"></div></div>',
    e._Templates.GeneralReportContent = '<div class="GeneralReportContent ReportContent"><div class="GeneralReportTableContent ReportTableContent tableContent"></div></div>',
    e._Templates.GeneralReportDepositRow = '<div class="GeneralReportDepositRow DivTableRow DialogReportTableRow"><div class="Number"></div><div class="Open_date"></div><div class="Type"></div><div class="Symbol"></div><div class="DepositVolume"></div><div class="SpentBonus"></div><div class="Comment"></div></div>',
    e._Templates.GeneralReportTableRow = '<div class="GeneralReportTableRow DivTableRow DialogReportTableRow"><div class="Number"></div><div class="Open_date"></div><div class="Type"></div><div class="Symbol"></div><div class="Volume"></div><div class="Close_date"></div><div class="Open_price"></div><div class="Close_price"></div><div class="TakeProfit"></div><div class="StopLoss"></div><div class="Swap"></div><div class="Commission"></div><div class="Profit"></div><div class="SpentBonus"></div><div class="Balance"></div><div class="Comment"></div></div>',
    e._Templates.GeneralReportTableTotalRow = '<div class="GeneralReportTableTotalRow DivTableRow DialogReportTableRow"><div class="Total"></div></div>',
    e._Templates.GeneralReportTableHeader = '<div class="GeneralReportTableHeader DivTableHeader DialogHeader"><div class="Number"></div><div class="Open_date"></div><div class="Type"></div><div class="Symbol"></div><div class="Volume"></div><div class="Close_date"></div><div class="Open_price"></div><div class="Close_price"></div><div class="TakeProfit"></div><div class="StopLoss"></div><div class="Swap"></div><div class="Commission"></div><div class="Profit"></div><div class="SpentBonus"></div><div class="Balance"></div><div class="Comment"></div></div>',
    e._Templates.DealsTable = '<div class="DealsTable DivTable"></div>',
    e._Templates.DealsNode = '<div class="DealsNode"><div class="DealsTableNode"></div></div>',
    e._Templates.DealsContent = '<div class="DealsContent ReportContent"><div class="DealsTableContent ReportTableContent tableContent"></div></div>',
    e._Templates.DealsTableRow = '<div class="DealsTableRow DivTableRow DialogReportTableRow"><div class="Number"></div><div class="Symbol"></div><div class="Type"></div><div class="Volume"></div><div class="Open_date"></div><div class="Close_date"></div><div class="Open_price"></div><div class="Close_price"></div><div class="TakeProfit"></div><div class="StopLoss"></div><div class="Swap"></div><div class="Commission"></div><div class="Profit"></div><div class="SpentBonus"></div><div class="Balance"></div><div class="Type_of_closure"></div></div>',
    e._Templates.DealsTableTotalRow = '<div class="DealsTableTotalRow DivTableRow DialogReportTableRow"><div class="Total"></div></div>',
    e._Templates.DealsTableHeader = '<div class="DealsTableHeader DivTableHeader DialogHeader"><div class="Number"></div><div class="Symbol"></div><div class="Type"></div><div class="Volume"></div><div class="Open_date"></div><div class="Close_date"></div><div class="Open_price"></div><div class="Close_price"></div><div class="TakeProfit"></div><div class="StopLoss"></div><div class="Swap"></div><div class="Commission"></div><div class="Profit"></div><div class="SpentBonus"></div><div class="Balance"></div><div class="Type_of_closure"></div></div>',
    e._Templates.OptionDealsTable = '<div class="OptionDealsTable DivTable"></div>',
    e._Templates.OptionDealsContent = '<div class="OptionDealsContent ReportContent"><div class="OptionDealsTableContent ReportTableContent tableContent"></div></div>',
    e._Templates.OptionDealsTableRow = '<div class="OptionDealsTableRow DivTableRow DialogReportTableRow"><div class="Number"></div><div class="Name"></div><div class="SymbolName"></div><div class="Type"></div><div class="Sum"></div><div class="Date"></div><div class="CloseDate"></div><div class="OpenPrice"></div><div class="ClosePrice"></div><div class="Payout"></div><div class="Profit"></div><div class="SpentBonus"></div><div class="Balance"></div></div>',
    e._Templates.OptionDealsTableTotalRow = '<div class="OptionDealsTableRow DivTableRow DialogReportTableRow"><div class="Total"></div></div>',
    e._Templates.OptionDealsTableHeader = '<div class="OptionDealsTableHeader DivTableHeader DialogHeader"><div class="Number"></div><div class="Name"></div><div class="SymbolName"></div><div class="Type"></div><div class="Sum"></div><div class="Date"></div><div class="CloseDate"></div><div class="OpenPrice"></div><div class="ClosePrice"></div><div class="Payout"></div><div class="Profit"></div><div class="SpentBonus"></div><div class="Balance"></div></div>',
    e._Templates.TradePanel = '<div class="WTTradePanel NotMinimize Disabled NotActive"><div class="Type"><div class="Group"></div></div><div class="Content"></div></div>',
    e._Templates.TradePanelMarket = '<div class="MarketOrder"><div class="Volume"></div><div class="Price"><div class="Bid"></div> <div class="Separator">/</div> <div class="Ask"></div></div><div class="Buttons"></div><div class="TP-SL"></div></div>',
    e._Templates.TradePanelPending = '<div class="PendingOrder"><div class="Image"></div><div class="Volume-Price"></div><div class="Buttons"></div><div class="TP-SL"></div></div>',
    e._Templates.TradePanelBinary = '<div class="BinaryOption"><div class="Price"></div><div class="Period"></div><div class="Profit"><div class="Caption"></div><div class="Value"></div></div><div class="CurrentProfit"></div><div class="Borders"><div class="TopBorder"></div> <div class="Separator">/</div> <div class="BottomBorder"></div></div><div class="Buttons"></div></div>',
    e._Templates.InputWithIcons = '<div class="WTInput Icons"><div class="WTInputContentField"><div class="WTInputFieldIcon"></div><div class="WTInputFieldCaption"></div><input class="WTInputField" /><div class="Checker None"><div></div></div></div></div>',
    e._Templates.BPCloseEarlyButton = '<div class="WTButton"><div class="WTButtonImage"></div><div class="WTButtonText"></div><div class="Content"><div class="WTCommission"></div><div class="WTStopLineTime"></div></div></div>',
    e._Templates.AuthModule = '<div class="overlay"><div class="mainContainer"><div class="leftContainer"><div class="logotype"><img /></div><div class="controlButtonsContainer"></div></div><div class="rightContainer"><div class="content"></div></div></div></div>',
    e._Templates.AuthClientErrorContainer = '<div class="errorDialog"><div class="triangle"></div><div class="container"><div class="title"></div><div class="description"></div></div></div>',
    e._Templates.AuthServerErrorContainer = '<div class="serverError"><div class="title"></div><div class="closeButton"></div></div>',
    e._Templates.CandyButton = '<div class="sheath">' + e._Templates.Button + "</div>",
    e.Browser.IsMobile && (e._Templates.MobileDialogConfirmContent = '<div class="DialogConfirmContent"><div class="Info"><div class="WTErrorImg"></div><div class="WTConfirmMessage"></div></div></div><div class="DFooterControls Right"></div>', e._Templates.MobileInputIncrementer = '<div class="inputIncrementer on right-block"><div class="input-control"><div class="down icon-minus"></div><div class="WTInput"><input class="WTInputField" /></div><div class="up icon-plus"></div></div></div>', e._Templates.MobileStopOrderControl = '<div class="stop-order-control"><div class="left-block"><div class="tumbler-block"><div class="line"></div><div class="tumbler"></div></div><div class="caption"></div></div>' + e._Templates.MobileInputIncrementer + "</div>", e._Templates.Dialog = '<div class="WTDialog"><div class="WTDialogContent"></div></div>', e._Templates.DialogConfirm = '<div class="WTDialog"><div class="WTDialogTitle"></div><div class="WTDialogContent"></div></div>', e._Templates.DialogSignInContent = '<div class="DialogSignInContent"><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="DControls"></div>', e._Templates.MobileDialogOpenDemoContent = '<div class="mobileDialogOpenDemoContent"><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="DControls"></div>', e._Templates.DialogOpenDemoControlsContent = '<div class="ODInputs"></div>', e._Templates.Swiper = '<div class="WTSwiper"><div class="WTSwiperContent"></div><div class="WTSwiperTabsBlock"></div></div>', e._Templates.DialogServersSearchContent = '<div class="DControls subScrollingContainer"><div class="HeadPanel"></div></div>', e._Templates.MobileDialogIndicatorSettingsContent = '<div><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="WTDialogContent"></div><div class="Footer"></div></div>', e._Templates.SearchField = '<div class="WTInput Search"><div class="Magnifier"></div><input class="WTInputField" /><div class="ClearCross"></div></div>', e._Templates.MobileTableServers = '<div class="WTMobileTableServers"></div>', e._Templates.MobileTableServersRow = '<div class="WTMobileTableServersRow"><div class="ImgServer"></div><div class="ServerInfo"></div></div>', e._Templates.QuotesPage = '<div class="WTQuotesPage"><div class="HeadPanel"></div></div>', e._Templates.ChartPage = '<div class="WTChartPage"></div>', e._Templates.TradePage = '<div class="WTTradePage"></div>', e._Templates.ReportPage = '<div class="WTReportPage"><div class="HeadPanel"></div><div class="ReportContent"></div></div>', e._Templates.SettingsPage = '<div class="WTSettingsPage"></div>', e._Templates.MobileTableQuotes = '<div class="WTMobileTableQuotes"></div>', e._Templates.MobileTableQuotesRow = '<div class="WTMobileTableQuotesRow"><div class="Direction"></div><div class="SymbolName"></div><div class="Bid"></div><div class="Ask"></div></div>', e._Templates.MobileOnlyOptionsTableQuotesRow = '<div class="WTMobileTableQuotesRow"><div class="Direction"></div><div class="Name"></div><div class="Price"></div><div class="Profit"></div></div>', e._Templates.MobileTableSelectOptions = '<div class="OptionsSettingsList"><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="subScrollingContainer MobileTableSelectOptions"></div></div>', e._Templates.StatusPanel = '<div class="WTStatusPanel"><div class="header"><div class="caption"></div><div class="button"></div></div><div class="container"><div class="status"><div class="equity-and-profit"><div class="equity"><div class="caption"></div><div class="value"></div></div><div class="profit"><div class="caption"></div><div class="value"></div></div></div><div class="balance"><div class="caption"></div><div class="value"></div></div><div class="level"><div class="caption"></div><div class="value"></div></div><div class="margin"><div class="caption"></div><div class="value"></div></div><div class="free"><div class="caption"></div><div class="value"></div></div></div></div></div>', e._Templates.MobileTableTrade = '<div class="WTMobileTableTrade"></div>', e._Templates.MobileTableTradeRow = '<div class="WTMobileTableTradeRow"><div class="image"></div><div class="information"></div><div class="action"></div></div>', e._Templates.MobileInformationRow = '<div class="main-information"><div class="block"><div class="symbol-name"></div><div class="investments"><div class="unit"></div><div class="value"></div></div></div></div><div class="first-price"><div class="value"></div></div><div class="current-price-and-profit"><div class="block"><div class="current-price"><div class="price"></div></div><div class="profit"><div class="char"></div><div class="currency"></div><div class="value"></div></div></div></div>', e._Templates.DialogNewOrderContent = '<div class="DialogNewOrderContent"><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div></div>', e._Templates.MobileInputSelect = '<div class="WTInput Select"><div class="WTInputSelectField"><input type="text" class="WTInputField" /><div class="WTInputLabel"></div><div class="InputSelectButton"><div class="WTInputSelectArrowImg"></div> </div></div></div>', e._Templates.NewOrderCurrentQuote = '<div class="NewOrderCurrentQuote"><div class="Caption"></div><div class="Values"><div class="Bid"></div><div class="Separate">/</div><div class="Ask"></div><div class="Status"></div></div></div>', e._Templates.mobileOperationStatus = '<div class="MobileOperationStatus"></div>', e._Templates.InputNumber = '<div class="WTInputNumberMobile"><div class="Down"></div><div class="WTInputNumberField"><input type="text" class="WTInputField"/></div><div class="WTInputLabel"></div><div class="Up"></div></div>', e._Templates.DialogPendingOrderContent = '<div class="DialogPendingOrderContent"><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div></div>', e._Templates.MobileDialogPendingOrderPageContent = '<div class="PageContent"><div class="Img"></div><div class="Top"></div><div class="VolAndPrice"></div><div class="StopGroup"></div><div class="Button"></div></div>', e._Templates.DialogBinaryOptionContent = '<div class="DialogBinaryOptionContent"><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div></div>', e._Templates.SwiperPendingOrder = '<div class="WTSwiper"><div class="WTPreSwiperContent"></div><div class="WTSwiperTabsBlock"></div><div class="WTSwiperContent"></div></div>', e._Templates.MiniDialog = '<div class="WTDialog Mini"><div class="WTDialogClBtnContainer"></div><div class="WTDialogHeader"></div><div class="WTDialogContent"></div></div>', e._Templates.MiniDialogError = '<div class="WTDialog Mini"><div class="WTDialogTitle"></div><div class="WTDialogContent"></div></div>', e._Templates.MiniDialogModifyPosition = '<div class="WTDialog Mini"><div class="WTDialogClBtnContainer"></div><div class="WTDialogHeader"></div><div class="SymbolName"></div><div class="TPRow"></div><div class="SLRow"></div><div class="WTDialogContent"></div></div>', e._Templates.ModifyPositionCurrentQuote = '<div class="ModifyPositionCurrentQuote"><div class="Caption"></div><div class="Values"><div class="CurrentPrice"></div><div class="Status"></div></div></div>', e._Templates.MiniDialogClosePartially = '<div class="WTDialog Mini"><div class="WTDialogClBtnContainer"></div><div class="WTDialogHeader"></div><div class="SymbolName"></div><div class="WTDialogContent"></div></div>', e._Templates.MobileDialogLoginPassword = '<div class="DialogLoginPasswordContent"><div class="HeadPanel"><div class="dialogLabel"></div></div><div class="DControls"></div>', e._Templates.MobileDialogChangePass = '<div class="DialogChangePassContent"><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="DControls"><div class="PasswordTypePlace"></div></div>', e._Templates.DialogErrorContent = '<div class="DialogErrorContent"><div class="WTErrorMessage"></div><div class="DFooterControls"></div></div>', e._Templates.MobileTableReport = '<div class="WTMobileReportTable"></div>', e._Templates.MobileTableReportTradeRow = '<div class="WTMobileTableReportTradeRow"><div class="image"></div><div class="SymbolName"></div><div class="Open"></div><div class="Close"></div></div>', e._Templates.MobileTableReportDepositRow = '<div class="WTMobileTableReportDepositRow"><div class="Operation"></div><div class="Comment"></div><div class="Profit"></div></div>', e._Templates.MobileTableReportDateRow = '<div class="WTMobileTableReportDateRow"><div class="image"></div><div class="Date"></div></div>', e._Templates.MobileTableReportGroupRow = '<div class="WTMobileTableReportForHideRow"><div class="content"></div></div>', e._Templates.ReportTotals = '<div class="ReportTotals"><div class="TotalProfitRow ResultRow"><div class="TotalProfitRow ResultRow Label"></div><div class="TotalProfitRow ResultRow Value"></div></div><div class="image"></div><div class="ResultHeadPanel"><div class="ResultCaption"></div></div><div class="TotalValues"><div class="OverallProfitRow StatusRow"><div class="TotalProfitRow BorderContainer"></div><div class="OverallProfitLabel Label"></div><div class="OverallProfitValue Value"></div></div><div class="OverallLossRow StatusRow"><div class="TotalProfitRow BorderContainer"></div><div class="OverallLossLabel Label"></div><div class="OverallLossValue Value"></div></div><div class="ProfitFactorRow StatusRow"><div class="TotalProfitRow BorderContainer"></div><div class="ProfitFactorLabel Label"></div><div class="ProfitFactorValue Value"></div></div><div class="OperationExpectationRow StatusRow"><div class="TotalProfitRow BorderContainer"></div><div class="OperationExpectationLabel Label"></div><div class="OperationExpectationValue Value"></div></div><div class="MaxDrawdownRow StatusRow"><div class="TotalProfitRow BorderContainer"></div><div class="MaxDrawdownLabel Label"></div><div class="MaxDrawdownValue Value"></div></div><div class="StatusRow" style="height: 65px"></div></div></div>', e._Templates.ChartContainer = '<div class="ChartContainer"></div>', e._Templates.SettingsPageContent = '<div class="SettingsPageContent"><div class="HeadPanel"></div><div class="SettingsPageRow"><div class="EmptySpace"></div><div class="ConnectRow SettingsRow"><div class="ConnectLabel Label"></div><div class="BorderLine"></div></div></div><div class="SettingsPageRow"><div class="EmptySpace"></div><div class="OpenDemoRow SettingsRow"><div class="OpenDemoLabel Label"></div><div class="BorderLine"></div></div></div><div class="SettingsPageRow"><div class="EmptySpace"></div><div class="ChangePasswordRow SettingsRow"><div class="ChangePasswordLabel Label"></div><div class="BorderLine"></div></div></div><div class="SettingsPageRow"><div class="EmptySpace"></div><div class="AccountInfoRow SettingsRow"><div class="AccountInfoLabel Label"></div><div class="BorderLine"></div></div></div><div class="SettingsPageRow"><div class="EmptySpace"></div><div class="LanguageRow SettingsRow"><div class="LanguageLabel Label"></div><div class="BorderLine"></div></div></div><div class="SettingsPageRow"><div class="EmptySpace"></div><div class="AboutRow SettingsRow"><div class="AboutLabel Label"></div><div class="BorderLine"></div></div></div><div class="SettingsPageRow"><div class="EmptySpace"></div><div class="DisconnectRow SettingsRow"><div class="DisconnectLabel Label"></div></div></div></div>', e._Templates.DialogAccountInfoContent = '<div><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="DPersonalInfoControls"><div class="WTHeadLabel"></div><div class="DInfoBlock"></div></div><div class="DTradeInfoControls"><div class="WTHeadLabel"></div><div class="DInfoBlock"></div></div></div>', e._Templates.DialogChangeLangContent = '<div><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div></div>', e._Templates.MobileChangeLangTable = '<div class="MobileChangeLangTable subScrollingContainer"></div>', e._Templates.MobileChangeLangTableRow = '<div><div class="ActiveLangLabel"></div><div class="LangLabel"></div></div>', e._Templates.DialogAboutContent = '<div><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="Info"><div class="AboutLogo"></div><div class="mainHeader"></div><div class="version"></div><div class="company"></div><div class="companySite"></div><div class="copyrightSite"></div></div><div class="Copyright"></div></div>', e._Templates.MobileTableSelectSymbols = '<div><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div><div class="MobileTableSelectSymbols subScrollingContainer"></div></div>', e._Templates.MobileDialogStartContent = '<div class="MobileDialogStartContent"><div class="CompanyLogoContainer"><div class="CompanyLogo"></div></div><div class="DStartControls"></div></div>', e._Templates.DialogIndicatorsContent = '<div><div class="HeadPanel"><div class="BackBtnPlace"></div><div class="dialogLabel"></div></div></div>', e._Templates.AllIndicatorsPage = "<div><div>", e._Templates.SelectedIndicatorRow = '<div class="SelectedIndicator"><div class="WTButton DeleteIndicator"><div class="WTButtonImage"></div><div class="WTButtonText"></div></div><div class="Title">#IndicatorName</div><div class="WTButton Parameters"><div class="WTButtonImage"></div><div class="WTButtonText"></div></div><div class="ListBorder"></div></div>', e._Templates.MobileTradePanelMarketOrder = '<div class="MobileTradePanel"><div class="Content"></div>', e._Templates.MobileTradePanelOptions = '<div class="MobileTradePanel"><div class="Params"></div><div class="Buttons"></div></div>'),
    e
}),
define("event", ["base"],
function(e) {
    e.Delegate = function(t, i, s) {
        return this instanceof e.Delegate ? (this._Context = t, this._Handler = i, void(this._Args = s)) : new e.Delegate(t, i, s)
    };
    var t = e.Delegate.prototype;
    t.fire = function(e) {
        e = void 0 == e ? {}: e;
        for (var t in this._Args) e[t] = this._Args[t];
        this._Handler.call(this._Context, e)
    },
    t = null,
    e.Event = function() {
        this._Listeners = []
    };
    var i = e.Event.prototype;
    return i.add = function(e) {
        this._Listeners.push({
            Delegate: e
        })
    },
    i.contains = function(t, i) {
        for (var s, n = 0,
        o = this._Listeners.length; n < o; n++) if (s = this._Listeners[n], s.Delegate._Context == t && e.equalsObjects(s.Delegate, i)) return ! 0;
        return ! 1
    },
    i.remove = function(t, i) {
        this._Listeners = this._Listeners.filter(function(s) {
            return s.Delegate._Context != t || !e.equalsObjects(s.Delegate, i)
        })
    },
    i.removeAll = function() {
        this._Listeners = []
    },
    i.fire = function(e) {
        for (var t = 0,
        i = this._Listeners.length; t < i; t++) this._Listeners[t] && this._Listeners[t].Delegate && this._Listeners[t].Delegate.fire && this._Listeners[t].Delegate.fire(e)
    },
    i = null,
    e
}),
define("tooltip", ["event"],
function(e) {
    e.Tooltip = function(t) {
        return this instanceof e.Tooltip ? (this._Node = t.Node || null, this._Content = t.Content || null, this._Class = t.Class || "default", this._Position = t.Position || "", this._Offset = t.Offset || {
            X: 5,
            Y: 5
        },
        this._Tail = t.Tail || !1, this._Key = t.Key, this._Timeout = null, this._TimeoutDuration = 2500, this._Delay = null, this._DelayTimeout = 500, e.LangManager.register(this), void this._render()) : new e.Tooltip(t)
    };
    var t = e.Tooltip.prototype;
    return t._render = function() {
        this._Node && (this._DomNode = this.getDomNode(), this.addCSSClass(this._Class), this._contentNode = this._DomNode.querySelector(".TooltipContent"), this._tailBorderNode = this._DomNode.querySelector(".TailBorder"), this._tailNode = this._DomNode.querySelector(".Tail"), this._bind = {
            mouseenter: this.show.bind(this),
            mouseleave: this.hide.bind(this)
        },
        !this._Content && this._Node && this._Node.title && (this._Content = this._Node.title), this._Content && (e.addEvent(this._Node, "mouseenter", this._bind.mouseenter), e.addEvent(this._Node, "mouseleave", this._bind.mouseleave)), this._onChangeLang(), this._DomNode.style.opacity = "0")
    },
    t.getDomNode = function() {
        var t = this._DomNode || document.querySelector(".WTTooltip");
        return t || (t = e.htmlToDOM('<div class="WTTooltip"><div class="TooltipContent"></div><div class="TailBorder"></div><div class="Tail"></div></div>')),
        t
    },
    t.addCSSClass = function(t) {
        e.addCSSClass(this._DomNode, t)
    },
    t.setContent = function(e) {
        this._Content = e,
        this._contentNode.innerHTML = this._Content
    },
    t.refreshPosition = function(t) {
        var i, s = {
            X: 0,
            Y: 0
        },
        n = {
            X: 0,
            Y: 0
        },
        o = {
            X: 0,
            Y: 0
        },
        a = this._Node.getBoundingClientRect(),
        r = this._DomNode.getBoundingClientRect(),
        l = {
            X: this._Offset.X,
            Y: this._Offset.Y
        };
        switch (this._Position) {
        case "Top":
            o.Y = a.top - r.height - this._Offset.Y - (this._Tail ? 10 : 0),
            o.X = a.left + this._Offset.X - 8,
            i = "Top",
            s.Y = o.Y + r.height - 2,
            n.Y = s.Y + 2,
            n.X = s.X = o.X + 8;
            break;
        case "TopLeft":
            o.Y = a.top - r.height - this._Offset.Y - (this._Tail ? 10 : 0),
            o.X = a.left - r.height - this._Offset.X + 20,
            i = "Top",
            s.Y = o.Y + r.height - 2,
            n.Y = s.Y + 2,
            n.X = s.X = o.X + r.height - 24;
            break;
        case "TopRight":
            o.Y = a.top - r.height - this._Offset.Y - (this._Tail ? 10 : 0),
            o.X = a.left + a.width + this._Offset.X - 28,
            i = "Top",
            s.Y = o.Y + r.height - 2,
            n.Y = s.Y + 2,
            n.X = s.X = o.X + 8;
            break;
        case "Left":
            o.Y = a.top + this._Offset.Y,
            o.X = a.left - r.width - this._Offset.X - (this._Tail ? 10 : 0),
            i = "Left",
            s.X = o.X + r.width - 2,
            n.X = s.X + 2,
            s.Y = n.Y = o.Y + 2;
            break;
        case "Right":
            o.Y = a.top + this._Offset.Y,
            o.X = a.left + a.width + this._Offset.X + (this._Tail ? 10 : 0),
            i = "Right",
            s.Y = n.Y = o.Y + 2,
            s.X = o.X - 18,
            n.X = s.X - 2;
            break;
        case "BottomLeft":
            o.Y = a.top + a.height + this._Offset.Y + (this._Tail ? 10 : 0),
            o.X = a.left - r.width - this._Offset.X + 20,
            i = "Bottom",
            s.Y = o.Y - 19,
            n.Y = s.Y - 2,
            n.X = s.X = o.X + r.width - 24;
            break;
        case "BottomRight":
            o.Y = a.top + a.height + this._Offset.Y + (this._Tail ? 10 : 0),
            o.X = a.left + a.width + this._Offset.X - 20,
            i = "Bottom",
            s.Y = o.Y - 19,
            n.Y = s.Y - 2;
            break;
        default:
            o.Y = a.top + a.height + l.Y + (this._Tail ? 10 : 0),
            o.X = t ? t.clientX: a.left + this._Offset.X,
            i = "Bottom",
            s.Y = o.Y - 19,
            n.Y = s.Y - 2
        }
        this._Tail ? (e.addCSSClass(this._tailBorderNode, i), e.addCSSClass(this._tailNode, i), this._tailBorderNode.style.top = n.Y + "px", this._tailNode.style.top = s.Y + "px", this._tailBorderNode.style.left = n.X + "px", this._tailNode.style.left = s.X + "px") : (this._tailBorderNode.style.display = "none", this._tailNode.style.display = "none"),
        this._DomNode.style.left = o.X + "px",
        this._DomNode.style.top = o.Y + "px"
    },
    t.show = function(e) {
        var t = this,
        i = t.getDomNode();
        t._Delay = setTimeout(function() {
            if (t._contentNode && t._Content && (t._contentNode.innerHTML = t._Content), t._Node.parentNode) {
                var s = document.getElementsByTagName("body")[0];
                s.insertBefore(i, s.firstChild),
                i.style.display = "block",
                t.refreshPosition(e),
                i.style.opacity = "1"
            }
            t._Timeout = setTimeout(function() {
                t.hide()
            },
            t._TimeoutDuration)
        },
        t._DelayTimeout)
    },
    t.hide = function() {
        var e = this,
        t = e.getDomNode();
        t.style.opacity = "0",
        clearInterval(e._Delay),
        setTimeout(function() {
            t.style.display = "none",
            null != e._Timeout && clearInterval(e._Timeout)
        },
        250)
    },
    t.remove = function() {
        e.removeEvent(this._Node, "mouseenter", this._bind.mouseenter),
        e.removeEvent(this._Node, "mouseleave", this._bind.mouseleave)
    },
    t._onChangeLang = function() {
        var t = e.LangManager.getStringByKey(this._Key);
        t && this._contentNode && this._Content && (this._Content = t)
    },
    t = null,
    e
}),
define("imageList", ["base", "userSettings"],
function(e) {
    e.ImageList = function(e) {
        this._ImageUrl = e.ImageUrl || "",
        this._IconWidth = e.IconWidth || 0,
        this._IconHeight = e.IconHeight || 0,
        this._Step = e.Step || 0
    };
    var t = e.ImageList.prototype;
    switch (t.getIcon = function(e, t) {
        return (parseInt(e) > -1 || parseInt(t) > -1) && this._IconHeight > -1 && this._IconWidth > -1 && this._ImageUrl ? ((!e || e < 0) && (e = 0), (!t || t < 0) && (t = 0), "-" + t * this._Step + "px -" + e * this._Step + "px") : ""
    },
    t.toBackground = function(e, t, i) {
        e.style.width = this._IconWidth + "px",
        e.style.height = this._IconHeight + "px",
        e.style.backgroundImage = "url(" + this._ImageUrl + ")",
        void 0 == t && void 0 == i || (e.style.backgroundPosition = this.getIcon(t, i))
    },
    t.setImageUrl = function(e) {
        this._ImageUrl = e
    },
    t = null, e.MainImageList = new e.ImageList({
        ImageUrl: "./res/img/main_sprite16x16.png",
        IconWidth: 16,
        IconHeight: 16,
        Step: 16
    }), e.IconSVGList = new e.ImageList({
        ImageUrl: "./res/img/DarkImg/icon_dark_20.svg",
        ImageUrl: "",
        IconWidth: 20,
        IconHeight: 20,
        Step: 40
    }), e.MenuIconSVGList = new e.ImageList({
        ImageUrl: "./res/img/DarkImg/icon_dark_16.svg",
        ImageUrl: "",
        IconWidth: 16,
        IconHeight: 16,
        Step: 32
    }), e.UserSettings.Terminal.ColorScheme) {
    case "black_color_scheme":
        e.IconSVGList.setImageUrl("./res/img/DarkImg/icon_dark_20.svg?v=" + terminalVersion),
        e.MenuIconSVGList.setImageUrl("./res/img/DarkImg/icon_dark_16.svg?v=" + terminalVersion);
        break;
    case "beige_color_scheme":
        e.IconSVGList.setImageUrl("./res/img/icon.svg?v=" + terminalVersion),
        e.MenuIconSVGList.setImageUrl("./res/img/icon_menu.svg?v=" + terminalVersion);
        break;
    default:
        e.IconSVGList.setImageUrl("./res/img/DarkImg/icon_dark_20.svg?v=" + terminalVersion),
        e.MenuIconSVGList.setImageUrl("./res/img/DarkImg/icon_dark_16.svg?v=" + terminalVersion)
    }
    return e
}),
define("control", ["templates", "tooltip", "imageList"],
function(e) {
    e.BaseControl = function(t) {
        this._ParentNode = this._ParentNode || null,
        this._Width = this._Width || 0,
        this._Height = this._Height || 0,
        this._Class = this._Class || "",
        this._Tooltip = this._Tooltip || "",
        this._Template = this._Template || "",
        this._ImageList = this._ImageList || null,
        this._ImageListRow = this._ImageListRow || 0,
        this._ImageListCol = this._ImageListCol || 0,
        this._Id = this._Id || "",
        this._Key = this._Key || "",
        this._TooltipKey = this._TooltipKey || "",
        this._TooltipPosition = "",
        this._TooltipOffset = {
            X: 5,
            Y: 5
        },
        this._Enabled = this._Enabled !== !1,
        this._registerToLangManager = this._registerToLangManager || !1,
        this._binds = {},
        this._initSettings(t),
        this._render(),
        this.addToNode(this._ParentNode),
        this._registerToLangManager && e.LangManager.register(this)
    };
    var t = e.BaseControl.prototype;
    return t._onChangeLang = function() {},
    t._initSettings = function(t) {
        if (t) for (var i in t) void 0 !== this["_" + i] && (this["_" + i] = t[i]),
        void 0 !== this[i] && (this[i] instanceof e.Event ? this[i].add(t[i]) : this[i] = t[i])
    },
    t._defineEvents = function(t) {
        for (var i = 0,
        s = t.length; i < s; i++) this[t[i]] = new e.Event
    },
    t._render = function() {
        this._DomNode = e.htmlToDOM(this._Template || "<div></div>"),
        this.addCSSClass(this._Class),
        this.setWidth(this._Width),
        this.setHeight(this._Height),
        this.setTooltip(this._Tooltip),
        this.setEnabled(this._Enabled)
    },
    t.setEnabled = function(e) {
        this._Enabled = !!e,
        this._Enabled ? this.removeCSSClass("Disabled") : this.addCSSClass("Disabled")
    },
    t.addToNode = function(e) {
        this._ParentNode = e,
        this._ParentNode && this._DomNode && this._ParentNode.appendChild(this._DomNode)
    },
    t.setKeyAndRefreshText = function(t) {
        this._Key = t,
        this.setText(this._Key ? e.LangManager.getStringByKey(this._Key) : this._Text)
    },
    t.addCSSClass = function(t) {
        var i = this._DomNode; ! i && this._TabButton && (i = this._TabButton._DomNode),
        i && e.addCSSClass(this._DomNode || this._TabButton._DomNode, t)
    },
    t.removeCSSClass = function(t) {
        var i = this._DomNode; ! i && this._TabButton && (i = this._TabButton._DomNode),
        i && e.removeCSSClass(this._DomNode || this._TabButton._DomNode, t)
    },
    t.setTooltip = function(t) {
        this._Tooltip = t,
        this._tooltipObj && this._tooltipObj instanceof e.Tooltip ? this._Tooltip ? this._tooltipObj.setContent(this._Tooltip) : (this._tooltipObj.remove(), this._tooltipObj = null) : this._Tooltip && (this._tooltipObj = e.Tooltip({
            Node: this._DomNode,
            Content: this._Tooltip,
            Key: this._TooltipKey,
            Position: this._TooltipPosition,
            Offset: this._TooltipOffset
        }))
    },
    t.includeClass = function(e) {
        if (e) {
            var t = this._Class,
            i = new RegExp(e, "i"),
            s = t.search(i);
            s !== -1 && (this._Class += " " + e)
        }
    },
    t.excludeClass = function(e) {
        if (e) {
            var t = this._Class,
            i = new RegExp(e, "i"),
            s = t.search(i);
            s !== -1 && (0 === s ? this._Class = t.replace(e, "") : this._Class = t.replace(" " + e, ""))
        }
    },
    t.getWidth = function() {
        return this._Width
    },
    t.getHeight = function() {
        return this._Height
    },
    t.getDomNode = function() {
        return this._DomNode
    },
    t.setWidth = function(t) {
        this._widthUnit = "px",
        "string" == typeof t && t.indexOf("%") ? (this._Width = Math.max(0, parseInt(t)), this._widthUnit = "%") : this._Width = Math.min(Math.max(0, t), e.DisplaySize.getWidth()),
        this._DomNode && (this._DomNode.style.width = this._Width ? this._Width + this._widthUnit: "")
    },
    t.setHeight = function(t) {
        this._heightUnit = "px",
        "string" == typeof t && t.indexOf("%") ? (this._Height = Math.max(0, parseInt(t)), this._heightUnit = "%") : this._Height = Math.min(Math.max(t, 0), e.DisplaySize.getHeight()),
        this._DomNode && (this._DomNode.style.height = this._Height ? this._Height + this._heightUnit: "")
    },
    t.getId = function() {
        return this._Id
    },
    t.removeFromDom = function() {
        this._DomNode && this._DomNode.parentNode && this._DomNode.parentNode.removeChild(this._DomNode)
    },
    t.setVisible = function(t) { ! t || this.investorModeDependency && e.investorAccount ? this._DomNode.style.display = "none": this._DomNode.style.display = ""
    },
    t.getParentNode = function() {
        return this._ParentNode
    },
    t.unregister = function() {
        e.Socket.unRegister(this),
        e.LangManager.unRegister(this),
        e.TraderData.unRegister(this),
        e.OptionsSettings.unRegister(this),
        e.SymbolsData.unRegister(this),
        e.Resizer.unRegister(this),
        e._menuMasterObject.unRegister(this)
    },
    t = null,
    e
}),
define("menu", ["control"],
function(e) {
    e.Menu = function(t) {
        this._Items = [],
        this._IsOpen = !1,
        this._Scrollable = !1,
        this._X = this._Y = 0,
        this._IsSingle = !0,
        this._WithBlock = !0,
        this._MenuSource = null,
        this._Template = e._Templates.Menu,
        this._CheckedType = "Unique",
        this._CustomScrollEnabled = !1,
        this._ParentObject = null,
        this._ArtificialMenuScroll = !1,
        this.moving = !1,
        this._defineEvents(["ItemClick", "ItemCheckedChanged", "Opened", "Closed", "BeforeOpen"]),
        e.Menu.base.constructor.apply(this, arguments),
        e._menuMasterObject.register(this),
        this._clildMenuMasterObject = new e._menuMaster
    },
    e.initClass(e.Menu, e.BaseControl);
    var t = e.Menu.prototype;
    t._render = function() {
        if (e.Menu.base._render.apply(this, arguments), 1 == this._CustomScrollEnabled) {
            this.getDomNode().className += " scrollable";
            var t = document.createElement("div");
            t.className = "scroller-content-wrapper";
            var i = document.createElement("div");
            i.className = "scroller-content",
            t.appendChild(i),
            this.getDomNode().appendChild(t)
        }
        var s, n;
        for (s = 0; s < this._Items.length; s++) n = this._Items[s],
        n instanceof e.MenuItem ? (n.setParentMenu(this), n.setSeparator(n._Separator)) : (n.ParentMenu = this, n = new e.MenuItem(n), this._Items[s] = n),
        n.Click.removeAll(),
        n.CheckedChanged.removeAll(),
        n.Click.add(e.Delegate(this, this._onItemClick, {
            Item: n
        })),
        n.CheckedChanged.add(e.Delegate(this, this._onItemCheckedChanged, {
            Item: n
        }));
        this.attachTapEvents(),
        this._IsOpen && this.show(this._X, this._Y)
    },
    t.attachTapEvents = function() {
        var t = e.Browser;
        if (t.IsMobile || t.IsTablet) {
            var i = this.getDomNode();
            i.addEventListener("touchstart", this.touchstart.bind(this), !0),
            i.addEventListener("touchmove", this.touchmove.bind(this), !0),
            i.addEventListener("touchend", this.touchend.bind(this))
        }
    },
    t.iosTouchFixes = function(e, t) {
        var i = this.getDomNode(),
        s = i.scrollHeight - i.offsetHeight,
        n = e.touches[0].screenY - t,
        o = e.currentTarget.classList.contains("scrollable");
        i.scrollTop >= s && n < 0 ? (i.scrollTop = s - 1, e.preventDefault(), o || e.stopPropagation()) : i.scrollTop <= 0 && n > 0 && (i.scrollTop = 1, e.preventDefault(), o || e.stopPropagation())
    },
    t.touchstart = function(e) {
        this.diffObject = {
            start: e.touches[0].screenY
        },
        this.moving = !1
    },
    t.touchmove = function(e) {
        var t = 15,
        i = this.diffObject;
        if (i) {
            var s = Math.abs(i.start - e.touches[0].screenY);
            s >= t && (this.moving = !0)
        }
        this.iosTouchFixes(e, i.start),
        this.diffObject = i
    },
    t.touchend = function(e) {
        this.diffObject.start = 0,
        this.moving = !1
    },
    t.updateMenuItems = function() {
        var t, i;
        for (t = 0; t < this._Items.length; t++) i = this._Items[t],
        i instanceof e.MenuItem ? i.setParentMenu(this) : (i.ParentMenu = this, i = new e.MenuItem(i), this._Items[t] = i),
        i.Click.add(e.Delegate(this, this._onItemClick, {
            Item: i
        })),
        i.CheckedChanged.add(e.Delegate(this, this._onItemCheckedChanged, {
            Item: i
        }))
    },
    t.copyMenuItem = function(e) {
        return {
            Text: e.getText(),
            Id: e.getID(),
            Data: e.getData()
        }
    },
    t.clear = function() {
        this.closeMenuItems(),
        this._Items.forEach(function(e) {
            e.removeFromDom()
        }),
        this._Items = []
    },
    t._initBlock = function() {
        this._block = e._menuMasterObject.getBlockscreen(),
        this._block.style.display = this._WithBlock ? "inline": "none"
    },
    t._initWin = function() {
        var e = this._getMenusContainer();
        e.appendChild(this._DomNode),
        this._DomNode.style.display = "inline-block"
    },
    t._getMenusContainer = function() {
        var e = document.getElementById("WTMenusContainer");
        e || (e = document.createElement("div"), e.id = "WTMenusContainer");
        var t = document.getElementsByTagName("body")[0];
        return e.parentNode != t && t.appendChild(e),
        e
    },
    t.show = function(t, i) {
        var s = this.getDomNode();
        this.BeforeOpen.fire({
            sender: this
        }),
        this._initWin(),
        this._X = e.valueIsEmpty(t) ? this._X: t,
        this._Y = e.valueIsEmpty(i) ? this._Y: i,
        e.Browser.IsMobile ? this.tuneHeight(t, i) : this._initScroll(t, i),
        s.style.left = this._X + "px",
        s.style.top = this._Y + "px",
        this._IsOpen = !0,
        e._menuMasterObject.menuShow(this);
        var n = s.querySelector(".WTMenuLeftIconsBackground");
        n && (n.style.height = s.getBoundingClientRect().height - 8 + "px"),
        this._CustomScrollEnabled && !this.customScroller && (this.customScroller = new customScroller(this.getDomNode(), !0), this.customScroller.update()),
        this.Opened.fire(),
        s.classList.add("Animate"),
        s.classList.add("FadeIn")
    },
    t.tuneHeight = function(t, i) {
        var i = i || this._Y;
        if (this._DomNode) {
            if (this._DomNode.style.maxHeight = "", i > e.getAppHeight() - this._DomNode.offsetHeight) {
                if (this._ParentObject instanceof e.InputSelect) {
                    var s, n = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop,
                    o = document.documentElement.scrollHeight;
                    return s = n + e.getAppHeight() > o ? o - i - 20 : e.getAppHeight() - (i - n) - 20,
                    void(this._DomNode.style.maxHeight = (s > 0 ? s: 0) + "px")
                }
                this._Y - this._DomNode.offsetHeight < 0 ? this._Y = 0 : this.haveParentMenu() ? this._Y = 0 : this._Y -= this._DomNode.offsetHeight,
                this._DomNode.style.maxHeight = window.innerHeight - this._Y - 20 + "px"
            }
            t - 4 > document.documentElement.clientWidth - this._DomNode.offsetWidth && (this._MenuSource instanceof e.MenuItem ? this._X -= this._MenuSource._ParentMenu._DomNode.offsetWidth + this._DomNode.offsetWidth + 5 : this._X -= this._DomNode.offsetWidth),
            this._X < 0 && (this._X = 0)
        }
    },
    t.setParentObject = function(e) {
        this._ParentObject = e
    },
    t._hideMenu = function() {
        var t = this.getDomNode();
        if (this._IsOpen) {
            t.style.display = "none",
            this.unhoverAll(),
            this.closeMenuItems();
            var i = document.getElementById("upArrow"),
            s = document.getElementById("downArrow");
            1 == this._Scrollable && null != i && null != s && (i.style.display = "none", s.style.display = "none"),
            this._IsOpen = !1,
            e._menuMasterObject.menuHide(),
            this._CustomScrollEnabled && this.customScroller && (this.customScroller.removeEvents(), this.customScroller.scroller.parentNode.removeChild(this.customScroller.scroller), this.customScroller = null),
            this.Closed.fire(this),
            this._ParentObject && this._ParentObject instanceof e.Input && this._ParentObject.Closed && this._ParentObject.Closed.fire({})
        }
        if (t) {
            var n = (t || {}).parentNode;
            n && n.removeChild(t),
            t.classList.remove("Animate"),
            t.classList.remove("FadeIn")
        }
    },
    t.closeMenuItems = function() {
        for (var e = this.getItems(), t = 0; t < e.length; t++) {
            var i = e[t];
            if (i._IsOpen) {
                var s = i.getMenu();
                s && s.hide()
            }
        }
    },
    t.hide = function() {
        this._hideMenu()
    },
    t.haveParentMenu = function() {
        return this._MenuSource instanceof e.Menu
    },
    t._initScroll = function(t, i) {
        var s = document.getElementById("upArrow");
        s || (s = document.createElement("div"), s.id = "upArrow");
        var n = document.getElementById("downArrow");
        if (n || (n = document.createElement("div"), n.id = "downArrow"), t - 4 > document.body.clientWidth - this._DomNode.offsetWidth && (this._MenuSource instanceof e.MenuItem ? this._X -= this._MenuSource._ParentMenu._DomNode.offsetWidth + this._DomNode.offsetWidth + 5 : this._X -= this._DomNode.offsetWidth), this._X < 0 && (this._X = 0), this._DomNode.offsetHeight > window.innerHeight) {
            this._Scrollable = !0;
            var o = document.getElementsByClassName("WTMenu").length,
            a = document.getElementsByClassName("WTMenu")[o - 1],
            r = e.Browser.IsMobile ? 2 : 0;
            s.style.height = "25px",
            s.style.top = "0px",
            s.style.left = this._X + "px",
            s.style.width = this._DomNode.offsetWidth - r + "px",
            s.style.display = "block",
            s.innerHTML = "<img src='./res/img/arrow_black_up.png'>";
            var l = document.getElementsByTagName("body")[0];
            l.appendChild(s),
            e.addEvent(s, "click",
            function(e) {
                e.stopPropagation();
                var t = n.childNodes[0],
                i = s.childNodes[0];
                parseInt(a.style.top) < s.offsetHeight && (a.style.top = parseInt(a.style.top) + parseInt(a.childNodes[1].style.height) + "px", t.style.opacity = 1, parseInt(a.style.top) > parseInt(s.style.top) + s.offsetHeight ? (a.style.top = s.offsetHeight + "px", i.style.opacity = .25) : i.style.opacity = 1)
            },
            !0),
            window.WT_Device.tablet() && e.addEvent(s, "touchstart",
            function(e) {
                e.stopPropagation()
            }),
            n.style.height = "25px",
            n.style.top = window.innerHeight - parseInt(n.style.height) + "px",
            n.style.left = this._X + "px",
            n.style.width = this._DomNode.offsetWidth - r + "px",
            n.style.display = "block",
            n.innerHTML = "<img src='./res/img/arrow_black_down.png'>";
            var l = document.getElementsByTagName("body")[0];
            l.appendChild(n),
            e.addEvent(n, "click",
            function(e) {
                e.stopPropagation();
                var t = n.childNodes[0],
                i = s.childNodes[0];
                parseInt(a.style.top) + a.offsetHeight > window.innerHeight - n.offsetHeight && (a.style.top = parseInt(a.style.top) - parseInt(a.childNodes[1].style.height) + "px", i.style.opacity = 1, parseInt(a.style.top) + a.offsetHeight < parseInt(n.style.top) ? (a.style.top = parseInt(n.style.top) - a.offsetHeight + "px", t.style.opacity = .25) : t.style.opacity = 1)
            },
            !0),
            window.WT_Device.tablet() && e.addEvent(n, "touchstart",
            function(e) {
                e.stopPropagation()
            }),
            a.style.borderTop = "0px",
            this._Y = s.offsetHeight
        } else i > window.innerHeight - this._DomNode.offsetHeight && (this._Y - this._DomNode.offsetHeight < 0 ? this._Y = 0 : this._Y -= this._DomNode.offsetHeight - (this.haveParentMenu() ? 30 : 0))
    },
    t.uncheckAll = function() {
        for (var e = 0; e < this._Items.length; e++) null !== this._Items[e].getMenu() ? this._Items[e]._Menu.uncheckAll() : this._Items[e].setChecked(!1)
    },
    t.unhoverAll = function() {
        for (var e = 0; e < this._Items.length; e++) this._Items[e].setHovered(!1)
    },
    t.hideAllChilds = function(e, t) {
        for (var i = e.getItems(), s = i.length, n = 0; n < s; n++) {
            var o = i[n],
            a = o.getMenu();
            t === o && 1 == t.Opened() || null != a && (a.hide(), t !== o && o.setOpen(!1), this.hideAllChilds(a, t))
        }
    },
    t.getDomNode = function() {
        return this._DomNode
    },
    t.getItemByKey = function(e) {
        for (var t = null,
        i = this._Items,
        s = i.length,
        n = 0; n < s; ++n) if (t = i[n], t.getKey() === e) return t;
        return null
    },
    t.getItem = function(e) {
        return this._Items[e]
    },
    t.getItemById = function(t) {
        for (var i = 0; i < this._Items.length; i++) {
            var s = this._Items[i] instanceof e.MenuItem ? this._Items[i].getID() : this._Items[i].Id;
            if (s == t) return this._Items[i];
            var n = this._Items[i] instanceof e.MenuItem ? this._Items[i].getMenu() : this._Items[i].Menu;
            if (n) {
                var o = n.getItemById(t);
                if (null != o) return o
            }
        }
        return null
    },
    t.getItemIndexByData = function(e) {
        for (var t = 0; t < this._Items.length; t++) if (null !== this._Items[t].getMenu()) {
            var i = this._Items[t].getMenu().getItemIndexByData(e);
            if (i > -1) return i
        } else if (this._Items[t]._Data == e) return t;
        return - 1
    },
    t.getItemByData = function(e) {
        for (var t = 0; t < this._Items.length; t++) if (null !== this._Items[t].getMenu()) {
            var i = this._Items[t].getMenu().getItemByData(e);
            if (null != i) return i
        } else if (this._Items[t]._Data == e) return this._Items[t];
        return null
    },
    t.getMenuSource = function() {
        return this._MenuSource
    },
    t.setMenuSource = function(e) {
        this._MenuSource = e
    },
    t.getItems = function() {
        return this._Items
    },
    t.getIsSingle = function() {
        return this._IsSingle
    },
    t.setIsSingle = function(e) {
        this._IsSingle = !!e
    },
    t.getIsOpen = function() {
        return this._IsOpen
    },
    t.isBlocked = function() {
        return this._WithBlock
    },
    t._onItemClick = function(e) {
        this.ItemClick.fire(e)
    },
    t._onItemCheckedChanged = function(e) {
        this.ItemCheckedChanged.fire(e)
    },
    t.getCheckedType = function() {
        return this._CheckedType
    },
    t.setCheckedType = function(e) {
        this._CheckedType = !!e
    },
    t.setItems = function(e) {
        this._Items = e
    },
    t.getIsArtificialMenuScroll = function() {
        return this._ArtificialMenuScroll
    },
    t.reRender = function() {
        var e = document.getElementById("upArrow");
        e && e.parentNode.removeChild(e);
        var e = document.getElementById("downArrow");
        e && e.parentNode.removeChild(e),
        this._render()
    },
    t.unregisterItems = function() {
        var e = this._Items;
        e && 0 !== e.length && e.forEach(function(e) {
            e.unregister && e.unregister()
        })
    },
    t.addItem = function(e, t) {
        this._Items.splice(t, 0, e),
        this.reRender()
    },
    t.deleteItem = function(e) {
        var t = this._Items.indexOf(e);
        t > -1 && null != e && void 0 != e && (this._Items.splice(t, 1), this.reRender())
    },
    t.unregister = function() {
        this.unregisterItems(),
        e.Menu.base.unregister.apply(this, arguments)
    },
    t = null,
    e.MenuItem = function(t) {
        this._Text = "",
        this._Height = e.Browser.IsMobile ? 48 : 30,
        this._ImageUrl = "",
        this._Checked = !1,
        this._ParentMenu = null,
        this._Menu = null,
        this._HotkeyText = "",
        this._Enabled = !0,
        this._Visible = !0,
        this._Separator = !1,
        this._Key = "",
        this._DisableChecked = !1,
        this._Link = null,
        this._WebOfficePage = !1,
        this._Translations = {},
        this._Template = e._Templates.MenuItem,
        this._IsOpen = !1,
        this._Data = null,
        this._defineEvents(["Click", "CheckedChanged"]),
        e.MenuItem.base.constructor.apply(this, arguments),
        e.ColorThemeChanger.register(this)
    },
    e.initClass(e.MenuItem, e.BaseControl);
    var i = e.MenuItem.prototype;
    return i.getParentMenu = function() {
        return this._ParentMenu
    },
    i._initSettings = function(t) {
        e.MenuItem.base._initSettings.apply(this, arguments),
        !this._ParentNode && this._ParentMenu && (1 == this._ParentMenu._CustomScrollEnabled ? this._ParentNode = this._ParentMenu.getDomNode().querySelector(".scroller-content") : this._ParentNode = this._ParentMenu.getDomNode()),
        this._registerToLangManager = !0,
        this._Text = this._Key ? e.LangManager.getStringByKey(this._Key) || this._Text: this._Text
    },
    i._render = function() {
        e.MenuItem.base._render.apply(this, arguments),
        this.setText(this._Text),
        this.setMenu(this._Menu),
        this.setHotkeyText(this._HotkeyText),
        this.setChecked(this._Checked),
        this.setImageUrl(this._ImageUrl),
        this.setImageList(this._ImageList),
        this.setEnabled(this._Enabled),
        this.setSeparator(this._Separator),
        this.setVisible(this._Visible),
        this.initEvents()
    },
    i.initEvents = function() {
        this._Enabled && (e.Browser.IsMobile || e.Browser.IsTablet ? (e.Browser.IsTablet || e.Browser.IsMobile) && (e.addEvent(this._DomNode, "touchstart",
        function(t) {
            e.Browser.IsTablet && t.stopPropagation(),
            this.setHovered(!0),
            this.startTouchY = t.targetTouches[0].screenY
        }.bind(this)), e.addEvent(this._DomNode, "touchmove",
        function(e) {
            window.WT_Device.ipad() && e.preventDefault()
        }.bind(this)), e.addEvent(this._DomNode, "touchend",
        function(e) {
            this.setHovered(!1),
            this._ParentMenu.moving || (e.preventDefault(), this._onMouseEnter(e), this._Menu || (this._ParentMenu.hide(), this._onClicked(e), this.setHovered(!1)))
        }.bind(this)), e.Browser.IsTablet && "Safari" === e.Browser.Browser && e.addEvent(this._DomNode, "touchstart",
        function(e) {
            e.stopPropagation()
        })) : (e.addEvent(this._DomNode, "mouseenter", this._onMouseEnter.bind(this)), e.addEvent(this._DomNode, "click", this._onClicked.bind(this))))
    },
    i._iosTouchFixes = function(t) {
        var i = this._DomNode.parentNode.scrollHeight - this._DomNode.parentNode.offsetHeight,
        s = t.targetTouches[0].screenY - this.startTouchY;
        this._ParentMenu.getIsArtificialMenuScroll() && e.Browser.IsMobile && (t.preventDefault(), t.stopPropagation(), this._ParentMenu.getDomNode().scrollTop = this._ParentMenu.getDomNode().scrollTop - s, this.startTouchY = t.targetTouches[0].screenY),
        this._DomNode.parentNode.scrollTop >= i && s < 0 ? (t.preventDefault(), t.stopPropagation(), this._DomNode.parentNode.scrollTop = i - 1) : this._DomNode.parentNode.scrollTop <= 0 && s > 0 && (t.preventDefault(), t.stopPropagation(), this._DomNode.parentNode.scrollTop = 1)
    },
    i.setSeparator = function(t) {
        t && this._ParentMenu.getDomNode().appendChild(e.getHorisontalSeparator(this._ParentMenu._Width))
    },
    i.setEnabled = function(t) {
        this._Enabled = !!t,
        !t || this.investorModeDependency && e.investorAccount ? this.addCSSClass("Disabled") : this.removeCSSClass("Disabled")
    },
    i.setVisible = function(t) {
        this._Visible = !!t,
        !t || this.investorModeDependency && e.investorAccount ? this._DomNode.style.display = "none": this._DomNode.style.display = ""
    },
    i.setParentMenu = function(e) {
        this._ParentMenu = e,
        1 == e._CustomScrollEnabled ? this.addToNode(e.getDomNode().querySelector(".scroller-content")) : this.addToNode(e.getDomNode())
    },
    i.setImageUrl = function(e) {
        this._ImageUrl = e;
        var t = this._getImgNode();
        t.style.backgroundImage = this._ImageUrl ? 'url("' + this._ImageUrl + '")': "";
    },
    i.setImageList = function(t) {
        t instanceof e.ImageList && (this._ImageList = t, this._ImageList.toBackground(this._getImgNode(), this._ImageListRow, this._ImageListCol))
    },
    i._onColorThemeChanged = function(t) {
        if (this._ImageList && this._ImageList != e.MainImageList) {
            if (40 == this._ImageList._Step) return void this.setImageList(e.IconSVGList);
            this.setImageList(e.MenuIconSVGList)
        }
    },
    i._getImgNode = function() {
        return this._imgNode || (this._imgNode = e.htmlToDOM("<div></div>"), this._imgContainer = this._imgContainer || this._DomNode.querySelector(".WTMItemImg"), this._imgContainer && this._imgContainer.appendChild(this._imgNode)),
        this._imgNode
    },
    i.setText = function(e) {
        this._Text = e || "",
        this._textNode = this._textNode || this._DomNode.querySelector(".WTMItemTxt"),
        this._textNode && (this._textNode.innerHTML = this._Text)
    },
    i.getText = function() {
        return this._Text
    },
    i.getID = function() {
        return this._Id
    },
    i._onMouseEnter = function(e) {
        this._ParentMenu.hideAllChilds(this._ParentMenu, this),
        this._ParentMenu.unhoverAll(),
        this.setHovered(!0),
        this._showMenu()
    },
    i._showMenu = function() {
        if (e.Browser.IsMobile) {
            if (1 == this._IsOpen) return void(this._IsOpen = !1);
            this._Menu && 0 == this._IsOpen && (this._IsOpen = !0)
        } else {
            if (this._IsOpen) return;
            this._IsOpen = !0
        }
        if (this._Menu) {
            var t = this.getDomNode(),
            i = t.offsetParent.offsetLeft + t.offsetLeft + t.offsetWidth + 2,
            s = t.offsetParent.offsetTop + t.offsetTop;
            this._Menu.show(i, s)
        }
    },
    i._onClicked = function(t) {
        if (this._Menu) return void t.stopPropagation();
        if (this._Enabled) {
            var i = this._ParentMenu.getCheckedType();
            "NoChecked" == i || this._DisableChecked || null != this._Menu || this.setChecked("Multi" != i || !this._Checked, !0),
            this._ParentMenu && this._ParentMenu._MenuSource && this._ParentMenu._MenuSource._ParentMenu && e.Browser.IsMobile && this._ParentMenu.hideAllChilds(this._ParentMenu._MenuSource._ParentMenu, null),
            this.Click.fire(t)
        }
    },
    i.setMenu = function(t) {
        t ? (this._Menu = t instanceof e.Menu ? t: new e.Menu(t), this._Menu.setMenuSource(this), this._Menu.setIsSingle(!1), this.addCSSClass("WithMenu")) : (this.removeCSSClass("WithMenu"), this._Menu = null)
    },
    i.setOpen = function(t) {
        t = !!e.valueIsEmpty(t) || !!t,
        this._IsOpen = t
    },
    i.Opened = function() {
        return this._IsOpen
    },
    i.getMenu = function() {
        return this._Menu
    },
    i.setHotkeyText = function(e) {
        if (null != e && "" != e) {
            var t = this._DomNode.getElementsByClassName("Hotkey")[0];
            t.innerHTML = e,
            this.addCSSClass("WithHotkey")
        } else this.removeCSSClass("WithHotkey")
    },
    i.setHovered = function(e) {
        this._Hovered = !!e,
        this._Hovered ? this.addCSSClass("Hovered") : this.removeCSSClass("Hovered")
    },
    i.setChecked = function(t, i) {
        this._Checked = !!t;
        var s = this._ParentMenu.getCheckedType();
        if (this._Checked) {
            if (this.addCSSClass("Checked"), "Multi" !== s) {
                var n, o, a = this._ParentMenu.getItems();
                for (n = 0; n < a.length; n++) o = a[n],
                o !== this && o instanceof e.MenuItem && o.setChecked(!1)
            }
        } else this.removeCSSClass("Checked");
        i && this.CheckedChanged.fire()
    },
    i.getChecked = function() {
        return this._Checked
    },
    i.getKey = function() {
        return this._Key
    },
    i.getData = function() {
        return this._Data
    },
    i._onChangeLang = function() {
        var t = e.LangManager.getStringByKey(this._Key);
        t && this.setText(t)
    },
    i.unregister = function() {
        var t = e.MenuItem.base.unregister;
        t && t.apply(this, arguments),
        this._Menu && this._Menu.unregister()
    },
    i = null,
    e
}),
define("colorThemeChanger", ["listener"],
function(e) {
    e.ColorThemeChanger = function(t) {
        return this instanceof e.ColorThemeChanger ? (t = t || {},
        void e.ColorThemeChanger.base.constructor.apply(this, arguments)) : new e.ColorThemeChanger(t)
    },
    e.initClass(e.ColorThemeChanger, e.Listener);
    var t = e.ColorThemeChanger.prototype;
    return t.changeColorThemeNotify = function(t) {
        var i = document.getElementsByTagName("head")[0].getElementsByTagName("link")[1];
        switch (t) {
        case "beige_color_scheme":
            i.setAttribute("href", " css/wtStyle.css?v=1");
            break;
        case "black_color_scheme":
        default:
            i.setAttribute("href", " css/wtDarkStyle.css?v=1")
        }
        switch (t) {
        case "beige_color_scheme":
            e.IconSVGList.setImageUrl("./res/img/icon.svg"),
            e.MenuIconSVGList.setImageUrl("./res/img/icon_menu.svg");
            break;
        default:
        case "black_color_scheme":
            e.IconSVGList.setImageUrl("./res/img/DarkImg/icon_dark_20.svg"),
            e.MenuIconSVGList.setImageUrl("./res/img/DarkImg/icon_dark_16.svg")
        }
        this._onColorThemeChanged(t),
        e.Charts2.changeGraphicsColorScheme(t)
    },
    t._onColorThemeChanged = function(e) {
        this.notifyFollowers("_onColorThemeChanged", e)
    },
    t = null,
    e.ColorThemeChanger = e.ColorThemeChanger(),
    e
}),
define("button", ["control", "menu", "colorThemeChanger"],
function(e) {
    e.Button = function(t) {
        this._Text = "",
        this._Price = "",
        this._ImageUrl = "",
        this._HoverImageUrl = "",
        this._PressedImageUrl = "",
        this._DisabledImageUrl = "",
        this._ImgWidth = null,
        this._Color = "",
        this._ImgHeight = null,
        this._FontIcon = null,
        this._Enabled = !0,
        this._Visible = !0,
        this._Menu = null,
        this._ContextMenu = null,
        this._Template = e._Templates.Button,
        this._HoveredClass = "Hovered",
        this._PressedClass = "Pressed",
        this._DisabledImg = null,
        this.investorModeDependency = !1,
        this._defineEvents(["Click", "DblClick", "TouchStart", "TouchMove", "TouchEnd", "MouseDown", "MouseUp", "MouseOut", "LangChange"]),
        e.Button.base.constructor.apply(this, arguments),
        e.ColorThemeChanger.register(this)
    },
    e.initClass(e.Button, e.BaseControl);
    var t = e.Button.prototype;
    return t._render = function() {
        this._registerToLangManager = !!this._Key,
        this._Text = this._registerToLangManager ? e.LangManager.getStringByKey(this._Key) || this._Text: this._Text,
        e.Button.base._render.apply(this, arguments);
        var t = this._FontIcon;
        t ? "object" == typeof t && (this.setFontIcon(t.Content), this.setIconColor(t.Color), this.setIconSize(t.Size, t.Measurement)) : (this.setImageUrl(this._ImageUrl), this.setImageList(this._ImageList)),
        this.setColor(this._Color),
        this.setText(this._Text),
        this.setPrice(this._Price),
        this.setMenu(this._Menu),
        this.setContextMenu(this._ContextMenu),
        this.setEnabled(this._Enabled),
        this.setVisible(this._Visible),
        this._binds = {
            mouseenter: this._onMouseEnter.bind(this),
            mouseleave: this._onMouseLeave.bind(this),
            click: this._onClicked.bind(this),
            contextmenu: this._onContextMenu.bind(this),
            dblclick: this._onDblClick.bind(this),
            touchstart: this._onTouchStart.bind(this),
            touchmove: this._onTouchMove.bind(this),
            touchend: this._onTouchEnd.bind(this),
            mousedown: this._onMouseDown.bind(this),
            mouseup: this._onMouseUp.bind(this)
        };
        var i = this._binds,
        s = this.getDomNode(),
        n = e.addEvent.bind(e);
        n(s, "mouseenter", i.mouseenter),
        n(s, "mouseleave", i.mouseleave),
        n(s, "click", i.click, !0),
        n(s, "dblclick", i.dblclick),
        n(s, "touchstart", i.touchstart),
        n(s, "touchmove", i.touchmove, !0),
        n(s, "touchend", i.touchend),
        n(s, "mousedown", i.mousedown),
        n(s, "mouseup", i.mouseup),
        e.Browser.IsMobile || n(s, "contextmenu", i.contextmenu)
    },
    t._onChangeLang = function() {
        var t = e.LangManager.getStringByKey(this._Key);
        t && this.setText(t),
        this.LangChange.fire()
    },
    t.setContextMenu = function(e) {
        this._ContextMenu = e
    },
    t._onContextMenu = function(e) {
        this._ContextMenu && this._ContextMenu.show(e.clientX, e.clientY)
    },
    t.setFontIcon = function(t) {
        var i = function(e) {
            return e.indexOf("0xe") !== -1
        },
        s = function() {
            return "font-family:'icomoon' !important;-webkit-font-smoothing:antialiased;-moz-osx-font-smothing:grayscale;"
        };
        "string" == typeof t && (t = i(t) ? e.FontIcons.getIconByChartCode(t) : t),
        this._getImgNode(),
        this._imgContainer && (this._imgContainer.style.cssText = s(), this._imgContainer.children[0].innerHTML = t)
    },
    t.setIconColor = function(e) {
        this._imgContainer && (this._imgContainer.children[0].style.color = e)
    },
    t.setIconSize = function(e, t) {
        this._imgContainer && (this._imgContainer.children[0].style.fontSize = e + (t || "px"))
    },
    t.setImageUrl = function(e) {
        this._ImageUrl = e,
        this._getImgNode().style.backgroundImage = this._ImageUrl ? 'url("' + this._ImageUrl + '")': "",
        this._imgContainer && (this._imgContainer.style.display = this._ImageList || this._ImageUrl || this._ImgWidth ? "inline-block": "none")
    },
    t.setColor = function(e) {
        "" != e && null != e && (this._Color = e, this._DomNode.style.backgroundColor = e)
    },
    t.changeBtnImage = function(e) {
        "" != e && null != e && (this._getImgNode().style.backgroundImage = 'url("' + e + '")')
    },
    t.setImageList = function(t) {
        t instanceof e.ImageList && (this._ImageList = t, this._ImageList.toBackground(this._getImgNode(), this._ImageListRow, this._ImageListCol)),
        this._imgContainer && (this._imgContainer.style.display = this._ImageList || this._ImageUrl || this._ImgWidth ? "": "none")
    },
    t.setImageListRow = function(e) {
        isNaN(e) || (this._ImageListRow = e, this._ImageList.toBackground(this._getImgNode(), this._ImageListRow, this._ImageListCol))
    },
    t.setImageListCol = function(e) {
        isNaN(e) || (this._ImageListCol = e, this._ImageList.toBackground(this._getImgNode(), this._ImageListRow, this._ImageListCol))
    },
    t._onColorThemeChanged = function(t) {
        this._ImageList && (this._DomNode.className.indexOf("TableButton") == -1 ? this.setImageList(e.IconSVGList) : this.setImageList(e.MenuIconSVGList))
    },
    t._getImgNode = function() {
        if (!this._imgNode) {
            this._imgNode = e.htmlToDOM("<div></div>"),
            this._imgContainer = this._imgContainer || this._DomNode.querySelector(".WTButtonImage"),
            this._imgContainer && this._imgContainer.appendChild(this._imgNode);
            var t = this._imgNode.style;
            t.width = this._ImgWidth || "16px",
            t.height = this._ImgHeight || "16px"
        }
        return this._imgNode
    },
    t.setText = function(e) {
        this._Text = e,
        this._txtNode = this._txtNode || this._DomNode.querySelector(".WTButtonText"),
        this._txtNode && (this._txtNode.innerHTML = this._Text || "", this._txtNode.style.width = this._Text ? "": "0")
    },
    t.setPrice = function(e) {
        this._Price = e,
        this._priceNode = this._priceNode || this._DomNode.querySelector(".WTButtonPrice"),
        this._priceNode && (this._priceNode.innerHTML = this._Price || "")
    },
    t.setSplitPrice = function(t, i) {
        this._Price = t;
        var s = e.UtipFunctions.splitPriceWithDigits(t, i);
        this._priceNode = this._priceNode || this._DomNode.querySelector(".WTButtonPrice"),
        this._priceNode && (this._priceNode.innerHTML = '<div class="PriceWithSelectedPips"><div class="PriceInButton">' + s.value + '</div><div class="SelectedPips">' + s.tail + "</div></div>")
    },
    t.getText = function() {
        return this._Text
    },
    t.getKey = function() {
        return this._Key
    },
    t.setBtnWidth = function(e) {
        this._Width = e,
        this._DomNode.style.width = e + "px",
        this._imgNode && (this._getImgNode().style.width = e + "px")
    },
    t.setBtnHeight = function(e) {
        this._Height = e,
        this._DomNode.style.height = e + "px",
        this._imgNode && (this._getImgNode().style.height = e + "px")
    },
    t.setMenu = function(t) {
        t ? (this._Menu = t instanceof e.Menu ? t: new e.Menu(t), this._Menu.Opened.add(e.Delegate(this, this._onMenuOpened)), this._Menu.Closed.add(e.Delegate(this, this._onMenuClosed)), this._Menu.setMenuSource(this)) : this._Menu = null
    },
    t.getMenu = function() {
        return this._Menu
    },
    t._onMenuOpened = function() {
        this.setPressed(!0)
    },
    t._onMenuClosed = function() {
        this.setPressed(!1)
    },
    t._onClicked = function(t) {
        this._Enabled && (t.stopPropagation(), this._Menu && (this._Menu.getIsOpen() ? e._menuMasterObject.hideAll() : e._menuMasterObject._AnyOpened ? e._menuMasterObject.hideAll() : (e._menuMasterObject._AnyOpened = !0, this._Menu.setMenuSource(this), e.patch_mobileKeyboardUp({
            width: screen.width,
            height: screen.height
        },
        function(e) {
            var t = this.getDomNode();
            this._Menu.show(t.offsetLeft, t.offsetTop + t.offsetHeight - 1),
            this.adjustMenuPosition()
        },
        this, null))), this.Click.fire({
            Sender: this,
            Event: t
        }))
    },
    t.getKey = function() {
        return this._Key
    },
    t.adjustMenuPosition = function(t, i) {
        var s = e.valueIsEmpty,
        n = this._Menu,
        o = n.getDomNode(),
        a = this.getDomNode(),
        r = o.clientWidth,
        l = o.clientHeight,
        h = s(i) ? a.offsetTop: i,
        d = s(t) ? a.offsetLeft: t,
        c = a.offsetHeight,
        u = document.body,
        g = u.clientWidth,
        p = window.innerHeight;
        if (! (d + r <= g)) {
            d + r > g ? o.style.left = d + a.clientWidth - r - 1 + "px": o.style.left = d + "px";
            var m = parseInt(n._Y);
            0 !== m && (m = p < h + c + l ? p - l: h + c + 1, o.style.top = m + "px")
        }
    },
    t._onDblClick = function(e) {
        this.DblClick.fire({
            Event: e,
            Sender: this
        })
    },
    t._onTouchStart = function(e) {
        if (this.TouchStart.fire({
            Event: e,
            Sender: this
        }), this.timer) clearTimeout(this.timer),
        this.timer = null;
        else {
            var t = e.touches[0],
            i = {
                clientX: t.clientX,
                clientY: t.clientY
            };
            this.timer = setTimeout(function(e) {
                this._onContextMenu(e)
            }.bind(this, i), 400)
        }
        event.stopPropagation()
    },
    t._onTouchMove = function(e) {
        this.TouchMove.fire({
            Event: e,
            Sender: this
        })
    },
    t._onTouchEnd = function(t) {
        return this.timer && (clearTimeout(this.timer), this.timer = null),
        this._Enabled ? void this.TouchEnd.fire({
            Event: t,
            Sender: this
        }) : void e.removeCSSClass(this._DomNode, "Pressed")
    },
    t._onMouseDown = function(e) {
        this.MouseDown.fire({
            Event: e,
            Sender: this
        })
    },
    t._onMouseUp = function(e) {
        this.MouseUp.fire({
            Event: e,
            Sender: this
        })
    },
    t.setPressed = function(t) { ! this._Enabled || this.investorModeDependency && e.investorAccount || (this._Pressed = !!t, this._Pressed ? (this.addCSSClass(this._PressedClass), this.removeCSSClass(this._HoveredClass), this.changeBtnImage(this._PressedImageUrl)) : (this.removeCSSClass(this._PressedClass), this.changeBtnImage(this._ImageUrl)))
    },
    t.setHovered = function(e) { ! this._Pressed && this._Enabled && (this._Hovered = !!e, this._Hovered ? (this.addCSSClass(this._HoveredClass), this.changeBtnImage(this._HoverImageUrl)) : (this.removeCSSClass(this._HoveredClass), this.changeBtnImage(this._ImageUrl)))
    },
    t.setEnabled = function(t) {
        var i = this.investorModeDependency,
        s = e.investorAccount,
        n = i && s,
        o = this._ImageList,
        a = this._ImageListRow,
        r = this._ImageListCol,
        l = this._DisabledImg,
        h = this._Menu;
        if (n) return this.addCSSClass("Disabled"),
        l && o ? o.toBackground(this._getImgNode(), l.Row, l.Col) : this.changeBtnImage(this._DisabledImageUrl),
        this._Enabled = !1,
        void(h && h.hide());
        if (this._Enabled !== t) {
            var d, c, u, g = this._Enabled = !!t;
            if (!g || n) {
                this.addCSSClass("Disabled");
                var p = this._DisabledImageUrl;
                l && p && (d = l.Row, c = l.Col, u = p)
            } else this.removeCSSClass("Disabled"),
            this.removeCSSClass("Hovered"),
            d = a,
            c = r,
            u = this._ImageUrl;
            l && o ? o.toBackground(this._getImgNode(), d, c) : this.changeBtnImage(u),
            !this._Enabled && h && h.hide()
        }
    },
    t.setVisible = function(t) {
        t = !!e.valueIsEmpty(t) || !!t,
        e.Button.base.setVisible.apply(this, [t])
    },
    t.getPressed = function() {
        return this._Pressed
    },
    t.getTextNode = function() {
        return this._txtNode || this._DomNode.querySelector(".WTButtonText")
    },
    t.getFontIconNode = function() {
        return (this._imgContainer || this._DomNode.querySelector(".WTButtonImage")).firstChild
    },
    t._onMouseEnter = function(t) {
        e.Browser.IsMobile || (this.setHovered(!0), e._menuMasterObject._AnyOpened && null != this._Menu && (this._Menu.setMenuSource(this), this._Menu.show(this._DomNode.offsetLeft, this._DomNode.offsetTop + this._DomNode.offsetHeight - 1), this.adjustMenuPosition()))
    },
    t._onMouseLeave = function(t) {
        e.Browser.IsMobile || (this.setHovered(!1), this.MouseOut.fire({
            Event: t,
            Sender: this
        }))
    },
    t.isHovered = function() {
        return this._Hovered
    },
    t.isEnabled = function() {
        return this._Enabled
    },
    t = null,
    e
}),
define("dialog", ["control", "button"],
function(e) {
    function t(t, i) {
        var s = i.offsetWidth || t.getWidth(),
        n = i.offsetHeight || t.getHeight();
        i.style.top = e.getAppHeight() / 2 - n / 2 + "px",
        i.style.left = "calc(50% - " + s / 2 + "px)"
    }
    function i(e, t) {
        var i = t.base;
        e._refreshMargins ? e._refreshMargins() : i._refreshMargins && i._refreshMargins.apply(e, [])
    }
    e.Dialog = function(t) {
        console.log("a7a2_9");
        this._Width = 300,
        this._Height = 0,
        this._Left = null,
        this._Top = null,
        this._Title = "",
        this._Key = "",
        this._ImageUrl = "",
        this._Content = "",
        this._WithBlock = !0,
        this._BlockscreenTouchendWorked = !1,
        this._Sizedble = !1,
        this._resizeCursorPlaceWidth = 6,
        this._minWidth = 100,
        this._minHeight = 200,
        this._Template = this._Template || e._Templates.Dialog,
        this._Timeout = null,
        this._timeoutDuration = 2e3,
        this._defineEvents(["PressEnter", "Opened", "Closed", "VerticalResizeDialog", "HorizontalResizeDialog", "DialogMove", "ManipulationStop"]),
        this._IsErrorDialog = !1,
        e.Dialog.base.constructor.apply(this, arguments),
        e._dialogMasterObject.register(this),
        e.Resizer.register(this),
        e.Socket.register(this)
    },
    e.initClass(e.Dialog, e.BaseControl);
    var s = e.Dialog.prototype;
    s._onChangeLang = function() {
        var t = e.LangManager.getStringByKey(this._Key);
        t && this.setTitle(t)
    },
    s._render = function() {
        e.Dialog.base._render.apply(this, arguments),
        this.setImageUrl(this._ImageUrl),
        this.setImageList(this._ImageList),
        this._registerToLangManager = !!this._Key,
        this._Title = this._Key ? e.LangManager.getStringByKey(this._Key) || this._Title: this._Title,
        this.setTitle(this._Title),
        this._closeBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".WTDialogClBtnContainer"),
            Class: "WTCloseButton",
            Click: e.Delegate(this,
            function() {
                this.hide();
                var t = e.getChangePassDialogWithoutInit();
                t && t.unblockButtons();
                var i = e.getDialogConfirm(),
                s = e.getErrorDialogWithoutInit();
                s && this._WithBlock && !i && (document.getElementById("WTDialogsContainer").style.position = "")
            }.bind(this)),
            DblClick: e.Delegate(this, this.stopPropagationHandler),
            MouseDown: e.Delegate(this, this.stopPropagationHandler)
        }),
        this.setContent(this._Content),
        this._binds = {
            pressenter: this._onPressEnter.bind(this),
            mousedown: this._onMouseDown.bind(this),
            mousemove: this._onMouseMove.bind(this),
            mouseup: this._onMouseUp.bind(this),
            click: this._onClick.bind(this),
            cursorChanger: this._cursorChanger.bind(this),
            mouseleave: this._onDocumentMouseLeave.bind(this)
        },
        this._DomNode.ondragstart = function(e) {
            e.preventDefault()
        },
        e.addEvent(this._DomNode, "click", this._binds.click),
        e.Browser.IsMobile || (e.addEvent(this._DomNode, "mousedown", this._binds.mousedown), "ontouchstart" in window && (e.Browser.IsMobile || e.Browser.IsTablet) && e.addEvent(this._DomNode, "touchstart", this._binds.mousedown))
    },
    s._onPressEnter = function(e) {
        e && e.keyCode && 13 === e.keyCode && (e.preventDefault(), this.PressEnter.fire())
    },
    s._onClick = function(t) {
        console.log("a7a2_10");
        e._menuMasterObject.hideAll()
    },
    s._onGetSymbols = function(t) {
        this._currentSymbol && (this._currentSymbol = e.SymbolsData.getSymbols()[this._currentSymbol.getSymbolName()])
    },
    s.getClientAndPageCoords = function(e) {
        if (e.clientX && e.clientY) var t = e.clientX,
        i = e.clientY,
        s = e.pageX,
        n = e.pageY;
        else e.targetTouches && 0 != e.targetTouches.length ? (t = e.targetTouches[0].clientX, i = e.targetTouches[0].clientY, s = e.targetTouches[0].pageX, n = e.targetTouches[0].pageY) : e.changedTouches && 0 != e.changedTouches.length ? (t = e.changedTouches[0].clientX, i = e.changedTouches[0].clientY, s = e.changedTouches[0].pageX, n = e.changedTouches[0].pageY) : (t = 0, i = 0, s = 0, n = 0);
        return {
            posX: t,
            posY: i,
            pageX: s,
            pageY: n
        }
    },
    s._onMouseDown = function(t) {
        var i = this.getClientAndPageCoords(t),
        s = e.getCoords(this._contentNode);
        if (! (i.pageX >= s.left && i.pageX <= s.right && i.pageY >= s.top && i.pageY <= s.bottom)) {
            e.addEvent(document.body, "mousemove", this._binds.mousemove),
            e.addEvent(document.body, "mouseup", this._binds.mouseup),
            e.addEvent(document.body, "mouseleave", this._binds.mouseleave),
            "ontouchmove" in window && (e.addEvent(document.body, "touchmove", this._binds.mousemove), e.addEvent(document.body, "touchend", this._binds.mouseup));
            var n = e.getCoords(this._DomNode);
            this._mouseDownOffset = {
                X: i.pageX - n.left,
                Y: i.pageY - n.top
            },
            this.verticalResize = !1,
            this.horizontalResizeRight = !1,
            this.horizontalResizeLeft = !1;
            var o = this._DomNode.getBoundingClientRect();
            this._resizingFrame || this.createResizingFrame(),
            this._resizingFrame.style.top = o.top + "px",
            this._resizingFrame.style.left = o.left + "px",
            this._resizingFrame.style.height = o.height - 12 + "px",
            this._resizingFrame.style.width = o.width - 12 + "px";
            var a = this._resizeCursorPlaceWidth;
            this._Sizedble && (o.right - a < i.posX && i.posX < o.right + a ? this.horizontalResizeRight = !0 : this.horizontalResizeRight = !1, o.left - a < i.posX && i.posX < o.left + a ? this.horizontalResizeLeft = !0 : this.horizontalResizeLeft = !1, o.bottom - a < i.posY && i.posY < o.bottom + a ? this.verticalResize = !0 : this.verticalResize = !1),
            t.preventDefault()
        }
    },
    s._cursorChanger = function(e) {
        var t = this._resizeCursorPlaceWidth,
        i = this._DomNode.getBoundingClientRect();
        this._Sizedble && (i.right - t < e.clientX && e.clientX < i.right && i.bottom - t < e.clientY && e.clientY < i.bottom ? (this._DomNode.style.cursor = "se-resize", document.body.style.cursor = "se-resize") : i.left < e.clientX && e.clientX < i.left + t && i.bottom - t < e.clientY && e.clientY < i.bottom ? (this._DomNode.style.cursor = "sw-resize", document.body.style.cursor = "sw-resize") : (i.right - t < e.clientX && e.clientX < i.right || i.left < e.clientX && e.clientX < i.left + t) && e.clientY <= i.bottom && e.clientY >= i.top ? (this._DomNode.style.cursor = "ew-resize", document.body.style.cursor = "ew-resize") : i.bottom - t < e.clientY && e.clientY < i.bottom && e.clientX <= i.right && e.clientX >= i.left ? (this._DomNode.style.cursor = "ns-resize", document.body.style.cursor = "ns-resize") : this.horizontalResizeRight || this.horizontalResizeLeft || this.verticalResize || (this._DomNode.style.cursor = "default", document.body.style.cursor = "default"))
    },
    s.resizeNotify = function(t) {
        var i = this.getClientAndPageCoords(t);
        if (this.horizontalResizeRight) {
            var s = this._DomNode.getBoundingClientRect();
            i.posX - s.left <= this._minWidth ? this.setWidth(this._minWidth, !1) : this.setWidth(i.posX - s.left, !1),
            this.HorizontalResizeDialog.fire({
                event: t,
                sender: this
            }),
            e._menuMasterObject.hideAll()
        }
        if (this.horizontalResizeLeft) {
            var s = this._DomNode.getBoundingClientRect(),
            n = s.left,
            o = s.right,
            a = this._DomNode.offsetWidth,
            r = n - i.posX;
            this._DomNode.offsetWidth + r <= this._minWidth ? (this._DomNode.style.marginLeft = 0, this._DomNode.style.left = o - this._minWidth + "px", this.setWidth(this._minWidth, !1)) : (this._DomNode.style.marginLeft = 0, this._DomNode.style.left = i.posX + "px", this.setWidth(a + r, !1)),
            this.HorizontalResizeDialog.fire({
                event: t,
                sender: this
            }),
            e._menuMasterObject.hideAll()
        }
        if (this.verticalResize) {
            var l, s = this._DomNode.getBoundingClientRect(),
            h = this._DomNode.offsetHeight;
            l = i.posY - s.top <= this._minHeight ? -(h - this._minHeight) : i.posY - s.top - h,
            this.VerticalResizeDialog.fire({
                event: t,
                sender: this,
                heightIncrement: l
            }),
            e._menuMasterObject.hideAll()
        }
        this._resizingFrame.style.display = "none"
    },
    s.createResizingFrame = function() {
        this._resizingFrame = document.createElement("div"),
        this._resizingFrame.className = "DialogResizingFrame",
        this._resizingFrame.style.display = "none",
        document.body.appendChild(this._resizingFrame)
    },
    s.drawResizingFrame = function(t) {
        this._resizingFrame.style.display = "";
        var i = this.getClientAndPageCoords(t);
        if (this.horizontalResizeRight) {
            var s = this._DomNode.getBoundingClientRect();
            i.posX - s.left <= this._minWidth || (this._resizingFrame.style.width = i.posX - s.left - 12 + "px"),
            e._menuMasterObject.hideAll()
        }
        if (this.horizontalResizeLeft) {
            var s = this._DomNode.getBoundingClientRect(),
            n = s.left,
            o = this._DomNode.offsetWidth,
            a = n - i.posX;
            this._DomNode.offsetWidth + a <= this._minWidth || (this._DomNode.style.marginLeft = 0, this._resizingFrame.style.left = i.posX + "px", this._resizingFrame.style.width = o + a - 12 + "px"),
            e._menuMasterObject.hideAll()
        }
        if (this.verticalResize) {
            var s = this._DomNode.getBoundingClientRect();
            i.posY - s.top <= this._minHeight || (this._resizingFrame.style.height = i.posY - s.top - 12 + "px"),
            e._menuMasterObject.hideAll()
        }
    },
    s._onMouseMove = function(t) { (new Date).getTime();
        if (this.isSensor = "ontouchmove" in window, !this._closeBtn.isHovered() && (1 == t.which || this.isSensor)) {
            var i = this.getClientAndPageCoords(t);
            if (this.horizontalResizeRight || this.horizontalResizeLeft || this.verticalResize) this.drawResizingFrame(t);
            else {
                this._DomNode.style.marginLeft = this._DomNode.style.marginTop = 0;
                var s = i.pageX - this._mouseDownOffset.X,
                n = i.pageY - this._mouseDownOffset.Y;
                this._DomNode.style.left = s + "px",
                this._DomNode.style.top = n + "px",
                e._menuMasterObject.hideAll(),
                this.DialogMove.fire({
                    event: t,
                    sender: this
                })
            }
        }
    },
    s._onMouseUp = function(t) {
        this.resizeNotify(t),
        e.removeEvent(document.body, "mousemove", this._binds.mousemove),
        e.removeEvent(document.body, "mouseup", this._binds.mouseup),
        e.removeEvent(document.body, "mouseleave", this._binds.mouseleave),
        "ontouchmove" in window && (e.removeEvent(document.body, "touchmove", this._binds.mousemove), e.removeEvent(document.body, "touchend", this._binds.mouseup)),
        this.horizontalResizeLeft = this.horizontalResizeRight = this.verticalResize = !1,
        this._mouseDownOffset = null,
        e._menuMasterObject.hideAll(),
        this.ManipulationStop.fire({
            event: t,
            sender: this
        })
    },
    s._onDocumentMouseLeave = function(e) {
        this._onMouseUp(e)
    },
    s.setTitle = function(e) {
        this._Title = e || "",
        this._titleNode = this._titleNode || this._DomNode.querySelector(".WTDialogTitle"),
        this._titleNode && (this._titleNode.innerHTML = this._Title)
    },
    s.setImageUrl = function(e) {
        this._ImageUrl = e,
        this._getImgNode().style.backgroundImage = this._ImageUrl ? 'url("' + this._ImageUrl + '")': "",
        this._imgContainer && (this._imgContainer.style.display = this._ImageList || this._ImageUrl ? "": "none")
    },
    s._getImgNode = function() {
        if (!this._imgNode) {
            this._imgNode = e.htmlToDOM("<div></div>"),
            this._imgContainer = this._imgContainer || this._DomNode.querySelector(".WTDialogImg"),
            this._imgContainer && this._imgContainer.appendChild(this._imgNode);
            var t = this._imgNode.style;
            t.width = "16px",
            t.height = "16px",
            t.marginTop = "4px"
        }
        return this._imgNode
    },
    s.setImageList = function(t) {
        t instanceof e.ImageList && (this._ImageList = t, this._ImageList.toBackground(this._getImgNode(), this._ImageListRow, this._ImageListCol)),
        this._imgContainer && (this._imgContainer.style.display = this._ImageList || this._ImageUrl ? "": "none")
    },
    s._initBlock = function() {
        this._block = e._dialogMasterObject.getBlockscreen(),
        this.screenIsBlocked() || (this._block.style.display = this._WithBlock ? "inline": "none"),
        e.Browser.IsMobile && null != document.getElementById("WTDialogsContainer") && (document.getElementById("WTDialogsContainer").style.display = "block")
    },
    s._getDialogsContainer = function() {
        var e = document.getElementById("WTDialogsContainer");
        e || (e = document.createElement("div"), e.id = "WTDialogsContainer", window.IsTabletApplication() && e.addEventListener("touchstart", this.removeColorPicker));
        var t = document.getElementsByTagName("body")[0];
        return t.insertBefore(e, this._block),
        e
    },
    s.removeColorPicker = function(e) {
        jscolor && jscolor.picker && jscolor.picker.owner && (jscolor.picker.owner.valueElement.blur(), e.preventDefault())
    },
    s._initWin = function() {
        var t = this._getDialogsContainer();
        t.appendChild(this._DomNode),
        e.getMobileOpenDemoDialogWithoutInit() || (this._DomNode.style.display = "inline", null != this._Left && null != this._Top ? (this._DomNode.style.top = this._Top + "px", this._DomNode.style.left = this._Left + "px") : this._refreshMargins()),
        e.addEvent(document.body, "keydown", this._binds.pressenter)
    },
    s._refreshMargins = function() {
        var e = this.getDomNode(),
        t = e.style,
        i = parseInt(t.width || 0) || e.offsetWidth,
        s = parseInt(t.height || 0) || e.offsetHeight,
        n = e.parentNode.scrollTop;
        this._refreshCoords(i, s, n)
    },
    s._refreshCoords = function(t, i, s) {
        var n = window.innerWidth,
        o = window.innerHeight,
        a = this.getDomNode(),
        r = a.style;
        r.top = e.Browser.IsMobile.any ? "0": (o - i) / 2 + s + "px",
        r.left = (n - t) / 2 + "px"
    },
    s.screenIsBlocked = function() {
        var t = e._dialogMasterObject.getBlockscreen(!this._BlockscreenTouchendWorked);
        return "inline" == t.style.display
    },
    s.show = function(t) {
        t && (this._source = t),
        e.Browser.IsMobile && !(this instanceof e.DialogConfirm || this instanceof e.ErrorDialog || this instanceof e.DialogModifyPosition || this instanceof e.DialogClosePosition) && (this._source instanceof e.Dialog ? this._source.getDomNode().style.display = "none": this._source && (console.log("The this._source object does not correspond to the required class."), console.log(this._source)), e.TerminalContainer && (e.TerminalContainer.style.display = "none")),
        e._mobileDialogStart && (e._mobileDialogStart.getDomNode().style.display = "none"),
        (!this.screenIsBlocked() || this._IsErrorDialog || this instanceof e.DialogChart) && (e.Browser.IsMobile && !this._IsErrorDialog && (history.pushState({
            state: "beforeDialogOpened"
        },
        null, ""), window.onpopstate = this._onGoBack.bind(this)), e._menuMasterObject.hideAll(), this._initBlock(), this._initWin(), e.addEvent(document.body, "mousemove", this._binds.cursorChanger), this._IsOpen = !0, this.Opened.fire(), this._DomNode.classList.add("FadeIn"), this._DomNode.style.display = "block")
    },
    s._onGoBack = function(e) {
        history.go(1),
        this.hide()
    },
    s.isBuyDialogOpen = function() {
        console.log("a7a2_5");
        var e = document.getElementById("WTDialogsContainer"),
        t = !!e.querySelector(".WTDialog.dialogNewOrder"),
        i = !!e.querySelector(".WTDialog.dialogPendingOrder"),
        s = !!e.querySelector(".WTDialog.dialogBuyOption");
        return t || i || s
    },
    s._hideDialog = function() {
        console.log("a7a2_6");
        this._DomNode.style.display = "none",
        this._IsOpen = !1,
        e._menuMasterObject.hideAll(),
        e._dialogMasterObject.dialogHide(),
        e.removeEvent(document.body, "keydown", this._binds.pressenter),
        e.removeEvent(document.body, "mousemove", this._binds.cursorChanger),
        null != this._Timeout && clearTimeout(this._Timeout),
        e.Browser.IsMobile || !this._IsErrorDialog || this.isBuyDialogOpen() || null == document.getElementById("WTDialogBlockscreen") || e.getMobileSignInDialogWithoutInit() || e.Browser.IsMobile || (document.getElementById("WTDialogBlockscreen").style.display = "none");
        var t = document.getElementById("WTDialogsContainer");
        if (t && e.Browser.IsMobile) {
            var i = !this._IsErrorDialog;
            i ? window.onpopstate = null: i = !!this._IsErrorDialog,
            i = i && !e._dialogMasterObject.isAnyDialogOpen(),
            document.getElementById("WTDialogsContainer").style.display = i ? "none": ""
        }
        this.removeColorPicker(),
        this.Closed.fire(this);
        var s = this._DomNode.parentNode;
        if (s && s.removeChild(this._DomNode), e.saveUserSettings(), e.Browser.IsMobile) {
            this instanceof e.DialogConfirm || this instanceof e.ErrorDialog || this instanceof e.DialogModifyPosition || this instanceof e.DialogClosePosition || (this._source instanceof e.Dialog ? this._source.getDomNode().style.display = "block": this._source && (console.log("The this._source object does not correspond to the required class."), console.log(this._source)));
            var n = e._dialogMasterObject.isAnyDialogOpen(),
            o = e._dialogMasterObject.onlyMiniDialogsAreOpened();
            e.TerminalContainer && (n && !o || (e.TerminalContainer.style.display = "block"))
        }
    },
    s.hide = function() {
        var t = this,
        i = e.getTerminal();
        e.Browser.IsMobile && i && i._onWindowResize && i._onWindowResize(),
        this._DomNode.classList.remove("FadeIn");
        var s = 0,
        n = 64; (e.keyboardIsShown() || Math.abs(window.innerWidth + window.innerHeight - e.originalSize()) >= n) && (s = 450),
        setTimeout(function() {
            t._hideDialog()
        },
        s)
    },
    s.getIsOpen = function() {
        return this._IsOpen
    },
    s.addToNode = function() {},
    s.isBlocked = function() {
        return this._WithBlock
    },
    s.setEnabled = function(t) {
        this._Enabled = !!t,
        this._contentNode && (this._Enabled ? e.removeCSSClass(this._contentNode, "Disabled") : e.addCSSClass(this._contentNode, "Disabled"))
    },
    s.enabled = function() {
        return this._Enabled
    },
    s.setContent = function(t) {
        var i = function(e) {
            var t = this._Content = e.value || "",
            i = this._contentNode;
            if (i || (i = this._contentNode = this.getDomNode().querySelector(".WTDialogContent"), e.withoutHeight || (i.style.height = this._Height - 34 + "px")), i) {
                var s = typeof t;
                "string" == s ? i.innerHTML = t: "object" == s && i.appendChild(t)
            }
        }.bind(this);
        if (e.Browser.IsMobile) {
            var s = this instanceof e.DialogConfirm || this instanceof e.ErrorDialog;
            i({
                value: t,
                withoutHeight: !s
            })
        } else i({
            value: t
        })
    },
    s.getDomNode = function() {
        return this._DomNode
    },
    s.getContentNode = function() {
        return this._contentNode
    },
    s.setWidth = function(t, i) {
        var s = this instanceof e.DialogConfirm || this instanceof e.ErrorDialog,
        n = function() {
            var s = this._Width = Math.min(Math.max(t, 0), e.DisplaySize.getWidth()),
            n = Math.max(0, s - 12),
            o = this.getDomNode();
            o && (o.style.width = n ? n + "px": ""),
            this.getIsOpen() && "undefined" == i && this._refreshMargins()
        }.bind(this);
        if (e.Browser.IsMobile) if (s) n();
        else {
            var o = this.getDomNode();
            o && (o.style.width = "100%")
        } else n()
    },
    s.setAutoWidth = function() {
        this._DomNode && (this._DomNode.style.width = "auto", this._Width = this._DomNode.clientWidth)
    },
    s.setHeight = function(t, i) {
        var s = this instanceof e.DialogConfirm || this instanceof e.ErrorDialog,
        n = function() {
            var s = this._Height = Math.min(Math.max(t, 0), e.DisplaySize.getHeight()),
            n = Math.max(0, s - 12),
            o = this.getDomNode(),
            a = this._contentNode;
            o && (o.style.height = n ? n + "px": "", a && (a.style.height = n > 26 ? n - 20 + "px": "")),
            this.getIsOpen() && "undefined" == i && this._refreshMargins()
        }.bind(this);
        if (e.Browser.IsMobile) if (s) n();
        else {
            var o = this._Height = Math.max(t, 0),
            a = Math.max(0, o),
            r = this._DomNode;
            if (r) {
                r.style.height = a ? a + "px": "";
                var l = this._contentNode;
                l && (l.style.height = a > 26 ? a - 20 + "px": "")
            }
        } else n()
    },
    s.setTop = function(t) {
        this._Top = Math.min(Math.max(t, 0), e.DisplaySize.getHeight() - 20),
        this._DomNode && (this._DomNode.style.top = this._Top + "px")
    },
    s.setLeft = function(t) {
        this._Left = Math.min(Math.max(t, 0), e.DisplaySize.getWidth() - 20),
        this._DomNode && (this._DomNode.style.left = this._Left + "px")
    },
    s.onDialogTouchStart = function(e) {
        this.startTouchX = e.targetTouches[0].screenX,
        this.startTouchY = e.targetTouches[0].screenY
    },
    s.onDialogTouchMove = function(t) {
        console.log("a7a2_7");
        this.endTouchX = t.targetTouches[0].screenX,
        this.endTouchY = t.targetTouches[0].screenY;
        var i = this.endTouchX - this.startTouchX,
        s = (this.endTouchY - this.startTouchY, this.getDomNode(), 40);
        Math.abs(i) > s && t.preventDefault();
        var n = e.getErrorDialogWithoutInit();
        n && n._onWindowResize(null);
        var o = e.getDialogConfirm(null);
        o && o._onWindowResize(null),
        e._menuMasterObject.hideAll()
    },
    s.stopPropagationHandler = function(e) {
        e.Event.stopPropagation()
    },
    s = null,
    e.ErrorDialog = function() {
        this._Class = null,
        this._Width = 260,
        this._Height = 214,
        this._Template = null,
        this._Content = null,
        this._Title = null,
        this._Key = null,
        this._IsErrorDialog = !0,
        this._WithBlock = null,
        this._BlockscreenTouchendWorked = null,
        e.ErrorDialog.base.constructor.apply(this, arguments)
    },
    e.initClass(e.ErrorDialog, e.Dialog),
    e.ErrorDialog.prototype._refreshMargins = function() {
        t(this, this.getDomNode())
    },
    e.getMobileErrorDialog = function(t, s) {
        e._errorDialog = new e.ErrorDialog({
            Class: t ? "ErrorDialog NoticeDialog": "ErrorDialog",
            Width: 260,
            Height: 214,
            Title: t ? "Information": "Error",
            Key: t ? "cMFInfoSymbols": "cMobileError",
            IsErrorDialog: !0,
            WithBlock: !1,
            BlockscreenTouchendWorked: !1,
            Template: e._Templates.MiniDialogError,
            Content: e.htmlToDOM(e._Templates.DialogErrorContent),
            Closed: e.Delegate(this,
            function() {
                t && (document.getElementById("WTDialogsContainer").style.display = "none"),
                e._errorDialog.dispose()
            })
        }),
        e._errorDialog._onWindowResize = function(t) {
            i(e._errorDialog, e.Dialog)
        },
        e._errorDialog.dispose = function() {
            if (e._errorDialog) {
                if (e._errorDialog._source && e._errorDialog._source.show(), s) {
                    var t = s.handler,
                    i = s.args;
                    t(i)
                }
                if (e._errorDialog) {
                    clearTimeout(e._errorDialog._Timeout),
                    e.Resizer.unRegister(this),
                    e.LangManager.unRegister(this),
                    e._dialogMasterObject.unRegister(this);
                    var n = e._errorDialog.getDomNode(),
                    o = n.parentNode;
                    o && o.removeChild(n),
                    e._errorDialog.removeErrorBlock(),
                    e._errorDialog = null
                }
            }
        },
        e._errorDialog.setErrorBlock = function() {
            if (!this._errorBlock) {
                var e = this._getDialogsContainer();
                this._errorBlock = document.createElement("div"),
                this._errorBlock.id = "errorBlock",
                e.appendChild(this._errorBlock)
            }
            this._errorBlock.style.display = "block"
        },
        e._errorDialog.removeErrorBlock = function() {
            this._errorBlock && (this._getDialogsContainer().removeChild(this._errorBlock), this._errorBlock = !1)
        };
        new e.Button({
            ParentNode: e._errorDialog._contentNode.getElementsByClassName("DFooterControls")[0],
            Width: 80,
            Text: "OK",
            Click: e.Delegate(e._errorDialog,
            function(t) {
                e._errorDialog._WithBlock || e.getDialogConfirm() || (document.getElementById("WTDialogsContainer").style.position = ""),
                this.hide()
            }),
            TouchStart: e.Delegate(e._errorDialog,
            function(e) {
                e.Sender.setPressed(!0)
            })
        });
        return e._errorDialog
    },
    e.getErrorDialog = e.Browser.IsMobile ? e.getMobileErrorDialog: function(t, i) {
        return e._errorDialog = new e.ErrorDialog({
            Class: t ? "ErrorDialog NoticeDialog": "ErrorDialog",
            Width: 350,
            Title: t ? "Information": "Error",
            Key: t ? "cMFInfoSymbols": "cMobileError",
            IsErrorDialog: !0,
            WithBlock: !0,
            Content: e.htmlToDOM(e._Templates.DialogErrorContent),
            Closed: e.Delegate(this,
            function() {
                if (e._errorDialog) {
                    if (e._errorDialog._WithBlock && !e.Browser.IsMobile && !e._errorDialog.isBuyDialogOpen()) {
                        var t = e._dialogMasterObject.getBlockscreen();
                        t.style.display = "none"
                    }
                    e._errorDialog.dispose()
                }
            })
        }),
        e._errorDialog.dispose = function() {
            if (i) {
                var t = i.handler,
                s = i.args;
                t(s)
            }
            if (e._errorDialog) {
                e._errorDialog._source && e._errorDialog._source.show(),
                clearTimeout(e._errorDialog._Timeout),
                e.Resizer.unRegister(this),
                e.LangManager.unRegister(this),
                e._dialogMasterObject.unRegister(this);
                var n = e._errorDialog.getDomNode(),
                o = n.parentNode;
                o && o.removeChild(n),
                e._errorDialog = null,
                delete this
            }
        },
        e._errorDialog
    },
    e.getErrorDialogWithoutInit = function() {
        return e._errorDialog
    },
    e.showErrorDialog = function(t, s, n, o) {
        if (e._errorDialog && e._errorDialog.hide(), e.getErrorDialog(s, n), t) {
            var a = e._errorDialog._contentNode.querySelector(".WTErrorMessage");
            a.innerHTML = t,
            s && (a.style.width = "auto")
        }
        hidePreloader(),
        e.Browser.IsMobile && e._errorDialog.setErrorBlock(),
        e._errorDialog.show();
        var r = document.getElementById("WTDialogsContainer"),
        l = "absolute" != r.style.position && e._errorDialog._WithBlock;
        r.style.position = l ? "": r.style.position,
        e._errorDialog._DomNode.style.zIndex = 1e3,
        e._errorDialog._Timeout = setTimeout(function() {
            e.getDialogConfirm() || (document.getElementById("WTDialogsContainer").style.position = ""),
            e._errorDialog.hide()
        },
        e._errorDialog._timeoutDuration),
        o && (e._errorDialog._source = o),
        i(e._errorDialog, e.Dialog)
    },
    e.DialogConfirm = function(t) {
        console.log("a7a2_8");
        return this instanceof e.DialogConfirm ? (this._defineEvents(["Confirm", "NotConfirm"]), this._Template = e.Browser.IsMobile ? e._Templates.DialogConfirm: e._Templates.Dialog, this._Data = null, this._YesButtonKey = "", this._YesButtonText = "Ok", this._NoButtonKey = "CNMRcansel", this._NoButtonText = "Cancel", this.positionPackage = null, e.DialogConfirm.base.constructor.apply(this, arguments), void this.Closed.add(new e.Delegate(this, this.dispose))) : new e.DialogConfirm(t)
    },
    e.initClass(e.DialogConfirm, e.Dialog);
    var n = e.DialogConfirm.prototype;
    return n._render = function() {
        this._Width = e.Browser.IsMobile ? 260 : 350,
        this._Title = "Warning",
        this._Key = "cWarning",
        this._Class = e.Browser.IsMobile ? "Mini Confirm": "DialogConfirm",
        this._Content = e.htmlToDOM("<div>" + (e.Browser.IsMobile ? e._Templates.MobileDialogConfirmContent: e._Templates.DialogConfirmContent) + "</div>");
        var t = this._Content.querySelector(".DFooterControls");
        this.contentMessage = this._Content.querySelector(".WTConfirmMessage"),
        this._IsErrorDialog = !1,
        this._NoButton = new e.Button({
            ParentNode: t,
            Class: "DButton NoButton",
            Text: this._NoButtonText,
            Key: this._NoButtonKey,
            Click: e.Delegate(this, this._onYesNoClick),
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd)
        }),
        this._YesButton = new e.Button({
            ParentNode: t,
            Class: "DButton GreenButton",
            Key: this._YesButtonKey,
            Text: this._YesButtonText,
            Click: e.Delegate(this, this._onYesNoClick, {
                Result: !0
            }),
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd)
        }),
        e.DialogConfirm.base._render.apply(this, arguments),
        this.getDomNode().addEventListener("touchmove", this.scrolling.bind(this), !0)
    },
    n.getButtons = function() {
        return {
            yesButton: this._YesButton,
            noButton: this._NoButton
        }
    },
    n.scrolling = function(t) {
        var i = this.getDomNode();
        e.preventDefaultMoveNode(i, i, t)
    },
    n._refreshMargins = function() {
        var e = this.getDomNode(),
        i = 30;
        e.classList.remove("minimized"),
        e.style.height = "",
        e.offsetHeight + i > window.innerHeight ? (e.style.height = window.innerHeight - i + "px", e.classList.add("minimized")) : e.classList.contains("minimized") || (e.style.height = ""),
        t(this, e)
    },
    n.enabled = function(t) {
        t = !!t;
        var i;
        i = t ? "removeCSSClass": "addCSSClass";
        var s = e[i],
        n = e.removeCSSClass,
        o = this._YesButton,
        a = this._NoButton;
        s(this.getDomNode(), "Disabled"),
        n(o.getDomNode(), "Pressed"),
        n(a.getDomNode(), "Pressed"),
        o.setEnabled(t),
        a.setEnabled(t)
    },
    n._onYesNoClick = function(t) {
        function i() {
            document.getElementById("WTDialogsContainer").style.position = "",
            this.hide()
        }
        if (t.data = this._Data, t.Result) {
            this.Confirm.fire(t);
            var s = this.positionPackage;
            s ? (s instanceof e.MobileClosePositionPackages && s.toFreeze(), this.requestIsSent = !0, this.enabled(!1)) : i.apply(this, [])
        } else this.NotConfirm.fire(t),
        i.apply(this, [])
    },
    n.dispose = function() {
        e.Resizer.unRegister(this),
        e.Socket.unRegister(this),
        e.LangManager.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        e._dialogConfirm = null;
        var t = this._DomNode,
        i = document.body.querySelector(".WTDialog.Mini.Confirm") || document.body.querySelector(".WTDialog.DialogConfirm");
        t != i && (t = i),
        t = t || {
            parentNode: null
        },
        t.parentNode && t.parentNode.removeChild(t),
        delete this
    },
    n.show = function(t, s) {
        var n = this.contentMessage,
        o = this.positionPackage;
        if (o && o instanceof e.MobileClosePositionPackages) {
            for (; n.firstChild;) n.removeChild(n.firstChild);
            o.setAdditionalAttributes({
                confirmButton: this._YesButton,
                notConfirmButton: this._NoButton
            }),
            n.appendChild(o.get())
        } else if ("string" == typeof t) {
            n.innerHTML = t;
            var a = this._Content.querySelector(".WTConfirmMessage");
            a.style.paddingLeft = "22px",
            a.style.paddingRight = "22px"
        } else {
            if (! (t instanceof HTMLElement)) return;
            for (; n.firstChild;) n.removeChild(n.firstChild);
            n.appendChild(t)
        }
        this._Data = s,
        e.DialogConfirm.base.show.apply(this, arguments),
        e._dialogMasterObject.register(this),
        this.positionPackage && e.Socket.register(this),
        i(this, e.DialogConfirm)
    },
    n._onSocketMessage = function(t) {
        function i() {
            a.unfreeze(),
            n.enabled(!0)
        }
        function s(e, t, s, o) {
            e && o(t.some(s), n.requestIsSent) && (i(), n.hide())
        }
        var n = this,
        o = t.msgType,
        a = this.positionPackage || {
            unfreeze: function() {}
        },
        r = a.position;
        if (a.unfreeze = a.unfreeze ? a.unfreeze: function() {},
        r) switch (o) {
        case "closePosition":
        case "deletePendingOrder":
        case "closeOptionPosition":
            "SUCCESS" !== t.msgResult.toUpperCase() && i();
            break;
        case "positions":
            s(!e.valueIsEmpty(r.positionType), e.TraderData.getPositions(),
            function(e) {
                return e.id === r.id
            },
            function(e, t) {
                return ! e || t
            });
            break;
        case "pendingOrders":
            s(!e.valueIsEmpty(r.pendingOrderType), e.TraderData.getPendingOrders(),
            function(e) {
                return e.id === r.id
            },
            function(e) {
                return ! e
            });
            break;
        case "optionsPositions":
            s(!e.valueIsEmpty(r.optionType), e.TraderData.getOptionPositions(),
            function(e) {
                return e.id === r.id
            },
            function(e) {
                return ! e
            });
            break;
        case "changePosition":
            i(),
            this.positionPackage.modifyPositionAvailable()
        }
    },
    n._onButtonTouchEnd = function(e) {
        e.Sender.setPressed(!1)
    },
    n._onWindowResize = function(t) {
        i(this, e.DialogConfirm)
    },
    n._onButtonTouchStart = function(e) {
        e.Sender.setPressed(!0)
    },
    e.getDialogConfirm = function(t) {
        return t ? (e._dialogConfirm = new e.DialogConfirm(t), e._dialogConfirm) : e._dialogConfirm
    },
    n = null,
    e
}),
define("dialogChangePass", ["dialog"],
function(e) {
    e.DialogChangePass = function() {
        e.DialogChangePass.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogChangePass, e.Dialog);
    var t = e.DialogChangePass.prototype;
    return t._onClosed = function() {
        delete e._changePassDialog
    },
    t._onChangeLang = function() {
        e.DialogChangePass.base._onChangeLang.apply(this, arguments),
        this._rulesContainer.innerHTML = (e.LangManager.getStringByKey(this._rulesKey1) || "The password must contain at list 6 charasters") + ": " + (e.LangManager.getStringByKey(this._rulesKey2) || "letters, numbers, underscore")
    },
    t.clearInputsField = function() {
        this._newPassInput.setValue(),
        this._newPassInput2.setValue()
    },
    t._render = function() {
        this._Width = 375,
        this._Title = "Change Password",
        this._Key = "cMFEditPAssword",
        this._ImageList = e.MainImageList,
        this._ImageListRow = this._ImageListRow || 6,
        this._ImageListCol = this._ImageListCol || 12,
        this._Content = e.htmlToDOM(e._Templates.DialogChangePassContent);
        var t = this._Content.querySelector(".DFooterControls"),
        i = this._Content.querySelector(".DCurrentPassInput"),
        s = this._Content.querySelector(".DPasContent"),
        n = this._Content.querySelector(".DNewPassContainer"),
        o = this._Content.querySelector(".DPasswordTypeInput"),
        a = [],
        r = e.LangManager;
        this._modifyBtn = new e.Button({
            ParentNode: t,
            Class: "DButton GreenButton",
            Width: 100,
            Text: "Modify",
            Key: "cCDModify",
            Click: e.Delegate(this, this._onModifyPasswordButtonClick)
        });
        var l = e.investorAccount === !1 ? "cLPFMainPass": "cCPFCurrentPass",
        h = e.investorAccount === !1 ? "Main password": "Current password";
        this._currentPassInput = new e.InputPassword({
            ParentNode: i,
            Label: h,
            Key: l,
            InputType: "Password",
            ChangeValue: e.Delegate(this, this._checkFields)
        }),
        this._rulesKey1 = "cCPFPassMust",
        this._rulesKey2 = "cCPFPassMust2",
        this._rulesContainer = this._Content.querySelector(".DRulesContainer"),
        this._rulesContainer.innerHTML = (e.LangManager.getStringByKey(this._rulesKey1) || "The password must contain at list 6 charasters") + ": " + (e.LangManager.getStringByKey(this._rulesKey2) || "letters, numbers, underscore"),
        this._newPassInput = new e.InputPassword({
            ParentNode: n,
            Label: "New password",
            Key: "cCPFNewPass",
            InputType: "Password",
            ChangeValue: e.Delegate(this, this._checkFields)
        }),
        this._newPassInput2 = new e.InputPassword({
            ParentNode: n,
            Key: "cCPFconfirmation",
            Label: "Confirmation",
            InputType: "Password",
            ChangeValue: e.Delegate(this, this._checkFields)
        }),
        a.push(r.getStringByKey("cLPFMain") || "Main", r.getStringByKey("cLPFInvestors") || "Investor's"),
        this._PasswordType = new e.InputSelect({
            ParentNode: o,
            Width: 150,
            Height: 28,
            Label: "Change password",
            Key: "cLPFChangePass",
            Edit: !1,
            Options: a,
            ChangedValue: e.Delegate(this, this.clearInputsField.bind(this))
        });
        var d = "fr" === e.LangManager.getLang();
        d && (s.style.height = "241px"),
        i.style.marginTop = "",
        e.investorAccount !== !1 && (o.parentNode.removeChild(o), i.style.marginTop = "17px", this.setHeight(d ? 281 : 268), s.style.height = d ? "206px": "193px"),
        e.DialogChangePass.base._render.apply(this, arguments),
        this.addCSSClass("dialogChangePass")
    },
    t.blockButtons = function() {
        this._modifyBtn.setEnabled(!1),
        this._closeBtn.setEnabled(!1)
    },
    t.unblockButtons = function() {
        this._modifyBtn.setEnabled(!0),
        this._closeBtn.setEnabled(!0)
    },
    t.dispose = function() {
        e._changePassDialog = null,
        e._dialogMasterObject.unRegister(this),
        e.Resizer.unRegister(this)
    },
    t._onModifyPasswordButtonClick = function(t) {
        var i, s = this._newPassInput.getValue(),
        n = this._currentPassInput.getValue(),
        o = this._newPassInput2.getValue();
        i = e.Browser.IsMobile ? !!this._currentPassType: !!this._PasswordType.getSelectedOption();
        var a = {
            handler: function() {
                this.unblockButtons()
            }.bind(this),
            args: null
        };
        if (s.length < 5 || s.length > 15) return void e.showErrorDialog(e.LangManager.getStringByKey("cSMTWrongNewPassword") || "Invalid new password", null, a);
        if (s === o) {
            var r = {
                traderID: this._login,
                oldPassword: n,
                newPassword: s,
                isInvestorPassword: i
            };
            switch (e.getTerminal().platformType) {
            case e.PlatformTypes.ptUTIP:
                e.requester.changePassword(r);
                break;
            case e.PlatformTypes.ptMT:
                e.requester.changeMTPassword(r)
            }
            this.setEnabled(!1),
            document.getElementById("WTDialogsContainer").style.position = ""
        } else e.showErrorDialog(e.LangManager.getStringByKey("cSMTPasswordnotMath") || "Passwords do not match", null, a)
    },
    t.show = function(t, i, s) {
        e.DialogChangePass.base.show.apply(this, [null, i, s]),
        this._currentPassInput.setValue(s),
        this._modifyBtn.setEnabled(!1),
        this._login = i,
        this._IsOpen = !0
    },
    t._checkFields = function() {
        var e = this._newPassInput.getValue(),
        t = this._currentPassInput.getValue(),
        i = this._newPassInput2.getValue();
        null != t && "" != t && null != e && "" != e && e == i ? this._modifyBtn.setEnabled(!0) : this._modifyBtn.setEnabled(!1)
    },
    t.saveNewPassword = function() {
        var t;
        if (t = e.Browser.IsMobile ? !Boolean(this._currentPassType) : 0 === this._PasswordType.getSelectedOption()) {
            var i = e.AccountManager,
            s = {
                login: this._login,
                password: this._newPassInput.getValue(),
                serverName: e.Auth.getServer().Name
            };
            i.updateLastAccount(s, i.extractTokenFromStorage());
            var n = i.getConnectionInfo(),
            o = n.Last,
            a = null,
            r = null,
            l = null;
            o && (l = o.LoginIdx, a = o.Server, r = CryptoJS.RC4.decrypt(o.Password || "", e.SecretString).toString(CryptoJS.enc.Utf8)),
            s = {
                login: n[a][l].Login,
                password: r,
                serverIndex: i.getServerIndexByName(a)
            },
            i.updateAuthAccount(s)
        }
    },
    t = null,
    e.getChangePassDialog = function() {
        return e._changePassDialog || (e._changePassDialog = new e.DialogChangePass),
        e._changePassDialog
    },
    e.getChangePassDialogWithoutInit = function() {
        return e._changePassDialog
    },
    e
}),
define("dialogLoginPassword", ["dialog", "dialogChangePass"],
function(e) {
    e.DialogLoginPassword = function(t, i, s) {
        this._login = t,
        this._password = i,
        this._investorPassword = s,
        e.DialogLoginPassword.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.LangManager.register(this)
    },
    e.initClass(e.DialogLoginPassword, e.Dialog);
    var t = e.DialogLoginPassword.prototype;
    return t._onClosed = function() {
        this.dispose(),
        delete e._loginPasswordDialog
    },
    t._render = function() {
        this._Width = 400,
        this._Title = "Confirmation",
        this._Key = "cCPFconfirmation",
        this._Content = e.htmlToDOM(e._Templates.DialogLoginPasswordContent),
        this._regSuccessNode = this._Content.querySelector(".RegSuccess"),
        this._loginPasswordLblNode = this._Content.querySelector(".LoginPasswordLbl"),
        this._loginPasswordValNode = this._Content.querySelector(".LoginPasswordVal"),
        this.buildCaption(),
        this._storageAcc = e.jsonParse(localStorage.getItem("ConnectionsInfo")) || {},
        this._loginInput = new e.Input({
            ParentNode: this._loginPasswordValNode,
            Label: "Login:",
            Key: "cLPFLOgin",
            Width: 110,
            Value: this._login
        });
        var t = this._investorPassword ? "cLPFMainPass": "cLPFPAss",
        i = this._investorPassword ? "Main password": "Password";
        if (this._passwordInput = new e.Input({
            ParentNode: this._loginPasswordValNode,
            Label: i,
            Key: t,
            Width: 110,
            Class: "PasswordInput",
            Value: this._password
        }), this._investorPassword = new e.Input({
            ParentNode: this._loginPasswordValNode,
            Label: "Investor Password",
            Key: "cLPFInvestorPass",
            Width: 110,
            Class: "InvestorPasswordInput",
            Value: this._investorPassword
        }), this._saveCheck = new e.CheckBox({
            ParentNode: this._loginPasswordValNode,
            Label: "Don't remember",
            Key: "cMFAnotherComputer",
            LabelPosition: "Right",
            Checked: this._storageAcc.SaveChecked
        }), this._modifyPasswordBtn = new e.Button({
            ParentNode: this._Content.querySelector(".DFooterControls"),
            Class: "DButton NoButton",
            Width: 110,
            Text: "Modify",
            Key: "cCDModify",
            Click: e.Delegate(this, this._onOpenModifyPasswordClick)
        }), this._confirmBtn = new e.Button({
            ParentNode: this._Content.querySelector(".DFooterControls"),
            Class: "DButton",
            Width: 110,
            Text: "Ok",
            Click: e.Delegate(this, this.dispose)
        }), this.setData(), e.DialogLoginPassword.base._render.apply(this, arguments), this.addCSSClass("DialogLoginPassword"), !this._investorPassword.getValue()) {
            var s = this._investorPassword._DomNode;
            s.parentNode.removeChild(s),
            this._passwordInput.addCSSClass("Short")
        }
    },
    t.buildCaption = function() {
        try {
            this.setTitle(e.LangManager.getStringByKey("cCPFconfirmation") || "Confirmation"),
            this._regSuccessNode.innerHTML = e.LangManager.getStringByKey("cLPFRegSuccess") || "Account is successfully registered";
            var t = e.LangManager.getStringByKey("cLPFyouLogin");
            t ? this._loginPasswordLblNode.innerHTML = t + ":": this._loginPasswordLblNode.innerHTML = "Below is the your account number (username) and password:"
        } catch(e) {}
    },
    t._onChangeLang = function() {
        this.buildCaption()
    },
    t.dispose = function() {
        var t = this._DomNode.parentNode;
        t && t.removeChild(this._DomNode),
        e._loginPasswordDialog = null,
        e._dialogMasterObject.unRegister(this),
        e.Resizer.unRegister(this),
        e.LangManager.unRegister(this);
        var i = document.getElementById("WTDialogBlockscreen");
        i && (i.style.display = "none"),
        e.Browser.IsMobile ? this._storageAcc.SaveChecked = !1 : this._storageAcc.SaveChecked = this._saveCheck.getChecked();
        var s = this._storageAcc,
        n = e.jsonParse(localStorage.getItem("DemoAccount")),
        o = s[n.server];
        s.SaveChecked === !0 && (o[s.Last.LoginIdx].Password = "", s.Last.Password = ""),
        this._storageAcc = s,
        localStorage.setItem("ConnectionsInfo", JSON.stringify(this._storageAcc))
    },
    t.setData = function() {},
    t._onOpenModifyPasswordClick = function() {
        this._storageAcc.SaveChecked = this._saveCheck.getChecked(),
        localStorage.setItem("ConnectionsInfo", JSON.stringify(this._storageAcc)),
        this.dispose(),
        e.getChangePassDialog().show(this, this._login, this._password)
    },
    t.show = function() {
        hidePreloader(),
        e.DialogLoginPassword.base.show.apply(this, arguments),
        document.getElementById("WTDialogsContainer").style.position = "",
        this.buildCaption()
    },
    t._onGoBack = function() {
        return document.getElementById("WTDialogsContainer").style.position = "",
        !1
    },
    e.getLoginPasswordDialog = function(t, i, s) {
        return e._loginPasswordDialog || (e._loginPasswordDialog = new e.DialogLoginPassword(t, i, s)),
        e._loginPasswordDialog
    },
    e.getLoginPasswordDialogWithoutInit = function() {
        return e._loginPasswordDialog
    },
    t = null,
    e
}),
define("bzzaFunctions", ["listener"],
function(e) {
    function t(e) {
        this.prefix = e,
        this.num = 1,
        this.getID = function() {
            return this.prefix + this.num++
        }
    }
    e._UtipFunctions = function() {
        if (! (this instanceof e._UtipFunctions)) return new e._UtipFunctions;
        if (!Date.prototype.toLocaleFormat) {
            var t = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            Date.prototype.toLocaleFormat = function(e) {
                var i, s = {
                    Y: this.getFullYear(),
                    y: this.getFullYear() - (this.getFullYear() >= 2e3 ? 2e3: 1900),
                    m: this.getMonth() + 1,
                    n: t[this.getMonth()],
                    d: this.getDate(),
                    H: this.getHours(),
                    M: this.getMinutes(),
                    S: this.getSeconds()
                };
                for (i in s) e = e.replace("%" + i, s[i] < 10 ? "0" + s[i] : s[i]);
                return e
            }
        }
        e._UtipFunctions.base.constructor.apply(this, arguments)
    },
    e.initClass(e._UtipFunctions, e.Listener);
    var i = e._UtipFunctions.prototype;
    return i.div = function(e, t) {
        return (e - e % t) / t
    },
    i.formattedUtipDate = function(e) {
        return e.replace(/(\d+)\.(\d+)\.(\d+)/, "$2/$1/$3")
    },
    i.getPropertyCount = function(e) {
        var t = 0;
        for (var i in e) e.hasOwnProperty(i) && ++t;
        return t
    },
    i.getPeriodLength = function(t) {
        switch (t) {
        case e.allPeriods.PC_S5:
            return 5e3;
        case e.allPeriods.PC_S10:
            return 1e4;
        case e.allPeriods.PC_S15:
            return 15e3;
        case e.allPeriods.PC_S30:
            return 3e4;
        case e.allPeriods.PC_M1:
            return 6e4;
        case e.allPeriods.PC_M5:
            return 3e5;
        case e.allPeriods.PC_M10:
            return 6e5;
        case e.allPeriods.PC_M15:
            return 9e5;
        case e.allPeriods.PC_M30:
            return 18e5;
        case e.allPeriods.PC_H1:
            return 36e5;
        case e.allPeriods.PC_H2:
            return 72e5;
        case e.allPeriods.PC_H3:
            return 108e5;
        case e.allPeriods.PC_H4:
            return 144e5;
        case e.allPeriods.PC_H6:
            return 216e5;
        case e.allPeriods.PC_H8:
            return 288e5;
        case e.allPeriods.PC_H12:
            return 432e5;
        case e.allPeriods.PC_D1:
            return 864e5;
        case e.allPeriods.PC_W1:
            return 6048e5;
        case e.allPeriods.PC_MN:
        case e.allPeriods.PC_Q1:
            return 96768e5;
        case e.allPeriods.PC_Y1:
            return 290304e5
        }
    },
    i.formattedDate = function(e) {
        if ("" != e) {
            var t = new Date(e);
            return t = new Date(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate(), t.getUTCHours(), t.getUTCMinutes(), t.getUTCSeconds()),
            t.toLocaleFormat("%H:%M:%S")
        }
        return ""
    },
    i.setServerFormatDate = function(e) {
        var t = new Date(e),
        i = 6e4 * t.getTimezoneOffset();
        return e + i
    },
    i.formattedDateForChart = function(t, i) {
        var s = new Date(t);
        switch (i) {
        case e.allPeriods.PC_S5:
        case e.allPeriods.PC_S10:
        case e.allPeriods.PC_S15:
        case e.allPeriods.PC_S30:
            return s.toLocaleFormat("%d %H:%M:%S");
        case e.allPeriods.PC_M1:
        case e.allPeriods.PC_M5:
        case e.allPeriods.PC_M10:
        case e.allPeriods.PC_M15:
        case e.allPeriods.PC_M30:
        case e.allPeriods.PC_H1:
        case e.allPeriods.PC_H2:
        case e.allPeriods.PC_H3:
        case e.allPeriods.PC_H4:
        case e.allPeriods.PC_H6:
        case e.allPeriods.PC_H8:
        case e.allPeriods.PC_H12:
            return s.toLocaleFormat("%d.%m %H:%M");
        case e.allPeriods.PC_D1:
        case e.allPeriods.PC_W1:
        case e.allPeriods.PC_MN:
            return s.toLocaleFormat("%d.%m.%Y");
        case e.allPeriods.PC_Q1:
        case e.allPeriods.PC_Y1:
            return s.toLocaleFormat("%m.%Y")
        }
    },
    i.getMonday = function(e) {
        e = new Date(e);
        var t = e.getDay(),
        i = e.getDate() - t + (0 == t ? -6 : 1);
        return new Date(e.setDate(i))
    },
    i.mergeObjects = function(e, t) {
        var i = {};
        for (var s in e) i[s] = e[s];
        for (var s in t) i[s] = t[s];
        return i
    },
    i.unique = function(e) {
        for (var t = {},
        i = 0; i < e.length; i++) {
            var s = e[i];
            t[s] = !0
        }
        return Object.keys(t)
    },
    i.saveLastOpenedWindows = function(t) {
        var i = e.UserSettings.Terminal.LastOpenedChart;
        "undefined" == typeof i && (i = []),
        i = this.unique(i);
        var s = i.indexOf(t);
        s !== -1 ? i.splice(s, 1) : 5 == i.length && i.splice(0, 1),
        i.push(t),
        e.UserSettings.Terminal.LastOpenedChart = i
    },
    i.getLastPeriod = function() {
        var t = "undefined" == typeof e.UserSettings.Terminal.LastPeriod ? e.allPeriods.PC_H1: e.UserSettings.Terminal.LastPeriod;
        return t
    },
    i.getLastCrosshair = function() {
        var t = "undefined" != typeof e.UserSettings.Terminal.LastCrosshair && e.UserSettings.Terminal.LastCrosshair;
        return t
    },
    i.getLastAutoScroll = function() {
        var t = "undefined" != typeof e.UserSettings.Terminal.LastAutoScroll && e.UserSettings.Terminal.LastAutoScroll;
        return t
    },
    i.getMaxVisibleBarCount = function() {
        var t = "undefined" == typeof e.UserSettings.Terminal.LastMaxVisibleBarCount ? 100 : e.UserSettings.Terminal.LastMaxVisibleBarCount;
        return t
    },
    i.searchChartData = function(t) {
        var i;
        for (var s in e.UserSettings.Terminal.OpenedCharts) if (i = e.UserSettings.Terminal.OpenedCharts[s], i.key === t) return i
    },
    i.sortObjectByKey = function(e) {
        var t = new Array,
        i = {};
        for (var s in e) t.push(s);
        t.sort();
        for (var s in t) i[t[s]] = e[t[s]];
        return i
    },
    i.getStepDecimals = function(e) {
        var t = e.toString().split(".");
        return t.length <= 1 ? 0 : t[1].length
    },
    i.getDecimalCount = function(t) {
        if (e.getTerminal().platformType == e.PlatformTypes.ptUTIP) {
            var i = e.TraderData.getPositionStep();
            switch (i) {
            case e._TraderData.positionStep.ps1:
                return 0;
            case e._TraderData.positionStep.ps0_1:
                return 1;
            case e._TraderData.positionStep.ps0_01:
                return 2
            }
        } else if (e.getTerminal().platformType == e.PlatformTypes.ptMT) {
            var s = e.SymbolsData.getMTSymbolGroupsParameters()[t.getSymbolGroupName()];
            return this.getStepDecimals(s.lotStep)
        }
    },
    i.splitPriceWithDigits = function(t, i, s) {
        null == s && (s = ".");
        var n = parseInt(i);
        switch (i) {
        case "5":
        default:
            var n = 3,
            o = Math.round(1e5 * t % 1e3);
            t = e.numberFormat(parseInt(100 * t) / 100, 2, s, " ");
            break;
        case "4":
            n = parseInt(i) - 2,
            o = Math.round(1e4 * t % 100),
            t = e.numberFormat(parseInt(100 * t) / 100, i - 2, s, " ");
            break;
        case "3":
            o = Math.round(1e3 * t % 1e3),
            t = e.numberFormat(~~t, i - 3, s, " ") + ".";
            break;
        case "2":
            o = Math.round(1e3 * t % 1e3 / 10),
            t = e.numberFormat(~~t, i - 2, s, " ") + ".";
            break;
        case "1":
            o = Math.round(100 * t % 100 / 10),
            t = e.numberFormat(~~t, i - 1, s, " ") + ".";
            break;
        case "0":
            t = e.numberFormat(t, i, s, " ")
        }
        var a = 0,
        r = t.indexOf(".");
        if (r != -1) {
            o = o.toString();
            var l = o.length,
            h = t.length,
            d = h - r - 1,
            c = t.indexOf(" "),
            u = 6.85,
            g = 2,
            p = 6.25;
            for (c = ~~ (c != -1), d = d < 0 ? 0 : d, a = r * u + g + d * u - c * p; n > l;) o = "0" + o,
            l++
        } else o = "";
        return {
            value: t,
            tail: o,
            offsetLeft: a
        }
    },
    i.getVolumesList = function(t, i) {
        var s, n, o, a, r = [],
        l = 0,
        h = 0;
        if (e.getTerminal().platformType == e.PlatformTypes.ptUTIP) {
            switch (o = i || e.tradeFunctions.maxVolumeOnSymbol(t, e.TraderData), e.TraderData.getPositionStep()) {
            case e._TraderData.positionStep.ps1:
                s = 1,
                n = 6;
                break;
            case e._TraderData.positionStep.ps0_1:
                s = .1,
                n = 1;
                break;
            case e._TraderData.positionStep.ps0_01:
                s = .01,
                n = 1
            }
            for (; n <= 10 && (l = n < 6 ? s * n: n - 5, 0 !== o);) {
                if (o > l) r.push(e.numberFormat(l, 2, ".", "")),
                h = l;
                else if (o !== h) {
                    r.push(e.numberFormat(o, 2, ".", ""));
                    break
                }
                n += 1
            }
        } else if (e.getTerminal().platformType == e.PlatformTypes.ptMT) {
            var d = e.SymbolsData.getMTSymbolGroupsParameters()[t.getSymbolGroupName()];
            o = d.maximumLot,
            s = d.minimumLot,
            a = d.lotStep,
            l = 0 == s ? a: s;
            for (var c = Math.max(this.getStepDecimals(s), this.getStepDecimals(a)), u = 10, g = 0; g < u; g++) r.push(e.numberFormat(l, c, ".", "")),
            g != u - 1 && (l += a);
            var p = u - Math.floor(l);
            l = Math.ceil(l),
            l == e.parseFloat(r[r.length - 1]) && (r[r.length - 1] = parseInt(l).toString(), l++, p--);
            for (var m = 0; m < p; m++) r.push(l.toString()),
            l++
        }
        return 0 === r.length && r.push(e.numberFormat(s, 2, ".", "")),
        r
    },
    i.getMarketOrderTypeContent = function(t) {
        var i, s = e.htmlToDOM("<div></div>");
        switch (t) {
        case "Buy":
            s.classList.add("Buy"),
            s.classList.add("icon-buy"),
            i = e.Container({
                Items: [s, "Buy"]
            });
            break;
        case "Sell":
            s.classList.add("Sell"),
            s.classList.add("icon-sell"),
            i = e.Container({
                Items: [s, "Sell"]
            })
        }
        return i
    },
    i.getPendingOrderTypeContent = function(t) {
        var i, s, n = e.htmlToDOM("<div></div>");
        switch (t) {
        case "100":
            n.classList.add("BuyLimit"),
            s = e.LangManager.getStringByKey("cBuyLimit") || "Buy limit",
            i = e.Container({
                Items: [n, s]
            });
            break;
        case "101":
            n.classList.add("SellLimit"),
            s = e.LangManager.getStringByKey("cSellLimit") || "Sell limit",
            i = e.Container({
                Items: [n, s]
            });
            break;
        case "102":
            n.classList.add("BuyStop"),
            s = e.LangManager.getStringByKey("cBuyStop") || "Buy stop",
            i = e.Container({
                Items: [n, s]
            });
            break;
        case "103":
            n.classList.add("SellStop"),
            s = e.LangManager.getStringByKey("cSellStop") || "Sell stop",
            i = e.Container({
                Items: [n, s]
            });
            break;
        default:
            i = t
        }
        return i
    },
    i.getOptionTypeContent = function(t, i) {
        var s, n = e.htmlToDOM("<div></div>");
        switch (parseInt(t)) {
        case e.OptionPositionTypes.highExpress:
            n.classList.add("TableTradeGreenArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            });
            break;
        case e.OptionPositionTypes.lowExpress:
            n.classList.add("TableTradeRedArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            });
            break;
        case e.OptionPositionTypes.highClassic:
            n.classList.add("TableTradeGreenArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            });
            break;
        case e.OptionPositionTypes.lowClassic:
            n.classList.add("TableTradeRedArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            });
            break;
        case e.OptionPositionTypes.top:
            n.classList.add("TableTradeTopArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            });
            break;
        case e.OptionPositionTypes.bottom:
            n.classList.add("TableTradeBottomArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            });
            break;
        case e.OptionPositionTypes.outside:
            n.classList.add("TableTradeOutsideArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            });
            break;
        case e.OptionPositionTypes.inside:
            n.classList.add("TableTradeInsideArrow"),
            s = e.Container({
                Items: [n, e.OptionTypeNames[parseInt(i)]]
            })
        }
        return s
    },
    i.addTable = function(t, i) {
        var s = e.htmlToDOM(e._Templates.FixedHeadGrid),
        n = s.querySelector(".WTTableBody"),
        o = s.querySelector(".WTTableHeader");
        return n.appendChild(t._DomNode),
        o.appendChild(i._DomNode),
        s
    },
    i.isExistsAccount = function(e, t) {
        var i = -1;
        if (!e) return i;
        for (var s = 0; s < e.length; s++) {
            var n = e[s];
            if (n.Login === t) {
                i = s;
                break
            }
        }
        return i
    },
    i.getLoginIndexByServer = function(e, t) {
        for (var i = -1,
        s = 0; s < e.length; s++) {
            var n = e[s];
            if (n.Login === t) {
                i = s;
                break
            }
        }
        return i
    },
    i.saveLogin = function(t) {
        if (!t.Login || !t.Server.Name) return {};
        var i = e.jsonParse(localStorage.getItem("ConnectionsInfo")) || {},
        s = i[t.Server.Name] || [],
        n = this.isExistsAccount(s, t.Login);
        n == -1 ? s.push({
            Login: t.Login,
            Password: i.SaveChecked ? "": CryptoJS.RC4.encrypt(t.Password, e.SecretString).toString(),
            Token: ""
        }) : (s[n].Password = !i.SaveChecked && t.Password ? CryptoJS.RC4.encrypt(t.Password, e.SecretString).toString() : "", t.Password = !i.SaveChecked && t.Password ? t.Password: ""),
        i[t.Server.Name] = s,
        i.Last = {
            Server: t.Server.Name,
            LoginIdx: this.getLoginIndexByServer(s, t.Login),
            Token: ""
        };
        var o = e.getMobileSignInDialog();
        return o.setStorageAcc(i),
        localStorage.setItem("ConnectionsInfo", JSON.stringify(i)),
        e.valueIsEmpty(t) ? {}: t
    },
    i.getUTCDate = function(e) {
        var t = new Date(e);
        return new Date(t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate(), t.getUTCHours(), t.getUTCMinutes(), t.getUTCSeconds())
    },
    i.isVolumeValid = function(t, i) {
        var s = !1,
        n = 0,
        o = 0;
        switch (i) {
        case e._TraderData.positionStep.ps0_001:
            o = 3;
            break;
        case e._TraderData.positionStep.ps0_01:
            o = 2;
            break;
        case e._TraderData.positionStep.ps0_1:
            o = 1;
            break;
        case e._TraderData.positionStep.ps1:
            o = 0
        }
        var a = Math.round(1e3 * t) % 1e3,
        r = Math.pow(10, -o);
        return n = a % 10 > 0 ? 3 : a % 100 > 0 ? 2 : a % 1e3 > 0 ? 1 : 0,
        t >= r && n <= o && (s = !0),
        s
    },
    i.getDecimalIndex = function(e) {
        var t = e.indexOf(",");
        return t > -1 ? t: t = e.indexOf(".")
    },
    i.getLineWidth = function() {
        for (var t = [], i = [{
            image: "res/img/lineWidth/1_2.png",
            text: "1/2 pt",
            data: 1
        },
        {
            image: "res/img/lineWidth/3_4.png",
            text: "3/4 pt",
            data: 2
        },
        {
            image: "res/img/lineWidth/1.png",
            text: "1 pt",
            data: 3
        },
        {
            image: "res/img/lineWidth/1_1_2.png",
            text: "1 1/2 pt",
            data: 4
        },
        {
            image: "res/img/lineWidth/2_1_4.png",
            text: "2 1/4 pt",
            data: 6
        },
        {
            image: "res/img/lineWidth/3.png",
            text: "3 pt",
            data: 8
        },
        {
            image: "res/img/lineWidth/4_1_2.png",
            text: "4 1/2 pt",
            data: 12
        },
        {
            image: "res/img/lineWidth/6.png",
            text: "6 pt",
            data: 20
        }], s = [{
            image: "res/img/DarkImg/lineWidth/1_2.png",
            text: "1/2 pt",
            data: 1
        },
        {
            image: "res/img/DarkImg/lineWidth/3_4.png",
            text: "3/4 pt",
            data: 2
        },
        {
            image: "res/img/DarkImg/lineWidth/1.png",
            text: "1 pt",
            data: 3
        },
        {
            image: "res/img/DarkImg/lineWidth/1_1_2.png",
            text: "1 1/2 pt",
            data: 4
        },
        {
            image: "res/img/DarkImg/lineWidth/2_1_4.png",
            text: "2 1/4 pt",
            data: 6
        },
        {
            image: "res/img/DarkImg/lineWidth/3.png",
            text: "3 pt",
            data: 8
        },
        {
            image: "res/img/DarkImg/lineWidth/4_1_2.png",
            text: "4 1/2 pt",
            data: 12
        },
        {
            image: "res/img/DarkImg/lineWidth/6.png",
            text: "6 pt",
            data: 20
        }], n = 0; n < i.length; n++)"black_color_scheme" != e.UserSettings.Terminal.ColorScheme ? t.push({
            Template: e._Templates.ImageMenuItem,
            ImageUrl: i[n].image,
            Text: i[n].text,
            Data: i[n].data
        }) : t.push({
            Template: e._Templates.ImageMenuItem,
            ImageUrl: s[n].image,
            Text: s[n].text,
            Data: s[n].data
        });
        return t
    },
    i.calcLineStyle = function(e) {
        switch (e) {
        case "solid":
            return [];
        case "long_dash":
            return [3, 5];
        case "dotted":
            return [3, 3];
        case "dot_dash":
            return [10, 3, 1, 3];
        case "dash_two_dots":
            return [10, 3, 1, 3, 1, 3]
        }
    },
    i.getLineStyle = function() {
        for (var t = [], i = [{
            image: "res/img/lineStyle/solid.png",
            data: "solid"
        },
        {
            image: "res/img/lineStyle/long_dash.png",
            data: "long_dash"
        },
        {
            image: "res/img/lineStyle/dotted.png",
            data: "dotted"
        },
        {
            image: "res/img/lineStyle/dot_dash.png",
            data: "dot_dash"
        },
        {
            image: "res/img/lineStyle/dash_two_dots.png",
            data: "dash_two_dots"
        }], s = [{
            image: "res/img/DarkImg/lineStyle/solid.png",
            data: "solid"
        },
        {
            image: "res/img/DarkImg/lineStyle/long_dash.png",
            data: "long_dash"
        },
        {
            image: "res/img/DarkImg/lineStyle/dotted.png",
            data: "dotted"
        },
        {
            image: "res/img/DarkImg/lineStyle/dot_dash.png",
            data: "dot_dash"
        },
        {
            image: "res/img/DarkImg/lineStyle/dash_two_dots.png",
            data: "dash_two_dots"
        }], n = 0; n < i.length; n++)"black_color_scheme" != e.UserSettings.Terminal.ColorScheme ? t.push({
            Template: e._Templates.ImageMenuItem,
            ImageUrl: i[n].image,
            Data: i[n].data
        }) : t.push({
            Template: e._Templates.ImageMenuItem,
            ImageUrl: s[n].image,
            Data: s[n].data
        });
        return t
    },
    i.setIsVisibleMenuColumn = function(e, t, i) {
        if (e && e.getContextMenu()) {
            var s = e.getContextMenu().getItemById("Columns"),
            n = s.getMenu().getItemById(t);
            n && (i ? n._DomNode.style.display = "": n._DomNode.style.display = "none")
        }
    },
    i.historyNumberFormat = function(t, i, s) {
        var n = e.SymbolsData.getSymbols()[i];
        if (n) {
            var o = n._Digits;
            return e.numberFormat(t, o, s || ",", "")
        }
        return e.numberFormatWithNoRound(t, s || ",")
    },
    i.isHoliday = function(t, i) {
        for (var s = !1,
        n = e.SymbolsData.getSymbolsGroupById(parseInt(i.getSymbolGroupID())), o = e.SymbolsData.getHolidaysByIds(n.HolidaysID), a = 0; a < o.length; a++) {
            var r = o[a].startDate,
            l = o[a].endDate;
            if (t >= r && t <= l) {
                s = !0;
                break
            }
        }
        return s
    },
    i.isTradeTime = function(t, i) {
        var s = new Date(t),
        n = s.getDay() + 1,
        o = s.getHours(),
        a = s.getUTCMinutes(),
        r = e.SymbolsData.getSymbolGroupByName(i.getSymbolGroupName()),
        l = new Date;
        l.setHours(r.tradeMode[n].openHour),
        l.setMinutes(r.tradeMode[n].openMinute),
        l.setSeconds(0);
        var h = new Date;
        h.setHours(r.tradeMode[n].closeHour),
        h.setMinutes(r.tradeMode[n].closeMinute),
        h.setSeconds(0);
        var d = new Date;
        return d.setHours(o),
        d.setMinutes(a),
        d.setSeconds(0),
        l <= d && d <= h
    },
    i.isAllowTrade = function(e, t) {
        return ! this.isHoliday(e, t) && this.isTradeTime(e, t)
    },
    i.getNextExpiryTime = function(t, i, s) {
        var n = {
            isExists: !0,
            time: 0
        },
        o = new Date(s),
        a = 0,
        r = 0,
        l = 0;
        switch (i) {
        case e.OptionSettingsType.express:
            var h = o.getUTCSeconds();
            r = o.getUTCHours(),
            a = o.getUTCMinutes(),
            l = h < 30 ? a + 1 : a + 2,
            l > 59 && (r++, l %= 60),
            r > 23 && (r = 0),
            n.time = new Date(o.getUTCFullYear(), o.getUTCMonth(), o.getUTCDate(), r, l, 0, 0).valueOf();
            break;
        case e.OptionSettingsType.classic:
            r = o.getUTCHours(),
            a = o.getUTCMinutes(),
            a >= 10 && a <= 24 ? l = 30 : a >= 25 && a <= 39 ? l = 45 : a >= 40 && a <= 54 ? (l = 0, r++, r > 23 && (r = 0, o.setDate(o.getDate() + 1))) : a >= 55 && a <= 59 ? (l = 15, r++, r > 23 && (r = 0, o.setDate(o.getDate() + 1))) : a >= 0 && a <= 9 && (l = 15),
            n.time = new Date(o.getUTCFullYear(), o.getUTCMonth(), o.getUTCDate(), r, l, 0, 0).valueOf()
        }
        var d = e.OptionsSettings.getOptionSettingsByName(t);
        if (d) {
            var c = e.SymbolsData.getSymbols()[d.getSymbolName()];
            c ? this.isAllowTrade(n.time, c) && this.isAllowTrade(this.setServerFormatDate(s), c) || (n.isExists = !1) : n.isExists = !1
        } else n.isExists = !1;
        return n
    },
    i.getExpiryDates = function(t, i, s) {
        var n = {
            strings: [],
            values: []
        },
        o = e.OptionsSettings.getFavoritesByType(i),
        a = this.getNextExpiryTime(o.getName(), i, s),
        r = 0,
        l = 0;
        if (a.isExists) {
            var h = e.SymbolsData.getSymbols()[o.getSymbolName()];
            if (h) switch (i) {
            case e.OptionSettingsType.express:
                for (; r <= 3;) l = a.time + 6e4 * r,
                !this.isHoliday(l, h) && this.isTradeTime(l, h) && (n.strings.push(new Date(l).toLocaleFormat("%H:%M")), n.values.push(l)),
                r++;
                break;
            case e.OptionSettingsType.classic:
                for (; r <= 45;) l = a.time + 6e4 * r,
                !this.isHoliday(l, h) && this.isTradeTime(l, h) && (n.strings.push(new Date(l).toLocaleFormat("%H:%M")), n.values.push(l)),
                r += 15
            }
        }
        return n
    },
    i.getOptionTimesForChart = function(t, i, s) {
        var n = {
            isExists: !1,
            expiryTime: -1,
            stopTime: -1,
            openDate: -1
        };
        if (t.optionPosition) var o = e.TraderData.getOptionPositionById(t.optionPosition.id);
        if (!i) return n;
        if (o && s !== !0) n.openDate = e.UtipFunctions.getUTCDate(t.optionPosition.openDate).valueOf(),
        n.expiryTime = e.UtipFunctions.getUTCDate(t.optionPosition.expiryDate).valueOf(),
        n.stopTime = n.expiryTime - 1e3 * t.optionPosition.stopLine,
        n.isExists = !0;
        else {
            var a = i.lastSelectedValue;
            a != -1 && (n.expiryTime = this.getUTCDate(e.SymbolsData._LastChangedTime).valueOf() + a),
            n.stopTime = n.expiryTime - i.getStopLineByPeriod(a)
        }
        return n
    },
    i.setChartByOptionSettings = function(t, i, s, n) {
        n = void 0 != n && n;
        var o = e.cloneObject(e.UserSettings.WindowsTemplates || e.getDefaultWindowsTemplate());
        switch (s) {
        case e.OptionSettingsType.classic:
            o.period = e.allPeriods.PC_M1;
            break;
        case e.OptionSettingsType.express:
            o.period = e.allPeriods.PC_S5
        }
        o.autoScroll = !0,
        o.useOffset = !0,
        o.offset = e.UserSettings.WindowsTemplates.offset;
        var a = e.Charts2.isOpenedChart(t);
        if (!a || n) {
            var r = e.getTerminal().addNewChart(t, o, i, s),
            l = e.getTerminal().getSwiperQuotes(),
            h = l.getSelectedPage(),
            d = e.tradePanelConst,
            c = d.workMode,
            u = "Quotes" == h.getId() ? c.market: c.binary,
            g = e.valueIsEmpty(s) || u !== c.binary ? d.toolType.market: s,
            p = {
                workMode: u,
                toolType: g,
                symbol: e.SymbolsData.getSymbols()[t],
                binaryOption: e.OptionsSettings.byID(i)
            };
            r.changeData(p)
        } else e.getTerminal().setActiveChart(t)
    },
    i.canCloseOptionPosition = function(t) {
        if (0 == parseInt(t.stopLine)) return ! 1;
        var i = t.expiryDate - 1e3 * parseInt(t.stopLine),
        s = e.SymbolsData.getLastChangedTime();
        return i > s
    },
    i.canClosePendingOrder = function(t, i, s) {
        return Math.abs(e.parseFloat(t.openPrice) - i) > s
    },
    i.canClosePosition = function(t, i, s, n) {
        return Math.abs(t - s) <= n ? e.TradeLineType.takeProfit: Math.abs(i - s) <= n ? e.TradeLineType.stopLoss: null
    },
    i.radToDeg = function(e) {
        return e * (180 / Math.PI)
    },
    i.degToRad = function(e) {
        return e * (Math.PI / 180)
    },
    i.getDecimals = function(t) {
        var i, s = e.getTerminal();
        if (s.platformType == e.PlatformTypes.ptUTIP) i = 2;
        else if (s.platformType == e.PlatformTypes.ptMT) {
            var n = e.SymbolsData.getMTSymbolGroupsParameters()[t],
            o = n.minimumLot,
            a = n.lotStep;
            i = Math.max(this.getStepDecimals(o), this.getStepDecimals(a))
        }
        return i
    },
    i.pasteNumberValueBetweenValues = function(e, t, i) {
        if (!t || t < 0) return e || [];
        e || (e = []);
        var s = e.indexOf(t);
        if (s !== -1) return i === !0 && e.splice(s + 1),
        e;
        s = 0;
        for (var n = e.length,
        o = 0; o < n && !(e[o] > t); ++o) s++;
        return e.splice(s, 0, t),
        i === !0 && e.splice(s + 1),
        e
    },
    i.connectionLost = function() {
        var t = e.getTerminal(),
        i = e.Browser.IsMobile ? e.getMobileSignInDialog() : null;
        e.Browser.IsMobile && e.serversMode == e.serversModes.fromLocalStorage && (i.getSignInButton().setEnabled(!1), e.getMobileDialogServersSearch().getServersList()),
        hidePreloader();
        var s = document.getElementById("WTDialogsContainer");
        s && (s.style.display = ""),
        t && (t.wantToReconnect = !0, e.Browser.IsMobile || (e.SymbolsData._LastChangedTime = 0, t.configureChartContainerBackground()), t.destroyTerminal(), t.clearTerminalDom(), t.saveAndCloseChartsWindows(), e.Charts2.closeAllGraphicWindows(), e.AccountManager.clearToken(), e._dialogMasterObject.hideAll(), e.Browser.IsMobile && e.getMobileDialogStart().show());
        var n = e._dialogMasterObject.getBlockscreen();
        n.style.display = "none",
        n.classList.remove("RestartMode");
        var o = e.LangManager.getStringByKey("cCUTCantConnectToServer") || "Unable to connect to server";
        if (e.Browser.IsMobile) {
            var a, r = e.getMobileOpenDemoDialogWithoutInit(),
            l = e.getMobileSignInDialogWithoutInit();
            r && (r._openDemoBtn.setEnabled(!0), r.getIsOpen() && (a = r)),
            l && (l._signInBtn.setEnabled(!0), l.getIsOpen() && (a = l)),
            a = a ? a: e._mobileDialogStart || null,
            e.showErrorDialog(o, null, null, a)
        } else e.AuthModule.show(0),
        e.AuthModule.error("Unable to connect to server")
    },
    i.getPositionPostfixType = function(t) {
        t = t || {};
        var i = e.valueIsEmpty.bind(e),
        s = t.positionType,
        n = t.pendingOrderType,
        o = t.optionType;
        return i(s) ? i(n) ? i(o) ? null: o: n: s
    },
    i.binaryEquityEnough = function(t) {
        var i = e.parseFloat,
        s = e.TraderData,
        n = s.getTraderInfo(),
        o = s.getPositionsMargin(),
        a = s.getSumsDetails(),
        r = a.sumInputBonus,
        l = a.sumOutputBonus,
        h = Math.round(100 * (i(a.sumInput) - i(a.sumOutput))) / 100,
        d = Math.round(100 * (i(r) - i(l))) / 100,
        c = h + d + i(a.sumHistory) + i(a.sumOptionDeals) + s.getPositionsProfit() + -1 * s.calcOptionPositionsProfit() - s.optionsInvestments(),
        u = parseInt(t) || 0,
        g = 0 == o && c >= u || c - u >= o,
        p = c >= i(n.minDeposit),
        m = !Boolean(parseInt(n.equityMarginCall)) || c - (i(r) - i(l)) - u >= 0;
        return g && p && m
    },
    i.preloadImages = function() {
        for (var arguments = this.preloadImages.arguments,
        e = arguments.length,
        t = [], i = 0; i < e; i++) t[i] = new Image,
        t[i].src = arguments[i]
    },
    i.filterOnlyBinaryServersIOS = function(e) {
        return window.cordova && (WT_Device.iphone() || WT_Device.ipad()) && (e = e.filter(function(e) {
            return "binary" !== e.Type
        })),
        e
    },
    i.availableToolTypesBySymbol = function(t) {
        var i = t.getSymbolName(),
        s = s = !e.getTerminal().useOptions,
        n = e.getTerminal().useOnlyOptions,
        o = {
            market: [],
            pending: [],
            binary: []
        };
        if (!t.allowTrade()) return o;
        if (!n && s || (o.binary = e.OptionsSettings.getAvailableTypesBySymbolName(i)), !n && e.SymbolsData.isActiveSymbol(i)) {
            var a = e.tradePanelConst,
            r = a.workMode,
            l = a.toolType,
            h = l[r.pending];
            o.market = [l[r.market][0]],
            o.pending = [h.buyLimit, h.sellLimit, h.buyStop, h.sellStop]
        }
        return o
    },
    i = null,
    e.generator = new t("id"),
    e.UtipFunctions = new e._UtipFunctions,
    e
}),
define("input", ["control"],
function(e) {
    e.Input = function(t) {
        this._Label = "",
        this._LabelPosition = "Left",
        this._LabelPostfix = null,
        this._InputType = "Text",
        this._Autofocus = !1,
        this._Template = e._Templates.Input,
        this._Value = "",
        this._valueLength = 0,
        this._Focused = !1,
        this._FieldClass = null,
        this._MaxLength = 20,
        this._Placeholder = null,
        this._PlaceholderKey = null,
        this._Picture = null,
        this._ReadOnly = !1,
        this._Disabled = !1,
        this._Icon = null,
        this._Caption = null,
        this._IconClass = "",
        this._defineEvents(["ChangedValue", "ChangeValue", "Focus", "Blur", "KeyUp", "KeyPress", "KeyDown", "Click"]),
        e.Input.base.constructor.apply(this, arguments)
    },
    e.initClass(e.Input, e.BaseControl);
    var t = e.Input.prototype;
    t._onChangeLang = function() {
        var t = e.LangManager.getStringByKey(this._Key);
        t && this.setLabel(t);
        var i = e.LangManager.getStringByKey(this._PlaceholderKey);
        i && this.setPlaceholder(i)
    },
    t._render = function() {
        e.Input.base._render.apply(this, arguments);
        var t = this._LabelPosition;
        null == this._LabelPostfix && (this._LabelPostfix = "Left" == t || "Top" == t ? ":": "");
        var i = this._onChangedValue.bind(this),
        s = this._binds;
        s.changed = i,
        s.input = i,
        s.keyup = this._onKeyUp.bind(this),
        s.focus = this._onFocus.bind(this),
        s.blur = this._onBlur.bind(this),
        s.keypress = this._onKeyPress.bind(this),
        s.keydown = this._onKeyDown.bind(this),
        s.click = this._onClick.bind(this),
        s.touchstart = this._onTouchStart.bind(this),
        this._binds = s;
        var n = e.LangManager,
        o = n.getStringByKey.bind(n),
        a = this.getDomNode(),
        r = this._fieldNode = a.querySelector(".WTInputField"),
        l = this._iconNode = a.querySelector(".WTInputSelectIcon") || a.querySelector(".WTInputFieldIcon"),
        h = this._captionNode = a.querySelector(".WTInputSelectCaption") || a.querySelector(".WTInputFieldCaption");
        this._labelNode = a.querySelector(".WTInputLabel"),
        this._pictureNode = a.querySelector(".WTInputPicture");
        var d = this._Icon,
        c = this._Caption;
        if (d && l) {
            var u = l.style;
            u.background = 'url("' + d + '")',
            u.display = "inline-block"
        } else c && h && (h.innerText = c, h.style.display = "inline-block");
        var g = this._IconClass;
        l && g && e.addCSSClass(l, g);
        var p = this._Picture;
        null != p && (this._pictureNode.src = p);
        var m = this._FieldClass;
        null != m && (r.className += " " + m),
        r && this._ReadOnly && r.setAttribute("readonly", ""),
        r && this._Disabled && r.setAttribute("disabled", ""),
        this.setInputType(this._InputType),
        this.setAutofocus(this._Autofocus),
        this.setWidth(this._Width);
        var _ = this._Placeholder,
        y = this._PlaceholderKey; (y || _) && (this._Placeholder = o(y) || _, r.setAttribute("placeholder", this._Placeholder));
        var S = e.addEvent,
        f = s.changed;
        if (S(r, "change", f), S(r, "input", f), S(r, "keyup", s.keyup), S(r, "focus", s.focus), S(r, "blur", s.blur), S(r, "keypress", s.keypress), S(r, "keydown", s.keydown), S(r, "click", s.click), WT_Device.iphone()) {
            var v = s.touchstart;
            S(r, "touchstart", v),
            S(a, "touchstart", v)
        }
        var C = (this._Value || "").toString();
        C && (this.setValue(C), this._valueLength = C.length);
        var b = this._Key,
        T = this._Label; (b || y) && (T = this._Label = o(b) || T, this._registerToLangManager = !0),
        this.setLabel(T),
        this.setLabelPosition(t),
        this._Disabled === !0 && (r.disabled = "disabled")
    },
    t._onClick = function(e) {
        this._fieldNode.focus(),
        this.Click.fire({
            event: e,
            sender: this
        })
    },
    t._onChangedValue = function(e) {
        this.ChangedValue.fire({
            event: e,
            sender: this
        }),
        this._valueLength = this._Value.toString().length
    },
    t._onKeyUp = function(e) {
        this._fieldNode.value !== this._Value && (this._Value = this._fieldNode.value, this.KeyUp.fire({
            event: e,
            sender: this
        }), this.ChangeValue.fire({
            event: e,
            sender: this,
            updateStops: !1
        })),
        this._valueLength = this._Value.toString().length
    },
    t._onKeyPress = function(e) {
        this.KeyPress.fire({
            event: e,
            sender: this
        })
    },
    t._onKeyDown = function(e) {
        e.stopPropagation(),
        this._valueLength < this._MaxLength || 8 == e.keyCode || 46 == e.keyCode || 37 == e.keyCode || 39 == e.keyCode ? (this._valueLength++, this.KeyDown.fire({
            event: e,
            sender: this
        })) : e.preventDefault()
    },
    t._onTouchStart = function(e) {
        this._fieldNode.startTouchX = this._DomNode.startTouchX = e.targetTouches[0].screenX,
        this._fieldNode.startTouchY = this._DomNode.startTouchY = e.targetTouches[0].screenY,
        this._labelNode && (this._labelNode.startTouchX = e.targetTouches[0].screenX, this._labelNode.startTouchY = e.targetTouches[0].screenY)
    },
    t.setValidity = function(e) {
        e !== !1 ? this.removeCSSClass("NoValid") : this.addCSSClass("NoValid")
    },
    t._onFocus = function(t) {
        var i = e.getTerminal();
        i && this._ReadOnly !== !0 && (i.isKeyboardOpened = !0),
        t.returnValue ? this._Focused = !0 : this._Focused = !1,
        this.Focus.fire({
            event: t,
            sender: this
        })
    },
    t._onBlur = function(t) {
        var i = e.getTerminal();
        i && (i.isKeyboardOpened = !1),
        this.Blur.fire({
            event: t,
            sender: this
        })
    },
    t.setLabelPosition = function(t) {
        if (this._labelNode) {
            switch (e.removeCSSClass(this._labelNode, "Position" + this._LabelPosition), t) {
            case "Right":
            case "Top":
                this._LabelPosition = t;
                break;
            case "Inside":
                this._LabelPosition = t;
                break;
            case "Template":
                this._LabelPosition = t;
                break;
            default:
                this._LabelPosition = "Left"
            }
            "Right" == this._LabelPosition ? this._DomNode.appendChild(this._labelNode) : "Inside" == this._LabelPosition ? this._DomNode.lastChild.lastChild.insertBefore(this._labelNode, this._DomNode.lastChild.lastChild.firstChild) : "Template" == this._LabelPosition || this._DomNode.insertBefore(this._labelNode, this._DomNode.firstChild),
            e.addCSSClass(this._labelNode, "Position" + this._LabelPosition)
        }
    },
    t.setInputType = function(e) {
        this._InputType = e,
        this._fieldNode.type = this._InputType.toLowerCase()
    },
    t.showValueIsIncorrect = function() {
        this._incorrectValueNode || (this._incorrectValueNode = e.htmlToDOM('<div class="IncorrectLabel"></div>'), this._incorrectValueNode.innerHTML = e.LangManager.getStringByKey("cMFInvalidValue") || "Invalid value in field", this.getDomNode().appendChild(this._incorrectValueNode), this.addCSSClass("IncorrectValue"))
    },
    t.hideValueIsIncorrect = function() {
        this._incorrectValueNode && (this.getDomNode().removeChild(this._incorrectValueNode), this.removeCSSClass("IncorrectValue"), this._incorrectValueNode = null)
    },
    t.getIncorrectValueNode = function() {
        return this._incorrectValueNode
    },
    t.incorrectValueChangeLang = function() {
        this._incorrectValueNode.innerHTML = e.LangManager.getStringByKey("cMFInvalidValue") || "Invalid value in field"
    },
    t.setAutofocus = function(e) {
        this._Autofocus = !!e,
        this._Autofocus ? this._fieldNode.setAttribute("autofocus", !0) : this._fieldNode.removeAttribute("autofocus")
    },
    t.focus = function() {
        this._fieldNode.focus()
    },
    t.setLabel = function(e) {
        this._Label = e,
        this._labelNode && (this._labelNode.innerHTML = this._Label ? this._Label + this._LabelPostfix: "")
    },
    t.setPlaceholder = function(e) {
        e && (this._Placeholder = e, this._fieldNode.setAttribute("placeholder", this._Placeholder))
    },
    t.getPlaceholder = function() {
        return this._fieldNode.getAttribute("placeholder")
    },
    t.setValue = function(e) {
        e ? (this._Value = e, this._valueLength = e.toString().length, this._fieldNode.value = this._Value + "") : (this._Value = "", this._valueLength = 0, this._fieldNode.value = "")
    },
    t.getValue = function() {
        return (this._fieldNode.value + "").trim()
    },
    t.getInputNode = function() {
        return this._fieldNode
    },
    t.getCaptionNode = function() {
        return this._captionNode
    },
    t.getIconNode = function() {
        return this._iconNode
    },
    t.setCaptionText = function(e) {
        e && (this._captionNode.innerText = e)
    },
    t.setWidth = function(t) {
        if (this._widthUnit = "px", "string" == typeof t) if (t.indexOf("calc") > -1) {
            var i = this._iconNode.offsetWidth,
            s = this._captionNode.offsetWidth,
            n = 0,
            o = t.length - 1;
            this._Width = t.substr(n, o),
            this._widthUnit = " - " + (i + s).toString() + "px" + t.substr(o, 1)
        } else t.indexOf("%") && (this._Width = Math.max(0, parseInt(t)), this._widthUnit = "%");
        else this._Width = Math.min(Math.max(0, t), e.DisplaySize.getWidth());
        if (this._fieldNode) {
            var a = this._Width,
            r = a ? a + this._widthUnit: "";
            this._fieldNode.style.width = r
        }
    },
    t.setHeight = function(t) {
        this._heightUnit = "px",
        "string" == typeof t && t.indexOf("%") ? (this._Height = Math.max(0, parseInt(t)), this._heightUnit = "%") : this._Height = Math.min(Math.max(t, 0), e.DisplaySize.getHeight()),
        this._fieldNode && (this._fieldNode.style.height = this._Height ? this._Height + this._heightUnit: "")
    },
    t._checkNumberKey = function(e) {
        e = e ? e: event;
        var t = e.charCode ? e.charCode: e.keyCode ? e.keyCode: e.which ? e.which: 0,
        i = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 44, 46];
        i.indexOf(t) != -1 || 8 == e.keyCode ? (String(this._fieldNode.value).indexOf(".") == -1 && String(this._fieldNode.value).indexOf(",") == -1 || 44 != t && 46 != t || e.preventDefault(), 0 != String(this._fieldNode.value).length || 44 != t && 46 != t || e.preventDefault(), parseInt(this._Decimals) <= 0 && (44 == t || 46 == t) && e.preventDefault()) : e.preventDefault()
    },
    t = null,
    e.CheckBox = function(t) {
        this._Checked = !1,
        e.CheckBox.base.constructor.apply(this, arguments)
    },
    e.initClass(e.CheckBox, e.Input);
    var i = e.CheckBox.prototype;
    return i._onChangedValue = function(e) {
        this.setChecked(this._fieldNode.checked),
        this.ChangedValue.fire({
            event: e,
            sender: this
        })
    },
    i.setChecked = i.setValue = function(e) {
        this._Checked = !!e,
        this._fieldNode.checked = this._Checked,
        this._Value = this._Checked,
        this._Checked ? this.addCSSClass("Checked") : this.removeCSSClass("Checked")
    },
    i.getChecked = i.getValue = function() {
        return this._fieldNode.checked
    },
    i.setText = function(t) {
        e.valueIsEmpty(t) || (this._labelNode.innerHTML = t)
    },
    i._labelClick = function(e) {
        this.setChecked(!this._Checked),
        this.ChangedValue.fire({
            event: e,
            sender: this
        })
    },
    i._render = function() {
        this._InputType = "Checkbox",
        this._Template = e._Templates.CheckBox,
        this._Value = this._Checked,
        this._binds.labelClick = this._labelClick.bind(this),
        e.CheckBox.base._render.apply(this, arguments),
        this._checkBoxFieldNode = this._DomNode.querySelector(".WTInputCheckBoxField"),
        e.addEvent(this._DomNode, "click", this._binds.labelClick, !1)
    },
    i = null,
    e
}),
define("container", ["control"],
function(e) {
    e.Container = function(t) {
        return this instanceof e.Container ? (this._Items = [], this._LabelPrefix = "", this._LabelText = "", this._Text = "", this._CreateLabel = !1, this._defineEvents(["Click"]), void e.Container.base.constructor.apply(this, arguments)) : new e.Container(t)
    },
    e.initClass(e.Container, e.BaseControl);
    var t = e.Container.prototype;
    return t._initSettings = function(t) {
        e.Container.base._initSettings.apply(this, arguments),
        this._registerToLangManager = !0,
        this._LabelText = this._Key ? e.LangManager.getStringByKey(this._Key) || this._LabelText: this._LabelText
    },
    t._render = function() {
        if (e.Container.base._render.apply(this, arguments), this._CreateLabel) {
            var t = document.createElement("div");
            t.className = "WTContainerLabel",
            this._textNode = t,
            this._DomNode.appendChild(t),
            this.setLabelText(this._LabelPrefix, this._LabelText)
        }
        this._binds.click = this._onClicked.bind(this),
        e.addEvent(this._DomNode, "click", this._binds.click, !0),
        this.setItems(this._Items)
    },
    t._onClicked = function(e) {
        this.Click.fire(e)
    },
    t.setLabelText = function(e, t) {
        this._LabelText = t || "",
        this._labelNode = this._labelNode || this._DomNode.querySelector(".WTContainerLabel"),
        this._labelNode && (this._labelNode.innerHTML = e + this._LabelText)
    },
    t.setItems = function(t) {
        this._Items = t;
        for (var i = 0; i < t.length; i++) {
            var s = t[i];
            s.addToNode ? s.addToNode(this._DomNode) : this._DomNode.appendChild("string" == typeof s ? e.htmlToDOM(s) : s)
        }
    },
    t.getItems = function() {
        return this._Items
    },
    t._onChangeLang = function() {
        var t = e.LangManager.getStringByKey(this._Key);
        t && this.setLabelText(this._LabelPrefix, t)
    },
    t = null,
    e
}),
define("dialogOpenDemo", ["dialog", "input", "container", "ajax"],
function(e) {
    e.DialogOpenDemo = function(t) {
        e.DialogOpenDemo.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogOpenDemo, e.Dialog);
    var t = e.DialogOpenDemo.prototype;
    return t._render = function() {
        this._Width = 500,
        this._Title = "Open an account",
        this._Key = "cNCFcaption",
        this._ImageListRow = 5,
        this._ImageListCol = 11,
        this.otherServer = e.LangManager.getStringByKey("cMobileOtherServer") || "Other server...",
        this._Content = e.htmlToDOM(e._Templates.DialogOpenDemoContent);
        var t = this._Content.querySelector(".DFooterControls"),
        i = this._Content.querySelectorAll(".DLeftControls")[0],
        s = this._Content.querySelectorAll(".DRightControls")[0],
        n = this._Content.querySelectorAll(".DDownRightControls")[0],
        o = this._Content.querySelectorAll(".DDownLeftControls")[0],
        a = this._Content.querySelectorAll(".DBottomControls")[0],
        r = e.Delegate(this, this._onFieldChangeValue),
        l = e.Delegate(this, this._onKeyPress),
        h = this._getGroups(),
        d = this._getServers();
        this._surnameInput = new e.Input({
            ParentNode: i,
            Label: "Surname:",
            Key: "cWCTAccountListFormSurname",
            ChangeValue: r,
            KeyPress: l
        }),
        this._nameInput = new e.Input({
            ParentNode: i,
            Label: "Name:",
            Key: "cWCTAccountListFormName",
            ChangeValue: r,
            KeyPress: l
        }),
        this._emailInput = new e.Input({
            ParentNode: i,
            Label: "E-mail",
            ChangeValue: r,
            MaxLength: 40,
            KeyPress: l
        }),
        this._countryInput = new e.Input({
            ParentNode: s,
            Label: "Country:",
            Key: "cWCTAccountListFormCountry",
            ChangeValue: r,
            KeyPress: l
        }),
        this._cityInput = new e.Input({
            ParentNode: s,
            Label: "City:",
            Key: "cWCTAccountListFormCity",
            ChangeValue: r,
            KeyPress: l
        }),
        this._phoneInput = new e.Input({
            ParentNode: s,
            Label: "Phone:",
            Key: "cWCTAccountListFormTelephone",
            ChangeValue: r,
            KeyPress: l
        }),
        this._depositInput = new e.Input({
            ParentNode: o,
            Label: "Deposit:",
            Key: "cNCFDeposte",
            ChangeValue: r,
            KeyPress: l,
            Class: "DepositLabel"
        }),
        this._typeInput = new e.InputSelect({
            ParentNode: n,
            Edit: !1,
            Options: h,
            Label: "Type:",
            Key: "cWCTAccountListFormAccountType",
            ChangeValue: r
        }),
        this._serverInput = new e.InputSelect({
            ParentNode: a,
            Options: d,
            Width: 240,
            Label: "Server:",
            Key: "cCFServer",
            Edit: !1,
            NeedNotEditedStyle: !0,
            ChangeValue: r
        }),
        this._registerBtn = new e.Button({
            ParentNode: t,
            Class: "DButton",
            Text: "Register",
            Key: "cBTNNAdd",
            Width: 0,
            Height: 0,
            Click: e.Delegate(this, this._onRegisterBtnClick)
        });
        var c = e.jsonParse(localStorage.getItem("DemoAccount"));
        if (c) {
            this._surnameInput.setValue(c.surname),
            this._countryInput.setValue(c.country),
            this._phoneInput.setValue(c.phone),
            this._depositInput.setValue(c.deposit),
            this._nameInput.setValue(c.name),
            this._cityInput.setValue(c.city),
            this._emailInput.setValue(c.email),
            this._typeInput.setValue(c.type);
            var u = d.indexOf(c.server) > -1 ? d.indexOf(c.server) : 0;
            this._serverInput.setSelectedOption(u),
            h.indexOf(c.type) == -1 ? h.length > 0 && this._typeInput.setSelectedOption(0) : this._typeInput.setSelectedOption(h.indexOf(c.type))
        } else e.Config.TradeSettings && e.Config.TradeSettings.DefaultDeposit && this._depositInput.setValue(e.Config.TradeSettings.DefaultDeposit);
        e.DialogOpenDemo.base._render.apply(this, arguments),
        this.addCSSClass("dialogOpenDemo")
    },
    t._onClosed = function() {
        if (this.dispose(), this._callbackSignInDialog) {
            var e = this._callbackSignInDialog.handler,
            t = this._callbackSignInDialog.context,
            i = this._callbackSignInDialog.args;
            e.apply(t, [i, null])
        }
    },
    t.setEnabled = function(t) {
        this._registerBtn.setEnabled(t),
        e.DialogOpenDemo.base.setEnabled.apply(this, arguments)
    },
    t._getGroups = function() {
        var t = [];
        if (e.Config && e.Config.Groups) for (var i = 0; i < e.Config.Groups.length; i++) t.push(e.Config.Groups[i].Name);
        return t
    },
    t._getServers = function() {
        var t, i = [];
        if (e.serversMode != e.serversModes.fromConfig && e.Browser.IsMobile) {
            if (e.serversMode == e.serversModes.fromLocalStorage) {
                for (t = 0; t < e.savedServers.length; t++) i.push(e.savedServers[t].Name);
                i.push(this.otherServer)
            }
        } else if (e.Config && e.Config.Servers) for (t = 0; t < e.Config.Servers.length; t++) i.push(e.Config.Servers[t].Name);
        return i
    },
    t._onRegisterBtnClick = function() {
        e.Browser.IsMobile && e.getMobileSignInDialog().hide(),
        e.Auth.resetAttempt(),
        e._Terminal || this ? showPreloaderCircle() : showPreloader();
        var t = this._validateStep(!0);
        if (t.showMessage && e.showErrorDialog(t.message), t.result) {
            var i = e.jsonParse(localStorage.getItem("DemoAccount")) || {};
            i.surname = this._surnameInput.getValue(),
            i.country = this._countryInput.getValue(),
            i.phone = this._phoneInput.getValue(),
            i.type = this._typeInput.getValue(),
            i.deposit = this._depositInput.getValue(),
            i.name = this._nameInput.getValue(),
            i.city = this._cityInput.getValue(),
            i.email = this._emailInput.getValue(),
            i.leverage = "1:100",
            i.server = this._serverInput.getValue(),
            localStorage.setItem("DemoAccount", JSON.stringify(i)),
            this._sendRequest()
        }
    },
    t._sendRequest = function(t) {
        var i = t || {
            serverIndex: this._serverInput.getSelectedOption(),
            groupName: this._typeInput.getValue(),
            name: this._nameInput.getValue() + "",
            surname: this._surnameInput.getValue() + "",
            country: this._countryInput.getValue() + "",
            city: this._cityInput.getValue() + "",
            email: this._emailInput.getValue() + "",
            phone: this._phoneInput.getValue() + "",
            deposit: this._depositInput.getValue(),
            leverage: "100"
        };
        this.setEnabled(!1),
        e.getTerminal() && e.getTerminal().saveSettings(),
        e.requester.sendTerminalVersion(e.requester.openDemoAccount, [i], !0)
    },
    t._onFieldChangeValue = function(t) {
        if (e.Browser.IsMobile.any) {
            var i = this._validateStep();
            i.showMessage() && e.showErrorDialog(i.message),
            this._currentStep < 2 && i.result ? this._nextBtn.addCSSClass("Active") : this._nextBtn.removeCSSClass("Active"),
            t.sender.setValidity( !! t.sender.getValue())
        }
    },
    t._onKeyPress = function(t) {
        32 == t.event.charCode && 0 == t.sender.getValue().length && t.event.preventDefault(),
        t.sender === this._depositInput && (t.event.charCode < 48 || t.event.charCode > 57 || t.sender.getValue().length >= 6) && 8 != t.event.keyCode && t.event.preventDefault(),
        t.sender === this._phoneInput && e.banLetters(t, [40, 41])
    },
    t._onNextBtnTap = function(t) {
        var i = this._validateStep(!0);
        i.showMessage && e.showErrorDialog(i.message),
        i.result ? this._setCurrentStep(this._currentStep + 1) : this._setValidityInputs()
    },
    t._onBackBtnTap = function(e) {
        this._currentStep > 0 && this._setCurrentStep(this._currentStep - 1)
    },
    t.isValidDeposit = function(e) {
        var t = !1;
        if (e > 0) {
            t = !!(e / e)
        }
        return t
    },
    t.isValidPhone = function(e) {
        var t = /^(?!([^-]*-){5})(\+\d+)?\s*(\(\d+\))?[- \d]+$/gi;
        return t.test(e)
    },
    t.isValidEmail = function(e, t) {
        return t || (e = e.replace(/^\s+|\s+$/g, "")),
        /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)
    },
    t._validateStep = function(t) {
        var i = !1,
        s = "",
        n = !1;
        switch (t) {
        case 0:
            if (i = this._surnameInput.getValue() && this._nameInput.getValue() && this._emailInput.getValue(), !this._surnameInput.getValue()) {
                s = this._surnameInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0,
                i = !1;
                break
            }
            if (!this._nameInput.getValue()) {
                s = this._nameInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0,
                i = !1;
                break
            }
            var o = this.isValidEmail(this._emailInput.getValue() || "");
            if (!o) {
                s = e.LangManager.getStringByKey("cWCTAccountListFormErrormail") || "Invalid email address",
                n = !0,
                i = !1;
                break
            }
            break;
        case 1:
            if (i = this._countryInput.getValue() && this._cityInput.getValue() && this._phoneInput.getValue(), !this._countryInput.getValue()) {
                s = this._countryInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0,
                i = !1;
                break
            }
            if (!this._cityInput.getValue()) {
                s = this._cityInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0,
                i = !1;
                break
            }
            if (!this._phoneInput.getValue() || !this.isValidPhone(this._phoneInput.getValue())) {
                s = this._phoneInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0,
                i = !1;
                break
            }
            break;
        case 2:
            if (i = this._typeInput.getValue() && this._depositInput.getValue() && this._leverageInput.getValue() && this._serverInput.getValue(), !this._typeInput.getValue()) {
                s = this._typeInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0,
                i = !1;
                break
            }
            var a = this.isValidDeposit(this._depositInput.getValue() || 0);
            if (!a) {
                s = this._depositInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0,
                i = !1;
                break
            }
            break;
        default:
            if (!this._surnameInput.getValue()) {
                s = this._surnameInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0;
                break
            }
            if (!this._nameInput.getValue()) {
                s = this._nameInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0;
                break
            }
            if (!this._countryInput.getValue()) {
                s = this._countryInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0;
                break
            }
            if (!this._cityInput.getValue()) {
                s = this._cityInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0;
                break
            }
            if (!this._phoneInput.getValue() || !this.isValidPhone(this._phoneInput.getValue())) {
                s = this._phoneInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0;
                break
            }
            if (!this._typeInput.getValue()) {
                s = this._typeInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0;
                break
            }
            if (i = this.isValidDeposit(this._depositInput.getValue() || 0), !i) {
                s = this._depositInput._Label + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter",
                n = !0;
                break
            }
            if (i = this.isValidEmail(this._emailInput.getValue() || ""), !i) {
                s = e.LangManager.getStringByKey("cWCTAccountListFormErrormail") || "Invalid email address",
                n = !0;
                break
            }
        }
        return {
            message: s,
            showMessage: n,
            result: i
        }
    },
    t._setValidityInputs = function() {
        switch (this._currentStep) {
        case 0:
            this._surnameInput.setValidity( !! this._surnameInput.getValue()),
            this._nameInput.setValidity( !! this._nameInput.getValue()),
            this._emailInput.setValidity( !! this._emailInput.getValue());
            break;
        case 1:
            this._countryInput.setValidity( !! this._countryInput.getValue()),
            this._cityInput.setValidity( !! this._cityInput.getValue()),
            this._phoneInput.setValidity( !! this._phoneInput.getValue());
            break;
        case 2:
            this._typeInput.setValidity( !! this._typeInput.getValue()),
            this._depositInput.setValidity( !! this._depositInput.getValue()),
            this._serverInput.setValidity( !! this._serverInput.getValue());
            break;
        default:
            this._surnameInput.setValidity( !! this._surnameInput.getValue()),
            this._nameInput.setValidity( !! this._nameInput.getValue()),
            this._emailInput.setValidity( !! this._emailInput.getValue()),
            this._countryInput.setValidity( !! this._countryInput.getValue()),
            this._cityInput.setValidity( !! this._cityInput.getValue()),
            this._phoneInput.setValidity( !! this._phoneInput.getValue()),
            this._typeInput.setValidity( !! this._typeInput.getValue()),
            this._depositInput.setValidity( !! this._depositInput.getValue()),
            this._serverInput.setValidity( !! this._serverInput.getValue())
        }
    },
    t._setCurrentStep = function(e) {
        switch (this._fieldsContainer.innerHTML = "", this._nextBtn.removeCSSClass("Active"), e) {
        case 1:
            this._currentStep = 1,
            this._countryInput.addToNode(this._fieldsContainer),
            this._cityInput.addToNode(this._fieldsContainer),
            this._phoneInput.addToNode(this._fieldsContainer),
            this._backBtn.addToNode(this._fieldsContainer),
            this._nextBtn.addToNode(this._fieldsContainer),
            this._backBtn.addCSSClass("Active");
            break;
        case 2:
            this._currentStep = 2,
            this._typeInput.addToNode(this._fieldsContainer),
            this._depositInput.addToNode(this._fieldsContainer),
            this._leverageInput.addToNode(this._fieldsContainer),
            this._serverInput.addToNode(this._fieldsContainer),
            this._registerBtn.addToNode(this._fieldsContainer),
            this._nextBtn.removeFromDom(),
            this._backBtn.removeFromDom();
            break;
        default:
            this._currentStep = 0,
            this._surnameInput.addToNode(this._fieldsContainer),
            this._nameInput.addToNode(this._fieldsContainer),
            this._emailInput.addToNode(this._fieldsContainer),
            this._backBtn.addToNode(this._fieldsContainer),
            this._nextBtn.addToNode(this._fieldsContainer),
            this._backBtn.removeCSSClass("Active")
        }
        for (var t = 0; t < this._navPoints.length; t++) t == this._currentStep ? this._navPoints[t].addCSSClass("Current") : this._navPoints[t].removeCSSClass("Current")
    },
    t.dispose = function() {
        e.Resizer.unRegister(this),
        e.LangManager.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        e._openDemoDialog = null
    },
    t.show = function(t) {
        this._callbackSignInDialog = t,
        e.DialogOpenDemo.base.show.apply(this, [])
    },
    t.hide = function(t) {
        e.DialogOpenDemo.base.hide.apply(this, arguments),
        "" != e.Auth.token && null != e.Auth.token || null == t || e.getMobileSignInDialog().show()
    },
    t = null,
    e.getOpenDemoDialog = function() {
        return e._openDemoDialog || (e._openDemoDialog = new e.DialogOpenDemo),
        e._openDemoDialog
    },
    e.getOpenDemoDialogWithoutInit = function() {
        return e._openDemoDialog
    },
    e
}),
define("requests", ["bzzaFunctions", "dialogOpenDemo"],
function(e) {
    _Requests = function() {
        if (! (this instanceof _Requests)) return new _Requests
    };
    var t = _Requests.prototype;
    return t.getArchiveByCandleCount = function(t, i, s) {
        var n = e.Auth._Server,
        o = e.Ajax({
            Url: n.Url + ":" + n.Port + "/query",
            ReadyStateChange: function() {
                var t, i;
                4 == o.readyState && (200 == o.status ? (i = e.jsonParse(o.responseText), e.QuotesArchive.updateArchive(i)) : t = e.LangManager.getStringByKey("cCUTIncorrectSocetInfo") || "Invalid port or address of the server")
            }.bind(this)
        });
        o.open("POST");
        var a = e.Auth.token,
        r = JSON.stringify({
            token: a + "",
            commandCode: e.ServerCommandCodes.GetQuoteArchiveLast + "",
            symbolName: t + "",
            period: i + "",
            candleCount: s + ""
        });
        o.send(encodeURIComponent(r), "json")
    },
    t.getArchiveByDate = function(t, i, s, n) {
        var o = e.Auth._Server,
        a = e.Ajax({
            Url: o.Url + ":" + o.Port + "/query",
            ReadyStateChange: function() {
                var o, r;
                if (4 == a.readyState) if (200 == a.status) {
                    if (r = e.jsonParse(a.responseText)) {
                        var l = e.QuotesArchive.getArchive(t, e.requestPeriodsToPeriod[i]);
                        null !== l && null !== l.candles && l.candles.removeByPeriod(s, n),
                        e.QuotesArchive.updateArchive(r)
                    }
                } else o = e.LangManager.getStringByKey("cCUTIncorrectSocetInfo") || "Invalid port or address of the server"
            }.bind(this)
        });
        a.open("POST");
        var r = e.Auth.token,
        l = JSON.stringify({
            token: r + "",
            commandCode: e.ServerCommandCodes.GetQuoteArchiveStartEnd + "",
            symbolName: t + "",
            period: i + "",
            startDate: e.UtipFunctions.div(s, 1e3) + "",
            finishDate: e.UtipFunctions.div(n, 1e3) + ""
        });
        a.send(encodeURIComponent(l), "json")
    },
    t.openDemoAccount = function(t) {
        var i = e.serversMode == e.serversModes.fromLocalStorage && (e.Browser.IsMobile || e.Browser.IsTablet) ? e.savedServers: e.Config.Servers,
        s = i[t.serverIndex],
        n = e.Ajax({
            Url: s.Url + ":" + s.Port + "/reg",
            ReadyStateChange: function() {
                var t;
                if (4 == n.readyState) {
                    var i = null,
                    o = null;
                    e.Browser.IsMobile && (i = e.getOpenDemoDialog(), o = e.getMobileSignInDialog()),
                    200 == n.status ? (t = e.jsonParse(n.responseText), t.msgResult.toLowerCase() == "Success".toLowerCase() ? (i && (i.setEnabled(!0), i.hide(), o.hide()), e.requester.sendTerminalVersion(e.requester.authorization, [{
                        Login: t.login,
                        Password: t.password,
                        investorPassword: t.investorPassword,
                        Server: s
                    },
                    !0, !1, !0], !1)) : i ? (e.Socket.showErrorMessage(t), i.setEnabled(!0)) : e.AuthModule.error(t.msgResult)) : i ? (i.setEnabled(!0), i.show(), e.Socket.showErrorMessage({
                        msgResult: "Error on server"
                    })) : e.AuthModule.error("Error on server")
                }
            }.bind(this)
        });
        n.open("POST");
        var o = JSON.stringify({
            name: t.name,
            patronimic: "",
            surname: t.surname,
            country: t.country,
            region: "real",
            city: t.city,
            eMail: t.email,
            address: "real",
            phone: t.phone,
            index: "0",
            deposit: t.deposit,
            delay: "0",
            leverage: t.leverage,
            realAccount: "0",
            groupID: t.groupID.toString(),
            groupName: t.groupName
        });
        n.send(encodeURIComponent(o), "json")
    },
    t.authorization = function(t, i, s, n) {
        e.Browser.IsMobile && (e.TerminalContainer.style.visibility = "hidden", showPreloader(), e._dialogMasterObject.hideAll()),
        e.Auth.setCheckAuth(!1),
        e.Auth.setServer(t.Server);
        var o = !1,
        a = e.Auth.getServer(),
        r = e.Ajax({
            Url: a.Url + ":" + a.Port + "/auth",
            ReadyStateChange: function() {
                var i = null;
                if (e.Browser.IsMobile && (i = e.getMobileSignInDialog()), 4 == r.readyState) if (200 == r.status) {
                    var a = e.jsonParse(r.responseText);
                    e.Auth.setCheckAuth(a && "yes" == a.auth && a.token.length > 0),
                    e.Auth.getCheckAuth() ? (e.Auth.token = a.token, n && e.AccountManager.setConnectionInfoByArguments({
                        SaveChecked: !1
                    }), e.AccountManager.updateLastAccount({
                        login: t.Login,
                        password: t.Password,
                        serverName: t.Server.Name
                    },
                    a.token)) : (o = e.LangManager.getStringByKey("cCUTInvalidLogin") || "Invalid login or password", i ? (e.Browser.IsMobile ? source = e._mobileDialogStart: source = null, i.show(source, t, {})) : e.AuthModule.show(0)),
                    n && (e.Auth.openningDemo = !0, e.AccountManager.updateDemoInfo({
                        NeedToShow: !0,
                        Login: t.Login,
                        Password: CryptoJS.RC4.encrypt(t.Password, e.SecretString).toString(),
                        investorPassword: CryptoJS.RC4.encrypt(t.investorPassword, e.SecretString).toString()
                    }), document.location.reload(!0))
                } else {
                    var l = e.getTerminal(),
                    h = document.getElementById("WTDialogBlockscreen");
                    h && (h.style.display = "none", h.classList.remove("RestartMode")),
                    l && (l.saveAndCloseOnlyChartsDialogs(), e._dialogMasterObject.hideAll(), l.clearTerminalDom()),
                    o = e.LangManager.getStringByKey("cCUTCantConnectToServer") || "Unable to connect to server",
                    i ? i.show(t, {}) : e.AuthModule.show(0)
                }
                s || n || e.Auth.setStateAfterAuthorization(o, t)
            }.bind(this)
        }),
        l = t.Password;
        r.sendAuthData("GET", t.Login, l)
    },
    t.sendTerminalVersion = function(t, i, s) {
        var n = e.serversMode == e.serversModes.fromLocalStorage && (e.Browser.IsMobile || e.Browser.IsTablet) ? e.savedServers: e.Config.Servers,
        o = e.Auth.getServer(),
        a = e.Browser.IsMobile ? e.getMobileSignInDialog() : null;
        if (1 == s) {
            i[0].serverIndex ? o = n[i[0].serverIndex] : i[0].Server && (o = i[0].Server);
            var r = e.Ajax({
                Url: o.Url + ":" + o.Port + "/ver",
                ReadyStateChange: function() {
                    var s;
                    if (4 == r.readyState) if (200 == r.status) {
                        if (s = e.jsonParse(r.responseText), !s) return void(t == e.Socket.openSocket ? t.apply(e.Socket, i) : (t.apply(this, i), o.versionCorrect = !0, e.Auth.setServer(o)));
                        if (s.msgResult.toLowerCase() == "Success".toLowerCase()) t == e.Socket.openSocket ? t.apply(e.Socket, i) : (t.apply(this, i), o.versionCorrect = !0, e.Auth.setServer(o)),
                        e.Auth.incAttempt();
                        else if (e.Browser.IsMobile) {
                            e.getMobileOpenDemoDialog().setEnabled(!0);
                            var n = e._dialogMasterObject.getBlockscreen(!0);
                            n.classList.remove("RestartMode"),
                            a.setEnabled(!0),
                            a.show(),
                            e.Socket.showErrorMessage(s)
                        } else e.getOpenDemoDialog().setEnabled(!0),
                        e.AuthModule.show(0),
                        e.AuthModule.error(s.msgResult)
                    } else 0 == r.status && r.RequestTimeout()
                }.bind(this),
                RequestTimeout: function() {
                    e.Auth.incAttempt(),
                    e.Auth.attemptToConnect(t, i)
                }.bind(this)
            });
            r.open("POST");
            var l = JSON.stringify({
                commandCode: e.ServerCommandCodes.cOpClient_CheckWebVersion + "",
                terminalVersion: terminalVersion
            });
            r.send(encodeURIComponent(l), "json")
        } else t == e.Socket.openSocket ? t.apply(e.Socket, i) : (t.apply(this, i), o.versionCorrect = !0, e.Auth.setServer(o))
    },
    t.getServersList = function(t) {
        var i = e.Ajax({
            Url: "https://serverslist.bzza.com/",
            dataType: "json",
            ReadyStateChange: function() {
                var s;
                if (4 == i.readyState) {
                    var n = !1,
                    o = null;
                    if (200 == i.status ? (s = e.jsonParse(i.responseText), e.Browser.IsMobile && (e.getMobileDialogServersSearch().serversList = s.Servers, e.getMobileDialogServersSearch().onServersListLoaded()), n = !0, o = s.Servers) : e.Browser.IsMobile && e.getMobileDialogServersSearch().onServersListUnavailable(), t) {
                        var a = t.handler,
                        r = t.context,
                        l = t.sender;
                        a && r && a.apply(r, [{
                            result: n,
                            data: o
                        },
                        l])
                    }
                }
            }.bind(this)
        });
        i.open("GET"),
        i.send()
    },
    t.getWebOfficeAuthToken = function(t, i, s, n, o) {
        var a = "?key=" + t + "&rand_param=" + i + "&login=" + s + "&token=" + n + "&server_for_demo=" + e.Config.BrokersSettings.ServerForDemo + "&demo_server_group_id=" + e.Config.BrokersSettings.DemoGroupId + "&value=" + e.Config.TradeSettings.DefaultDeposit + "&leverage=" + e.defaultLeverage,
        r = e.Ajax({
            Url: UtipConfig.BrokersSettings.WebOfficeAPILink + "/api/page/GetAuthToken" + a,
            ReadyStateChange: function() {
                var t;
                if (4 == r.readyState && 200 == r.status && (t = e.jsonParse(r.responseText), console.log(t), "failed" != t.result.toLowerCase())) {
                    e.WebOfficeController.authorizeWebOffice(t),
                    o ? e.WebOfficeController.saveWebOfficeAccount(s, n) : e.WebOfficeController.clearWebOfficeAccount();
                    var i = e.jsonParse(localStorage.getItem("ConnectionsInfo")) || {};
                    i.SaveChecked = o,
                    localStorage.setItem("ConnectionsInfo", JSON.stringify(i));
                    var a = t.values.last_account;
                    if (a) {
                        var l = {};
                        l.Login = a.account_number,
                        l.Password = a.account_password;
                        for (var h = 0; h < e.Config.Servers.length; h++) if (e.Config.Servers[h].Name == a.account_server) {
                            l.Server = e.Config.Servers[h];
                            break
                        }
                    }
                }
            }.bind(this)
        });
        r.open("GET"),
        r.send()
    },
    t.sendLastAccount = function(t, i, s, n, o, a) {
        var r = "?key=" + t + "&rand_param=" + i + "&login=" + s + "&account_number=" + n + "&server_name=" + o + "&group_id=" + a,
        l = e.Ajax({
            Url: UtipConfig.BrokersSettings.WebOfficeAPILink + "/api/page/SetLastLoginAccount" + r,
            ReadyStateChange: function() {
                var t;
                4 == l.readyState && 200 == l.status && (t = e.jsonParse(l.responseText), console.log(t))
            }.bind(this)
        });
        l.open("GET"),
        l.send()
    },
    t.sendWebOfficeRegistration = function(t, i, s, n, o, a, r, l, h, d) {
        var c = "?key=" + t + "&rand_param=" + i + "&login=" + s + "&email=" + n + "&first_name=" + o + "&second_name=" + a + "&password=" + r + "&password_repeat=" + l + "&server_for_demo=" + e.Config.BrokersSettings.ServerForDemo + "&demo_server_group_id=" + e.Config.BrokersSettings.DemoGroupId + "&value=" + e.Config.TradeSettings.DefaultDeposit + "&leverage=" + e.defaultLeverage;
        "" != d && (c += d),
        null != h && "" != h && (c += "&phone=" + h);
        var u = e.Ajax({
            Url: UtipConfig.BrokersSettings.WebOfficeAPILink + "/api/page/RegisterUser" + c,
            ReadyStateChange: function() {
                var t;
                4 == u.readyState && (200 == u.status ? (t = e.jsonParse(u.responseText), console.log(t), e.WebOfficeController.sendHashCredentials(s, r)) : (e.getAuthContainer().setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"), e.getAuthContainer().setHelpText("Server error: " + u.status), e.getAuthContainer().unblockActionButtons()))
            }.bind(this)
        });
        u.open("GET"),
        u.send()
    },
    t.webOfficePasswordRecovery = function(t, i, s) {
        var n = "?key=" + t + "&rand_param=" + i + "&email=" + s + "&send_email=1",
        o = e.Ajax({
            Url: UtipConfig.BrokersSettings.WebOfficeAPILink + "/api/page/ForgotYourPassword" + n,
            ReadyStateChange: function() {
                var t;
                4 == o.readyState && (200 == o.status && (t = e.jsonParse(o.responseText), console.log(t), "failed" == t.result ? e.getAuthContainer().setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error") : e.getAuthContainer().setSubjectTitle("Notice", !0), e.getAuthContainer().setHelpText(t.description)), e.getAuthContainer().unblockActionButtons())
            }.bind(this)
        });
        o.open("GET"),
        o.send()
    },
    t.sendPing = function() {
        if (1 == e.Socket.getWebSocketObject().readyState) {
            var t = JSON.stringify({
                commandCode: e.ServerCommandCodes.Ping + ""
            });
            e.Socket.send(t)
        }
    },
    t.openPosition = function(t) {
        var i = "1000";
        e.Config.TradeSettings && e.Config.TradeSettings.UseStopLevel && (i = e.SymbolsData.getSymbols()[t.symbolName].getStopLevel().toString());
        var s = JSON.stringify({
            commandCode: e.ServerCommandCodes.OpenPosition + "",
            symbolName: t.symbolName,
            traderID: t.traderID,
            positionID: "0",
            operationType: t.operationType + "",
            volume: t.volume + "",
            price: t.price + "",
            maxDeviation: i + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + "",
            takeProfitByPips: t.takeProfitByPips + "",
            stopLossByPips: t.stopLossByPips + ""
        });
        e.Socket.send(s)
    },
    t.getDeals = function(t, i) {
        var s = JSON.stringify({
            commandCode: e.ServerCommandCodes.GetOperationHistory + "",
            startDate: e.UtipFunctions.div(t, 1e3) + "",
            finishDate: e.UtipFunctions.div(i, 1e3) + ""
        });
        e.Socket.send(s)
    },
    t.getDeposits = function() {
        var t = '{"commandCode":' + e.ServerCommandCodes.GetDepositOperations + "}";
        e.Socket.send(t)
    },
    t.getExecutedOrders = function() {
        var t = '{"commandCode":' + e.ServerCommandCodes.GetExecutedOrders + "}";
        e.Socket.send(t)
    },
    t.closePosition = function(t) {
        var i = "1000";
        e.Config.TradeSettings && e.Config.TradeSettings.UseStopLevel && (i = e.SymbolsData.getSymbols()[t.symbolName].getStopLevel().toString());
        var s = JSON.stringify({
            commandCode: e.ServerCommandCodes.ClosePosition + "",
            symbolName: t.symbolName,
            traderID: t.traderID,
            positionID: t.ID + "",
            operationType: t.operationType + "",
            volume: t.volume + "",
            closePrice: t.price + "",
            maxDeviation: i + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(s)
    },
    t.closeOptionPosition = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.CloseOptionPosition + "",
            traderID: t.traderID,
            positionID: t.ID + ""
        });
        e.Socket.send(i)
    },
    t.deletePendingOrder = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.DeletePendingOrder + "",
            traderID: t.traderID,
            orderID: t.ID + ""
        });
        e.Socket.send(i)
    },
    t.openPendingOrder = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.OpenPendingOrder + "",
            symbolName: t.symbolName,
            traderID: t.traderID,
            orderType: t.orderType + "",
            volume: t.volume + "",
            operationType: t.operationType + "",
            price: t.price + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(i)
    },
    t.changePendingOrder = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.ChangePendingOrder + "",
            orderID: t.id,
            symbolName: t.symbolName,
            traderID: t.traderID,
            orderType: t.orderType + "",
            volume: t.volume + "",
            operationType: t.operationType + "",
            price: t.price + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(i)
    },
    t.changePosition = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.ChangePosition + "",
            traderID: t.traderID,
            positionID: t.positionID + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(i)
    },
    t.changePassword = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.ChangePassword + "",
            traderID: t.traderID + "",
            oldPassword: t.oldPassword,
            newPassword: t.newPassword,
            isInvestorPassword: t.isInvestorPassword
        });
        e.Socket.send(i)
    },
    t.getMTDeals = function(t, i) {
        var s = JSON.stringify({
            commandCode: e.ServerCommandCodes.GetMTDeals + "",
            startDate: e.UtipFunctions.div(t, 1e3) + "",
            finishDate: e.UtipFunctions.div(i, 1e3) + ""
        });
        e.Socket.send(s)
    },
    t.getMTDeposits = function(t, i) {
        var s = JSON.stringify({
            commandCode: e.ServerCommandCodes.GetMTDeposits + "",
            startDate: e.UtipFunctions.div(t, 1e3) + "",
            finishDate: e.UtipFunctions.div(i, 1e3) + ""
        });
        e.Socket.send(s)
    },
    t.getMTExecutedOrders = function(t, i) {
        var s = JSON.stringify({
            commandCode: e.ServerCommandCodes.GetMTExecutedOrders + "",
            startDate: e.UtipFunctions.div(t, 1e3) + "",
            finishDate: e.UtipFunctions.div(i, 1e3) + ""
        });
        e.Socket.send(s)
    },
    t.openMTPosition = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.OpenMTPosition + "",
            symbolName: t.symbolName,
            positionType: t.operationType + "",
            volume: parseInt(100 * t.volume) + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(i)
    },
    t.closeMTPosition = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.CloseMTPosition + "",
            id: t.ID + "",
            symbolName: t.symbolName,
            positionType: t.operationType + "",
            volume: parseInt(100 * t.volume) + ""
        });
        e.Socket.send(i)
    },
    t.openMTPendingOrder = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.OpenMTPendingOrder + "",
            symbolName: t.symbolName,
            volume: parseInt(100 * t.volume) + "",
            positionType: t.operationType + "",
            openPrice: t.price + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(i)
    },
    t.deleteMTPendingOrder = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.DeleteMTPendingOrder + "",
            id: t.ID + "",
            closePrice: t.closePrice + ""
        });
        e.Socket.send(i)
    },
    t.changeMTPosition = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.ChangeMTPosition + "",
            id: t.positionID + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(i)
    },
    t.changeMTPendingOrder = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.ChangeMTPendingOrder + "",
            id: t.id,
            symbolName: t.symbolName,
            volume: parseInt(100 * t.volume) + "",
            openPrice: t.price + "",
            takeProfit: t.takeProfit + "",
            stopLoss: t.stopLoss + ""
        });
        e.Socket.send(i)
    },
    t.changeMTPassword = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.ChangeMTPassword + "",
            oldPassword: t.oldPassword,
            newPassword: t.newPassword
        });
        e.Socket.send(i)
    },
    t.openOptionPosition = function(t) {
        var i = JSON.stringify({
            commandCode: e.ServerCommandCodes.OpenOptionPosition + "",
            settingName: t.settingName,
            optionType: t.optionType + "",
            openPrice: t.openPrice + "",
            direction: t.direction + "",
            investmentSum: t.investmentSum + "",
            symbolName: t.symbolName,
            stopLine: t.stopLine + "",
            payoutPercentage: t.payoutPercentage + "",
            earlyClosing: t.earlyClosing + "",
            interval: t.interval + "",
            period: t.period + "",
            optionParamId: t.optionParamId + "",
            optionSettingsId: t.optionSettingsId
        });
        e.Socket.send(i)
    },
    t.getOptionDeals = function(t, i) {
        var s = JSON.stringify({
            commandCode: e.ServerCommandCodes.GetOptionDeals + "",
            startDate: e.UtipFunctions.div(t, 1e3) + "",
            finishDate: e.UtipFunctions.div(i, 1e3) + ""
        });
        e.Socket.send(s)
    },
    t = null,
    e.requester = new _Requests,
    e
}),
define("binarySearchTree", ["base"],
function(e) {
    return e.BinarySearchTree = function(e) {
        this.root = null,
        this.mkNode_ = function(e, t, i, s, n) {
            return {
                key: e,
                parent: i || null,
                leftChild: s || null,
                rightChild: n || null,
                height: 0,
                value: t,
                isLeftChild: function() {
                    return this.parent && this.parent.leftChild === this
                },
                isRightChild: function() {
                    return this.parent && this.parent.rightChild === this
                }
            }
        },
        this._compFn = function(t, i) {
            return e ? e.call(this, t.key, i) : t.key < i ? 1 : t.key > i ? -1 : 0
        };
        var t = function(e) {
            if (!e) return null;
            if (e.rightChild) return i(e.rightChild);
            for (var t = e; t && t.isRightChild();) t = t.parent;
            return t.parent
        };
        this.successor = function(e) {
            var i = this.get(e, this.root),
            s = t(i);
            return s && {
                key: s.key,
                value: s.value
            }
        };
        var i = function(e) {
            for (; e.leftChild;) e = e.leftChild;
            return e
        };
        this.min = function() {
            var e = this.root && i(this.root);
            return e && {
                key: e.key,
                value: e.value
            }
        };
        var s = function(e) {
            for (; e.rightChild;) e = e.rightChild;
            return e
        };
        this.max = function() {
            var e = this.root && s(this.root);
            return e && {
                key: e.key,
                value: e.value
            }
        };
        var n = function(e) {
            if (!e) return null;
            if (e.leftChild) return s(e.leftChild);
            for (var t = e; t && t.isLeftChild();) t = t.parent;
            return t.parent
        };
        this.predecessor = function(e) {
            var t = this.get(e, this.root),
            i = n(t);
            return i && {
                key: i.key,
                value: i.value
            }
        }
    },
    e.BinarySearchTree.prototype.put = function(e, t) {
        if (!this.root) return this.root = this.mkNode_(e, t),
        this;
        for (var i = this.root,
        s = null,
        n = !1; i;) if (s = i, this._compFn(i, e) == -1) i = i.leftChild,
        n = !0;
        else {
            if (1 != this._compFn(i, e)) {
                i.value = t;
                break
            }
            i = i.rightChild,
            n = !1
        }
        var o = i;
        i || (o = this.mkNode_(e, t, s), s[n ? "leftChild": "rightChild"] = o, this.reCalcHeight(o));
        var a = this;
        return {
            put: function(e, t) {
                return a.put(e, t)
            },
            node: o
        }
    },
    e.BinarySearchTree.prototype.reCalcHeight = function(e) {
        for (; e;) e.height = Math.max(e.leftChild ? e.leftChild.height: -1, e.rightChild ? e.rightChild.height: -1) + 1,
        e = e.parent
    },
    e.BinarySearchTree.prototype.traverse = function(e, t) {
        var i = Array.prototype.slice.call(arguments);
        1 === i.length && ("[object Function]" === Object.prototype.toString.call(i[0]) ? (e = this.root, t = i[0]) : t = function(e) {
            console.log(e.key)
        }),
        e && (this.traverse(e.leftChild, t), t(e), this.traverse(e.rightChild, t))
    },
    e.BinarySearchTree.prototype.get = function(e, t) {
        function i(e, t) {
            return t ? n(t, e) === -1 ? i(e, t.leftChild) : 1 === n(t, e) ? i(e, t.rightChild) : 0 === n(t, e) ? s ? {
                key: t.key,
                value: t.value
            }: t: void 0 : null
        }
        if ("undefined" == typeof e || null === e) return null;
        var s = "undefined" == typeof t;
        s && (t = this.root);
        var n = this._compFn;
        return i(e, t)
    },
    e.BinarySearchTree.prototype.delete = function(e) {
        var t, i, s, n = this.get(e, this.root);
        if (n) {
            var o = n.leftChild ? n.rightChild ? 2 : 1 : n.rightChild ? 1 : 0;
            switch (o) {
            case 0:
                t = n.parent,
                t && (i = t.leftChild === n, t[i ? "leftChild": "rightChild"] = null, n = null);
                break;
            case 1:
                t = n.parent,
                t ? (i = t.leftChild === n, s = n.leftChild || n.rightChild, s.parent = t, t[i ? "leftChild": "rightChild"] = s, n = null) : (s = n.leftChild || n.rightChild, i = n.leftChild === s, s.parent = null);
                break;
            case 2:
                var a = this.successor(n.key);
                this.delete(a.key),
                n.key = a.key,
                n.value = a.value
            }
        }
    },
    e.BinarySearchTree.prototype.checkInvariants = function(e) {
        if ("undefined" == typeof e && (e = this.root), e) {
            var t = e.leftChild,
            i = e.rightChild,
            s = !(t && this._compFn(e, t.key) !== -1 || i && 1 !== this._compFn(e, i.key));
            if (!s) throw new Error("Invariant check failed at node " + e + " key=" + e.key);
            this.checkInvariants(t),
            this.checkInvariants(i)
        }
    },
    e.BinarySearchTree.prototype.entrySet = function() {
        var e = [];
        return this.traverse(this.root,
        function(t) {
            e.push({
                key: t.key,
                value: t.value
            })
        }),
        e
    },
    e.BinarySearchTree.prototype.removeNodes = function() {
        for (; this.root;) this.delete(this.root)
    },
    e
}),
define("avlTree", ["binarySearchTree"],
function(e) {
    var t = e.BinarySearchTree;
    return e.AVLTree = function(e) {
        t.call(this, e)
    },
    e.AVLTree.prototype = new t,
    e.AVLTree.prototype.rotate = function(e, t) {
        function i(e, t, i) {
            e ? e["r" === i ? "rightChild": "leftChild"] = t: n.root = t,
            t && (t.parent = e)
        }
        if (!t || !e) return "Insufficient parameters";
        var s, n = this;
        switch (t) {
        case "r":
            e.leftChild && (s = e.leftChild.rightChild, i(e.parent, e.leftChild, e.isLeftChild() ? "l": "r"), i(e.leftChild, e, "r"), i(e, s, "l"), this.reCalcHeight(e));
            break;
        case "l":
            e.rightChild && (s = e.rightChild.leftChild, i(e.parent, e.rightChild, e.isRightChild() ? "r": "l"), i(e.rightChild, e, "l"), i(e, s, "r"), this.reCalcHeight(e))
        }
    },
    e.AVLTree.prototype.rebalance = function(e) {
        var t = e.hdiff,
        i = e.node,
        s = t > 1 ? i.rightChild: i.leftChild,
        n = this._nodeHeight(s),
        o = t > 1 ? n < 0 : n > 0;
        o && this.rotate(s, n > 0 ? "l": "r"),
        this.rotate(i, t > 1 ? "l": "r")
    },
    e.AVLTree.prototype.put = function(e, i) {
        var s = t.prototype.put.call(this, e, i);
        try {
            this.checkAVLProperty(s.node)
        } catch(e) {
            this.rebalance(e)
        }
        return s
    },
    e.AVLTree.prototype.delete = function(e) {
        var t, i, s = this.get(e, this.root);
        if (s) {
            var n = s.leftChild ? s.rightChild ? 2 : 1 : s.rightChild ? 1 : 0;
            switch (n) {
            case 0:
                if (t = s.parent) {
                    var o = t.leftChild === s;
                    t[o ? "leftChild": "rightChild"] = null,
                    s = null,
                    i = t
                } else this.root = null;
                break;
            case 1:
                var a = s.leftChild || s.rightChild;
                s.key = a.key,
                s.value = a.value,
                s.leftChild = s.rightChild = null,
                i = s;
                break;
            case 2:
                var r = this.successor(s.key),
                l = r;
                this.delete(r.key),
                s.key = l.key,
                s.value = l.value
            }
            this.reCalcHeight(i);
            try {
                this.checkAVLProperty(i)
            } catch(e) {
                this.rebalance(e)
            }
        }
    },
    e.AVLTree.prototype.removeByPeriod = function(t, i) {
        t += 6e4 * (new Date).getTimezoneOffset(),
        i += 6e4 * (new Date).getTimezoneOffset();
        for (var s = this.get(t); null !== s;) if (s.key >= t && s.key <= i) {
            var n = e.cloneObject(s);
            s = this.successor(s.key),
            this.delete(n.key)
        } else s = null
    },
    e.AVLTree.prototype.checkInvariants = function(e) {
        if ("undefined" == typeof e && (e = this.root), e) {
            var t = e.leftChild,
            i = e.rightChild,
            s = Math.abs((t ? t.height: -1) - (i ? i.height: -1));
            if (s > 1) throw new Error("Invariant check failed at node " + e + " key=" + e.key);
            this.checkInvariants(t),
            this.checkInvariants(i)
        }
    },
    e.AVLTree.prototype._nodeHeight = function(e) {
        var t = e.leftChild,
        i = e.rightChild;
        return (i ? i.height: -1) - (t ? t.height: -1)
    },
    e.AVLTree.prototype.checkAVLProperty = function(e) {
        if (e) {
            var t = this._nodeHeight(e);
            if (Math.abs(t) > 1) throw {
                node: e,
                hdiff: t
            };
            this.checkAVLProperty(e.parent)
        }
    },
    e
}),
define("quoteArchive", ["listener", "bzzaFunctions", "symbolsData", "requests", "avlTree"],
function(e) {
    function t(t, i) {
        this.candles = new e.AVLTree,
        this.key = t,
        this._min = -1,
        this._max = -1,
        this.loading = !1,
        this._archive = i,
        this.headLoaded = !1,
        this.needLoadFromDB = !1,
        this.updateMinMax()
    }
    e.allPeriods = {
        PC_M1: 101,
        PC_M5: 105,
        PC_M10: 110,
        PC_M15: 115,
        PC_M30: 130,
        PC_H1: 201,
        PC_H2: 202,
        PC_H3: 203,
        PC_H4: 204,
        PC_H6: 206,
        PC_H8: 208,
        PC_H12: 212,
        PC_D1: 301,
        PC_W1: 401,
        PC_MN: 501,
        PC_Q1: 601,
        PC_Y1: 701,
        PC_S5: 805,
        PC_S10: 810,
        PC_S15: 815,
        PC_S30: 830
    },
    e.getPeriodCodeBySeconds = function(t) {
        var i = 60,
        s = 3600,
        n = 86400,
        o = 2592e3,
        a = 31536e3;
        return t <= i ? e.allPeriods.PC_S5: t >= 2 * i && t <= 3 * i ? e.allPeriods.PC_S10: t >= 4 * i && t <= 5 * i ? e.allPeriods.PC_S15: t >= 6 * i && t <= 10 * i ? e.allPeriods.PC_S30: t >= 11 * i && t <= 20 * i ? e.allPeriods.PC_M1: t >= 21 * i && t <= s ? e.allPeriods.PC_M5: t >= 2 * s && t <= 3 * s ? e.allPeriods.PC_M10: t >= 4 * s && t <= 5 * s ? e.allPeriods.PC_M15: t >= 6 * s && t <= 10 * s ? e.allPeriods.PC_M30: t >= 11 * s && t <= 20 * s ? e.allPeriods.PC_H1: t >= 21 * s && t <= n ? e.allPeriods.PC_H2: t == 2 * n ? e.allPeriods.PC_H3: t == 3 * n ? e.allPeriods.PC_H4: t >= 4 * n && t <= 5 * n ? e.allPeriods.PC_H6: t == 6 * n ? e.allPeriods.PC_H8: t >= 7 * n && t <= 10 * n ? e.allPeriods.PC_H12: t >= 11 * n && t <= 20 * n ? e.allPeriods.PC_D1: t >= (n >= 21) && t <= 4 * o ? e.allPeriods.PC_W1: t >= 5 * o && t <= a ? e.allPeriods.PC_MN: void 0
    },
    e.getPeriodCode = function(t) {
        for (var i in e.allPeriods) if (e.allPeriods[i] == t) return i
    },
    e.periodNames = {
        PC_M1: "M1",
        PC_M5: "M5",
        PC_M10: "M10",
        PC_M15: "M15",
        PC_M30: "M30",
        PC_H1: "H1",
        PC_H2: "H2",
        PC_H3: "H3",
        PC_H4: "H4",
        PC_H6: "H6",
        PC_H8: "H8",
        PC_H12: "H12",
        PC_D1: "D1",
        PC_W1: "W1",
        PC_MN: "MN",
        PC_Q1: "Q1",
        PC_Y1: "Y1",
        PC_S5: "S5",
        PC_S10: "S10",
        PC_S15: "S15",
        PC_S30: "S30"
    },
    e.getPeriodCodeByName = function(t) {
        for (var i in e.periodNames) if (e.periodNames[i] == t) return i
    },
    e.requestPeriods = {
        101 : "50",
        115 : "51",
        201 : "52",
        301 : "53",
        805 : "54"
    },
    e.requestPeriodsToPeriod = {
        50 : 101,
        51 : 115,
        52 : 201,
        53 : 301,
        54 : 805
    },
    e.maxArchiveLength = 300;
    var i = [805, 101, 115, 201, 301];
    e.isBasePeriod = function(e) {
        return i.indexOf(e) > -1
    },
    e.getBasePeriod = function(t) {
        switch (t) {
        case e.allPeriods.PC_S5:
        case e.allPeriods.PC_S10:
        case e.allPeriods.PC_S15:
        case e.allPeriods.PC_S30:
            return e.allPeriods.PC_S5;
        case e.allPeriods.PC_M1:
        case e.allPeriods.PC_M5:
        case e.allPeriods.PC_M10:
            return e.allPeriods.PC_M1;
        case e.allPeriods.PC_M15:
        case e.allPeriods.PC_M30:
            return e.allPeriods.PC_M15;
        case e.allPeriods.PC_H1:
        case e.allPeriods.PC_H2:
        case e.allPeriods.PC_H3:
        case e.allPeriods.PC_H4:
        case e.allPeriods.PC_H6:
        case e.allPeriods.PC_H8:
        case e.allPeriods.PC_H12:
            return e.allPeriods.PC_H1;
        default:
            return e.allPeriods.PC_D1
        }
    };
    var s = ([DTC_MINUTES = 100, DTC_HOURS = 200, DTC_DAYS = 300, DTC_WEEKS = 400, DTC_MONTHS = 500, DTC_QUARTERS = 600, DTC_YEARS = 700, DTC_SECONDS = 800], t.prototype);
    s.updateMinMax = function() {
        var e = this.candles.min();
        e ? this._min = e: this._min = {
            key: -1,
            value: null
        };
        var t = this.candles.max();
        t ? this._max = t: this._max = {
            key: -1,
            value: null
        }
    },
    s.getCount = function() {
        var t = parseInt(this.key.split("|")[1]),
        i = this.candles.max(),
        s = this.candles.min();
        return i && s ? parseInt((i.key - s.key) / e.UtipFunctions.getPeriodLength(t)) : -1
    },
    s.saveInDB = function() {
        this._archive.db.put({
            key: this.key,
            candles: this.getArchiveForSaveInDB()
        })
    },
    s.getArchiveForSaveInDB = function() {
        var e = [],
        t = null;
        if (this._max) {
            t = this.getPrev(this._max.key);
            for (var i = 0; i < 100 && (t = this.getPrev(t), t); i++) {
                var s = this.candles.predecessor(t);
                s && e.push([s.key, s.value])
            }
        }
        return e
    },
    s.loadFromDB = function() {
        var e = this;
        this._archive.db.get(this.key,
        function(t) {
            if (e.loading) e.needLoadFromDB = !0;
            else {
                for (var i = 0; i < t.candles.length; i++) e.candles.put(t.candles[i][0], t.candles[i][1]);
                e.updateMinMax(),
                e.needLoadFromDB = !1
            }
        })
    },
    s.getLastCandle = function(t) {
        this.loading = !0;
        var i = this.key.split("|")[0],
        s = e.getBasePeriod(parseInt(this.key.split("|")[1])),
        n = e.requestPeriods[s];
        e.requester.getArchiveByCandleCount(i, n, t)
    },
    s.getArchiveByDate = function(t, i) {
        this.loading = !0;
        var s = this.key.split("|")[0],
        n = e.getBasePeriod(parseInt(this.key.split("|")[1])),
        o = e.requestPeriods[n];
        e.requester.getArchiveByDate(s, o, t, i)
    },
    s.getArchiveByDateExcludeTimezone = function(e, t, i, s) {
        e = e && i ? e - 6e4 * (new Date).getTimezoneOffset() : e,
        t = t && s ? t - 6e4 * (new Date).getTimezoneOffset() : t,
        this.getArchiveByDate(e, t)
    },
    s.getLast = function() {
        return this._max
    },
    s.getFirst = function() {
        return this._min
    },
    s.getPrev = function(e) {
        var t = -1,
        i = this.getFirst(),
        s = this.getLast();
        if (null == i) return t;
        if (e < i.key || e == i.key || e > s.key) return t;
        var n = this.candles.get(e);
        return null == n && this.candles.put(e, {}),
        t = this.candles.predecessor(e).key,
        null == n && this.candles.delete(e),
        t
    },
    s.getNext = function(e) {
        var t = -1,
        i = this.getFirst(),
        s = this.getLast();
        if (null == i) return t;
        if (e < i.key || e == s.key || e > s.key) return t;
        var n = this.candles.get(e);
        null == n && this.candles.put(e, {});
        var o = this.candles.successor(e);
        return o && (t = o.key),
        null == n && this.candles.delete(e),
        t
    },
    s.isEmpty = function() {
        return this._min.key == -1
    },
    s = null,
    e._QuotesArchive = function() {
        this.archives = {},
        this.db = {},
        e._QuotesArchive.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this)
    },
    e.initClass(e._QuotesArchive, e.Listener);
    var n = e._QuotesArchive.prototype;
    return n._onSocketOpen = function(t) {
        var i = e.Auth._Server.Name.replace(" ", "_"),
        s = this;
        e.getTerminal().wantToReconnect && s.clear(),
        e.getTerminal().wantToReconnect = !1,
        this.db = new IDBStore({
            dbVersion: 1,
            storeName: i,
            storePrefix: "UTIP-",
            keyPath: "key",
            autoIncrement: !1,
            onStoreReady: function() {
                s.loadFromDB()
            }
        })
    },
    n._onSocketClose = function() {
        this.stopSaveTimer(),
        e.getTerminal().wantToReconnect && delete this.db
    },
    n.clear = function() {
        for (var e in this.archives) delete this.archives[e].candles,
        delete this.archives[e]
    },
    n.loadFromDB = function() {
        this.db.getAll(function(t) {
            t.forEach(function(t) {
                var i = t.key.split("|")[0],
                s = t.key.split("|")[1],
                n = e.QuotesArchive.getArchive(i, s);
                if (n.loading) n.needLoadFromDB = !0;
                else {
                    for (var o = 0; o < t.candles.length; o++) n.candles.put(t.candles[o][0], t.candles[o][1]);
                    n.updateMinMax(),
                    n.needLoadFromDB = !1
                }
            }),
            e.QuotesArchive.startSaveTimer(),
            e.Charts2.reconnectCharts()
        },
        function(e) {
            console.log("Fail load archive: " + e)
        })
    },
    n.startSaveTimer = function() {
        var e = this;
        this.interval = setInterval(function() {
            e.saveQuotesInDB()
        },
        36e5)
    },
    n.stopSaveTimer = function() {
        clearInterval(this.interval)
    },
    n.saveQuotesInDB = function() {
        for (var e in this.archives) this._saveQuotesInDBbyKey(e)
    },
    n._saveQuotesInDBbyKey = function(t) {
        var i = parseInt(t.split("|")[1]);
        e.isBasePeriod(i) && this.archives[t].saveInDB()
    },
    n.getStartPeriodDate = function(t, i, s) {
        void 0 == s && (s = !0);
        var n = 100 * e.UtipFunctions.div(i, 100),
        o = i % 100,
        a = new Date(t);
        s && (a = new Date(a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate(), a.getUTCHours(), a.getUTCMinutes(), a.getUTCSeconds()));
        var r = a;
        switch (n) {
        case DTC_SECONDS:
            r = new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), a.getMinutes(), e.UtipFunctions.div(a.getSeconds(), o) * o, 0);
            break;
        case DTC_MINUTES:
            r = new Date(a.getFullYear(), a.getMonth(), a.getDate(), a.getHours(), e.UtipFunctions.div(a.getMinutes(), o) * o, 0, 0);
            break;
        case DTC_HOURS:
            r = new Date(a.getFullYear(), a.getMonth(), a.getDate(), e.UtipFunctions.div(a.getHours(), o) * o, 0, 0, 0);
            break;
        case DTC_DAYS:
            r = new Date(a.getFullYear(), a.getMonth(), a.getDate(), 0, 0, 0, 0);
            break;
        case DTC_WEEKS:
            r = e.UtipFunctions.getMonday(t);
            break;
        case DTC_MONTHS:
            r = new Date(a.getFullYear(), a.getMonth(), 1, 0, 0, 0, 0);
            break;
        case DTC_QUARTERS:
            r = new Date(a.getFullYear(), 3 * e.UtipFunctions.div(a.getMonth(), 3), 1, 0, 0, 0, 0);
            break;
        case DTC_YEARS:
            r = new Date(a.getFullYear(), 0, 1, 0, 0, 0, 0)
        }
        return r.valueOf()
    },
    n._onGetQuote = function(t) {
        for (var s = 0; s < i.length; s++) {
            var n = this.getStartPeriodDate(t._LastChangedTime + 6e4 * (new Date).getTimezoneOffset(), i[s], !1),
            o = this.getArchive(t._SymbolName, i[s], !1);
            if (o) {
                var a = o.candles.get(n),
                r = null,
                l = !1;
                null === a ? (r = {},
                l = !0, r.open = t._Bid, r.close = t._Bid, r.volume = 0) : r = a.value,
                r.volume += Math.round(Math.abs(t._Bid - r.close) * t.getPrecision()),
                r.close = t._Bid,
                !(t._Bid > r.high) && "high" in r || (r.high = t._Bid),
                !(t._Bid < r.low) && "low" in r || (r.low = t._Bid),
                r.date = n,
                this.updateDependentCandles(r, i[s], t._SymbolName),
                o.candles.put(n, r),
                o.updateMinMax(),
                "undefined" != typeof e.Charts2 && (e.Browser.IsMobile ? e.getTerminal().mainSwiper.getSelectedPageIndex() == e.MobileTerminalPage.ChartPage && e.Charts2.redraw(t._SymbolName, i[s], !0) : e.Charts2.redraw(t._SymbolName, i[s], !0))
            }
        }
    },
    n.getArchive = function(e, i, s) {
        var n = void 0 == s,
        o = e + "|" + i,
        a = this.archives[o];
        return void 0 == a && n && (a = new t(o, this), this.archives[o] = a),
        this.archives[o]
    },
    n.updateDependentCandles = function(t, i, s) {
        for (var n in this.archives) {
            var o = this.archives[n],
            a = o.key.split("|")[0],
            r = parseInt(o.key.split("|")[1]);
            if (a == s && e.getBasePeriod(r) == i && i !== r) {
                var l = this.getStartPeriodDate(t.date, r, !1),
                h = o.candles.get(l),
                d = null;
                d = null === h ? e.cloneObject(t) : h.value,
                d.volume += t.volume,
                d.close = t.close,
                !(t.high > d.high) && "high" in d || (d.high = t.high),
                !(t.low < d.low) && "low" in d || (d.low = t.low),
                d.date = l,
                o.candles.put(l, d),
                o.updateMinMax()
            }
        }
    },
    n.updateDependentArchives = function(t, i, s) {
        for (var n in this.archives) {
            var o = this.archives[n],
            a = o.key.split("|")[0],
            r = parseInt(o.key.split("|")[1]);
            if (a == s && e.getBasePeriod(r) == i && r !== i) {
                var l = t.candles.min();
                for (o.candles.removeNodes(); null != l;) {
                    var h = this.getStartPeriodDate(l.key, r, !1),
                    d = o.candles.get(h);
                    null == d ? o.candles.put(h, e.cloneObject(l.value)) : (d.value.volume += l.value.volume, d.value.close = l.value.close, !(l.value.high > d.value.high) && "high" in d.value || (d.value.high = l.value.high), !(l.value.low < d.value.low) && "low" in d.value || (d.value.low = l.value.low), o.candles.put(h, e.cloneObject(d.value))),
                    l = t.candles.successor(l.key)
                }
                o.updateMinMax(),
                o.loading = !1
            }
        }
    },
    n.updateArchive = function(t) {
        var i = t.symbolName,
        s = e.requestPeriodsToPeriod[t.period],
        n = t.archiveArray,
        o = e.QuotesArchive.getArchive(i, s);
        if (t.msgResult.toLowerCase() === "Success".toLowerCase()) {
            var a, r;
            for (var l in n) {
                a = n[l];
                var h = 1e3 * parseInt(a.date) + 6e4 * (new Date).getTimezoneOffset();
                r = {},
                r.open = parseFloat(a.open),
                r.close = parseFloat(a.close),
                r.high = parseFloat(a.high),
                r.low = parseFloat(a.low),
                r.volume = parseInt(a.volume),
                r.date = h,
                o.candles.put(h, r)
            }
            this.updateDependentArchives(o, s, i),
            o.updateMinMax(),
            o.needLoadFromDB && o.loadFromDB(),
            "undefined" != typeof e.Charts2 && e.Charts2.redraw(i, s, null, !0),
            this.updateIDBArchiveByKey(i, s)
        }
        ("Archive is not found" === t.msgResult || null === t.msgResult ) && (o.headLoaded = !0),
        o.loading = !1
    },
    n.updateIDBArchiveByKey = function(e, t) {
        if (null != e && null != t) {
            var i = this.db;
            if (i && 0 !== Object.keys(i).length) {
                var s = this;
                i.get(e + "|" + t,
                function(n) {
                    n && n.candles && (i.remove(e + "|" + t), s._saveQuotesInDBbyKey(e + "|" + t))
                })
            }
        }
    },
    n = null,
    e.QuotesArchive = new e._QuotesArchive,
    e
}),
define("optionsSettingsData", ["listener"],
function(e) {
    e.OptionsSettingsList = function() {
        this._optionsSettings = {},
        this._selectedOptionType = 0,
        this._selectedOptionSettingsID = 1,
        e.OptionsSettingsList.base.constructor.apply(this, arguments)
    },
    e.initClass(e.OptionsSettingsList, e.Listener);
    var t = e.OptionsSettingsList.prototype;
    t.clearOptionsSettings = function() {
        this._optionsSettings = []
    },
    t.setSelectedOptionSettingsID = function(t) {
        this._selectedOptionSettingsID = t,
        e.ServerSettings.OptionsSettings.SelectedOptionSettingsID = t
    },
    t.getSelectedOptionSettings = function() {
        return this.byID(this._selectedOptionSettingsID)
    },
    t.getOptionsTypesBySymbolName = function(e, t) {
        var i = [],
        s = [];
        this._optionsSettings.length;
        for (var n in this._optionsSettings) {
            var o = this._optionsSettings[n],
            a = o._isUseOption;
            o.getSymbolName() == e && a && i.push(o)
        }
        t && (i = i.filter(function(e, t, i) {
            return e.isShowOption === !0
        }));
        for (var r = i.length,
        l = 0; l < r; l++) {
            o = i[l];
            var h = o.getType();
            s.indexOf(h) == -1 && s.push(h)
        }
        return s
    },
    t.getOptionsSettingsByOptionNameAndSymbolName = function(e, t) {
        var i = [];
        this._optionsSettings.length;
        for (var s in this._optionsSettings) {
            var n = this._optionsSettings[s];
            n.getName() == e && n.getSymbolName() == t && i.push(n)
        }
        return i
    },
    t.getOptionsSettingsBySymbolName = function(e) {
        var t = this._optionsSettings,
        i = [];
        for (var s in t) {
            var n = t[s];
            n.getSymbolName() === e && i.push(n)
        }
        return i
    },
    t.getOptionSettingsByOptionTypeAndSymbolName = function(e, t) {
        for (var i = this.getFavoritesByType(e), s = null, n = i.length, o = 0; o < n; o++) if (i[o]._symbolName === t) return s = i[o];
        return null
    },
    t._getFirstOptionTypeBySymbolName = function(t) {
        var i = [];
        return i.push(this.getFirstByTypeAndSymbolName(e.OptionSettingsType.express, t)),
        i.push(this.getFirstByTypeAndSymbolName(e.OptionSettingsType.classic, t)),
        i.push(this.getFirstByTypeAndSymbolName(e.OptionSettingsType.oneTouch, t)),
        i.push(this.getFirstByTypeAndSymbolName(e.OptionSettingsType.range, t)),
        i.filter(function(e) {
            return null != e
        })
    },
    t.getAvailableTypesBySymbolName = function(t) {
        if (t) {
            for (var i = e.getTerminal(), s = i.useNewOptions, n = e.OptionSettingsType, o = this.getFirstAvailableByTypeAndSymbolName.bind(this), a = [], r = [n.express, n.classic, n.oneTouch, n.range], l = r.length, h = 0; h < l; ++h) {
                var d = r[h],
                c = o(d, t);
                if (c) {
                    if (!s && (d === n.oneTouch || d === n.range)) continue;
                    a.push(d)
                }
            }
            return a
        }
    },
    t.getFirstByTypeAndSymbolName = function(e, t, i) {
        var s = this.getFavoritesByType(e);
        for (var n in s) {
            var o = s[n];
            if (o.getSymbolName() == t && (!i || i != o.getID())) return o;
        }
        return null
    },
    t.getFirstAvailableByTypeAndSymbolName = function(e, t) {
        var i = this.getFavoritesByType(e);
        for (var s in i) {
            var n = i[s];
            if (t === n.getSymbolName() && e === n.getType() && n.canUse()) return n
        }
        return null
    },
    t.getFirstByTypeAndSymbol_OptionSettingsName = function(e, t, i, s) {
        var n = this.getAllOptionsByType(e);
        for (var o in n) {
            var a = n[o];
            if (a.getSymbolName() == t && a.getName() == i && (!s || s != a.getID())) return a
        }
        return null
    },
    t.parseOptionsSettingsTypeName = function(t) {
        e.OptionTypeAliases = {};
        for (var i in t)(e.getTerminal().useNewOptions || e.OptionTypeByName[t[i].name] != e.OptionSettingsType.oneTouch && e.OptionTypeByName[t[i].name] != e.OptionSettingsType.range) && (e.OptionTypeNames[e.OptionTypeByName[t[i].name]] = t[i].aliasName, e.OptionTypeAliases[t[i].aliasName] = t[i].name);
        e.getTerminal().setOptionsSettingsTypeSelect(),
        e.Browser.IsMobile || e.getTableTrade().fillTable(),
        e.getDialogBuyOptionWithoutInit() && e.getDialogBuyOptionWithoutInit().swiperButtonUpdate()
    },
    t.parseOptionsSettings = function(t) {
        this._optionsSettings = [];
        var i = e.ServerSettings.OptionsSettings.FavoritesOptionsSettings,
        s = e.SymbolsData.getSymbols(),
        n = {};
        n[e.OptionSettingsType.express] = 0,
        n[e.OptionSettingsType.classic] = 0,
        n[e.OptionSettingsType.oneTouch] = 0,
        n[e.OptionSettingsType.range] = 0;
        for (var o = 0; o < t.length; o++) {
            var a = new e.OptionSettings(t[o]),
            r = t[o].id;
            a.isShowOption = !i[r] || i[r].isShowOption,
            a.isShowOption && a.canUse() && s[a.getSymbolName()].canUse() && n[a.getType()]++,
            this._optionsSettings[r] = a
        }
        var l = !1;
        for (var h in n) n.hasOwnProperty(h) && 0 === n[h] && (this.getFavoritesByType(parseInt(h), !0).forEach(function(e) {
            e.canUse() && s[e.getSymbolName()].canUse() && (e.isShowOption = !0)
        }), l = !0);
        l && this.saveSettings(),
        this._onGetOptionsSettings(this._optionsSettings)
    },
    t._onGetOptionsSettings = function(e) {
        this.notifyFollowers("_onGetOptionsSettings", e)
    },
    t.setFavoritesOptionsSettings = function() {
        if (this._optionsSettings && e.ServerSettings.OptionsSettings && e.ServerSettings.OptionsSettings.FavoritesOptionsSettings) {
            for (var t in this._optionsSettings) {
                var i = this._optionsSettings[t],
                s = e.ServerSettings.OptionsSettings.FavoritesOptionsSettings[t];
                s && (i.isShowClassicOption = s.isShowClassicOption, i.isShowExpressOption = s.isShowExpressOption)
            }
            this._selectedOptionSettingsID = e.ServerSettings.OptionsSettings.SelectedOptionSettingsID
        }
    },
    t.getAllOptionsByType = function(e) {
        var t = [];
        for (var i in this._optionsSettings) {
            var s = this._optionsSettings[i];
            s._isUseOption && s._type == e && t.push(s)
        }
        return t.sort(function(e, t) {
            return e._name < t._name ? -1 : e._name > t._name ? 1 : 0
        }),
        t
    },
    t.getOptionsByTypeExceptForbidden = function(t, i) {
        var s, n, o = [],
        a = this._optionsSettings;
        for (var r in a) {
            n = a[r],
            s = e.SymbolsData.getSymbols()[n.getSymbolName()];
            var l = !i || n.isShowOption;
            n.canUse() && n.getType() === t && l && s && s.canUse() && o.push(n)
        }
        return o.sort(function(e, t) {
            var i = e.getName(),
            s = t.getName(),
            n = i < s,
            o = i > s;
            return n === !0 ? -1 : o === !0 ? 1 : 0
        }),
        o.filter(function(t) {
            return e.SymbolsData.isActiveSymbol(t._symbolName)
        })
    },
    t.checkAreOptionsEnabledExceptForbidden = function() {
        var t = e.OptionsSettings,
        i = t.getOptionsByTypeExceptForbidden.bind(t),
        s = e.OptionSettingsType;
        return 0 !== i(s.classic, !0).length || 0 !== i(s.express, !0).length || 0 !== i(s.oneTouch, !0).length || 0 !== i(s.range, !0).length
    },
    t.getUseOptionsCount = function() {
        return this._useOptionCount ? this._useOptionCount: (this._useOptionCount = this._optionsSettings.filter(function(e) {
            return ! e.isUseOption
        }).length, this._useOptionCount)
    },
    t.getFavoritesByType = function(e, t) {
        var i = [];
        for (var s in this._optionsSettings) {
            var n = this._optionsSettings[s];
            n._isUseOption && (n.isShowOption || t) && n._type == e && i.push(n)
        }
        return i.sort(function(e, t) {
            return e._name < t._name ? -1 : e._name > t._name ? 1 : 0
        }),
        i
    },
    t.getAllFavorites = function() {
        var e = [];
        for (var t in this._optionsSettings) {
            var i = this._optionsSettings[t];
            i._isUseOption && i.isShowOption && e.push(i)
        }
        return e.sort(function(e, t) {
            return e._name < t._name ? -1 : e._name > t._name ? 1 : 0
        }),
        e
    },
    t.getAllFavoriteSymbolsNames = function() {
        for (var t, i = this.getAllFavorites(), s = [], n = 0; n < i.length; n++) {
            t = i[n].getSymbolName();
            var o = e.SymbolsData.getSymbols()[t];
            s.indexOf(t) === -1 && o.canUse() && s.push(t)
        }
        return s
    },
    t.setSelectedOptionType = function(e) {
        this._selectedOptionType = e
    },
    t.getSelectedOptionType = function() {
        return this._selectedOptionType
    },
    t.getOptionSettingsByName = function(e) {
        var t = null;
        for (var i in this._optionsSettings) {
            var s = this._optionsSettings[i];
            if (s._name == e) return s
        }
        return t
    },
    t.getOptionSettingsByNameAndType = function(e, t) {
        for (var i in this._optionsSettings) {
            var s = this._optionsSettings[i];
            if (s.getName() == e && s.getType() == t) return s
        }
    },
    t.getOptionsSettingsByName = function(t) {
        for (var i = [], s = e.OptionsSettings.getOptionsSettings(), n = s.length, o = 0; o < n; o++) s[o] && s[o].getName() == t && i.push(s[o]);
        return 0 == i.length ? null: i
    },
    t.getOptionSettingsBySymbolName = function(e) {
        var t = null;
        for (var i in this._optionsSettings) {
            var s = this._optionsSettings[i];
            if (s._symbolName == e) return s
        }
        return t
    },
    t.searchOptionSettings = function(e) {
        var t = this.getOptionSettingsByName(e);
        return t ? t: this.getOptionSettingsBySymbolName(e)
    },
    t.getOptionsSettings = function() {
        return this._optionsSettings
    },
    t.saveSettings = function() {
        var t = e.ServerSettings || {
            OptionsSettings: {
                FavoritesOptionsSettings: {},
                SelectedOptionSettingsName: "",
                SelectedOptionType: 0
            }
        },
        i = t.OptionsSettings || {},
        s = i.FavoritesOptionsSettings = {};
        for (var n in this._optionsSettings) {
            var o = this._optionsSettings[n];
            s[n] = {
                isShowOption: o.isShowOption
            }
        }
        t.OptionsSettings = i,
        t.OptionsSettings.SelectedOptionSettingsID = this._selectedOptionSettingsID,
        t.OptionsSettings.SelectedOptionType = this._selectedOptionType,
        t.OptionsSettings.UseOnlyOptions = e.getTerminal().useOnlyOptions,
        e.ServerSettings = t
    },
    t.isThereFavorites = function() {
        for (var e in this._optionsSettings) {
            var t = this._optionsSettings[e];
            if (t._useExpressOption && t.isShowExpressOption || t._useClassicOption && t.isShowClassicOption) return ! 0
        }
        return ! 1
    },
    t.getOneFavoriteOptionSettings = function() {
        var t = {
            optionSettings: null,
            optionType: e.OptionSettingsType.express
        };
        for (var i in this._optionsSettings) {
            var s = this._optionsSettings[i];
            if (s._useExpressOption && s.isShowExpressOption) return t.optionType = e.OptionSettingsType.express,
            t.optionSettings = s,
            t;
            if (s._useClassicOption && s.isShowClassicOption) return t.optionType = e.OptionSettingsType.classic,
            t.optionSettings = s,
            t
        }
        return t
    },
    t.getCount = function() {
        return e.UtipFunctions.getPropertyCount(this._optionsSettings)
    },
    t.getOptionSettingsFromFavorites = function(t) {
        var i = {
            optionSettings: null,
            optionType: e.OptionSettingsType.express
        },
        s = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.classic),
        n = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.express);
        return n.indexOf(t) > -1 && s.indexOf(t) > -1 ? (i.optionType = this.getSelectedOptionType(), i.optionSettings = t, i) : n.indexOf(t) > -1 ? (i.optionType = e.OptionSettingsType.express, i.optionSettings = t, i) : s.indexOf(t) > -1 ? (i.optionType = e.OptionSettingsType.classic, i.optionSettings = t, i) : i
    },
    t.modifyOptionSettings = function(t) {
        var i = this.byID(t.id);
        i._id = parseInt(t.id) || 0,
        i._name = t.name || "",
        i._symbolName = t.symbolName || "",
        i._type = e.OptionTypeByName[t.type],
        i._isUseOption = Boolean(parseInt(t.isUseSetting)),
        i._optionParams = JSON.parse(t.optionParams),
        1 === this.getAllFavorites().length && this.setSelectedOptionType(this.getAllFavorites()[0].getType()),
        this._onGetOptionsSettings(this._optionsSettings)
    },
    t.addOptionSettings = function(t) {
        var i = this.byID(t.id);
        i ? this.modifyOptionSettings(t) : (i = new e.OptionSettings(t), this._optionsSettings[t.id] = i),
        this._onGetOptionsSettings(this._optionsSettings)
    },
    t.deleteOptionSettings = function(e) {
        var t = this.byID(e.id);
        t && (delete this._optionsSettings[e.id], this._onGetOptionsSettings(this._optionsSettings))
    },
    t.getOptionsSettingsMenuItemsList = function(e) {
        for (var t = [], i = 0; i < e.length; i++) {
            var s = {};
            s.Checked = !1,
            s.Key = i.toString(),
            s.Id = e[i].getID(),
            s.Text = e[i].getName(),
            t.push(s)
        }
        return t
    },
    t.getOptionsSettingsNames = function(e) {
        for (var t = [], i = 0; i < e.length; i++) {
            var s = e[i].getName();
            t.push(s)
        }
        return t
    },
    t.byID = function(e) {
        return this._optionsSettings[e]
    },
    t.isActiveOption = function(t) {
        var i = e.getTerminal().useOptions && !e.getTerminal().useOnlyOptions,
        s = e.getTerminal().useOnlyOptions;
        if (s || i) {
            var n = this.getAllFavorites().filter(function(i) {
                return i._symbolName === t && e.SymbolsData.isActiveSymbol(i._symbolName)
            });
            return n.length > 0
        }
        return ! 1
    },
    t = null,
    e.OptionSettingsType = {
        express: 0,
        classic: 1,
        oneTouch: 2,
        range: 3
    },
    e.OptionTypeNames = {
        0 : "Express",
        1 : "Classic",
        2 : "One Touch",
        3 : "Range"
    },
    e.OptionTypeNamesLowerCase = {
        0 : "express",
        1 : "classic",
        2 : "oneTouch",
        3 : "range"
    },
    e.OptionTypeByName = {
        Express: 0,
        Classic: 1,
        "One Touch": 2,
        Range: 3
    },
    e.OptionTypeAliases = {},
    e.OptionSettings = function(t) {
        t = t || {},
        this._id = parseInt(t.id) || 0,
        this._name = t.name || "",
        this._symbolName = t.symbolName || "",
        this._type = e.OptionTypeByName[t.type],
        this._isUseOption = Boolean(parseInt(t.isUseSetting)),
        this._optionParams = JSON.parse(t.optionParams || "[]"),
        this.isShowOption = !0,
        this.lastSelectedValue = -1
    };
    var i = e.OptionSettings.prototype;
    return i.getParams = function() {
        return this._optionParams
    },
    i.getName = function() {
        return this._name
    },
    i.getType = function() {
        return this._type
    },
    i.getSymbolName = function() {
        return this._symbolName
    },
    i.getID = function() {
        return this._id
    },
    i.getPrice = function() {
        var t = e.SymbolsData.getSymbols()[this._symbolName];
        return t ? e.numberFormat(t._Bid, t.getDigits(), ".", "") : 1
    },
    i.getProfitPercentageByPeriod = function(e) {
        for (var t = 0; t < this._optionParams.length; t++) {
            var i = this._optionParams[t];
            if (parseInt(i.period) == e / 1e3) return parseInt(i.payoutPercentage)
        }
    },
    i.getOptionPeriodCaption = function(e) {
        var t = e / 1e3,
        i = 30,
        s = 365,
        n = 60,
        o = 3600,
        a = 86400,
        r = "sec ",
        l = "min ",
        h = "hour ",
        d = "days ",
        c = "months ",
        u = "year ";
        return t >= a * s ? u + "" + (t / (a * s)).toString() : t >= a * i ? c + "" + (t / (a * i)).toString() : t >= a ? d + "" + (t / a).toString() : t >= o ? h + "" + (t % a / o).toString() : t >= n ? l + "" + (t % a % o / n).toString() : r + "" + (t % a % o % n).toString()
    },
    i.getOptionPeriodCaptions = function() {
        for (var e = [], t = 0; t < this._optionParams.length; t++) {
            var i = this._optionParams[t];
            e.push({
                Text: this.getOptionPeriodCaption(1e3 * parseInt(i.period)),
                Data: {
                    period: 1e3 * parseInt(i.period),
                    paramID: i.id
                }
            })
        }
        return e
    },
    i.getFirstPeriod = function() {
        return 1e3 * parseInt(this._optionParams[0].period)
    },
    i.getParamsByID = function(e) {
        for (var t = 0; t < this._optionParams.length; t++) {
            var i = this._optionParams[t];
            if (parseInt(i.id) == parseInt(e)) return i
        }
    },
    i.getParamsByPeriod = function(e) {
        for (var t = 0; t < this._optionParams.length; t++) {
            var i = this._optionParams[t];
            if (parseInt(i.period) == e) return i
        }
        return this._optionParams[0]
    },
    i.getStopLineByPeriod = function(e) {
        for (var t = 0; t < this._optionParams.length; t++) {
            var i = this._optionParams[t];
            if (1e3 * parseInt(i.period) == e) return 1e3 * i.stopLine
        }
    },
    i.canUse = function() {
        return this._isUseOption
    },
    e.funcGetOptionPeriodCaption = function(e) {
        var t = 86400,
        i = e / 1e3,
        s = " days ";
        return i < t ? "": Math.floor(i / t).toString() + "" + s
    },
    i = null,
    e.OptionsSettings = new e.OptionsSettingsList,
    e
}),
define("socket", ["listener", "symbolsData", "traderData", "dialogLoginPassword", "quoteArchive", "optionsSettingsData"],
function(e) {
    e.WebSocket = function(t) {
        return this instanceof e.WebSocket ? (t = t || {},
        this._Url = t.Url, this._Port = t.Port, this._Token = t.Token, e.WebSocket.base.constructor.apply(this, arguments), this._binds = {
            onopen: this._onOpen.bind(this),
            onmessage: this._onMessage.bind(this),
            onerror: this._onError.bind(this),
            onclose: this._onClose.bind(this),
            controlRes: this._controlResponse.bind(this)
        },
        void(this._controlResTimeouts = {})) : new e.WebSocket(t)
    },
    e.initClass(e.WebSocket, e.Listener);
    var t = e.WebSocket.prototype;
    return t.openSocket = function(t, i, s) {
        if (this._Url = t ? t: this._Url, this._SocketType = "ws://", this._Url.toLowerCase().indexOf("https://") >= 0 ? (this._Url = this._Url.replace("https://", ""), this._SocketType = "wss://") : this._Url.toLowerCase().indexOf("http://") >= 0 && (this._Url = this._Url.replace("http://", "")), this._Port = i ? i: this._Port, this._Token = s ? s: this._Token, this._Url && this._Port && this._Token) {
            if ("WebSocket" in window) try {
                this._socket = new WebSocket(this._SocketType + this._Url + ":" + this._Port + "/session/" + this._Token),
                this._socket.onopen = this._binds.onopen,
                this._socket.onmessage = this._binds.onmessage,
                this._socket.onerror = this._binds.onerror,
                this._socket.onclose = this._binds.onclose
            } catch(t) {
                e.Auth.exit(),
                e._Terminal._restart = !1,
                hidePreloader(),
                e.Browser.IsMobile ? e.getMobileSignInDialog().show() : e.AuthModule.show(0)
            }
        } else this._onError()
    },
    t.close = function() {
        this._socket && 3 !== this._socket.readyState && this._socket.close()
    },
    t.getSocketState = function() {
        return this._socket.readyState
    },
    t.send = function(e, t) {
        try {
            e && (t && (this._controlResTimeouts[t] || (this._controlResTimeouts[t] = {},
            this._controlResTimeouts[t].resultMessage = ""), this._controlResTimeouts[t].timerId && clearTimeout(this._controlResTimeouts[t].timerId), this._controlResTimeouts[t].timerId = setTimeout(this._binds.controlRes, 5e3, e, t)), this._socket.send(e))
        } catch(i) {
            0 == this._socket.readyState && setTimeout(function() {
                this._tryingToGet(e, t)
            }.bind(this), 100)
        }
    },
    t._onOpen = function(t) {
        this.notifyFollowers("_onSocketOpen", t),
        this.send('{"commandCode":"' + e.ServerCommandCodes.GetServerName + '"}', "GetServerName")
    },
    t._controlResponse = function(e, t) {
        this._controlResTimeouts[t].resultMessage.toLowerCase() !== "success".toLowerCase() && this._tryingToGet(e, t)
    },
    t._tryingToGet = function(e, t) {
        this._tryCounter = (this._tryCounter || 0) + 1,
        this._tryCounter < 3 ? this.send(e, t) : this._onError()
    },
    t._onMessage = function(t) {
        var i = e.jsonParse(t.data),
        s = "success".toLowerCase();
        if (i) {
            var n, o = i.msgType,
            a = e.getTerminal();
            switch (o) {
            case "serverName":
                if (a = e.getTerminal(), i.msgResult.toLowerCase() == s) {
                    if (this._controlResTimeouts.GetServerName.resultMessage = s, a.platformType = parseInt(i.serverType), a.useOptions = Boolean(parseInt(i.useOptions)), a.useOnlyOptions = Boolean(parseInt(i.useOnlyOptions)), a.useNewOptions = Boolean(parseInt(i.useNewOptions)), a.useOnlyOptions = a.platformType == e.PlatformTypes.ptUTIP && a.useOptions && a.useOnlyOptions, !a.disableOptionsIfIOS()) return;
                    a.useOnlyOptions && !e.Browser.IsMobile && a.getHeaderPanel().getSettingsMenu().getItems()[0].setVisible(!1),
                    a.adjustQuotesContent(a.useOnlyOptions);
                    var r = a.getStatusBar();
                    switch (a.setPlatformSettings(), a.setOptionsSettingsTypeSelect(), a.platformType) {
                    case e.PlatformTypes.ptUTIP:
                        r && r.removeBalanceNode(),
                        this.send('{"commandCode":' + e.ServerCommandCodes.GetHolidays + "}", "GetHolidays");
                        break;
                    case e.PlatformTypes.ptMT:
                        e.getTerminal().useOptions = !1,
                        r && (r.removeBalanceNode(), r.createBalanceNode()),
                        this.send('{"commandCode":' + e.ServerCommandCodes.GetMTSymbols + "}", "GetMTSymbols"),
                        a.setOptionsVisible()
                    }
                }
                e.Browser.IsMobile || (e.TerminalContainer.style.visibility = "", hidePreloader()),
                a.setOnlyOptionsVisible(!1);
                break;
            case "traderType":
                var l = e.investorAccount = "0" !== i.isLoggedInByInvestorPassword;
                if (l) if (a = e.getTerminal(), e.Browser.IsMobile) {
                    a.setControlButtonsVisible();
                    var h = a.statusPanel.button;
                    h.investorModeDependency = !0,
                    h.setVisible(!1)
                } else a.getHeaderPanel().changePassDisable();
                break;
            case "mt4Symbols":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.SymbolsData.parseMTSymbols(i.symbolsArray), this._controlResTimeouts.GetMTSymbols.resultMessage = s, e.getTerminal().getSwiperTrade() && e.getTerminal().getSwiperTrade()._onButtonBlock(), e.getTerminal().getChartPanel() && e.SymbolsData.getSelectedSymbols().length > 0 && e.getTerminal().getChartPanel()._onButtonBlock(!0), this.send('{"commandCode":' + e.ServerCommandCodes.GetMTLastQuotes + "}", "GetLastQuotes")) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetMTSymbols + "}", "GetMTSymbols");
                break;
            case "holidays":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.SymbolsData.setHolidays(i.holidaysArray), this._controlResTimeouts.GetHolidays.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetSymbolGroups + "}", "GetSymbolGroups")) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetHolidays + "}", "GetHolidays");
                break;
            case "symbolGroups":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.SymbolsData._parseSymbolsGroups(i.symbolsGroupsArray), this._controlResTimeouts.GetSymbolGroups.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetSymbols + "}", "GetSymbols")) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetSymbolGroups + "}", "GetSymbolGroups");
                break;
            case "mt4SymbolsGroupsParameters":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.SymbolsData._parseMT4SymbolsGroupsParameters(i.symbolsGroupsParameters), this._controlResTimeouts.GetMT4SymbolsGroupsParameters.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetMTTraderData + "}", "GetMTTraderData")) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetMT4SymbolsGroupsParameters + "}", "GetMT4SymbolsGroupsParameters");
                break;
            case "symbols":
                if (i.msgResult.toLowerCase() == s) {
                    var a = e.getTerminal(),
                    d = e.SymbolsData;
                    this._tryCounter = 0,
                    d._parseSymbols(i.symbolsArray),
                    e.Charts2.closeChartsByDisabledSymbol(),
                    a.getSwiperTrade() && a.getSwiperTrade()._onButtonBlock(),
                    a.getChartPanel() && d.getSelectedSymbols().length > 0 && a.getChartPanel()._onButtonBlock(!0),
                    e.Browser.IsMobile && (d.updateSelectedSymbolsByGraphicWindow(a.graphicWindow), a.checkSymbolsData(), a._onButtonBlock()),
                    this._controlResTimeouts.GetSymbols.resultMessage = s,
                    this.send('{"commandCode":' + e.ServerCommandCodes.GetLastQuotes + "}", "GetLastQuotes")
                } else this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetSymbols + "}", "GetSymbols");
                break;
            case "lastQuote":
                if (i.msgResult.toLowerCase() == s) {
                    this._tryCounter = 0;
                    var c = i.lastQuotesArray || [];
                    for (n = 0; n < c.length; n++) e.SymbolsData.setNewQuoteFromSocket(c[n], !0);
                    switch (e.SymbolsData.onRefreshSymbols(!0), e.SymbolsData.refreshDataByDigitCount(), this._controlResTimeouts.GetLastQuotes.resultMessage = s, e.getTerminal().platformType) {
                    case e.PlatformTypes.ptUTIP:
                        this.send('{"commandCode":' + e.ServerCommandCodes.GetClientData + "}", "GetClientData");
                        break;
                    case e.PlatformTypes.ptMT:
                        this.send('{"commandCode":' + e.ServerCommandCodes.GetMT4SymbolsGroupsParameters + "}", "GetMT4SymbolsGroupsParameters")
                    }
                } else this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetLastQuotes + "}", "GetLastQuotes");
                break;
            case "traderData":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.TraderData.parseTraderInfo(i), e.getTerminal().getSwiperTrade() && e.getTerminal().getSwiperTrade().getReportButton().setEnabled(!0), this._controlResTimeouts.GetClientData.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetTraderGroup + "}", "GetTraderGroup"), this.send('{"commandCode":' + e.ServerCommandCodes.GetOptionsAliasTypeName + "}", "GetOptionsAliasTypeName"), e.updateHeadTitle(e.TraderData._TraderInfo.id), e.getTerminal().getHeaderPanel() && e.getTerminal().getHeaderPanel().setProfileData(), i.msgData = i) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetClientData + "}", "GetClientData");
                break;
            case "mt4TraderData":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.TraderData.parseMTTraderInfo(i), e.getTerminal().getSwiperTrade().getReportButton().setEnabled(!0), this._controlResTimeouts.GetMTTraderData.resultMessage = s, e.updateHeadTitle(e.TraderData._TraderInfo.id), e.getTerminal().getHeaderPanel() && e.getTerminal().getHeaderPanel().setProfileData(), this.send('{"commandCode":' + e.ServerCommandCodes.GetMTAllOpenOrders + "}", "GetMTAllOpenOrders")) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetMTTraderData + "}", "GetMTTraderData");
                break;
            case "allMT4OpenOrders":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.TraderData.parseMTPositions(i), e.Charts2.redrawActiveChart(), this._controlResTimeouts.GetMTAllOpenOrders.resultMessage = s) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetMTAllOpenOrders + "}", "GetMTAllOpenOrders");
                break;
            case "traderGroup":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.TraderData.parseTraderGroup(i), i.msgData = i, e.Config.TerminalSettings && e.Config.TerminalSettings.IntegratedWebOfficeEnabled && !e.Browser.IsMobile && e.WebOfficeController.sendLastAccount(), this._controlResTimeouts.GetTraderGroup.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetPositions + "}", "GetPositions"), e.SymbolsData.onRefreshSymbols(!0)) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetTraderGroup + "}", "GetTraderGroup");
                break;
            case "positions":
                i.msgResult.toLowerCase() == s ? (this._tryCounter = 0, e.TraderData.parsePositions(i), e.Browser.IsMobile || (i.msgData = i.positionsArray), this._controlResTimeouts.GetPositions.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetPendingOrders + "}", "GetPendingOrders"), e.Charts2.updateAllTradeLines()) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetPositions + "}", "GetPositions");
                break;
            case "pendingOrders":
                if (i.msgResult.toLowerCase() == s) {
                    if (this._tryCounter = 0, e.TraderData.parsePendingOrders(i), e.Browser.IsMobile || (i.msgData = i.pendingOrdersArray), this._controlResTimeouts.GetPendingOrders.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetOptionPositions + "}", "GetOptionPositions"), e.getTerminal().useOptions || e.getTerminal().setOptionsVisible(), e.Browser.IsMobile) {
                        if (0 == e.TerminalContainer.children.length) {
                            var a = e.getTerminal();
                            a.closeAllMenu(),
                            a.closeAllDialogs(),
                            a.redrawTerminal()
                        }
                        e.TerminalContainer.style.visibility = "",
                        hidePreloader()
                    }
                    e.Charts2.updateAllTradeLines()
                } else this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetPendingOrders + "}", "GetPendingOrders");
                break;
            case "deletePendingOrder":
                var u = e.getTableTrade();
                u && u.deleteTempOrder(),
                u = void 0;
                break;
            case "quote":
                e.SymbolsData.setNewQuoteFromSocket(i.quoteDetails, !1);
                break;
            case "openPosition":
            case "openMT4Position":
                if (i.msgResult.toLowerCase() == s) {
                    if (e._dialogNewOrder) {
                        var g = e.getDialogNewOrder();
                        g && g.getIsOpen() && g.showQueryStatus(e.LangManager.getStringByKey("cWCMQueryReceived") || "Order is executing")
                    }
                } else e.Charts2.offBlockTradePanelsAfterOpenPosition(e.tradePanelConst.workMode.market);
                break;
            case "openPendingOrder":
                i.msgResult.toLowerCase() !== s && e.Charts2.offBlockTradePanelsAfterOpenPosition(e.tradePanelConst.workMode.pending);
                break;
            case "openOptionPosition":
                i.msgResult.toLowerCase() !== s && e.Charts2.offBlockTradePanelsAfterOpenPosition(e.tradePanelConst.workMode.binary);
                break;
            case "deposits":
            case "mt4Deposits":
                i.msgResult.toLowerCase() == s && e.TraderData.parseDeposits(i);
                break;
            case "executedOrders":
            case "mt4ExecutedOrders":
                i.msgResult.toLowerCase() == s && e.TraderData.parseExecutedOrders(i);
                break;
            case "deals":
            case "mt4Deals":
                i.msgResult.toLowerCase() == s && e.TraderData.parseDeals(i);
                break;
            case "closePosition":
                if (i.msgResult.toLowerCase() == s && !e.Browser.IsMobile) {
                    var g = e.getDialogClosePosition();
                    g.showQueryStatus(e.LangManager.getStringByKey("cWCMQueryReceived") || "Order is executing")
                }
                break;
            case "closeOptionPosition":
                if (i.msgResult.toLowerCase() == s);
                else {
                    var g = e.getDialogClosePosition();
                    g.showQueryStatus(i.msgResult)
                }
                break;
            case "changePosition":
                i.msgResult.toLowerCase() == s ? (g = e.getDialogModifyPositionWithoutInit(), g && !e.Browser.IsMobile && (g.showQueryStatus(e.LangManager.getStringByKey("cWCMQueryReceived") || "Order is executing"), i.msgData = g.getPosition())) : e.Browser.IsMobile || e.Charts2.offBlockTradePanelsAfterOpenPosition(e.tradePanelConst.workMode.market);
                break;
            case "executedOrdersData":
                i.msgResult.toLowerCase() == s && e.TraderData.parseExecutedOrderData(i);
                break;
            case "changePassword":
            case "changeMT4Password":
                i.msgResult.toLowerCase() == s ? (e.getChangePassDialog().setEnabled(!0), e.getChangePassDialog().saveNewPassword(), e.getChangePassDialog().hide(), e.showErrorDialog(e.LangManager.getStringByKey("cSMSSuccess") || "The operation was successful", !0)) : e.getChangePassDialog().setEnabled(!0);
                break;
            case "addedSymbol":
                if (i.msgResult.toLowerCase() === s) {
                    e.SymbolsData._addSymbol(i.symbolData);
                    var a = e.getTerminal();
                    e.Browser.IsMobile ? a.checkSymbolsData() : a.addAppendChartBtn(!1),
                    i.msgData = i.symbolData
                }
                break;
            case "deletedSymbol":
                i.msgResult.toLowerCase() === s && (e.SymbolsData._deleteSymbol(i.symbolName), e.Charts2.closeGraphicWindowsBySymbolName(i.symbolName), e.getTerminal().getSwiperTrade() && e.getTerminal().getSwiperTrade()._onButtonBlock(), e.Browser.IsMobile && (e.getTerminal().checkSymbolsData(), e.getTerminal()._onButtonBlock()), i.msgData = i.symbolName);
                break;
            case "pong":
                break;
            case "optionsSettings":
                if (i.msgResult.toLowerCase() === s) {
                    e.OptionsSettings.parseOptionsSettings(i.optionSettingsArray);
                    var a = e.getTerminal();
                    if (a.setOptionsVisible(), a.setOnlyOptionsVisible(e.getTerminal().useOnlyOptions), a.showChartsAs != e.chartsMode.windows && a.getSwiperCharts()) 0 === a.getSwiperCharts().getPages().length && a._loadOpenedChart(null, !0);
                    else if (a.showChartsAs === e.chartsMode.windows && a.chartDialogs && 0 === a.chartDialogs.length) {
                        a._loadOpenedChart(null, !0);
                        var p = e.UserSettings.ChartDialogsLayout;
                        if (p && !e.Browser.IsMobile) {
                            var m = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect();
                            e.getWindowsLayoutMenu()["set" + p.capitalize()](m, a.chartDialogs),
                            e.Charts2.highlightSelectedTabs()
                        }
                    }
                    hidePreloader(),
                    e.Browser.IsMobile ? a.checkSymbolsData() : (a.setOptionsSettingsTypeSelect(), a.checkIsOptionsEnabled(), e.AuthModule.hide(!0)),
                    e.Charts2.updateGraphicWindowsPause = !1,
                    this._controlResTimeouts.GetOptionsSettings.resultMessage = s
                } else this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetOptionsSettings + "}", "GetOptionsSettings");
                break;
            case "optionsSettingsName":
                i.msgResult.toLowerCase() == s ? (e.OptionsSettings.parseOptionsSettingsTypeName(i.optionTypeName), this._controlResTimeouts.GetOptionsAliasTypeName.resultMessage = s, this.send('{"commandCode":' + e.ServerCommandCodes.GetOptionsSettings + "}", "GetOptionsSettings")) : this._tryingToGet('{"commandCode":' + e.ServerCommandCodes.GetOptionsAliasTypeName + "}", "GetOptionsAliasTypeName");
                break;
            case "optionsPositions":
                i.msgResult.toLowerCase() === s && (this._controlResTimeouts.GetOptionPositions.resultMessage = s, e.TraderData.parseOptionPositions(i), e.Browser.IsMobile || (i.msgData = i.optionPositionsArray, e.getTerminal().setOptionsSettingsTypeSelect()), e.eventsQueue.push({
                    type: "SOCKET_MESSAGE_OPTIONS_POSITIONS"
                }));
                break;
            case "optionDeals":
                i.msgResult.toLowerCase() === s && e.TraderData.parseOptionDeals(i);
                break;
            case "changeOptionSettings":
                if (i.msgResult.toLowerCase() === s) {
                    e.OptionsSettings.modifyOptionSettings(i.optionSettings);
                    var a = e.getTerminal();
                    a.setOptionsVisible(),
                    a.setOptionsSettingsTypeSelect(),
                    a.checkIsOptionsEnabled(),
                    a.checkNewChartBtnAvailable(),
                    i.msgData = i.optionSettings,
                    e.Browser.IsMobile ? a.checkSymbolsData() : e.Charts2.binaryOptionChanged(i.optionSettings)
                }
                break;
            case "deleteOptionSettings":
                if (i.msgResult.toLowerCase() === s) {
                    e.OptionsSettings.deleteOptionSettings(i),
                    e.Browser.IsMobile ? a.checkSymbolsData() : e.Charts2.binaryOptionDeleted({
                        id: i.id
                    });
                    var a = e.getTerminal();
                    a.setOptionsSettingsTypeSelect(),
                    a.checkIsOptionsEnabled(),
                    a.checkNewChartBtnAvailable(),
                    i.msgData = {
                        id: i.id
                    }
                }
                break;
            case "addOptionSettings":
                if (i.msgResult.toLowerCase() === s) {
                    e.OptionsSettings.addOptionSettings(i.optionSettings),
                    e.getTerminal().setOptionsSettingsTypeSelect();
                    var a = e.getTerminal();
                    a.setOptionsVisible(),
                    i.msgData = i.optionSettings,
                    e.Browser.IsMobile && a.checkSymbolsData()
                }
                break;
            default:
                console.log(JSON.stringify(i))
            }
            i.msgResult && i.msgResult.toLowerCase() != s && this.showErrorMessage(i),
            i.msgResult && this.notifyFollowers("_onSocketMessage", i)
        }
    },
    t.showErrorMessage = function(t) {
        var i, s = null;
        switch (t.msgResult) {
        case "Error on server":
            i = e.LangManager.getStringByKey("cSMTServerError") || "The operation failed. Retry the request";
            break;
        case "Message is wrong":
            break;
        case "Quote is changed":
            i = e.LangManager.getStringByKey("cSMSQuoteIsChanged") || "Price changed";
            break;
        case "Market closed":
            i = e.LangManager.getStringByKey("cSMSMarketIsClosed") || "Market is closed",
            e.Charts2.updateAllTradeLines();
            break;
        case "No connection":
            i = e.LangManager.getStringByKey("cSMSNoConnections") || "Connection to the server is missing";
            break;
        case "Margin level":
            i = e.LangManager.getStringByKey("cOS_ErrorDeposit") || "Not enough money",
            e.Charts2.offBlockTradePanelsAfterSocketMessage();
            break;
        case "Trade forbidden":
        case "Operation forbidden":
            i = e.LangManager.getStringByKey("cSMTOperationForbidden") || "The operation forbidden";
            break;
        case "Stop level":
            i = e.LangManager.getStringByKey("cTFWErrorStolLevel") || "Stop level error",
            e.Charts2.updateAllTradeLines();
            break;
        case "Too much orders":
            i = e.LangManager.getStringByKey("cWCTPendingOrderForm") || "Exceeded the number of orders";
            break;
        case "Query processing":
            i = e.LangManager.getStringByKey("cSMTQueryProcessing") || "Order is already in progress";
            break;
        case "Wrong password":
            i = e.LangManager.getStringByKey("cSMTWrongPassword") || "Invalid password";
            break;
        case "Already authorized":
            i = "Already authorized";
            break;
        case "Close only allowed":
            i = e.LangManager.getStringByKey("cSMSCloseOnlyAllowed") || "Close only allowed";
            break;
        case "Long only allowed":
            i = e.LangManager.getStringByKey("cSMSLongOnly") || "Long only allowed";
            break;
        case "Invalid price":
            i = e.LangManager.getStringByKey("cSMSInvalidPrice") || "Invalid price";
            break;
        case "Invalid volume":
            i = e.LangManager.getStringByKey("cSMSInvalidVolume") || "Invalid volume";
            break;
        case "Position freezed":
            i = e.LangManager.getStringByKey("cSMSPositionFreezed") || "Position freezed";
            break;
        case "Order already activated":
            i = e.LangManager.getStringByKey("cSMSOrderAlreadyActivated") || "Order already activated";
            break;
        case "Order already deleted":
            i = e.LangManager.getStringByKey("cSMSOrderAlreadyDeleted") || "Order already deleted";
            break;
        case "Invalid new password":
            i = e.LangManager.getStringByKey("cSMTWrongNewPassword") || "Invalid new password";
            break;
        case "Invalid mobile terminal version":
            i = e.LangManager.getStringByKey("cSMNewVersionPath"),
            i = i.substring(0, i.indexOf(".") + 1);
            break;
        case "Maximum number of accounts is exceeded":
            i = e.LangManager.getStringByKey("cSMSMaxCountAccountExceeded") || "Maximum number of accounts is exceeded",
            s = {},
            s.handler = e.Browser.IsMobile ?
            function(t) {
                var i = e.getMobileOpenDemoDialogWithoutInit();
                i && i.unblockButton()
            }: null;
            break;
        case "Option position can not be closed after stop time":
            i = e.LangManager.getStringByKey("cMFOptionStopTimeError") || "Option position can not be closed after stop time";
            break;
        default:
            i = "Unknown error",
            console.log(t.msgResult)
        }
        e.showErrorDialog(i, !1, s)
    },
    t._onError = function(e) {
        this.notifyFollowers("_onSocketError", e)
    },
    t._onClose = function(t) {
        e.getTerminal()._restart = !!e.Auth._checkAuth,
        this.notifyFollowers("_onSocketClose", t)
    },
    t.getWebSocketObject = function() {
        return this._socket
    },
    t = null,
    e.Socket = e.WebSocket(),
    e
}),
define("resizableTables", ["base"],
function(e) {
    function t(e) {
        var t = e || window.event;
        return t.preventDefault ? t.preventDefault() : t.returnValue = !1,
        t.stopPropagation && t.stopPropagation(),
        !1
    }
    function i(e) {
        if (e.currentStyle) var t = e.clientWidth - parseInt(e.currentStyle.paddingLeft) - parseInt(e.currentStyle.paddingRight);
        else if (window.getComputedStyle) var t = document.defaultView.getComputedStyle(e, null).getPropertyValue("width");
        return t || 0
    }
    function s(e) {
        if (e._headerNode) return e._headerNode;
        for (var t in e.getRows()) {
            var i = e.getRows()[t];
            return i._DomNode
        }
    }
    return e.DivColumnResize = function(n) {
        var o, a, r, l = this,
        h = s(n).childNodes,
        d = n;
        if (this._lastVisibleColumn = function(e, t) {
            for (var i, s = t.childNodes,
            n = s.length,
            o = n - 1; o >= 0; o--) if ("none" != s[o].style.display) {
                i = o;
                break
            }
            return i == e
        },
        this.stopColumnDrag = function(i) {
            var i = i || window.event;
            if (h) {
                var s = e.Browser,
                o = !s.IsMobile && !s.IsTablet;
                o ? (document.removeEventListener("mouseup", S), document.removeEventListener("mousemove", f)) : (document.removeEventListener("touchend", S), document.removeEventListener("touchmove", f)),
                n.saveColsWidth(),
                t(i)
            }
        },
        this.changeColumnWidth = function(e, t) {
            return !! h && (!(e < 0) && (!(h.length < e) && (!(parseFloat(h[e].style.width) - 8 <= -t) && (h[e].style.width = parseFloat(h[e].style.width) + t + "px", n.syncColumnWidth(h[e].className, h[e].style.width, t), !0))))
        },
        this.columnDrag = function(e) {
            var e = e || window.event,
            i = e.clientX || e.pageX || e.touches[0].clientX || e.touches[0].pageX;
            return l.changeColumnWidth(a, i - o) || l.stopColumnDrag(e),
            o = i,
            t(e),
            !1
        },
        this.startColumnDrag = function(s) {
            if (l.autoArrange) return ! 1;
            var s = s || window.event;
            a = d.getCellIndexByClassName((s.target || s.srcElement).parentNode.className),
            a < 0 && (a = d.getCellIndexByColSpanClassName((s.target || s.srcElement).parentNode.className)),
            r = l._lastVisibleColumn(a, (s.target || s.srcElement).parentNode.parentNode),
            o = s.clientX || s.pageX;
            for (var n = 0; n < h.length; n++) h[n].style.width = "",
            h[n].style.width = parseFloat(i(h[n])) + "px";
            d.resizeHeader();
            var c = e.Browser,
            u = !c.IsMobile && !c.IsTablet;
            u ? (document.addEventListener("mouseup", S), document.addEventListener("mousemove", f)) : (document.addEventListener("touchend", S), document.addEventListener("touchmove", f)),
            t(s)
        },
        this.onMouseOver = function(e) {
            l.autoArrange || ((e.target || e.srcElement).style.cursor = "w-resize")
        },
        this.onMouseOut = function(e) { (e.target || e.srcElement).style.cursor = "default"
        },
        n._headerNode) {
            var c = e.Browser,
            u = !c.IsMobile && !c.IsTablet;
            for (var g in n.headerResizers) {
                var p = n.headerResizers[g];
                u ? (p.onmousedown = this.startColumnDrag, p.onmouseover = this.onMouseOver, p.onmouseout = this.onMouseOut) : (p.ontouchstart = this.startColumnDrag, p.ontouchmove = this.onMouseOver, p.ontouchend = this.onMouseOut),
                p.removeEventListener("touchstart", this.startColumnDrag),
                p.removeEventListener("touchmove", this.onMouseOver),
                p.removeEventListener("touchend", this.onMouseOut),
                p.addEventListener("touchstart", this.startColumnDrag),
                p.addEventListener("touchmove", this.onMouseOver),
                p.addEventListener("touchend", this.onMouseOut)
            }
        }
        for (var m in n.getRows()) {
            var _ = n.getRows()[m];
            for (var y in _._Resizers) {
                var p = _._Resizers[y];
                p.onmousedown = this.startColumnDrag,
                p.onmouseover = this.onMouseOver,
                p.onmouseout = this.onMouseOut
            }
        }
        var S = this.stopColumnDrag.bind(this),
        f = this.columnDrag.bind(this)
    },
    e
}),
define("divTable", ["control", "resizableTables"],
function(e) {
    e.DivTable = function(t) {
        this._Template = e._Templates.DivTable,
        this._RowTemplates = [e._Templates.DefaultTableRow],
        this._HeaderTemplate = e._Templates.DefaultTableRow,
        this._IsSizingEnabled = !1,
        this._Sizes = [],
        this._AutoSizes = [],
        this._IsAutoSize = !0,
        this._HeaderColumns = {},
        this._ContextMenu = null,
        this._GetterOverride = null,
        this._SetterOverride = null,
        this._registerToLangManager = !0,
        this._TableType = null,
        this._DraggableRows = !1,
        this._RowTooltipLocation = null,
        this._HeadersTooltipsEnabled = !1,
        this._CustomScrollEnabled = !1,
        this.headerResizers = {},
        this._Editable = !1,
        this._Selectable = !0,
        this._defineEvents(["ClickRow", "VisibleColumnsChange", "DoubleClickRow", "AutoSizeChange"]),
        e.DivTable.base.constructor.apply(this, arguments),
        e.Socket.register(this)
    },
    e.initClass(e.DivTable, e.BaseControl);
    var t = e.DivTable.prototype;
    t._onSocketClose = function(e) {
        this.customScroller && (this.customScroller = null)
    },
    t.getVisibleColumns = function() {
        var e = [];
        for (var t in this._HeaderColumns) {
            var i = this._HeaderColumns[t];
            i.IsVisible && e.push(i.Id)
        }
        return e
    },
    t.getHeaderColumnByIndex = function(e) {
        for (var t in this._HeaderColumns) {
            var i = this._HeaderColumns[t];
            if (i.Index == e) return i
        }
        return null
    },
    t.getCellIndexByClassName = function(e) {
        for (var t in this._HeaderColumns) {
            var i = this._HeaderColumns[t];
            if (t == e) return i.Index
        }
        return - 1
    },
    t.getCellIndexByColSpanClassName = function(e) {
        for (var t in this._Rows) {
            var i = this._Rows[t];
            if (i._ColSpan && i._ColSpan[e]) return this.getCellIndexByClassName(i._ColSpan[e][i._ColSpan[e].length - 1])
        }
        return - 1
    },
    t.updateHeader = function() {
        if (this._headerNode) for (var t = null,
        i = this._headerNode.childNodes,
        s = 0; s < i.length; s++) {
            var n = i[s];
            if (this._HeaderColumns[n.className]) {
                n.innerHTML = e.LangManager.getStringByKey(this._HeaderColumns[n.className].Key) || this._HeaderColumns[n.className].Title;
                var o = this._HeaderColumns[n.className];
                if (n.style.display = 0 == o.IsVisible ? "none": "inline-block", this._IsSizingEnabled) {
                    if (this._IsAutoSize) {
                        var a = this.getOneColumnSize(0);
                        n.style.width = a * this._AutoSizes[s] + "px"
                    } else n.style.width = this._Sizes[s] + "px";
                    t = e.htmlToDOM('<div class="Resizer" id="' + n.className + '"></div>'),
                    n.appendChild(t),
                    this.headerResizers[n.className] = t
                }
            }
        }
    },
    t.getOneColumnSize = function() {
        for (var e = 0,
        t = 0; t < this._AutoSizes.length; t++) {
            var i = this.getHeaderColumnByIndex(t);
            i && i.IsVisible && (e += this._AutoSizes[t])
        }
        return this._DomNode.parentNode.clientWidth / e
    },
    t._onChangeLang = function() {
        this._HeaderColumns && this.updateHeader()
    },
    t._render = function() {
        this._selectedRowId = null,
        e.DivTable.base._render.apply(this, arguments),
        this.setTooltip(this._Tooltip),
        e.addEvent(this._DomNode, "touchmove", this.terminateContextMenuPopupTimer.bind(this)),
        e.addEvent(this._DomNode, "scroll", this.terminateContextMenuPopupTimer.bind(this))
    },
    t._onScroll = function(e) {
        this._headerNode && (this._headerNode.style.left = -e.currentTarget.scrollLeft + "px")
    },
    t._onRowDoubleClick = function(e) {},
    t.getMenuItemColumns = function(t) {
        var i, s = t || [],
        n = [];
        for (var o in this._HeaderColumns) if (i = this._HeaderColumns[o], s.indexOf(i.Id) == -1 && "" != i.Title) {
            if ("SpentBonus" === i.Id && "0" == e.TraderData.getTraderInfo().showbonuses) continue;
            n.push({
                Text: i.Title,
                Key: i.Key,
                Id: i.Id,
                Checked: i.IsVisible
            })
        }
        return n
    },
    t.getColumnsMenu = function(t) {
        if (!this._columnsMenu) {
            var i = this.getMenuItemColumns(t);
            this._columnsMenu = new e.Menu({
                CheckedType: "Multi",
                Items: i,
                ItemCheckedChanged: e.Delegate(this, this._onColumnsMenuItemClick)
            })
        }
        return this._columnsMenu
    },
    t.getVisibleColumnsCount = function() {
        var e = 0,
        t = {};
        for (var i in this._HeaderColumns) t = this._HeaderColumns[i],
        t.IsVisible && e++;
        return e
    },
    t._onColumnsMenuItemClick = function(t) {
        var i = t.Item;
        1 == this.getVisibleColumnsCount && 0 == i.getChecked() ? (i._Checked = !0, i.addCSSClass("Checked")) : (this.setIsVisibleColumn(i.getId(), i.getChecked()), e._menuMasterObject.hideAll()),
        e.saveUserSettings()
    },
    t.setIsVisibleColumn = function(e, t) {
        if (this._headerNode) {
            for (var i = this._headerNode.childNodes,
            s = 0; s < i.length; s++) {
                var n = i[s];
                n.className == e && (n.style.display = 0 == t ? "none": "inline-block")
            }
            this._HeaderColumns[e].IsVisible = t
        }
        t && this.updateColsWidth();
        for (var o in this._Rows) {
            var a = this._Rows[o];
            a.setIsVisibleColumn(e, t)
        }
        t || this.updateColsWidth(),
        this.saveColsWidth(),
        null != this.VisibleColumnsChange && this.VisibleColumnsChange.fire({
            Sender: this
        })
    },
    t.updateColsWidth = function() {
        var e = this.getOneColumnSize(0);
        if (this._headerNode) {
            var t = this._headerNode.childNodes;
            this._DomNode.parentNode.style.display = "none";
            for (var i = 0; i < t.length; i++) {
                var s = t[i];
                if (this._IsAutoSize) s.style.width = e * this._AutoSizes[i] + "px";
                else {
                    var n = this._Sizes[i];
                    0 == n && (n = e * this._AutoSizes[i]),
                    s.style.width = n + "px"
                }
            }
        }
        for (var o in this._Rows) {
            var a = this._Rows[o];
            a.updateColsWidth(e)
        }
        this._DomNode.parentNode.style.display = "",
        this.customScroller && this.customScroller.update()
    },
    t.clearScroll = function() {
        this._headerNode && (this._headerNode.style.left = 0, this._DomNode.parentNode.scrollLeft = 0)
    },
    t.setAutoArrange = function(e) {
        this._IsAutoSize = e !== !1,
        this._ColumnResize.autoArrange = this._IsAutoSize,
        e && this.updateColsWidth(),
        this.saveColsWidth(),
        null != this.AutoSizeChange && this.AutoSizeChange.fire({
            Sender: this
        })
    },
    t.saveColsWidth = function() {
        var t = [];
        if (this._headerNode) {
            for (var i = this._headerNode.childNodes,
            s = 0; s < i.length; s++) t.push(i[s].offsetWidth);
            switch (this._TableType) {
            case "Trade":
                e.UserSettings.TableTrade.ColumnSizes = t;
                break;
            case "OptionDeals":
                e.UserSettings.OptionDealsTable.ColumnSizes = t;
                break;
            case "Deals":
                e.UserSettings.DealsTable.ColumnSizes = t;
                break;
            case "GeneralReport":
                e.UserSettings.GeneralReportTable.ColumnSizes = t;
                break;
            case "Deposit":
                e.UserSettings.DepositTable.ColumnSizes = t;
                break;
            case "ExecutedOrders":
                e.UserSettings.ExecutedOrdersTable.ColumnSizes = t;
                break;
            case "Quotes":
                e.UserSettings.TableQuotes.ColumnSizes = t
            }
            this._Sizes = t
        }
        this.customScroller && this.customScroller.update(),
        e.saveUserSettings()
    },
    t.setHeader = function() {
        if (this._HeaderColumns && !this._headerNode) {
            if (this._headerNode = e.htmlToDOM(this._HeaderTemplate), !e.Browser.IsMobile) if (1 != this._CustomScrollEnabled || this.customScroller) this.customScroller ? this._DomNode.parentNode.parentNode.parentNode.insertBefore(this._headerNode, this._DomNode.parentNode.parentNode) : this._DomNode.parentNode.parentNode.insertBefore(this._headerNode, this._DomNode.parentNode);
            else {
                var t = document.createElement("div");
                t.className = "scrollable";
                var i = document.createElement("div");
                i.className = "scroller-content-wrapper",
                this._DomNode.parentNode.appendChild(this._headerNode),
                this._DomNode.className += " scroller-content",
                this._DomNode.parentNode.appendChild(t),
                t.appendChild(i),
                i.appendChild(this._DomNode)
            }
            e.addEvent(this._DomNode.parentNode, "scroll", this._onScroll.bind(this)),
            this.updateHeader(),
            this.setHeaderTooltips()
        }
    },
    t.getHeaderNode = function() {
        return this._headerNode
    },
    t.resizeHeader = function() {
        if (this._headerNode) {
            var e = this._DomNode.parentNode.offsetHeight,
            t = this._DomNode.parentNode.scrollHeight;
            e === t ? this._headerNode.style.paddingRight = "0px": this._headerNode.style.paddingRight = this._headerNode.clientWidth - this._DomNode.clientWidth + "px"
        }
        this.updateColsWidth()
    },
    t.setHeight = function(t) {
        e.DivTable.base.setHeight.apply(this, arguments),
        this.resizeHeader()
    },
    t.getData = function() {
        return this._Data
    },
    t.setData = function(t, i, s) {
        this._Data = t,
        null != s && s !== !1 || (this._Rows = {});
        for (var n = 0; n < this._Data.length; n++) {
            var o, a = t[n].cellValues,
            r = null != t[n].rowId ? t[n].rowId: "row" + n;
            this.editable() && (r = n),
            o = this._Data[n].templateIndex ? this._RowTemplates[this._Data[n].templateIndex] : this._RowTemplates[0];
            var l = "";
            if (this._Rows[r] = new e.DivTableRow({
                Id: r,
                ColSpan: this._Data[n].colSpan,
                DataIdx: n,
                Parent: this,
                ParentNode: i || this._DomNode,
                Template: o,
                Tooltip: l,
                CellValues: a,
                Draggable: this._DraggableRows,
                GetterOverride: this._GetterOverride,
                SetterOverride: this._SetterOverride,
                ContextMenu: e.Delegate(this, this._onContextMenu),
                DragStart: e.Delegate(this, this._onRowDragStart)
            }), "OptionsSettings" == this._TableType || "Quotes" == this._TableType) {
                switch (this._TableType) {
                case "OptionsSettings":
                    var h = this._Data[n].cellValues.SymbolName;
                    break;
                case "Quotes":
                    var h = this._Data[n].rowId
                }
                var l = e.SymbolsData.getSymbols()[h] ? e.SymbolsData.getSymbols()[h]._Description: "";
                h = e.Browser.IsMobile ? e.SymbolsData.getSymbols()[this._Data[n].rowId] : e.SymbolsData.getSymbols()[h],
                !h || h.allowTrade() && "index" !== h.getCalculationTypeName() || e.addCSSClass(this._Rows[r]._DomNode, "TableDivTradeForbidden")
            }
        }
    },
    t.fillTable = function(t) {
        var i = this;
        this.resetTable(),
        this.setHeader(),
        this._Data = t,
        t.length ? (this.setData(t), this.setSelectedRow(0), this.resizeHeader(), this.setSelectedRow(t[0].rowId)) : this.editable() || (this.addEmptyRow(), this.setSelectedRow("0")),
        this._IsSizingEnabled && (this._ColumnResize = new e.DivColumnResize(this), this._ColumnResize.autoArrange = this._IsAutoSize, this._ColumnResize.tableType = this._TableType),
        1 == this._CustomScrollEnabled && (i.customScroller ? i.customScroller.update() : i.customScroller = new customScroller(i.getDomNode().parentNode.parentNode))
    },
    t.setHeaderTooltips = function() {
        if (this._HeadersTooltipsEnabled) for (var t = this._headerNode.childNodes.length,
        i = 0; i < t; i++) e.Tooltip({
            Node: this._headerNode.childNodes[i],
            Content: this._headerNode.childNodes[i].innerText,
            Position: "Bottom",
            Offset: {
                X: 0,
                Y: 0
            }
        })
    },
    t.addEmptyRow = function() {
        for (var t = {},
        i = this._headerNode.childNodes,
        s = 0; s < i.length; s++) t[i[s].className] = "";
        this._Rows[0] = new e.DivTableRow({
            Id: "0",
            DataIdx: 0,
            Parent: this,
            ParentNode: this._DomNode,
            Template: this._RowTemplates[0],
            CellValues: t
        })
    },
    t.getContextMenu = function() {
        return this._ContextMenu
    },
    t.resizeCells = function() {
        for (var t in this._Rows) for (var i = this._Rows[t], s = i._DomNode.childNodes, n = 0; n < s.length; n++) {
            var o = i._CellValues[s[n].className];
            o instanceof e.BaseControl && o.setWidth(s[n].clientWidth)
        }
    },
    t.getRows = function() {
        return this._Rows
    },
    t.resetTable = function() {
        for (this._Rows = {}; this._DomNode.firstChild;) this._DomNode.removeChild(this._DomNode.firstChild);
        if (this._headerNode) {
            for (; this._headerNode.firstChild;) this._headerNode.removeChild(this._headerNode.firstChild);
            var e = this._headerNode.parentNode;
            e && this._headerNode.parentNode.removeChild(this._headerNode),
            this._headerNode = null
        }
    },
    t.getRowById = function(e) {
        return this._Rows[e] ? this._Rows[e] : (console.log("No such row " + e), null)
    },
    t.getSelectedRow = function() {
        return this._selectedRowId ? this.getRowById(this._selectedRowId) : null
    },
    t.getSelectedRowID = function() {
        return this._selectedRowId
    },
    t.setSelectedRow = function(e) {
        if (this._Selectable !== !1 && (this._selectedRowId = e, null != this._selectedRowId)) for (var t = Object.keys(this._Rows), i = 0; i < t.length; i++) this._Rows[t[i]].getId() === this._selectedRowId ? (this._Rows[t[i]]._IsSelected = !0, this._Rows[t[i]].addCSSClass("Selected")) : (this._Rows[t[i]]._IsSelected = !1, this._Rows[t[i]].removeCSSClass("Selected"))
    },
    t.getColumnIndex = function(e) {
        return this._HeaderColumns[e].Index
    },
    t.getContextMenu = function() {
        return this._ContextMenu
    },
    t._onContextMenu = function(e) {},
    t._onRowDragStart = function(e) {},
    t.terminateContextMenuPopupTimer = function() {
        var e = this.getSelectedRow();
        e && e.dropLongTapTimer()
    },
    t.syncColumnWidth = function(e, t, i) {
        if (this._headerNode) {
            var s = this.getCellIndexByClassName(e);
            this._headerNode.childNodes[s].style.width = t
        }
        for (var n in this._Rows) {
            var o = this._Rows[n];
            o.setColumnWidth(e, t, i)
        }
    },
    t.editable = function() {
        return this._Editable === !0
    },
    t = null,
    e.DivTableRow = function(t) {
        this._Id = "",
        this._Resizers = {},
        this._IsSelected = !1,
        this._Parent = null,
        this._Tooltip = null,
        this._ParentNode = null,
        this._DataIdx = null,
        this._Template = e._Templates.DefaultTableRow,
        this._CellValues = {},
        this._GetterOverride = null,
        this._Draggable = !1,
        this._SetterOverride = null,
        this._ColSpan = null,
        this._domLinks = {},
        this._defineEvents(["Click", "ContextMenu", "DragStart"]),
        e.DivTableRow.base.constructor.apply(this, arguments)
    },
    e.initClass(e.DivTableRow, e.BaseControl);
    var i = e.DivTableRow.prototype;
    return i._render = function() {
        this.tapTimer = null,
        e.DivTableRow.base._render.apply(this, arguments),
        this._binds = {
            click: this.setSelected.bind(this),
            mobileclick: this._onMobileClick.bind(this),
            contextmenu: this._onContextMenu.bind(this),
            doubleclick: this._onDoubleClick.bind(this),
            touchstart: this.setSelected.bind(this),
            touchend: this.dropLongTapTimer.bind(this),
            rowDragStart: this._onDragStart.bind(this)
        },
        this._Draggable && this._DomNode.setAttribute("draggable", "true");
        var t = this._DomNode.childNodes;
        this.fillDOMLinks(t);
        for (var i = 0; i < t.length; i++) {
            var s = t[i],
            n = s.className,
            o = this._CellValues[n];
            this._Parent.editable() || (void 0 == o ? this.setValue(n, "", !1, null) : "string" == typeof o || e.isNumber(o) || 0 == o ? this.setValue(n, o, !1, null) : o instanceof e.BaseControl ? (s.appendChild(o.getDomNode()), o.tableRowId = this.getId(), o._ParentNode = s) : this.setValue(n, o, !1, null));
            var a = this._Parent._HeaderColumns[s.className];
            if (null == a ? this._ColSpan && this._ColSpan[s.className] ? s.style.display = 0 == this.isColSpanVisible(this._ColSpan[s.className]) ? "none": "inline-block": 0 == Object.keys(this._Parent._HeaderColumns).length ? s.style.display = "inline-block": s.style.display = "none": s.style.display = 0 == a.IsVisible ? "none": "inline-block", this._Parent._IsSizingEnabled) if (this._ColSpan && this._ColSpan[s.className]) s.style.width = this.getColSpanWidth(this._ColSpan[s.className], this._Parent.getOneColumnSize()) + "px";
            else if (this._Parent._IsAutoSize) {
                var r = this._Parent.getOneColumnSize();
                s.style.width = r * this._Parent._AutoSizes[i] + "px"
            } else s.style.width = this._Parent._Sizes[i] + "px";
            if (this._Parent.editable()) {
                var l = document.createElement("input");
                l.value = this._CellValues[t[i].className],
                l.className = t[i].className,
                l.addEventListener("input",
                function(e) {
                    var t = e.currentTarget;
                    this.setValue(t.className, t.value, !0)
                }.bind(this)),
                s.input = l,
                s.appendChild(l)
            }
        }
        "ontouchstart" in window && (e.Browser.IsMobile || e.Browser.IsTablet) ? (e.addEvent(this._DomNode, "touchstart", this._binds.touchstart), e.addEvent(this._DomNode, "click", this._binds.mobileclick), e.addEvent(this._DomNode, "touchend",
        function(t) {
            e.Browser.IsMobile || (t.preventDefault(), this._Parent.getContextMenu().getIsOpen() || t.target.click()),
            this.dropLongTapTimer()
        }.bind(this))) : (this.setTooltip(this._Tooltip), e.addEvent(this._DomNode, "click", this._binds.click), e.addEvent(this._DomNode, "contextmenu", this._binds.contextmenu), e.addEvent(this._DomNode, "dblclick", this._binds.doubleclick), e.addEvent(this._DomNode, "dragstart", this._binds.rowDragStart))
    },
    i.fillDOMLinks = function(e) {
        for (var t = e.length,
        i = 0; i < t; i++) {
            var s = e[i];
            this._domLinks[s.className] = s
        }
    },
    i.getColSpanWidth = function(e, t) {
        for (var i = 0,
        s = 0; s < e.length; s++) {
            var n = this._Parent._HeaderColumns[e[s]];
            n && n.IsVisible && (i += this._Parent._IsAutoSize ? t * this._Parent._AutoSizes[n.Index] : this._Parent._Sizes[n.Index])
        }
        return i
    },
    i.isColSpanVisible = function(e) {
        for (var t = null,
        i = 0; i < e.length; i++) if (t = this._Parent._HeaderColumns[e[i]], t.IsVisible) return ! 0;
        return ! 1
    },
    i.setIsVisibleColumn = function(e, t) {
        for (var i = this._DomNode.childNodes,
        s = 0; s < i.length; s++) {
            var n = i[s];
            n.className == e && (n.style.display = 0 == t ? "none": "inline-block")
        }
    },
    i.updateColsWidth = function(t) {
        for (var i = this._DomNode.childNodes,
        s = 0; s < i.length; s++) {
            var n = i[s];
            if (this._ColSpan && this._ColSpan[n.className]) n.style.width = this.getColSpanWidth(this._ColSpan[n.className], t) + "px",
            n.style.display = "0px" == n.style.width ? "none": "inline-block";
            else if (this._Parent._IsAutoSize) n.style.width = t * this._Parent._AutoSizes[s] + "px";
            else {
                var o = this._Parent.getColumnIndex(n.className),
                a = this._Parent._Sizes[o];
                0 == a && (a = t * this._Parent._AutoSizes[o]),
                n.style.width = a + "px"
            }
            var r = this._CellValues[i[s].className];
            r instanceof e.BaseControl && r.setWidth(parseInt(n.style.width) - 7.5)
        }
    },
    i._onDragStart = function(t) {
        e._menuMasterObject.hideAll(),
        this.DragStart.fire({
            sender: this,
            event: t
        })
    },
    i.getValue = function(e) {
        if (!this._GetterOverride) {
            if (this._Parent.editable()) {
                var t = this.getChildByFieldName(e);
                return t ? t.input.value: null
            }
            return this._CellValues[e] ? this._CellValues[e] : (console.log("No such field " + e), null)
        }
        this._GetterOverride(this, e)
    },
    i.getChildByFieldName = function(e) {
        for (var t = this.getDomNode(), i = t.children, s = i.length, n = 0; n < s; ++n) {
            var o = i[n],
            a = o.className;
            if (a === e || a.indexOf(e) !== -1) return o
        }
        return null
    },
    i.setAdditionalParameters = function(t, i) {
        var s, n, o = "",
        a = this._DomNode.querySelector(".AdditionalParameters"),
        r = e.UserSettings.TableTrade.OptionExpiration || "as_closeDate",
        l = e.SymbolsData.getSymbols()[t.symbolName];
        if (i[0]._isVisible && (o += 0 != e.parseFloat(t.investmentSum) ? (e.LangManager.getStringByKey("cWCTTradePositionsFormMarginByPosition") || "Margin") + ": " + e.parseFloat(t.investmentSum) + " / ": ""), i[5]._isVisible && (parseInt(t.optionType) == e.OptionSettingsType.range || parseInt(t.optionType) == e.OptionSettingsType.oneTouch && e.OptionPositionTypes.top == parseInt(t.direction)) && (n = (e.LangManager.getStringByKey("cOPSTopBorder") || "Top border") + ": ", s = e.numberFormat(e.parseFloat(e.parseFloat(t.openPrice) + e.parseFloat(t.interval / l.getPrecision())), 5, "."), o += n + s + " / "), i[6]._isVisible && (parseInt(t.optionType) == e.OptionSettingsType.range || parseInt(t.optionType) == e.OptionSettingsType.oneTouch && e.OptionPositionTypes.bottom == parseInt(t.direction)) && (n = (e.LangManager.getStringByKey("cOPSBottomBorder") || "Bottom border") + ": ", s = e.numberFormat(e.parseFloat(e.parseFloat(t.openPrice) - e.parseFloat(t.interval / l.getPrecision())), 5, "."), o += n + s + " / "), i[7]._isVisible && (n = (e.LangManager.getStringByKey("cWCTOptionPayout") || "Payout") + ": ", o += n + e.numberFormat(e.TraderData.getPayout(t), 2, ".", "") + " / "), i[8]._isVisible) if ("as_closeDate" == r) o += " " + (e.LangManager.getStringByKey("cOPACloseDate") || "Exp") + ": " + e.UtipFunctions.getUTCDate(t.expiryDate).toLocaleFormat("%d.%m.%Y %H:%M");
        else {
            var h = this.getRemainedTime(t.expiryDate),
            d = e.funcGetOptionPeriodCaption(h);
            if (h < 0) o += " " + (e.LangManager.getStringByKey("cOPARemainedTime") || "Rem") + ": 00:00:00";
            else {
                var c = e.UtipFunctions.getUTCDate(h).toLocaleFormat("%H:%M:%S");
                o += " " + (e.LangManager.getStringByKey("cOPARemainedTime") || "Rem") + ": " + d + c
            }
        }
        a.innerHTML = o
    },
    i.getRemainedTime = function(t) {
        return t - e.SymbolsData._LastChangedTime
    },
    i.setValue = function(e, t, i, s) {
        if (i = void 0 == i || i, this._SetterOverride) this._SetterOverride(this, e, t);
        else {
            if (this._Parent.editable()) {
                var n = this.getChildByFieldName(e);
                if (!n) return;
                return i && (this._CellValues[e] = t),
                n.input.value = t
            }
            if (void 0 != this._CellValues[e]) {
                i && (this._CellValues[e] = t);
                var o = this._domLinks[e];
                o.innerHTML = t,
                s && (o.style.color = s)
            } else console.log("No such field " + e)
        }
    },
    i.getCellValues = function() {
        return this._CellValues
    },
    i.setSelected = function(t) {
        if (this._Parent.setSelectedRow(this._Id), "ontouchstart" in window && (e.Browser.IsMobile || e.Browser.IsTablet) && t instanceof Event) {
            var i = this;
            e._menuMasterObject.hideAll(),
            this.tapTimer && clearTimeout(this.tapTimer),
            this.tapTimer = setTimeout(function() {
                i._onContextMenu(t)
            },
            400)
        } else {
            var s = {
                rowID: this._Id
            },
            n = this.getType();
            n && (s.Type = n),
            this._Parent.ClickRow.fire(s)
        }
    },
    i.dropLongTapTimer = function(e) {
        clearTimeout(this.tapTimer)
    },
    i._onContextMenu = function(e) {
        this.ContextMenu.fire({
            sender: this,
            event: e
        })
    },
    i._onMobileClick = function(e) {
        var t = {
            rowID: this._Id
        },
        i = this.getType();
        i && (t.Type = i),
        this._Parent.ClickRow.fire(t),
        e.stopPropagation()
    },
    i.getId = function() {
        return this._Id
    },
    i.getType = function() {
        var e = !1;
        return this._CellValues.Type && (e = this._CellValues.Type._Items ? this._CellValues.Type._Items[1] : this._CellValues.Type),
        e
    },
    i._onDoubleClick = function(e) {
        this._Parent.DoubleClickRow.fire(this._Id)
    },
    i._onDraggableRow = function(e) {
        this._Parent.DraggableRow.fire(this._Id)
    },
    i.setColumnWidth = function(t, i, s) {
        for (var n = this._DomNode.childNodes,
        o = 0; o < n.length; o++) {
            var a = n[o];
            a.className == t && (a.style.width = i, s = 0, a = this._CellValues[a.className], a instanceof e.BaseControl && a.setWidth(parseInt(n[o].style.width)))
        }
        if (0 !== s && this._ColSpan && this._ColSpan.DepositVolume) {
            var a = this.getChildByFieldName("DepositVolume");
            a && (a.style.width = parseFloat(a.style.width) + s + "px")
        }
    },
    i = null,
    e
}),
define("checkBoxGroup", ["input"],
function(e) {
    e.CheckBoxGroup = function(t) {
        this._Label = "",
        this._LabelPosition = "Left",
        this._Orientation = "Horizontal",
        this._Items = [],
        this._CheckedItem = 0,
        this._Template = e._Templates.CheckBoxGroup,
        this._defineEvents(["CheckedChanged"]),
        e.CheckBoxGroup.base.constructor.apply(this, arguments)
    },
    e.initClass(e.CheckBoxGroup, e.BaseControl);
    var t = e.CheckBoxGroup.prototype;
    return t._onChangeLang = function() {
        var t = e.LangManager.getStringByKey(this._Key) + ":";
        t && this.setLabel(t)
    },
    t._render = function() {
        e.CheckBoxGroup.base._render.apply(this, arguments),
        this.addCSSClass(this._Orientation),
        this._labelNode = this._DomNode.querySelector(".WTCheckBoxGroupLabel"),
        this._Key && (this._Label = e.LangManager.getStringByKey(this._Key) + ("Left" == this._LabelPosition || "Top" == this._LabelPosition ? ":": "") || this._Label, this._registerToLangManager = !0),
        this.setLabel(this._Label),
        this.setLabelPosition(this._LabelPosition),
        this._checkBoxNode = this._DomNode.querySelector(".WTCheckBoxGroupInputs"),
        this._checkBoxes = [];
        for (var t, i = 0; i < this._Items.length; i++) t = this._Items[i],
        t.ParentNode = this._checkBoxNode,
        this._CheckedItem = t.Checked ? i: this._CheckedItem,
        t.Checked = !1,
        t.ChangedValue = e.Delegate(this, this._onItemChecked),
        t.Id = void 0 !== t.Id ? t.Id: i,
        this._checkBoxes[i] = new e.CheckBox(t);
        this._checkBoxes[this._CheckedItem].setChecked(!0)
    },
    t.setLabelPosition = function(t) {
        switch (e.removeCSSClass(this._labelNode, "Position" + this._LabelPosition), t) {
        case "Top":
            this._LabelPosition = t;
            break;
        default:
            this._LabelPosition = "Left"
        }
        e.addCSSClass(this._labelNode, "Position" + this._LabelPosition)
    },
    t._onItemChecked = function(e) {
        for (var t = e.sender,
        i = this._checkBoxes.indexOf(t), s = 0; s < this._checkBoxes.length; s++) this._checkBoxes[s].setChecked(i == s);
        i != this._CheckedItem && (this._CheckedItem = i, this.CheckedChanged.fire())
    },
    t.setLabel = function(e) {
        this._Label = e,
        this._labelNode && (this._labelNode.innerHTML = this._Label)
    },
    t.getCheckedItem = t.getValue = function() {
        return this._checkBoxes[this._CheckedItem]
    },
    t.setCheckedItem = function(e) {
        for (var t = 0; t < this._checkBoxes.length; t++) this._checkBoxes[t].getId() == e && (this._checkBoxes[t].setChecked(!0), this._onItemChecked({
            sender: this._checkBoxes[t]
        }))
    },
    t = null,
    e
}),
define("inputSelect", ["input"],
function(e) {
    e.InputSelect = function(t) {
        this._Options = [],
        this._Value = 0,
        this._MenuClass = "",
        this._SelectedOption = 0,
        this._Edit = !0,
        this._NeedNotEditedStyle = !0,
        this._OnlyNumbers = !1,
        this._Width = 150,
        this._Icon = null,
        this._Caption = null,
        this._Description = null,
        this._ItemsHeight = e.Browser.IsMobile ? 48 : 30,
        this._AutoWidthMenu = !1,
        this._Data = null,
        this._NeedleDrop = !1,
        this.lastOptionIndex = null,
        this._ArtificialMenuScroll = !1,
        this._defineEvents(["DropDown", "Closed"]),
        e.InputSelect.base.constructor.apply(this, arguments)
    },
    e.initClass(e.InputSelect, e.Input);
    var t = e.InputSelect.prototype;
    return t._onChangeLang = function() {
        if (e.InputSelect.base._onChangeLang.apply(this, arguments), this._optionsMenu) {
            var t = this._optionsMenu.getItem(this._SelectedOption);
            t && !this instanceof e.InputImage && this.setValue(t._Text)
        }
    },
    t.getOptionsMenu = function() {
        return this._optionsMenu
    },
    t.getMenuItems = function() {
        for (var t, i = [], s = 0, n = 0; n < this._Options.length; n++) t = "string" == typeof this._Options[n] ? {
            Text: this._Options[n]
        }: this._Options[n],
        t = void 0 == t ? t: "undefined" == t.Text ? void 0 : t,
        t ? i[s] = {
            Data: t.Data,
            Text: t.Text,
            Key: t.Key,
            Id: n,
            Enabled: t.Enabled || void 0 == t.Enabled,
            Visible: !(t.Visible === !1),
            Height: this._ItemsHeight,
            Template: t.Template || e._Templates.MenuItem,
            ImageUrl: t.ImageUrl
        }: s--,
        s++;
        return i
    },
    t.reCreateMenu = function() {
        var t = this.getMenuItems(),
        i = !1;
        this._optionsMenu && (i = this._optionsMenu.getIsOpen()),
        i && this._hideMenu(),
        this._optionsMenu && (e._menuMasterObject.unRegister(this._optionsMenu), delete this._optionsMenu),
        this._optionsMenu = new e.Menu({
            ParentObject: this,
            ArtificialMenuScroll: this._ArtificialMenuScroll,
            Class: "InputSelectOptionsMenu " + this._MenuClass,
            Items: t,
            CheckedType: "NoChecked",
            CustomScrollEnabled: !e.Browser.IsMobile,
            ItemClick: e.Delegate(this, this._onOptionsMenuItemClick),
            Closed: e.Delegate(this, this._hideMenu)
        }),
        i && (this._hideMenu(), this._showMenu()),
        this.lastOptionIndex = t && t.length > 0 ? t.length - 1 : null
    },
    t._render = function() {
        var t = this._Width;
        this._SelectedOption < 0 && (this._SelectedOption = 0),
        this._Template = e._Templates.InputSelect,
        e.InputSelect.base._render.apply(this, arguments),
        this.reCreateMenu(),
        this._OnlyNumbers && (this._binds.checkNumberKey = this._checkNumberKey.bind(this), e.addEvent(this._fieldNode, "keypress", this._binds.checkNumberKey)),
        this._Options.length > 0 && this.setValue(this._optionsMenu._Items[this._SelectedOption]._Text),
        this._binds.selectButtonClick = this._onSelectButtonClick.bind(this),
        this._selectButton = this._DomNode.querySelector(".InputSelectButton"),
        this._inputNode = this._DomNode.querySelector(".WTInputSelectField"),
        this._iconNode = this._DomNode.querySelector(".WTInputSelectIcon"),
        this._captionNode = this._DomNode.querySelector(".WTInputSelectCaption"),
        this._Icon ? (this._iconNode.style.backround = 'url("' + this._Icon + '")', this._iconNode.style.display = "inline-block") : this._Caption && (this._captionNode.innerText = this._Caption, this._captionNode.style.display = "inline-block"),
        this._Edit ? e.addEvent(this._selectButton, "click", this._binds.selectButtonClick) : (this.addCSSClass("Locked"), this.setReadOnly(!0), this._NeedNotEditedStyle && this.addCSSClass("NotEdited"), e.addEvent(this._inputNode, "click", this._binds.selectButtonClick)),
        window.WT_Device.tablet() && e.addEvent(this._inputNode, "touchstart",
        function(e) {
            e.stopPropagation()
        }),
        this.setWidth(t),
        this.setHeight(this._Height),
        this.addCSSClass("NotActive")
    },
    t._onTouchStart = function(t) {
        e.InputSelect.base._onTouchStart.apply(this, arguments),
        this._inputNode.startTouchX = t.targetTouches[0].screenX,
        this._inputNode.startTouchY = t.targetTouches[0].screenY
    },
    t._onSelectButtonClick = function(e) {
        if (this.searchMode !== !0) {
            if (0 == this._Enabled) return void e.preventDefault();
            e.stopPropagation(),
            this._optionsMenu.getIsOpen() ? (this.Closed.fire(this), this._hideMenu()) : (this.DropDown.fire(this), this._showMenu(e))
        }
    },
    t.addSelectButtonEventListener = function(e) {
        this._selectButton.addEventListener("click", e)
    },
    t.removeSelectButtonEventListener = function(e) {
        this._selectButton.removeEventListener("click", e)
    },
    t.setReadOnly = function(e) {
        e === !1 ? this._fieldNode.removeAttribute("readonly") : e === !0 && this._fieldNode.setAttribute("readonly", e)
    },
    t._hideMenu = function() {
        this._optionsMenu && (this._optionsMenu.hide(), this._optionsMenu._DomNode.parentNode && this._optionsMenu._DomNode.parentNode.removeChild(this._optionsMenu._DomNode), this.removeCSSClass("Active"), this.addCSSClass("NotActive"))
    },
    t._showMenu = function() { (this._Options.length >= 2 || this._NeedleDrop === !0 && 0 !== this._Options) && e.patch_mobileKeyboardUp({
            width: screen.width,
            height: screen.height
        },
        function(t) {
            this.removeCSSClass("NotActive"),
            this.addCSSClass("Active");
            var i = e.getCoords(this._inputNode);
            this._AutoWidthMenu || this._optionsMenu.setWidth(i.right - i.left - 3),
            this._optionsMenu.show(i.left, i.bottom)
        },
        this, null)
    },
    t.drop = function() {
        this._showMenu()
    },
    t._onOptionsMenuItemClick = function(e) {
        var t = e.Item;
        this._optionsMenu.hide(),
        t.getId() === this._SelectedOption && 1 != this._Edit && t.getText() === this.getValue() || (this.previousIndex = this._SelectedOption, this.setValue(t._Text), this._SelectedOption = t.getId()),
        this.ChangedValue.fire({
            event: e,
            sender: this
        })
    },
    t.getSelectedOption = function() {
        return this._SelectedOption
    },
    t.getSelectedData = function() {
        return this._optionsMenu.getItems().length > 0 ? this._optionsMenu.getItems()[this._SelectedOption].getData() : null
    },
    t.setSelectedOption = function(e) {
        var t = this._optionsMenu.getItems()[e];
        null != t && void 0 != t && (this._SelectedOption = e, this.setValue(this._optionsMenu.getItems()[this._SelectedOption].getText()))
    },
    t.unselect = function() {
        this._SelectedOption = -1,
        this.setValue("")
    },
    t.setSelectedOptionByValue = function(e) {
        for (var t = !1,
        i = 0; i < this._Options.length; i++) {
            var s = this._Options[i].Text || this._Options[i];
            if (s == e) {
                this.setSelectedOption(i),
                t = !0;
                break
            }
        }
        return t
    },
    t.setSelectedOptionByKey = function(e) {
        for (var t = 0; t < this._Options.length; t++) {
            var i = this._Options[t].Key || this._Options[t];
            if (i == e) {
                this.setSelectedOption(t);
                break
            }
        }
    },
    t.isLastSelected = function() {
        return this._SelectedOption == this._Options.length - 1
    },
    t.setWidth = function(t) {
        if (this._widthUnit = "px", "string" == typeof t && t.indexOf("%") ? (this._Width = Math.max(0, parseInt(t)), this._widthUnit = "%") : this._Width = Math.min(Math.max(0, t), e.DisplaySize.getWidth()), this._inputNode) {
            this._inputNode.style.width = this._Width ? this._Width + this._widthUnit: "";
            var i = this._fieldNode,
            s = this._Icon || this._Caption ? 56 : e.Browser.IsMobile ? -1 : 16;
            i.style.width = "calc(100% - " + s.toString() + "px)"
        }
    },
    t.setHeight = function(t) {
        this._heightUnit = "px",
        "string" == typeof t && t.indexOf("%") ? (this._Height = Math.max(0, parseInt(t)), this._heightUnit = "%") : this._Height = Math.min(Math.max(t, 0), e.DisplaySize.getHeight()),
        this._inputNode && (this._inputNode.style.height = this._Height ? this._Height + this._heightUnit: "")
    },
    t.setOptions = function(e) {
        this._Options = e,
        this.reCreateMenu(),
        this.lastOptionIndex = e && e.length > 0 ? e.length - 1 : null
    },
    t.hasOptions = function() {
        return ! e.valueIsEmpty(this._Options) && this._Options.length > 0
    },
    t.getOptions = function() {
        return this._Options
    },
    t.getData = function() {
        return this._Data
    },
    t.setDescription = function(e) {
        this._desNode = this._DomNode.querySelector(".WTInputDescription"),
        this._desNode.innerText = e
    },
    t.setData = function(e) {
        this._Data = e
    },
    t.onChange = function() {
        this.ChangedValue.fire({
            sender: this
        })
    },
    t.indexOfData = function(e) {
        for (var t = 0; t < this._Options.length; t++) if (JSON.stringify(e) === JSON.stringify(this._Options[t].Data)) return t;
        return - 1
    },
    t.indexOfText = function(e) {
        for (var t = 0; t < this._Options.length; t++) {
            var i = this._Options[t],
            s = typeof i;
            if ("object" == s) {
                if (e == this._Options[t].Text) return t
            } else if (e == i) return t
        }
        return - 1
    },
    t.getItemByParametersData = function(e, t) {
        for (var i = this._optionsMenu.getItems() || [], s = i.length, n = 0; n < s; ++n) {
            var o = i[n],
            a = o.getData();
            if (a) {
                var r = !0;
                for (var l in e) {
                    if (!a.hasOwnProperty(l)) {
                        r = !1;
                        break
                    }
                    if (a[l] !== e[l]) {
                        r = !1;
                        break
                    }
                }
                if (r === !0) {
                    if ("index" === t) return n;
                    if ("item" === t) return o;
                    if ("full" === t || !t) return {
                        item: o,
                        index: n
                    }
                }
            }
        }
    },
    t = null,
    e
}),
define("dialogClosePosition", ["dialog", "checkBoxGroup", "inputSelect", "traderData", "symbolsData"],
function(e) {
    e.closePositionType = {
        Fully: "Fully",
        Partially: "Partially"
    },
    e.DialogClosePosition = function(t) {
        this._Position = null,
        e.DialogClosePosition.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.Socket.register(this),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogClosePosition, e.Dialog);
    var t = e.DialogClosePosition.prototype;
    return t._onClosed = function() {
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this);
        var t = this.getDomNode(),
        i = this.getDomNode().parentNode;
        i && i.removeChild(t),
        delete e._dialogClosePosition
    },
    t._onChangeLang = function() {
        var t = this._Position ? " - " + this._Position.symbolName: "",
        i = e.LangManager.getStringByKey(this._Key);
        i || (i = "Close position"),
        this.setTitle(i + t),
        this._priceLblNode && (e.LangManager.isReversedLanguage() ? this._priceLblNode.innerHTML = "&nbsp:" + e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") : this._priceLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price") + ":")
    },
    t._onGetQuote = function(t) {
        if (null != this._Position && this._reqIsSent !== !0) {
            t && t._SymbolName == this._Position.symbolName && this._Enabled && (this._priceValNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? t._Ask: t._Bid, t._Digits, ".", ""));
            var i = this._Position,
            s = "Sell" == i.positionType,
            n = s ? t._Ask: t._Bid,
            o = t.getPrecision(),
            a = e.parseFloat(t.getStopLevel()) / o,
            r = parseFloat(i.takeProfit),
            l = parseFloat(i.stopLoss);
            null != e.UtipFunctions.canClosePosition(r, l, n, a) ? this._Content.classList.add("Disabled") : this._Content.classList.remove("Disabled")
        }
    },
    t._createVolumeCombo = function(t) {
        return t = t || {},
        t.Enabled = !1,
        t.Label = "Volume:",
        t.Key = "cWCTTradePositionsFormVolume",
        t.Width = 134,
        t.OnlyNumbers = !0,
        t.Class = "VolumeCombo",
        t.DropDown = e.Delegate(this, this._onVolumeDropDown),
        new e.InputSelectNumber(t)
    },
    t._onVolumeDropDown = function() {
        var t = e.SymbolsData.getSymbols()[this._Position.symbolName],
        i = e.UtipFunctions.getVolumesList(t, this._Position.volume);
        this._volumeCombo.setOptions(i)
    },
    t._onVolumeChangeValue = function(t) {
        var i = this._volumeCombo.getValue().indexOf(",");
        switch (e.TraderData.getPositionStep()) {
        case e._TraderData.positionStep.ps1:
            i != -1 && this._volumeCombo._DomNode.getElementsByTagName("input")[0].selectionStart > i && 8 != t.keyCode && 46 != t.keyCode && 37 != t.keyCode && 39 != t.keyCode && t.preventDefault();
            break;
        case e._TraderData.positionStep.ps0_1:
            i != -1 && this._volumeCombo._DomNode.getElementsByTagName("input")[0].selectionStart > i + 1 && 8 != t.keyCode && 46 != t.keyCode && 37 != t.keyCode && 39 != t.keyCode && t.preventDefault();
            break;
        case e._TraderData.positionStep.ps0_01:
            i != -1 && this._volumeCombo._DomNode.getElementsByTagName("input")[0].selectionStart > i + 2 && 8 != t.keyCode && 46 != t.keyCode && 37 != t.keyCode && 39 != t.keyCode && t.preventDefault()
        }
    },
    t._render = function() {
        this._Width = 300,
        this._WithBlock = !0,
        this._ImageList = e.MainImageList,
        this._ImageListRow = this._ImageListRow || 0,
        this._ImageListCol = this._ImageListCol || 16,
        this._Title = "Close position",
        this._Key = "cClPFCaption",
        this._Content = e.htmlToDOM(e._Templates.DialogClosePositionContent);
        var t = this._Content.querySelector(".DClosePosSetts"),
        i = this._Content.querySelector(".CurrentPrice"),
        s = this._Content.querySelector(".DCloseBtn");
        this._priceLblNode = i.querySelector(".PriceLbl"),
        this._priceValNode = i.querySelector(".PriceVal"),
        e.LangManager.isReversedLanguage() && e.swapDOMNodes(this._priceLblNode, this._priceValNode),
        this._typeOfClosureGroup = new e.CheckBoxGroup({
            ParentNode: t,
            Label: "Type of closure:",
            Key: "cClPFTypeClose",
            LabelPosition: "Top",
            CheckedChanged: e.Delegate(this, this._onTypeOfClosureGroupCheckedChanged),
            Items: [{
                Label: "Fully",
                Key: "cClPFAllClose",
                Id: e.closePositionType.Fully,
                LabelPosition: "Right"
            },
            {
                Label: "Partially",
                Key: "cClPFNotAllClose",
                Id: e.closePositionType.Partially,
                LabelPosition: "Right"
            }]
        }),
        this._volumeCombo = this._createVolumeCombo({
            ParentNode: t
        }),
        e.addEvent(this._volumeCombo._DomNode, "keydown", this._onVolumeChangeValue.bind(this)),
        this._priceLblNode && (this._priceLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price") + ":"),
        this._ClosePositionButton = new e.Button({
            ParentNode: s,
            Text: "Close position",
            Key: "cClPFClose",
            Class: "DButton BigButton GreenButton",
            Width: 200,
            Height: 45,
            Click: e.Delegate(this, this._onClosePositionButtonClick)
        }),
        e.DialogClosePosition.base._render.apply(this, arguments),
        this.addCSSClass("DialogClosePosition"),
        this.setPosition(this._Position)
    },
    t._onClosePositionButtonClick = function() {
        var t = e.parseFloat(this._volumeCombo.getValue()),
        i = this._typeOfClosureGroup.getCheckedItem(),
        s = e.UtipFunctions.isVolumeValid(t, e.TraderData.getPositionStep());
        if (!s || "Partially" == i.getId() && t > e.parseFloat(this._Position.volume)) return void e.showErrorDialog(e.LangManager.getStringByKey("cSMSInvalidVolume") || "Invalid volume");
        var n = e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent";
        this.showQueryStatus(n),
        this.setEnabled(!1);
        var o = e.SymbolsData.getSymbols()[this._Position.symbolName],
        a = {
            ID: this._Position.id,
            symbolName: this._Position.symbolName,
            traderID: e.TraderData._TraderInfo.id,
            operationType: e.requestPositionType[this._Position.positionType],
            volume: t,
            price: "Sell" == this._Position.positionType ? o._Ask: o._Bid,
            takeProfit: this._Position.takeProfit,
            stopLoss: this._Position.stopLoss
        };
        switch (i.getId() == e.closePositionType.Fully && e.getTableTrade().checkRowIsFirstInTableTrade(a.ID), e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.closePosition(a);
            break;
        case e.PlatformTypes.ptMT:
            a.operationType = e.TraderData.convertOrderTypeToMTFormat(a.operationType),
            e.requester.closeMTPosition(a)
        }
        this._reqIsSent = !0
    },
    t._onTypeOfClosureGroupCheckedChanged = function() {
        var t = this._typeOfClosureGroup.getCheckedItem(),
        i = !t || "Partially" == t.getId();
        this._volumeCombo.setEnabled(i),
        i || this._volumeCombo.setValue(e.numberFormat(1 * this._Position.volume, 2, ".", ""))
    },
    t.show = function(t) {
        t && this.setPosition(t),
        this.setEnabled(!0),
        this._typeOfClosureGroup.setCheckedItem("Fully");
        var i = e.SymbolsData.getSymbols()[this._Position.symbolName],
        s = e.numberFormat(1 * this._Position.volume, 2, ".", ""),
        n = e.UtipFunctions.getVolumesList(i);
        this._volumeCombo.setOptions(n),
        this._volumeCombo.setDecimals(e.UtipFunctions.getDecimalCount(i));
        for (var o = 0; o < n.length; o++) s == n[o] && this._volumeCombo.setSelectedOption(o);
        e.DialogClosePosition.base.show.apply(this, arguments)
    },
    t.setEnabled = function(t) {
        e.DialogClosePosition.base.setEnabled.apply(this, arguments);
        var i = this.getDomNode().querySelector(".WTDialogTopBlock .WTDialogClBtnContainer.Right");
        i && i.classList[t === !0 ? "remove": "add"]("disabled")
    },
    t.setPosition = function(t) {
        if (this._Position = e.TraderData.getPositionById(t), this._Position) {
            var i = e.SymbolsData.getSymbols()[this._Position.symbolName];
            this._priceValNode.innerHTML = i ? e.numberFormat("Sell" == this._Position.positionType ? i._Ask: i._Bid, i._Digits, ".", "") : "",
            this._volumeCombo.setValue(e.numberFormat(1 * this._Position.volume, 2, ".", ""))
        }
        this._onChangeLang()
    },
    t._onSocketMessage = function(e) {
        if (e) {
            var t = e.msgType;
            switch (t) {
            case "positions":
            case "allMT4OpenOrders":
                this.enabled() || this.hide();
                break;
            case "closePosition":
            case "closeMT4Position":
                var i = e.msgResult.toUpperCase();
                i == "success".toUpperCase() && i !== "quote is changed".toUpperCase() && i !== "stop level".toUpperCase() || (this.setEnabled(!0), this.showQueryStatus(""), this._reqIsSent = !1)
            }
        }
    },
    t.showQueryStatus = function(t) {
        if (t) this._priceLblNode.innerHTML = t,
        this._priceValNode.innerHTML = "";
        else {
            if (!this._Position) return;
            var i = e.SymbolsData.getSymbols()[this._Position.symbolName];
            i && i._SymbolName == this._Position.symbolName && this._Enabled && (this._priceValNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? i._Ask: i._Bid, i._Digits, ".", ""));
            e.LangManager.getLang();
            e.LangManager.isReversedLanguage() ? this._priceLblNode.innerHTML = "&nbsp:" + e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") : this._priceLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price") + ":"
        }
    },
    t = null,
    e.getDialogClosePosition = function() {
        return e._dialogClosePosition || (e._dialogClosePosition = new e.DialogClosePosition),
        e._dialogClosePosition
    },
    e
}),
define("dialogModifyPosition", ["dialog", "inputSelect", "traderData", "symbolsData"],
function(e) {
    e.DialogModifyPosition = function(t) {
        this._Position = null,
        this._currentSymbol = null,
        this._isFocusPrice = !0,
        this._isSetFirstTPValue = !0,
        this._isSetFirstSLValue = !0,
        e.DialogModifyPosition.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.Socket.register(this),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogModifyPosition, e.Dialog);
    var t = e.DialogModifyPosition.prototype;
    return t._onClosed = function() {
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this),
        delete e._dialogModifyPosition
    },
    t.getPosition = function() {
        return this._Position
    },
    t._onChangeLang = function() {
        var t = this._Position ? " - " + this._Position.symbolName: "",
        i = e.LangManager.getStringByKey(this._Key);
        i || (i = "Modify position"),
        this.setTitle(i + t),
        this._priceLblNode && (e.LangManager.isReversedLanguage() ? this._priceLblNode.innerHTML = "&nbsp:" + e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") : this._priceLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price") + ":")
    },
    t._onGetQuote = function(t) {
        if (t && t._SymbolName == this._Position.symbolName && this._Enabled) {
            this._priceValNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? t._Ask: t._Bid, t._Digits, ".", ""),
            this._isFocusPrice ? this.calculateAllPips() : this.calculateAllPrices(),
            this.setTakeProfitProfit(),
            this.setStopLossProfit(),
            this.validate();
            var i = this._Position,
            s = "Sell" == i.positionType,
            n = s ? t._Ask: t._Bid,
            o = t.getPrecision(),
            a = e.parseFloat(t.getStopLevel()) / o,
            r = parseFloat(i.takeProfit),
            l = parseFloat(i.stopLoss);
            null != e.UtipFunctions.canClosePosition(r, l, n, a) ? this._Content.classList.add("Disabled") : this._Content.classList.remove("Disabled")
        }
    },
    t._render = function() {
        this._Width = 460,
        this._WithBlock = !0,
        this._ImageList = e.MainImageList,
        this._ImageListRow = this._ImageListRow || 0,
        this._ImageListCol = this._ImageListCol || 16,
        this._Title = "Modify position",
        this._Key = "cPPCEditPositions",
        this._Content = e.htmlToDOM(e._Templates.DialogModifyPositionContent);
        var t = this._Content.querySelector(".TakeProfitRow"),
        i = this._Content.querySelector(".StopLossRow"),
        s = this._Content.querySelector(".CurrentPrice"),
        n = this._Content.querySelector(".DCloseBtn");
        this._priceLblNode = s.querySelector(".PriceLbl"),
        this._priceValNode = s.querySelector(".PriceVal"),
        e.LangManager.isReversedLanguage() && e.swapDOMNodes(this._priceLblNode, this._priceValNode);
        var o = e.Delegate(this, this._onTPCheck);
        this._takeProfitCheck = new e.CheckBox({
            ParentNode: t,
            Width: 90,
            LabelPosition: "Right",
            LabelPostfix: ":",
            Label: "Take Profit",
            Key: "cTOTakeProfit",
            ChangedValue: e.Delegate(this, this._onTakeProfitCheckClick)
        }),
        this._priceTakeProfitNumEdit = new e.InputNumber({
            Id: "priceTakeProfit",
            ParentNode: t,
            Width: 110,
            MaxValue: 21e3,
            MinValue: 0,
            Focus: o,
            ChangedValue: e.Delegate(this, this._onPriceTakeProfitClick),
            ChangeValue: e.Delegate(this, this.validate)
        }),
        this._pipsTakeProfitNumEdit = new e.InputNumber({
            Id: "pipsTakeProfit",
            ParentNode: t,
            Width: 110,
            MaxValue: 999999999,
            MinValue: 0,
            Focus: o,
            ChangedValue: e.Delegate(this, this._onPipsTakeProfitClick),
            ChangeValue: e.Delegate(this, this.validate)
        }),
        this._tpDifNode = e.htmlToDOM('<div class="ModifyPosDif"></div>'),
        t.appendChild(this._tpDifNode);
        var a = e.Delegate(this, this._onSLCheck);
        this._stopLossCheck = new e.CheckBox({
            ParentNode: i,
            Width: 90,
            LabelPosition: "Right",
            LabelPostfix: ":",
            Label: "Stop Loss",
            Key: "cTOStopLoss",
            ChangedValue: e.Delegate(this, this._onStopLossCheckClick)
        }),
        this._priceStopLossNumEdit = new e.InputNumber({
            Id: "priceStopLoss",
            ParentNode: i,
            Width: 110,
            MaxValue: 21e3,
            MinValue: 0,
            Focus: a,
            ChangedValue: e.Delegate(this, this._onPriceStopLossClick),
            ChangeValue: e.Delegate(this, this.validate)
        }),
        this._pipsStopLossNumEdit = new e.InputNumber({
            Id: "pipsStopLoss",
            ParentNode: i,
            Width: 110,
            MaxValue: 999999999,
            MinValue: 0,
            Focus: a,
            ChangedValue: e.Delegate(this, this._onPipsStopLossClick),
            ChangeValue: e.Delegate(this, this.validate)
        }),
        this._slDifNode = e.htmlToDOM('<div class="ModifyPosDif"></div>'),
        i.appendChild(this._slDifNode),
        this._priceLblNode && (e.LangManager.isReversedLanguage() ? this._priceLblNode.innerHTML = "&nbsp:" + e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") : this._priceLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price") + ":"),
        this._ModifyPositionButton = new e.Button({
            ParentNode: n,
            Text: "Modify",
            Key: "cWCTTradePositionsFormChange",
            Class: "DButton BigButton",
            Width: 180,
            Height: 50,
            Click: e.Delegate(this, this._onModifyPositionButtonClick)
        }),
        e.DialogModifyPosition.base._render.apply(this, arguments),
        this.setPosition(this._Position),
        this.addCSSClass("dialogModifyPosition")
    },
    t._onPriceStopLossClick = function(e) {
        this._isSetFirstSLValue = !1,
        this._priceStopLossNumEdit.Focus.fire({
            sender: this._priceStopLossNumEdit
        }),
        this._isFocusPrice && (this.calculateAllPips(), this.setStopLossProfit())
    },
    t._onPriceTakeProfitClick = function(e) {
        this._isSetFirstTPValue = !1,
        this._priceTakeProfitNumEdit.Focus.fire({
            sender: this._priceTakeProfitNumEdit
        }),
        this._isFocusPrice && (this.calculateAllPips(), this.setTakeProfitProfit())
    },
    t._onPipsStopLossClick = function(e) {
        this._pipsStopLossNumEdit.Focus.fire({
            sender: this._pipsStopLossNumEdit
        }),
        this._isFocusPrice || (this.calculateAllPrices(), this.setStopLossProfit())
    },
    t._onPipsTakeProfitClick = function(e) {
        this._pipsTakeProfitNumEdit.Focus.fire({
            sender: this._pipsTakeProfitNumEdit
        }),
        this._isFocusPrice || (this.calculateAllPrices(), this.setTakeProfitProfit())
    },
    t._onTakeProfitCheckClick = function(t) {
        var i = this._takeProfitCheck.getChecked();
        if (i) {
            var s = this._currentSymbol._GPipsCount * this._currentSymbol._StopLevel;
            this._pipsTakeProfitNumEdit.setValue(s),
            this._priceTakeProfitNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
            this._priceTakeProfitNumEdit.setDecimals(this._currentSymbol._Digits);
            var n;
            n = this._Position.positionType == e._TraderData.positionType.buy ? this.calcPriceByPips(s) : this.calcPriceByPips( - s),
            this._priceTakeProfitNumEdit.setValue(n),
            this.setTakeProfitProfit(),
            this._isFocusPrice = !0,
            this._isSetFirstTPValue = !1
        } else this._priceTakeProfitNumEdit.setValue(""),
        this._pipsTakeProfitNumEdit.setValue(""),
        this._tpDifNode.innerHTML = "",
        this._isSetFirstTPValue = !0;
        this.validate()
    },
    t._onStopLossCheckClick = function(t) {
        var i = this._stopLossCheck.getChecked();
        if (i) {
            var s = this._currentSymbol._GPipsCount * this._currentSymbol._StopLevel;
            this._pipsStopLossNumEdit.setValue(s);
            var n;
            n = this._Position.positionType == e._TraderData.positionType.buy ? this.calcPriceByPips( - s) : this.calcPriceByPips(s),
            this._priceStopLossNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
            this._priceStopLossNumEdit.setDecimals(this._currentSymbol._Digits),
            this._priceStopLossNumEdit.setValue(n),
            this.setStopLossProfit(),
            this._isFocusPrice = !0,
            this._isSetFirstSLValue = !1
        } else this._priceStopLossNumEdit.setValue(""),
        this._pipsStopLossNumEdit.setValue(""),
        this._slDifNode.innerHTML = "",
        this._isSetFirstSLValue = !0;
        this.validate()
    },
    t._onTPCheck = function(t) {
        t.sender instanceof e.InputNumber && this._takeProfitCheck.setChecked(!0);
        var i = this._takeProfitCheck.getChecked();
        i && ((isNaN(this._priceTakeProfitNumEdit.getValue()) || this._isSetFirstTPValue) && this._onTakeProfitCheckClick(), "priceTakeProfit" == t.sender._Id ? this._isFocusPrice = !0 : this._isFocusPrice = !1, "pipsTakeProfit" == t.sender._Id ? this._isFocusPrice = !1 : this._isFocusPrice = !0),
        this.validate()
    },
    t._onSLCheck = function(t) {
        t.sender instanceof e.InputNumber && this._stopLossCheck.setChecked(!0);
        var i = this._stopLossCheck.getChecked();
        i && ((isNaN(this._priceStopLossNumEdit.getValue()) || this._isSetFirstSLValue) && this._onStopLossCheckClick(), "priceStopLoss" == t.sender._Id ? this._isFocusPrice = !0 : this._isFocusPrice = !1, "pipsStopLoss" == t.sender._Id ? this._isFocusPrice = !1 : this._isFocusPrice = !0),
        this.validate()
    },
    t.stopLevelCheck = function() {
        if (this._isFocusPrice ? this.calculateAllPips() : this.calculateAllPrices(), e.parseFloat(this._priceTakeProfitNumEdit.getValue()) < 0 || e.parseFloat(this._priceStopLossNumEdit.getValue()) < 0) return ! 1;
        var t = parseInt(e.SymbolsData.getSymbols()[this._Position.symbolName].getStopLevel());
        return (this._pipsTakeProfitNumEdit.getValue() > t || !this._takeProfitCheck.getChecked()) && (this._pipsStopLossNumEdit.getValue() > t || !this._stopLossCheck.getChecked())
    },
    t._onModifyPositionButtonClick = function() {
        var t = e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent";
        this._priceLblNode.innerHTML = t,
        this.showQueryStatus(t),
        this.setEnabled(!1);
        var i = {
            traderID: e.TraderData._TraderInfo.id,
            positionID: this._Position.id,
            takeProfit: this._priceTakeProfitNumEdit.getValue() || 0,
            stopLoss: this._priceStopLossNumEdit.getValue() || 0
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.changePosition(i);
            break;
        case e.PlatformTypes.ptMT:
            e.requester.changeMTPosition(i)
        }
    },
    t.show = function(t) {
        t && this.setPosition(t),
        this.setEnabled(!0),
        this.saveDialogVars(),
        this.setButtonVisibility(!1),
        e.DialogModifyPosition.base.show.apply(this, arguments),
        this._isFocusPrice ? this.calculateAllPips() : this.calculateAllPrices(),
        this.setTakeProfitProfit(),
        this.setStopLossProfit(),
        this.validate()
    },
    t.calcPipsByPrice = function(t) {
        var i = 0,
        s = e.parseFloat(this._priceValNode.innerHTML);
        return i = parseInt(Math.round(Math.abs(t - s) * Math.pow(10, this._currentSymbol._Digits)))
    },
    t.setTakeProfitProfit = function() {
        var t = e.tradeFunctions.onePipsCalculate(this._currentSymbol, e.TraderData, this._Position.positionType, this._Position.volume),
        i = parseInt(Math.round((this._priceTakeProfitNumEdit.getValue() - this._Position.openPrice) * Math.pow(10, this._currentSymbol._Digits))),
        s = Math.abs(t * i),
        n = "Sell" == this._Position.positionType ? -1 : 1;
        this._Position.openPrice > e.parseFloat(this._priceTakeProfitNumEdit.getValue()) && (n *= -1);
        var o = n >= 0 ? "+ ": "- ";
        this._tpDifNode.innerHTML = e.numberFormat(s, 2, ".", ""),
        this._tpDifNode.innerHTML = o + this._tpDifNode.innerHTML
    },
    t.setStopLossProfit = function() {
        var t = e.tradeFunctions.onePipsCalculate(this._currentSymbol, e.TraderData, this._Position.positionType, this._Position.volume),
        i = parseInt(Math.round((this._priceStopLossNumEdit.getValue() - this._Position.openPrice) * Math.pow(10, this._currentSymbol._Digits))),
        s = Math.abs(t * i),
        n = "Sell" == this._Position.positionType ? 1 : -1;
        this._Position.openPrice < e.parseFloat(this._priceStopLossNumEdit.getValue()) && (n *= -1);
        var o = n >= 0 ? "+ ": "- ";
        this._slDifNode.innerHTML = e.numberFormat(s, 2, ".", ""),
        this._slDifNode.innerHTML = o + this._slDifNode.innerHTML
    },
    t.calcPriceByPips = function(t) {
        var i = 0,
        s = e.parseFloat(this._priceValNode.innerHTML);
        return i = e.parseFloat(s) + t / Math.pow(10, this._currentSymbol._Digits)
    },
    t.setPosition = function(t) {
        if (this._Position = e.TraderData.getPositionById(t), this._Position) {
            var i = e.SymbolsData.getSymbols()[this._Position.symbolName];
            if (this._currentSymbol = i, this._priceValNode.innerHTML = i ? e.numberFormat("Sell" == this._Position.positionType ? i._Ask: i._Bid, i._Digits, ".", "") : "", 1 * this._Position.takeProfit > 0) {
                this._isSetFirstTPValue = !1,
                this._takeProfitCheck.setChecked(!0),
                this._priceTakeProfitNumEdit.setStep(i.getFormattedPrecision()),
                this._priceTakeProfitNumEdit.setDecimals(i._Digits),
                this._priceTakeProfitNumEdit.setValue(e.numberFormat(1 * this._Position.takeProfit, i._Digits, ".", ""));
                var s = this.calcPipsByPrice(this._priceTakeProfitNumEdit.getValue());
                this._pipsTakeProfitNumEdit.setValue(s),
                this.setTakeProfitProfit(),
                this._isFocusPrice = !0
            } else this._takeProfitCheck.setChecked(!1),
            this._priceTakeProfitNumEdit.setValue(""),
            this._pipsTakeProfitNumEdit.setValue(""),
            this._tpDifNode.innerHTML = "";
            if (1 * this._Position.stopLoss > 0) {
                this._isSetFirstSLValue = !1,
                this._stopLossCheck.setChecked(!0),
                this._priceStopLossNumEdit.setStep(i.getFormattedPrecision()),
                this._priceStopLossNumEdit.setDecimals(i._Digits),
                this._priceStopLossNumEdit.setValue(e.numberFormat(1 * this._Position.stopLoss, i._Digits, ".", ""));
                var s = this.calcPipsByPrice(this._priceStopLossNumEdit.getValue());
                this._pipsStopLossNumEdit.setValue(s),
                this.setStopLossProfit(),
                this._isFocusPrice = !0
            } else this._stopLossCheck.setChecked(!1),
            this._priceStopLossNumEdit.setValue(""),
            this._pipsStopLossNumEdit.setValue(""),
            this._slDifNode.innerHTML = ""
        }
        this._onChangeLang()
    },
    t.calculateAllPips = function() {
        var t = e.parseFloat(this._priceValNode.innerHTML),
        i = 0,
        s = 0,
        n = this._Position.positionType == e._TraderData.positionType.buy ? 1 : -1;
        this._stopLossCheck.getChecked() && (i = this._priceStopLossNumEdit.getValue(), s = this.calcPipsByPrice(i), e.parseFloat(i) > t ? this._pipsStopLossNumEdit.setValue(s * -n) : this._pipsStopLossNumEdit.setValue(s * n)),
        this._takeProfitCheck.getChecked() && (i = this._priceTakeProfitNumEdit.getValue(), s = this.calcPipsByPrice(i), e.parseFloat(i) > t ? this._pipsTakeProfitNumEdit.setValue(s * n) : this._pipsTakeProfitNumEdit.setValue(s * -n))
    },
    t.calculateAllPrices = function() {
        var t = 0,
        i = this._Position.positionType == e._TraderData.positionType.buy ? 1 : -1;
        this._takeProfitCheck.getChecked() && (t = this.calcPriceByPips(this._pipsTakeProfitNumEdit.getValue() * i), this._priceTakeProfitNumEdit.setValue(t)),
        this._stopLossCheck.getChecked() && (t = this.calcPriceByPips(this._pipsStopLossNumEdit.getValue() * -i), this._priceStopLossNumEdit.setValue(t))
    },
    t.showQueryStatus = function(t) {
        t ? (this._priceLblNode.innerHTML = t, this._priceValNode.innerHTML = "") : (e.LangManager.isReversedLanguage() ? this._priceLblNode.innerHTML = "&nbsp:" + e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") : this._priceLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price") + ":", this._currentSymbol && this._currentSymbol._SymbolName == this._Position.symbolName && this._Enabled && (this._priceValNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? this._currentSymbol._Ask: this._currentSymbol._Bid, this._currentSymbol._Digits, ".", "")))
    },
    t._onSocketMessage = function(e) {
        if (e) {
            var t = e.msgType;
            switch (t) {
            case "positions":
            case "allMT4OpenOrders":
                this.enabled() || this.hide();
                break;
            case "changePosition":
            case "changeMT4Position":
                e.msgResult.toUpperCase() != "Success".toUpperCase() && (this.setEnabled(!0), this.showQueryStatus(""))
            }
        }
    },
    t.setButtonVisibility = function(e) {
        this._ModifyPositionButton.setEnabled(e)
    },
    t.saveDialogVars = function() {
        this.dialogVars = [this._priceTakeProfitNumEdit.getValue(), this._priceStopLossNumEdit.getValue()]
    },
    t.stateChanged = function() {
        return (this._priceTakeProfitNumEdit.getValue() != this.dialogVars[0] || this._priceStopLossNumEdit.getValue() != this.dialogVars[1]) && (1 != isNaN(this._priceTakeProfitNumEdit.getValue()) || 1 != isNaN(this.dialogVars[0]) || 1 != isNaN(this._priceStopLossNumEdit.getValue()) || 1 != isNaN(this.dialogVars[1]))
    },
    t.validate = function() {
        this.stateChanged() && this.stopLevelCheck() ? this.setButtonVisibility(!0) : this.setButtonVisibility(!1)
    },
    t = null,
    e.getDialogModifyPosition = function() {
        return e._dialogModifyPosition || (e._dialogModifyPosition = new e.DialogModifyPosition),
        e._dialogModifyPosition
    },
    e.getDialogModifyPositionWithoutInit = function() {
        return e._dialogModifyPosition
    },
    e
}),
define("tableTrade", ["divTable", "symbolsData", "traderData", "dialogClosePosition", "dialogModifyPosition"],
function(e) {
    function t() {
        var t = [];
        if (t = e.UserSettings.TableTrade.VisiblesColumns.length > 0 ? e.UserSettings.TableTrade.VisiblesColumns: ["Symbol", "Number", "Type", "Volume", "Date", "OpenPrice", "CurrentPrice", "TakeProfit", "StopLoss", "Swap", "Profit", "AdditionalParameters"], e.getTerminal().platformType == e.PlatformTypes.ptMT) {
            var i = t.indexOf("Margin");
            i > -1 && t.splice(i, 1)
        }
        return t
    }
    function i() {
        var t = [];
        return t = e.UserSettings.TableTrade.VisibleAdditionalParameters && 0 != e.UserSettings.TableTrade.VisibleAdditionalParameters.length ? e.UserSettings.TableTrade.VisibleAdditionalParameters: [{
            _id: "Margin",
            _isVisible: !0
        },
        {
            _id: "TakeProfit",
            _isVisible: !0
        },
        {
            _id: "StopLoss",
            _isVisible: !0
        },
        {
            _id: "Swap",
            _isVisible: !0
        },
        {
            _id: "Commission",
            _isVisible: !0
        },
        {
            _id: "TopBorder",
            _isVisible: !0
        },
        {
            _id: "BottomBorder",
            _isVisible: !0
        },
        {
            _id: "Payout",
            _isVisible: !0
        },
        {
            _id: "OptionExpiration",
            _isVisible: !0
        }]
    }
    function s(t) {
        try {
            switch (t.getSelectedRow()._CellValues.Type._Items[1]) {
            case e._TraderData.pendingOrderType[100]:
            case e._TraderData.pendingOrderType[101]:
            case e._TraderData.pendingOrderType[102]:
            case e._TraderData.pendingOrderType[103]:
            case e._TraderData.positionType.buy:
            case e._TraderData.positionType.sell:
                return 0;
            default:
                return 2
            }
        } catch(e) {
            return console.log("cannot get the position type "),
            0
        }
    }
    e.TableTrade = function(t) {
        e.TableTrade.base.constructor.apply(this, arguments),
        this.DoubleClickRow.add(e.Delegate(this, this._onRowDoubleClick)),
        this.ClickRow.add(e.Delegate(this, this._onRowClick)),
        e.SymbolsData.register(this),
        e.OptionsSettings.register(this),
        e.TraderData.register(this),
        e.ColorThemeChanger.register(this)
    },
    e.initClass(e.TableTrade, e.DivTable);
    var n = e.TableTrade.prototype;
    return n.getTableTradeColumns = function() {
        var e = t();
        return {
            Symbol: {
                Title: "Symbol",
                Key: "cQASSymbol",
                IsVisible: e.indexOf("Symbol") > -1,
                Id: "Symbol",
                Index: 0
            },
            Number: {
                Title: "Number",
                Key: "cWCTOperationNumberOperation",
                IsVisible: e.indexOf("Number") > -1,
                Id: "Number",
                Index: 1
            },
            Type: {
                Title: "Type",
                Key: "cWCTOperationOperationType",
                IsVisible: e.indexOf("Type") > -1,
                Id: "Type",
                Index: 2
            },
            Volume: {
                Title: "Volume",
                Key: "cWCTTradePositionsFormVolume",
                IsVisible: e.indexOf("Volume") > -1,
                Id: "Volume",
                Index: 3
            },
            Date: {
                Title: "Open date",
                Key: "cWCTOperationOpenDate",
                IsVisible: e.indexOf("Date") > -1,
                Id: "Date",
                Index: 4
            },
            OpenPrice: {
                Title: "Open price",
                Key: "cWCTOperationOpenPrice",
                IsVisible: e.indexOf("OpenPrice") > -1,
                Id: "OpenPrice",
                Index: 5
            },
            AdditionalParameters: {
                Title: "Additional parameters",
                Key: "cWCTTradePositionsAdditionalParameters",
                IsVisible: e.indexOf("AdditionalParameters") > -1,
                Id: "AdditionalParameters",
                Index: 6
            },
            CurrentPrice: {
                Title: "Current price",
                Key: "cWCTTradePositionsFormCurrentPrice",
                IsVisible: e.indexOf("CurrentPrice") > -1,
                Id: "CurrentPrice",
                Index: 7
            },
            Profit: {
                Title: "Profit",
                Key: "cWCTTradePositionsFormProfitByPosition",
                IsVisible: e.indexOf("Profit") > -1,
                Id: "Profit",
                Index: 8
            },
            Modify: {
                Title: "",
                IsVisible: !0,
                Id: "Modify",
                Index: 9
            },
            Close: {
                Title: "",
                IsVisible: !0,
                Id: "Close",
                Index: 10
            }
        }
    },
    n.getContextMenu = function(t) {
        return null == this._ContextMenu && (this._ContextMenu = new e.Menu({
            BeforeOpen: e.Delegate(this, this._onContextMenuOpen),
            CheckedType: "NoChecked",
            ItemClick: e.Delegate(this, this._onItemClick),
            Items: [{
                Text: "New market order",
                Id: "New_market_order",
                Key: "cMFNewMarketOrder",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 17,
                ImageListCol: 0
            },
            {
                Text: "New pending order",
                Id: "New_pending_order",
                Key: "cMFNewPendingOrder",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 17,
                ImageListCol: 0
            },
            {
                Text: "Buy option",
                Id: "buy_option",
                Key: "cMFBuyOption",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 20,
                ImageListCol: 0
            },
            {
                Text: "Modify position",
                Id: "Modify_position",
                Key: "cPPCEditPositions"
            },
            {
                Text: "Close position",
                Id: "Close_position",
                Key: "cClPFCaption"
            },
            {
                Text: "Additional parameters",
                Id: "AdditionalParameters",
                Key: "cWCTTradePositionsAdditionalParameters",
                Menu: this.getAdditionalParametersMenu()
            },
            {
                Text: "Columns",
                Id: "Columns",
                Key: "cPPCColumns",
                Menu: this.getColumnsMenu()
            },
            {
                Text: "Option expiration",
                Key: "cOPGOptionExpiration",
                Id: "OptionExpiration",
                Menu: this.getOptionExpirationMenu()
            },
            {
                Text: "Profit",
                Key: "cWCTTradePositionsFormProfitByPosition",
                Id: "Profit",
                Menu: this.getProfitMenu()
            },
            {
                Text: "Auto arrange",
                Id: "Auto_arrange",
                Key: "CoAutoSize",
                Checked: this._IsAutoSize
            }]
        })),
        this._ContextMenu
    },
    n._onGetOptionsSettings = function() {},
    n.getAdditionalParametersMenu = function() {
        if (!this._parametersMenu) {
            var t = i(),
            s = function(e, t) {
                for (var i = 0; i < t.length; i++) if (t[i]._id == e) return t[i]._isVisible
            },
            n = [{
                Text: "Margin",
                Key: "cWCTTradePositionsFormMarginByPosition",
                Checked: s("Margin", t),
                Id: "Margin"
            },
            {
                Text: "Take Profit",
                Key: "cTOTakeProfit",
                IsVisible: t.indexOf("TakeProfit") > -1,
                Checked: s("TakeProfit", t),
                Id: "TakeProfit"
            },
            {
                Text: "Stop Loss",
                Key: "cTOStopLoss",
                IsVisible: t.indexOf("StopLoss") > -1,
                Checked: s("StopLoss", t),
                Id: "StopLoss"
            },
            {
                Text: "Swap",
                Key: "cWCTTradePositionsFormSvop",
                IsVisible: t.indexOf("Swap") > -1,
                Checked: s("Swap", t),
                Id: "Swap"
            },
            {
                Text: "Commission",
                Key: "cQIFCommission",
                IsVisible: t.indexOf("Commission") > -1,
                Checked: s("Commission", t),
                Id: "Commission"
            }];
            e.getTerminal().useOptions === !0 && n.concat([{
                Text: "Top Border",
                IsVisible: t.indexOf("TopBorder") > -1,
                Checked: s("TopBorder", t),
                Key: "cOPSTopBorder",
                Id: "TopBorder"
            },
            {
                Text: "Bottom Border",
                IsVisible: t.indexOf("BottomBorder") > -1,
                Checked: s("BottomBorder", t),
                Key: "cOPSBottomBorder",
                Id: "BottomBorder"
            },
            {
                Text: "Payout",
                Key: "cOPGPayout",
                IsVisible: t.indexOf("Payout") > -1,
                Checked: s("Payout", t),
                Id: "Payout"
            },
            {
                Text: "Option expiration",
                Key: "cOPGOptionExpiration",
                IsVisible: t.indexOf("OptionExpiration") > -1,
                Checked: s("OptionExpiration", t),
                Id: "OptionExpiration"
            }]),
            this._parametersMenu = new e.Menu({
                CheckedType: "Multi",
                Items: n,
                ItemCheckedChanged: e.Delegate(this, this._onAPMenuItemClick)
            })
        }
        return this._parametersMenu
    },
    n._onAPMenuItemClick = function(t) {
        var s = t.Item,
        n = i(),
        o = function(e) {
            for (var t = 0; t < n.length; t++) if (n[t]._id == e) return t;
            return - 1
        };
        s.getChecked() ? (n[o(s._Id)]._isVisible = !0, e.UserSettings.TableTrade.VisibleAdditionalParameters = n) : (n[o(s._Id)]._isVisible = !1, e.UserSettings.TableTrade.VisibleAdditionalParameters = n, e._menuMasterObject.hideAll()),
        this.fillTable(),
        e.saveUserSettings()
    },
    n.getColumnSizes = function() {
        return e.UserSettings.TableTrade.ColumnSizes || []
    },
    n._render = function() {
        this._Template = e._Templates.TableTrade,
        this._RowTemplates = [e._Templates.TableTradeRow, e._Templates.TableTradeOptionRow],
        this._HeaderTemplate = e._Templates.TableTradeHeader,
        this._HeaderColumns = this.getTableTradeColumns(),
        this._DraggableRows = !0,
        this._IsSizingEnabled = !0,
        this._AutoSizes = [10, 7, 9, 7, 12, 11, 43, 12, 13, 3, 3, 6, 7, 7, 7, 7],
        this._IsAutoSize = null == e.UserSettings.TableTrade.AutoArrage || e.UserSettings.TableTrade.AutoArrage,
        this._ContextMenu = this.getContextMenu(),
        this._TableType = "Trade",
        this._Sizes = this.getColumnSizes(),
        this._CustomScrollEnabled = !0,
        e.TableTrade.base._render.apply(this, arguments),
        this.VisibleColumnsChange = e.Delegate(this, this._onVisibleColumnsChange),
        this.AutoSizeChange = e.Delegate(this, this._onAutoArrangeChange),
        this._ContextMenu.getItemById("buy_option").investorModeDependency = !0,
        this._ContextMenu.getItemById("New_market_order").investorModeDependency = !0,
        this._ContextMenu.getItemById("New_pending_order").investorModeDependency = !0
    },
    n.getAdditionalParametersValue = function(t) {
        var s = "",
        n = i(),
        o = e.SymbolsData.getSymbols()[t.symbolName];
        return 0 == n.length ? s: (n.forEach(function(i) {
            var n = !1;
            if (i._isVisible) {
                switch (i._id) {
                case "Margin":
                    e.parseFloat(t.margin) ? (s += " " + e.LangManager.getStringByKey("cWCTTradePositionsFormMarginByPosition") + ": " + e.numberFormat(e.parseFloat(t.margin), 2, ".", ""), n = !0) : n = !1;
                    break;
                case "TakeProfit":
                    e.parseFloat(t.takeProfit) ? (s += " " + (e.LangManager.getStringByKey("cTOTakeProfit") || "Take Profit") + ": " + e.numberFormat(e.parseFloat(t.takeProfit), o.getDigits(), ".", ""), n = !0) : n = !1;
                    break;
                case "StopLoss":
                    e.parseFloat(t.stopLoss) ? (s += " " + (e.LangManager.getStringByKey("cTOStopLoss") || "Stop Loss") + ": " + e.numberFormat(e.parseFloat(t.stopLoss), o.getDigits(), ".", ""), n = !0) : n = !1;
                    break;
                case "Swap":
                    t.swap ? (s += " " + e.LangManager.getStringByKey("cWCTTradePositionsFormSvop") + ": " + e.numberFormat(e.parseFloat(t.swap), 2, ".", ""), n = !0) : n = !1;
                    break;
                case "Commission":
                    t.commission ? (s += " " + e.LangManager.getStringByKey("cQIFCommission") + ": " + e.numberFormat(e.parseFloat(t.commission), 2, ".", ""), n = !0) : n = !1;
                    break;
                case "Payout":
                    0 == e.TraderData.getPayout(t) || isNaN(e.TraderData.getPayout(t)) ? n = !1 : (s += " Payout: " + e.numberFormat(e.TraderData.getPayout(t), 2, ".", ""), n = !0)
                }
                1 == n && (s += " / ")
            }
        }), s.substr(0, s.length - 2))
    },
    n.fillTable = function() {
        if (e.TraderData._Positions && e.TraderData._PendingOrders) {
            var t, i, s, n = [],
            o = e.TraderData._Positions,
            a = e.TraderData._PendingOrders;
            for (t = 0; t < o.length; t++) {
                var r = o[t];
                if (i = e.SymbolsData.getSymbols()[r.symbolName]) {
                    parseInt(r.openDate);
                    n.push({
                        templateIndex: 0,
                        rowId: r.id + "_" + r.positionType,
                        cellValues: {
                            Symbol: r.symbolName,
                            Number: r.id,
                            Type: e.UtipFunctions.getMarketOrderTypeContent(r.positionType),
                            Volume: e.numberFormat(e.parseFloat(r.volume), 2, ".", "") + " " + (e.LangManager.getStringByKey("cOFLot") || "lot"),
                            Date: e.UtipFunctions.getUTCDate(parseInt(r.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                            OpenPrice: e.parseFloat(r.openPrice) ? e.numberFormat(e.parseFloat(r.openPrice), i.getDigits(), ".", "") : "",
                            AdditionalParameters: this.getAdditionalParametersValue(r),
                            CurrentPrice: e.parseFloat(s) ? e.numberFormat(e.parseFloat(s), i.getDigits(), ".", "") : "",
                            Profit: "",
                            Modify: this._getPositionCell("Modify", r.id + "_" + r.positionType),
                            Close: this._getPositionCell("Close", r.id + "_" + r.positionType)
                        }
                    })
                }
            }
            for (t = 0; t < a.length; t++) {
                var l = a[t];
                i = e.SymbolsData.getSymbols()[l.symbolName],
                i && (s = "Sell" == l.positionType ? i._Ask: i._Bid, n.push({
                    templateIndex: 0,
                    rowId: l.id + "_" + l.pendingOrderType,
                    cellValues: {
                        Symbol: l.symbolName,
                        Number: l.id,
                        Type: e.UtipFunctions.getPendingOrderTypeContent(l.pendingOrderType),
                        PendingOrderType: l.pendingOrderType,
                        Volume: e.numberFormat(e.parseFloat(l.volume), 2, ".", "") + " " + (e.LangManager.getStringByKey("cOFLot") || "lot"),
                        Date: e.UtipFunctions.getUTCDate(parseInt(l.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                        OpenPrice: e.numberFormat(e.parseFloat(l.openPrice), i.getDigits(), ".", ""),
                        TakeProfit: e.parseFloat(l.takeProfit) ? e.numberFormat(e.parseFloat(l.takeProfit), i.getDigits(), ".", "") : "",
                        StopLoss: e.parseFloat(l.stopLoss) ? e.numberFormat(e.parseFloat(l.stopLoss), i.getDigits(), ".", "") : "",
                        CurrentPrice: s,
                        AdditionalParameters: this.getAdditionalParametersValue(l),
                        Profit: "",
                        Modify: this._getPositionCell("ModifyPending", l.id + "_" + l.pendingOrderType),
                        Close: this._getPositionCell("Delete", l.id + "_" + l.pendingOrderType)
                    }
                }))
            }
            n.sort(function(e, t) {
                if (e.cellValues.Symbol < t.cellValues.Symbol) return - 1;
                if (e.cellValues.Symbol > t.cellValues.Symbol) return 1;
                if (e.cellValues.Symbol == t.cellValues.Symbol) {
                    if (typeof e.cellValues.Type > typeof t.cellValues.Type) return t.IsRepeatName = !0,
                    -1;
                    if (typeof e.cellValues.Type < typeof t.cellValues.Type) return e.IsRepeatName = !0,
                    1;
                    if (typeof e.cellValues.Type == typeof t.cellValues.Type) {
                        if (parseInt(e.cellValues.Number) > parseInt(t.cellValues.Number)) return e.IsRepeatName = !0,
                        1;
                        if (parseInt(e.cellValues.Number) < parseInt(t.cellValues.Number)) return t.IsRepeatName = !0,
                        -1
                    }
                }
            })
        }
        this.insertOptionPositions(n),
        e.TableTrade.base.fillTable.call(this, n);
        for (var t = 0; t < this._Data.length; t++) this.refreshRowData(t),
        n[t].IsRepeatName && this._Rows[n[t].rowId].setValue("Symbol", "", !1)
    },
    n.insertOptionPositions = function(t) {
        var i = [],
        s = e.TraderData._OptionPositions,
        n = 0,
        o = null;
        for (n = 0; s!=null && n < s.length; n++) {
            var a = s[n],
            r = e.OptionsSettings.getOptionSettingsByName(a.settingName);
            r && (o = e.SymbolsData.getSymbols()[r.getSymbolName()], o && i.push({
                templateIndex: 1,
                rowId: a.id + "_" + a.direction,
                colSpan: {
                    ExpiryTime: ["Modify", "Close"]
                },
                cellValues: {
                    Symbol: a.settingName,
                    RealSymbol: o._MarginSymbol,
                    Number: a.id,
                    Type: e.UtipFunctions.getOptionTypeContent(a.direction, a.optionType),
                    Volume: parseInt(a.investmentSum) + " " + e.TraderData.getGroup().depositCurrency,
                    Date: e.UtipFunctions.getUTCDate(parseInt(a.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                    OpenPrice: e.numberFormat(e.parseFloat(a.openPrice), o.getDigits(), ".", ""),
                    CurrentPrice: e.numberFormat(e.parseFloat(o._Bid), o.getDigits(), ".", ""),
                    Margin: parseInt(a.investmentSum),
                    Profit: e.numberFormat(e.TraderData.calcOptionPositionProfit(a.id), 2, ".", ""),
                    Payout: e.numberFormat(e.TraderData.getPayout(a), 2, ".", ""),
                    Modify: this._getPositionCell("Modify", a.id),
                    Close: this._getPositionCell("EarlyClosing", a.id)
                }
            }), i[n].cellValues.Modify._DomNode.classList.add("CantModify"))
        }
        i.sort(function(e, t) {
            if (e.cellValues.Symbol < t.cellValues.Symbol) return - 1;
            if (e.cellValues.Symbol > t.cellValues.Symbol) return 1;
            if (e.cellValues.Symbol == t.cellValues.Symbol) {
                if (e.cellValues.Type.getDomNode().innerText < t.cellValues.Type.getDomNode().innerText) return - 1;
                if (e.cellValues.Type.getDomNode().innerText > t.cellValues.Type.getDomNode().innerText) return 1;
                if (e.cellValues.Type.getDomNode().innerText == t.cellValues.Type.getDomNode().innerText) {
                    if (parseInt(e.cellValues.Number) > parseInt(t.cellValues.Number)) return e.IsRepeatName = !0,
                    1;
                    if (parseInt(e.cellValues.Number) < parseInt(t.cellValues.Number)) return t.IsRepeatName = !0,
                    -1
                }
            }
        });
        for (var n = 0; n < i.length; n++) t.push(i[n])
    },
    n.getProfitMenu = function() {
        var t, i;
        if (null != e.UserSettings.TableTrade.Profit) {
            var s = e.UserSettings.TableTrade.Profit;
            t = "as_points" == s,
            i = "as_money" == s
        } else t = !1,
        i = !0,
        e.UserSettings.TableTrade.Profit = "as_money";
        return this._profitMenu || (this._profitMenu = new e.Menu({
            CheckedType: "Unique",
            MenuSource: this,
            Items: [{
                Text: "As points",
                Key: "cWCTTradePositionsFormPips",
                Checked: t,
                Id: "as_points"
            },
            {
                Text: "As money",
                Key: "cWCTTradePositionsFormCurrency",
                Checked: i,
                Id: "as_money"
            }],
            ItemCheckedChanged: e.Delegate(this, this._onProfitMenuItemClick)
        })),
        this._profitMenu
    },
    n.getOptionExpirationMenu = function() {
        var t, i;
        if (null != e.UserSettings.TableTrade.OptionExpiration) {
            var s = e.UserSettings.TableTrade.OptionExpiration;
            t = "as_closeDate" == s,
            i = "as_remainedTime" == s
        } else t = !0,
        i = !1,
        e.UserSettings.TableTrade.OptionExpiration = "as_closeDate";
        return this._optionExpirationMenu || (this._optionExpirationMenu = new e.Menu({
            CheckedType: "Unique",
            MenuSource: this,
            Items: [{
                Text: "Close data",
                Key: "cWCTOperationCloseDate",
                Checked: t,
                Id: "as_closeDate"
            },
            {
                Text: "Remained time",
                Key: "cOPGRemainedTime",
                Checked: i,
                Id: "as_remainedTime"
            }],
            ItemCheckedChanged: e.Delegate(this, this._onOptionExpirationMenuItemClick)
        })),
        this._optionExpirationMenu
    },
    n._onChangedPositions = function() {
        if (!e.Browser.IsMobile) {
            var t = e.getTableTrade(),
            i = null;
            t.getSelectedRowID() && (i = t.getSelectedRowID()),
            t.fillTable(),
            t.getSelectedRowID() != i && t.getRowById(i) && t.setSelectedRow(i)
        }
    },
    n._getPositionCell = function(t, i, s) {
        var n = new e.Button({
            Template: e._Templates.TableButton,
            Click: e.Delegate(this, this._onPositionBtnClick, {
                Type: t,
                PosId: i
            })
        });
        return n.investorModeDependency = !0,
        e.investorAccount && n.setEnabled(!1),
        n
    },
    n._onGetQuote = function(t) {
        var i, s, n;
        if (this._Data) for (i = 0; i < this._Data.length; i++) {
            s = this._Data[i];
            var o = e.TraderData.getOptionPositionByKey(s.rowId);
            if (o) {
                var a = e.OptionsSettings.getOptionSettingsByName(o.settingName);
                a && (n = a.getSymbolName())
            }
            t._SymbolName != s.cellValues.Symbol && t._SymbolName != n || this.refreshRowData(i)
        }
    },
    n.refreshRowData = function(t) {
        var s = this._Data[t],
        n = e.TraderData.getOrderByKey(s.rowId, s.cellValues.Type._Items[1]),
        o = null,
        a = null,
        r = this._Rows[s.rowId],
        l = r._CellValues.AdditionalParameters;
        if (n) {
            a = e.UserSettings.TableTrade.Profit || "as_money",
            o = e.SymbolsData.getSymbols()[s.cellValues.Symbol];
            var h = "Sell" == n.positionType || n.pendingOrderType == e.requestPendingOrderType.BuyLimit || n.pendingOrderType == e.requestPendingOrderType.BuyStop,
            d = h ? o._Ask: o._Bid,
            c = 0;
            s.CurrentPrice = d,
            r.setValue("CurrentPrice", e.numberFormat(d, o._Digits, ".", ""));
            var u = function(t, i, s) {
                var n = i._CellValues.Close,
                o = i._CellValues.Modify;
                t ? (s.classList.add("Blocked"), n._DomNode.childNodes[0].style = o._DomNode.childNodes[0].style = null, o._DomNode.classList.add("CantModify"), n._DomNode.classList.add("CantClose"), o._DomNode.classList.remove("CanModify"), n._DomNode.classList.remove("CanClose")) : (s.classList.remove("Blocked"), o._DomNode.classList.add("CanModify"), n._DomNode.classList.add("CanClose"), o._DomNode.classList.remove("CantModify"), n._DomNode.classList.remove("CantClose")),
                e.investorAccount && (o.setImageUrl("../res/img/NewOptionIcon/modify_d.png"), n.setImageUrl("../res/img/NewOptionIcon/close_d.png"), n._DomNode.childNodes[0].style = o._DomNode.childNodes[0].style = null)
            };
            o = e.SymbolsData.getSymbols()[n.symbolName];
            var g = o.getPrecision(),
            p = e.parseFloat(o.getStopLevel()) / g;
            n.positionType && ("as_money" == a ? (c = e.TraderData.calcProfit(n.id), s.Profit = c, r.setValue("Profit", s.PendingOrderType ? "": e.numberFormat(c, 2, ".", ""))) : "as_points" == a && this.refreshRowPoints(t), u(null != e.UtipFunctions.canClosePosition(e.parseFloat(n.takeProfit), e.parseFloat(n.stopLoss), d, p), r, r._DomNode.querySelector("div.AdditionalParameters"))),
            n.pendingOrderType && u(!e.UtipFunctions.canClosePendingOrder(n, d, p), r, r._DomNode.querySelector("div.OpenPrice")),
            r._DomNode.querySelector(".AdditionalParameters").innerHTML = l
        } else if (n = e.TraderData.getOptionPositionByKey(s.rowId)) {
            var m = e.OptionsSettings.getOptionSettingsByName(n.settingName);
            o = e.SymbolsData.getSymbols()[m.getSymbolName()],
            a = e.UserSettings.TableTrade.OptionExpiration || "as_closeDate",
            r.setValue("CurrentPrice", e.numberFormat(o._Bid, o._Digits, ".", "")),
            r.setAdditionalParameters(n, i()),
            r.setValue("Profit", e.numberFormat(e.TraderData.calcOptionPositionProfit(n.id), 2, ".", ""));
            var _ = r._CellValues.Close;
            e.UtipFunctions.canCloseOptionPosition(n) ? (_._DomNode.classList.remove("CantClose"), _._DomNode.classList.add("CanClose")) : (_._DomNode.childNodes[0].style = null, _._DomNode.classList.add("CantClose"), _._DomNode.classList.remove("CanClose"))
        }
    },
    n.getRemainedTime = function(t) {
        return t - e.SymbolsData._LastChangedTime
    },
    n._onChangeLang = function() {
        this.fillTable()
    },
    n._onContextMenu = function(e) {
        var t = this.getRowById(e.sender.getId());
        this._fromRow = !0,
        this.setSelectedRow(t.getId());
        var i = e.event.clientX ? e.event.clientX: e.event.targetTouches[0].clientX,
        s = e.event.clientY ? e.event.clientY: e.event.targetTouches[0].clientY;
        this.getContextMenu().show(i, s)
    },
    n._onContextMenuOpen = function(t) {
        var i, s = e.SymbolsData.getSelectedSymbols();
        if (this._Data.length > 0) if (this._fromRow) i = this.getSelectedRow();
        else {
            var n = this._Data[this._Data.length - 1].rowId;
            i = this.getRowById(n),
            this.setSelectedRow(n)
        } else i = null;
        var o = null != i && this._Data[i._DataIdx],
        a = this._ContextMenu.getItemById("Modify_position"),
        r = this._ContextMenu.getItemById("Close_position"),
        l = this._ContextMenu.getItemById("buy_option"),
        h = this._ContextMenu.getItemById("OptionExpiration"),
        d = this._ContextMenu.getItemById("New_market_order"),
        c = this._ContextMenu.getItemById("New_pending_order");
        e.OptionsSettings.checkAreOptionsEnabledExceptForbidden() ? l.setEnabled(!0) : l.setEnabled(!1);
        var u = !1;
        if (s.length > 0) for (var g = 0; g < s.length; g++) {
            var p = e.SymbolsData.getSymbols()[s[g]];
            if ("index" != p.getCalculationTypeName()) {
                u = !0;
                break
            }
        }
        u ? (d.setEnabled(!0), c.setEnabled(!0)) : (d.setEnabled(!1), c.setEnabled(!1)),
        o ? (a._DomNode.style.display = "", r._DomNode.style.display = "", e.getTerminal().useOptions && !e.investorAccount ? (l._DomNode.style.display = "", h && (h._DomNode.style.display = "")) : (l._DomNode.style.display = "none", h && (h._DomNode.style.display = "none")), o.Type ? "string" == typeof o.Type ? (a.setText(e.LangManager.getStringByKey("cPPCEditPositions") || "Modify position"), r.setText(e.LangManager.getStringByKey("cClPFCaption") || "Close position")) : (a.setText(e.LangManager.getStringByKey("cPPCEditOrder") || "Modify order"), r.setText(e.LangManager.getStringByKey("cPPCDelOrder") || "Delete order")) : (a._DomNode.style.display = "none", r._DomNode.style.display = "none")) : (a._DomNode.style.display = "none", r._DomNode.style.display = "none"),
        this._fromRow = !1
    },
    n.refreshRowPoints = function(t) {
        var i = this._Data[t],
        s = i.cellValues.Symbol;
        if (null != e.SymbolsData.getSymbols()[s]) {
            var n, o = i.cellValues.Type.getItems(),
            a = o[1],
            r = parseInt(e.SymbolsData.getSymbols()[s]._Digits),
            l = e.parseFloat(i.cellValues.CurrentPrice),
            h = e.parseFloat(i.cellValues.OpenPrice);
            n = "Buy" == a ? Math.round((l - h) * Math.pow(10, r)) : "Sell" == a ? Math.round((h - l) * Math.pow(10, r)) : "",
            isFinite(e.OptionTypeByName[a]) || this._Rows[i.rowId].setValue("Profit", i.cellValues.PendingOrderType ? "": n)
        }
    },
    n._onProfitMenuItemClick = function(t) {
        var i = t.Item.getId();
        i && (e._menuMasterObject.hideAll(), this.showProfitAs(i), e.saveUserSettings())
    },
    n._onOptionExpirationMenuItemClick = function(t) {
        var i = t.Item.getId();
        i && (e._menuMasterObject.hideAll(), this.showOptionExpirationAs(i), e.saveUserSettings())
    },
    n.showProfitAs = function(t) {
        switch (t) {
        case "as_points":
            e.UserSettings.TableTrade.Profit = "as_points";
            for (var i = 0; i < this._Data.length; i++) this.refreshRowPoints(i);
            break;
        case "as_money":
            e.UserSettings.TableTrade.Profit = "as_money";
            for (var i = 0; i < this._Data.length; i++) this.refreshRowData(i)
        }
    },
    n.showOptionExpirationAs = function(t) {
        e.UserSettings.TableTrade.OptionExpiration = t;
        for (var i = 0; i < this._Data.length; i++) this.refreshRowData(i)
    },
    n._onItemClick = function(t) {
        var i = t.Item.getId(),
        s = this.getSelectedRow(),
        n = this._Data[s._DataIdx];
        if (t.preventDefault(), i) {
            var o, a = !0;
            switch (i) {
            case "New_market_order":
                if (o = e.getDialogNewOrder(), n) {
                    var r = n.cellValues.Symbol;
                    e.SymbolsData.getSymbols()[r] && o.setCurrentQuote(r)
                }
                o.show();
                break;
            case "New_pending_order":
                if (o = e.getDialogPendingOrder(), n) {
                    var r = n.cellValues.Symbol;
                    e.SymbolsData.getSymbols()[r] && o.setCurrentQuote(r)
                }
                o.show();
                break;
            case "buy_option":
                e.getTerminal().showBuyOptionDialogByChart(e.OptionsSettings.getSelectedOptionSettings(), e.getOptionsSettingsTable().getSelectedRow().getValue("Period").getSelectedData());
                break;
            case "Modify_position":
                "string" == typeof n.cellValues.Type ? this._onPositionBtnClick({
                    Type: "Modify",
                    PosId: n.rowId
                }) : this._onPositionBtnClick({
                    Type: "ModifyPending",
                    PosId: n.rowId
                });
                break;
            case "Close_position":
                "string" == typeof n.cellValues.Type ? this._onPositionBtnClick({
                    Type: "Close",
                    PosId: n.rowId
                }) : this._onPositionBtnClick({
                    Type: "Delete",
                    PosId: n.rowId
                });
                break;
            case "Trailing_stop":
            case "Columns":
            case "Profit":
                a = !1;
                break;
            case "Auto_arrange":
                var l = !t.Item.getChecked();
                t.Item.setChecked(l),
                this.setAutoArrange(l),
                e.saveUserSettings()
            }
            a && this._ContextMenu.hide()
        }
    },
    n._onPositionBtnClick = function(t) {
        var i, s, n, o = function(t) {
            var i = e.SymbolsData.getSymbols()[t.symbolName],
            s = "Sell" == t.positionType || t.pendingOrderType == e.requestPendingOrderType.BuyLimit || t.pendingOrderType == e.requestPendingOrderType.BuyStop;
            return {
                closePrice: s ? i._Ask: i._Bid,
                stopLevel: e.parseFloat(i.getStopLevel()) / i.getPrecision()
            }
        };
        if (t.PosId.indexOf("_") == -1) var a = t.PosId;
        else var a = t.PosId.substring(0, t.PosId.indexOf("_"));
        switch (t.Type) {
        case "Modify":
        case "Close":
            i = e.TraderData.getPositionById(a),
            n = o(i),
            s = e.UtipFunctions.canClosePosition(e.parseFloat(i.takeProfit), e.parseFloat(i.stopLoss), n.closePrice, n.stopLevel),
            s == e.TradeLineType.takeProfit ? e.showErrorDialog(e.LangManager.getStringByKey("cMFStopLevelTP") || "Take profit is close to market", !0) : s == e.TradeLineType.stopLoss ? e.showErrorDialog(e.LangManager.getStringByKey("cMFStopLevelSL") || "Stop loss is close to market", !0) : "Modify" == t.Type ? e.getDialogModifyPosition().show(a) : e.getDialogClosePosition().show(a);
            break;
        case "ModifyPending":
        case "Delete":
            if (i = e.TraderData.getPendingOrderByID(a), n = o(i), e.UtipFunctions.canClosePendingOrder(i, n.closePrice, n.stopLevel)) if ("ModifyPending" == t.Type) e.getDialogModifyPendingOrder().show(i);
            else {
                var r = e.LangManager.getStringByKey("cPPCDelOrder") || "Delete order";
                e.getDialogConfirm({
                    Width: 220,
                    Confirm: e.Delegate(this, this._onConfirmDeletePos),
                    Closed: e.Delegate(e.DialogConfirm,
                    function(t) {
                        e._dialogConfirm.dispose()
                    })
                }).show(r + " #" + a + "?", a)
            } else e.showErrorDialog(e.LangManager.getStringByKey("cMFStopLevelOrderPrice") || "Order price is close to market", !0);
            break;
        default:
            i = e.TraderData.getOptionPositionById(a),
            r = e.LangManager.getStringByKey("cClPFClose") || "Close position";
            var l = parseInt(i.investmentSum) / 100 * parseInt(i.earlyClosing);
            if (i.earlyClosing) {
                var h = e.LangManager.getStringByKey("cPPCCloseOptionPositionFee") || "The fee per transaction";
                r += "#" + a + "?<br>" + h + " " + e.numberFormat(l, 2, ",")
            } else r += "#" + a + "?";
            e.getDialogConfirm({
                Width: 220,
                Confirm: e.Delegate(this, this._onConfirmCloseOption),
                Closed: e.Delegate(e.DialogConfirm,
                function(t) {
                    e._dialogConfirm.dispose()
                })
            }).show(r, a)
        }
    },
    n.checkRowIsFirstInTableTrade = function(t) {
        e.getTableTrade()._Data.length > 0 && parseInt(e.getTableTrade()._Data[0].rowId) === parseInt(t) ? this.rowIsFirstInTableTrade = !0 : this.rowIsFirstInTableTrade = !1
    },
    n._onConfirmCloseOption = function(t) {
        var i = {
            ID: t.data,
            traderID: e.TraderData._TraderInfo.id
        };
        this.checkRowIsFirstInTableTrade(i.ID),
        e.requester.closeOptionPosition(i)
    },
    n.deleteTempOrder = function() {
        this._orderOnDelete && delete this._orderOnDelete
    },
    n._onConfirmDeletePos = function(t) {
        var i = {
            ID: t.data,
            traderID: e.TraderData._TraderInfo.id
        },
        s = e.TraderData.getPendingOrderByID(t.data);
        if (!s || s.isExecuting || this._orderOnDelete) this._orderOnDelete && e.showErrorDialog(e.LangManager.getStringByKey("cSMTQueryProcessing") || "Order is already in progress");
        else switch (s.isExecuting = !0, this._orderOnDelete = s, e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.deletePendingOrder(i);
            break;
        case e.PlatformTypes.ptMT:
            switch (parseInt(s.pendingOrderType)) {
            case e.requestPendingOrderType.BuyLimit:
            case e.requestPendingOrderType.BuyStop:
                i.closePrice = e.SymbolsData.getSymbols()[s.symbolName]._Ask;
                break;
            case e.requestPendingOrderType.SellLimit:
            case e.requestPendingOrderType.SellStop:
                i.closePrice = e.SymbolsData.getSymbols()[s.symbolName]._Bid
            }
            e.requester.deleteMTPendingOrder(i)
        }
    },
    n._onVisibleColumnsChange = function() {
        e.UserSettings.TableTrade.VisiblesColumns = this.getVisibleColumns()
    },
    n._onAutoArrangeChange = function() {
        e.UserSettings.TableTrade.AutoArrage = this._IsAutoSize
    },
    n._onRowDoubleClick = function(t) {
        if ("0" != t && !e.investorAccount) {
            var i = this.getRows()[t];
            if (void 0 == i._CellValues.ExpiryTime) {
                var s = i._CellValues.Type._Items[1];
                if (e._TraderData.positionType.buy == s || e._TraderData.positionType.sell == s) this._onPositionBtnClick({
                    Type: "Modify",
                    PosId: t
                });
                else {
                    var n = i._CellValues.Type._Items[1];
                    if (void 0 != e.OptionTypeAliases[n] || null != e.OptionTypeAliases[n]) return;
                    this._onPositionBtnClick({
                        Type: "ModifyPending",
                        PosId: t
                    })
                }
            }
        }
    },
    n._onRowDragStart = function(t) {
        var i = t.sender,
        n = i.getId(),
        o = n,
        a = t.event.dataTransfer;
        o.indexOf("_") != -1 && (o = o.substring(0, o.indexOf("_")));
        var r, l = i.getType(),
        h = l.toLowerCase(),
        d = Object.keys(e.OptionTypeAliases).some(function(e) {
            return e.toLowerCase() === h
        });
        if (r = d ? e.TraderData.getOptionPositionById(o) : e.TraderData.getOrderByKey(n, l)) {
            var c = a.setData.bind(a);
            c("text", r.symbolName),
            c("tableRow", n),
            c("workMode", s(this));
            var u = r.optionType;
            e.valueIsEmpty(u) || (c("optionSettingsId", e.OptionsSettings.getOptionSettingsByNameAndType(r.settingName, parseInt(u)).getID()), c("optionSettingsType", parseInt(u)))
        }
        var g = document.getElementById("InvisibleDragGhost");
        null == g && (g = document.createElement("div"), g.setAttribute("style", "position: absolute; top: 0px; left: 0px; width: 1px; height: 1px;"), g.setAttribute("id", "InvisibleDragGhost"), document.body.appendChild(g)),
        "setDragImage" in a && a.setDragImage(g, 0, 0)
    },
    n._getChartForDrawTradePanel = function(t) {
        var i = e.activeChart;
        if (i) {
            var s = i.charts.filter(function(e) {
                return e.getSymbolName() === t
            });
            if (0 !== s.length) return {
                chart: s[0],
                graphicWindow: i
            }
        }
        return e.Charts2.getFirstChartWindowBySymbolName(t)
    },
    n._onRowClick = function(t) {
        if (e._menuMasterObject.hideAll(), e.activeChart) {
            var i, s = this.getRowById(t.rowID),
            n = s.getCellValues();
            if (t.hasOwnProperty("Type")) {
                var o = n.Type._Items[1].toLowerCase();
                i = Object.keys(e.OptionTypeAliases).some(function(e) {
                    return e.toLowerCase() === o
                })
            } else {
                var a = t.rowID;
                if ("0" === a) return;
                t.Type = n.Type._Items[1]
            }
            var r = e.TraderData.getOptionPositionByKey(t.rowID),
            l = e.TraderData.getOrderByKey(t.rowID, t.Type),
            h = null;
            if (0 === this._Data.length) h = e.activeChart.charts[0].getSymbolName();
            else {
                var d = null,
                c = null;
                if (r) {
                    var u = Object.keys(e.OptionTypeAliases),
                    g = u.indexOf(t.Type);
                    d = g !== -1,
                    d ? (c = e.OptionsSettings.getOptionSettingsByNameAndType(r.settingName, r.optionType), h = c.getSymbolName()) : h = n.Symbol
                } else h = n.Symbol
            }
            var p, m = e.getTerminal(),
            _ = this._getChartForDrawTradePanel(h) || {};
            if (_ && (p = _.graphicWindow)) {
                if (m.showChartsAs == e.chartsMode.windows) {
                    for (var y = m.chartDialogs,
                    S = y.length,
                    f = null,
                    v = 0; v < S; v++) if (f = y[v], f.ownGraphicWindow == p) {
                        var C = e.getTerminal().getSwiperCharts().getTabButtonByKey(f.getId());
                        C && C.getDomNode().click(),
                        f.setActive();
                        break
                    }
                } else m.changeSwiperSelectPage(p.getContainerID());
                var b, T = p.tradePanelModule;
                if (i && r && r.symbolName == h) {
                    var P = e.OptionsSettings.getOptionsSettings(),
                    D = P.filter(function(e, t, i) {
                        return e.getName() === r.settingName && e.getSymbolName() === r.symbolName && e.getType() === parseInt(r.optionType)
                    }),
                    I = 0 !== D.length ? D[0] : null;
                    if (void 0 === I || null === I) return;
                    _.chart.optionPosition = r,
                    _.chart.setOptionSettingsId(I.getID()),
                    _.chart.setOptionSettingsType(I.getType()),
                    b = r
                } else l && l.symbolName == h && (b = l);
                T && !T.equalPosition(b) && (T.setChart(_.chart), T.loadPosition(b, !1)),
                p.setSelectedPositionMark(t.rowID.split("_")[0] + "_" + e.UtipFunctions.getPositionPostfixType(b), !1)
            }
        }
    },
    n.getRowIdByPosition = function(t) {
        if (!t) return null;
        var i = e.valueIsEmpty,
        s = t.id,
        n = t.positionType,
        o = t.pendingOrderType,
        a = t.direction;
        return i(n) ? i(o) ? [s, a].join("_") : [s, o].join("_") : [s, n].join("_")
    },
    n = null,
    e.getTableTrade = function() {
        return e._tableTrade || (e._tableTrade = new e.TableTrade),
        e._tableTrade
    },
    e.deleteTableTrade = function() {
        e._tableTrade && (delete e._tableTrade, e._tableTrade = null)
    },
    e
}),
define("statusBar", ["control", "socket", "tableTrade"],
function(e) {
    e.StatusBar = function(t) {
        this._Equity = 0,
        this._Profit = 0,
        this._Free = 0,
        this._Margin = 0,
        this._Level = 0,
        this._serverName = e.Auth._Server.Name,
        this._Time = "",
        this._lastUpdateTime = 0,
        this._Template = e._Templates.StatusBar,
        e.Socket.register(this),
        e.StatusBar.base.constructor.apply(this, arguments)
    },
    e.initClass(e.StatusBar, e.BaseControl);
    var t = e.StatusBar.prototype;
    return t._onChangeLang = function() {
        this._ParentNode ? (this._ParentNode.removeChild(this._DomNode), delete this._DomNode, this._render(), this.addToNode(this._ParentNode), this.clearDepositCurrencySymbolImg(), this.setDepositCurrencySymbolImg()) : this.drawLabels()
    },
    t.setServerName = function(e) {
        this._serverName = e,
        this.setServer(this._serverName)
    },
    t.refresh = function(t) {
        if (Math.abs(e.SymbolsData._LastChangedTime - this._lastUpdateTime) > 500 || t === !0) {
            var i = e.TraderData.getPositionsMargin(),
            s = e.TraderData.optionsInvestments(),
            n = e.TraderData.getEquity();
            e.getTerminal().platformType == e.PlatformTypes.ptMT && this.setBalance(e.numberFormat(e.TraderData.getBalance(), 2, ".", " ")),
            this.setEquity(n),
            this.setProfit(e.TraderData.getPositionsProfit()),
            this.setFree(e.TraderData.getFreeEquity()),
            e.TraderData.getSumsDetails() && n - (parseFloat(e.TraderData.getSumsDetails().sumInputBonus) - parseFloat(e.TraderData.getSumsDetails().sumOutputBonus)) <= 0 && (e.TraderData.traderIsDemo() || e.getTerminal().getSwiperTrade().setDepositMoneyBtnVisible(!0)),
            this.setMargin(i + s),
            this.setLevel(e.TraderData._Positions.length ? 100 * n / i: 0),
            this.drawBonusLabel(),
            this.setTime(e.UtipFunctions.formattedDate(e.SymbolsData._LastChangedTime)),
            this._lastUpdateTime = e.SymbolsData._LastChangedTime
        }
    },
    t._onSocketMessage = function(e) {
        e = e || {};
        var t = e.msgType,
        i = "quote" === t; (i || "positions" == t || "optionsPositions" === t || "allMT4OpenOrders" == t) && this.refresh(!i),
        e && "positions" == e.msgType && this.setDepositCurrencySymbolImg(),
        e && "serverName" == e.msgType && this.clearDepositCurrencySymbolImg()
    },
    t._render = function() {
        e.StatusBar.base._render.apply(this, arguments),
        this._equityLblNode = this._DomNode.querySelector(".EquityLbl"),
        this._profitLblNode = this._DomNode.querySelector(".ProfitLbl"),
        this._freeLblNode = this._DomNode.querySelector(".FreeLbl"),
        this._marginLblNode = this._DomNode.querySelector(".MarginLbl"),
        this._levelLblNode = this._DomNode.querySelector(".LevelLbl"),
        this._bonusesLblNode = this._DomNode.querySelector(".BonusesLbl"),
        this._registerToLangManager = !0,
        this._equityKey = "cWCTAccountListFormEquity",
        this._profitKey = "cWCTTradePositionsFormProfitByPosition",
        this._freeKey = "cLRFree",
        this._marginKey = "cWCTTradePositionsFormMarginByPosition",
        this._levelKey = "cLRLevel",
        this._bonusesKey = "",
        this._balanceKey = "cWCTBalance",
        this._equityNode = this._DomNode.querySelector(".EquityVal"),
        this._profitNode = this._DomNode.querySelector(".ProfitVal"),
        this._freeNode = this._DomNode.querySelector(".FreeVal"),
        this._marginNode = this._DomNode.querySelector(".MarginVal"),
        this._levelNode = this._DomNode.querySelector(".LevelVal"),
        this._bonusesNode = this._DomNode.querySelector(".BonusesVal"),
        this._serverNode = this._DomNode.querySelector(".Server"),
        this._timeNode = this._DomNode.querySelector(".Time"),
        this._depositSymbolNode = this._DomNode.querySelector(".DepositSymbol"),
        this.drawLabels(),
        this.setServer(this._serverName),
        this.refresh()
    },
    t.drawLabels = function() {
        e.LangManager.isReversedLanguage() ? (e.swapDOMNodes(this._equityLblNode, this._equityNode), e.swapDOMNodes(this._equityLblNode, this._depositSymbolNode), this._depositSymbolNode.style.marginLeft = "0px", this._equityLblNode.parentNode.style.paddingRight = "6px", e.swapDOMNodes(this._profitLblNode, this._profitNode), e.swapDOMNodes(this._freeLblNode, this._freeNode), e.swapDOMNodes(this._marginLblNode, this._marginNode), e.swapDOMNodes(this._levelLblNode, this._levelNode), e.swapDOMNodes(this._bonusesLblNode, this._bonusesNode), this._equityLblNode.innerHTML = ":" + e.LangManager.getStringByKey(this._equityKey), this._profitLblNode.innerHTML = ":" + e.LangManager.getStringByKey(this._profitKey), this._freeLblNode.innerHTML = ":" + e.LangManager.getStringByKey(this._freeKey), this._marginLblNode.innerHTML = ":" + e.LangManager.getStringByKey(this._marginKey), this._levelLblNode.innerHTML = ":" + e.LangManager.getStringByKey(this._levelKey)) : (this._equityLblNode.innerHTML = (e.LangManager.getStringByKey(this._equityKey) || "Equity") + ":", this._profitLblNode.innerHTML = (e.LangManager.getStringByKey(this._profitKey) || "Profit") + ":", this._freeLblNode.innerHTML = (e.LangManager.getStringByKey(this._freeKey) || "Free") + ":", this._marginLblNode.innerHTML = (e.LangManager.getStringByKey(this._marginKey) || "Margin") + ":", this._levelLblNode.innerHTML = (e.LangManager.getStringByKey(this._levelKey) || "Level") + ":"),
        e.getTerminal().platformType == e.PlatformTypes.ptMT && this._balanceLblNode && (e.LangManager.isReversedLanguage() ? (e.swapDOMNodes(this._balanceLblNode, this._balanceNode), this._balanceLblNode.innerHTML = ":" + e.LangManager.getStringByKey(this._balanceKey)) : this._balanceLblNode.innerHTML = (e.LangManager.getStringByKey(this._balanceKey) || "Balance") + ":")
    },
    t.drawBonusLabel = function() {
        this.needShowBonus() ? (e.LangManager.isReversedLanguage() ? (this._bonusesLblNode.innerHTML = ":" + ("" == e.LangManager.getStringByKey("cWCTBonusBalance") ? "Bonus balance": e.LangManager.getStringByKey("cWCTBonusBalance") || "Bonus balance"), this._bonusesLblNode.style.width = "100px") : this._bonusesLblNode.innerHTML = ("" == e.LangManager.getStringByKey("cWCTBonusBalance") ? "Bonus balance": e.LangManager.getStringByKey("cWCTBonusBalance") || "Bonus balance") + ":", this.setBonuses(e.TraderData.getSumBonus())) : (this._bonusesLblNode.innerHTML = "", this.setBonuses( - 1))
    },
    t.needShowBonus = function() {
        return !! e.TraderData._TraderInfo && "1" == e.TraderData._TraderInfo.showbonuses
    },
    t.setProps = function(t) {
        this.setEquity(t.Equity),
        this.setFree(t.Free),
        this.setMargin(t.Margin),
        this.setLevel(t.Level),
        this.setTime(e.UtipFunctions.formattedDate(e.SymbolsData._LastChangedTime) || ""),
        this.setServer(t.Server),
        this.setProfit(t.Profit),
        this.setBonuses()
    },
    t.createBalanceNode = function() {
        if (e.getTerminal().platformType == e.PlatformTypes.ptMT) {
            var t = e.htmlToDOM(e._Templates.StatusBarBalanceNode),
            i = this._DomNode.querySelector(".Equity"),
            s = this._DomNode.querySelector(".WTTerminalStatusBarLeft");
            s.insertBefore(t, i),
            this._balanceLblNode = t.querySelector(".BalanceLbl"),
            this._balanceNode = t.querySelector(".BalanceVal"),
            this._balanceKey = "cWCTBalance",
            this._balanceLblNode.innerHTML = (e.LangManager.getStringByKey(this._balanceKey) || "Balance") + ":"
        }
    },
    t.removeBalanceNode = function() {
        var e = this._DomNode.querySelector(".Balance");
        if (e) {
            var t = this._DomNode.querySelector(".WTTerminalStatusBarLeft");
            t.removeChild(e)
        }
    },
    t.setDepositCurrencySymbolImg = function() {
        if (this.depositCurrency) return ! 1;
        switch (this.depositCurrency = e.TraderData.getTraderGroup().depositCurrency.toLowerCase(), this._depositSymbolNode.classList.remove(this._currencyClass), this._currencyClass = "icon-currency-", this.depositCurrency) {
        case "usd":
            this._currencyClass += "d";
            break;
        case "eur":
            this._currencyClass += "e";
            break;
        case "gbp":
            this._currencyClass += "p";
            break;
        case "rub":
            this._currencyClass += "r";
            break;
        case "jpy":
            this._currencyClass += "y";
            break;
        case "chf":
            this._currencyClass += "f"
        }
        this._depositSymbolNode.classList.add(this._currencyClass)
    },
    t.clearDepositCurrencySymbolImg = function() {
        this._depositSymbolNode.style.backgroundImage = "",
        this.depositCurrency = !1
    },
    t.setEquity = function(t) {
        if (void 0 !== t) {
            this._Equity = t;
            var i = t;
            null !== e.TraderData.getInputSum() && null !== e.TraderData.getPositionsProfit() || (i = 0),
            this._equityNode && (this._equityNode.innerHTML = e.numberFormat(i, 2, ".", " "))
        }
    },
    t.setProfit = function(t) {
        void 0 !== t && (this._Profit = t, this._profitNode && (this._profitNode.innerHTML = e.numberFormat(this._Profit, 2, ".", " ")))
    },
    t.setFree = function(t) {
        if (void 0 !== t) {
            this._Free = t;
            var i = t;
            null !== e.TraderData.getEquity() && null !== e.TraderData.getPositionsMargin() && null !== e.TraderData.optionsInvestments() && null !== e.TraderData.calcOptionPositionsProfit() || (i = 0),
            this._freeNode && (this._freeNode.innerHTML = e.numberFormat(i, 2, ".", " "))
        }
    },
    t.setMargin = function(t) {
        void 0 !== t && (this._Margin = t, this._marginNode && (this._marginNode.innerHTML = e.numberFormat(this._Margin, 2, ".", " ")))
    },
    t.setLevel = function(t) {
        void 0 !== t && (this._Level = t, this._levelNode && (this._levelNode.innerHTML = e.numberFormat(this._Level, 2, ".", " ") + "%"))
    },
    t.setBonuses = function(t) {
        if (void 0 !== t) {
            if (t == -1) return void(this._bonusesNode.innerHTML = "");
            this._Bonuses = t,
            this._bonusesNode && (this._bonusesNode.innerHTML = e.numberFormat(this._Bonuses, 2, ".", " "))
        } else this._bonusesNode.innerHTML = ""
    },
    t.setServer = function(e) {
        void 0 !== e && (this._serverName = e, this._serverNode && (this._serverNode.innerHTML = this._serverName))
    },
    t.setTime = function(e) {
        void 0 !== e && (this._Time = e, this._timeNode && (this._timeNode.innerHTML = this._Time))
    },
    t.setBalance = function(e) {
        void 0 !== e && (this._Balance = e, this._balanceNode && (this._balanceNode.innerHTML = this._Balance))
    },
    t.setOfflineStatus = function() {
        this._timeNode.innerHTML = "Offline"
    },
    t.setConnectionStatus = function() {
        this._timeNode.innerHTML = e.LangManager.getStringByKey("cBTNConnecting") || "Connecting"
    },
    t = null,
    e
}),
define("graphicObject", ["base"],
function(e) {
    e.linePoint = {
        lpStart: 0,
        lpCenter: 1,
        lpEnd: 2,
        lpFunctional: 3,
        lpFake1: 4,
        lpFake2: 5
    },
    e.BaseGraphicObject = function(e, t) {
        this.initGraphicArea(e),
        this.className = "TBaseGraphicObject",
        this.centerPoint = t,
        this.centerDrag = !0,
        this.selected = !0,
        this._parameters = [],
        this._parameters.push({
            value: e._graphicWindows.XToDate(t.x),
            type: "time",
            caption: "Time1"
        }),
        this._parameters.push({
            value: e.getValueByCoord(t.y),
            type: "float",
            caption: "Value1"
        }),
        this.drawStyle = {
            lineWidth: 1,
            lineColor: "#ff0000",
            lineStyle: "solid"
        }
    };
    var t = e.BaseGraphicObject.prototype;
    t.clone = function() {
        var t = new this.constructor(this._graphicArea, e.cloneObject(this.centerPoint));
        return t.drawStyle = e.cloneObject(this.drawStyle),
        t.setParameters(this.copyParameters()),
        t
    },
    t.copyParameters = function() {
        var t = [];
        return this._parameters.forEach(function(i) {
            t.push(e.cloneObject(i))
        },
        this),
        t
    },
    t.initGraphicArea = function(e) {
        e && (this._graphicArea = e, this._graphicWindows = e._graphicWindows, this._graphicArea.graphicObjects.indexOf(this) === -1 && this._graphicArea.graphicObjects.push(this))
    },
    t.setGraphicArea = function(e) {
        this._graphicArea = e
    },
    t.getGraphicArea = function() {
        return this._graphicArea
    },
    t.getGraphicWindows = function() {
        return this._graphicWindows
    },
    t.initParameters = function(e) {
        if (e) for (var t in e) void 0 !== this["_" + t] && (this["_" + t] = e[t]),
        void 0 !== this[t] && this[t].add(e[t])
    },
    t.calcSelectedRadius = function() {
        return Math.round(3 * this.drawStyle.lineWidth / 2) + 1
    },
    t.applyDrawStyle = function() {
        e.UserSettings.LinesDefaults && (this.drawStyle = e.UserSettings.LinesDefaults[this.className] || this.drawStyle)
    },
    t.getParameters = function() {
        return this._parameters
    },
    t.setParameters = function(e) {
        this._parameters = e
    },
    t.deleteParameterByCaption = function(e) {
        for (var t = 0; t < this._parameters.length; t++) if (this._parameters[t].caption == e) {
            this._parameters.splice(t, 1);
            break
        }
    },
    t.getParameterByCaption = function(e) {
        for (var t = this._parameters,
        i = null,
        s = t.length,
        n = 0; n < s; n++) if (i = t[n], i.caption == e) return i;
        return null
    },
    t.setSelected = function(e) {
        this.selected = !!e
    },
    t.getSettingsForSave = function() {
        return {
            className: this.className,
            parameters: this.getParameters(),
            style: this.drawStyle
        }
    },
    t.initImage = function(t) {
        return this.m_canvas || (this.m_canvas = document.createElement("canvas"), this.ctx = this.m_canvas.getContext("2d")),
        this.m_canvas.width = t.canvas.width - e.graphicConst.GraphicWindowRight,
        this.m_canvas.height = this._graphicArea.height,
        this.ctx.translate( - e.graphicConst.GraphicWindowLeft, -this._graphicArea.top),
        this.ctx
    },
    t.endImage = function(t, i) {
        t.drawImage(i.canvas, e.graphicConst.GraphicWindowLeft, this._graphicArea.top),
        delete i.canvas
    },
    t.getIndexByCaption = function(e) {
        for (var t = 0; t < this._parameters.length; t++) if (this._parameters[t].caption == e) return t;
        return - 1
    },
    t = null,
    e.CustomLine = function(t, i) {
        e.CustomLine.base.constructor.apply(this, [t, i]),
        this._parameters.push({
            value: t._graphicWindows.XToDate(i.x),
            type: "time",
            caption: "Time2"
        }),
        this._parameters.push({
            value: t.getValueByCoord(i.y),
            type: "float",
            caption: "Value2"
        }),
        this._parameters.push({
            value: !1,
            type: "boolean",
            caption: "Ray"
        }),
        this.point1 = e.cloneObject(this.centerPoint),
        this.point2 = e.cloneObject(this.centerPoint),
        this.centerDrag = !1,
        this.point2Drag = !0,
        this.point1Drag = !1,
        this._length = 0
    },
    e.initClass(e.CustomLine, e.BaseGraphicObject);
    var i = e.CustomLine.prototype;
    i.getLength = function() {
        return this._length
    },
    i.clone = function() {
        var t = e.CustomLine.base.clone.apply(this);
        return t.point1 = e.cloneObject(this.point1),
        t.point2 = e.cloneObject(this.point2),
        t
    },
    i.outOfData = function() {
        var e = !1,
        t = this._graphicWindows,
        i = t.getFirstDate(),
        s = t.getLastDate();
        if (i > -1 && s > -1) {
            for (var n = 0; n < t.getVisibleBarsCount(); n++) s = t.getNextDate(s);
            var o = this.getParameterByCaption("Time1").value,
            a = this.getParameterByCaption("Time2").value;
            o < i && o >= s && a < i && a >= s && (e = !0)
        }
        return e
    },
    i.setStateAfterLoading = function() {
        this.centerDrag = !1,
        this.point2Drag = !1,
        this.point1Drag = !1
    },
    i.reset = function() {
        this.point1.x = -1,
        this.point1.y = -1,
        this.point2 = e.cloneObject(this.point1)
    },
    i.isVisible = function() {
        for (var e = this._graphicWindows,
        t = !0,
        i = e.getPrevDate(e.getPosition()), s = e.getVisibleBarsCount() - 1, n = 0; n < s; n++) i = e.getPrevDate(i);
        var o = this.getParameterByCaption("Time1").value,
        a = this.getParameterByCaption("Value1").value,
        r = this.getParameterByCaption("Time2").value,
        l = this.getParameterByCaption("Value2").value,
        h = this.centerDrag,
        d = this.point1Drag,
        c = this.point2Drag,
        u = e.getVisiblePositions(),
        g = this._graphicArea,
        p = g.min,
        m = g.max;
        for (o < i && r < i && (h || d || c || (t = !1)), i = u[1], n = 0; n < s; n++) i = u[n + 1];
        return ! (o > i && r > i && !h && !d && !c) && (!(a < p && l < p && !h && !d && !c) && (!(a > m && l > m && !h && !d && !c) && t))
    },
    i._getX = function(t) {
        var i = this._graphicWindows,
        s = i.options,
        n = s.scale,
        o = i.getPosition(),
        a = 1;
        if (o < t) for (var r = 0; o < t;) o = i.getNextDate(o),
        r++,
        a += n;
        if (o > t) for (; o > t;) o = i.getPrevDate(o),
        a -= n;
        return a + e.graphicConst.GraphicWindowLeft + e.UtipFunctions.div(n, 2)
    },
    i.drawBasePoints = function(t) {
        var i = (this._graphicWindows, this._graphicArea),
        s = this._getX(this.getParameterByCaption("Time1").value),
        n = i.getYCoord(this.getParameterByCaption("Value1").value),
        o = this.calcSelectedRadius(),
        a = this.drawStyle.lineColor,
        r = s,
        l = n;
        this.selected && (t.fillStyle = a, t.beginPath(), t.arc(s + .5, n, o, 0, 2 * Math.PI, !0), t.fill(), t.closePath()),
        s = this._getX(this.getParameterByCaption("Time2").value),
        n = i.getYCoord(this.getParameterByCaption("Value2").value);
        var h = s,
        d = n;
        this.selected && (t.fillStyle = a, t.beginPath(), t.arc(s + .5, n, o, 0, 2 * Math.PI, !0), t.fill(), t.closePath()),
        s = e.UtipFunctions.div(r + h, 2),
        n = e.UtipFunctions.div(l + d, 2),
        this.point1.x = r,
        this.point1.y = l,
        this.point2.x = h,
        this.point2.y = d,
        this.centerPoint.x = s,
        this.centerPoint.y = n,
        this.selected && (t.fillStyle = a, t.beginPath(), t.arc(s + .5, n, o, 0, 2 * Math.PI, !0), t.fill(), t.closePath())
    },
    i.drawLine = function(t, i, s, n, o, a, r) {
        r = void 0 != r && r;
        var l = !1,
        h = Math.pow(Math.abs(this.point2.x - this.point1.x), 2),
        d = Math.pow(Math.abs(this.point2.y - this.point1.y), 2),
        c = this.drawStyle,
        u = c.lineWidth,
        g = c.lineStyle,
        p = this._graphicWindows,
        m = p.getWidth(),
        _ = p.getHeight(),
        y = e.graphicConst,
        S = y.GraphicWindowTop,
        f = y.GraphicWindowLeft,
        v = y.GraphicWindowBottom,
        C = y.GraphicWindowRight;
        if (this._length = Math.sqrt(h + d), t.strokeStyle = c.lineColor, t.lineWidth = u, a) if (i == n) i > f && i < m - C && (s > o ? t.drawDashedLine(i, s, n, o, S, e.UtipFunctions.calcLineStyle(g)) : t.drawDashedLine(i, s, n, o, _ - v, e.UtipFunctions.calcLineStyle(g)), this instanceof e.AngleTrendLine && t.drawDashedLine(i, s, m, o, e.UtipFunctions.calcLineStyle(g)), l = !0);
        else if (s == o) s > S && s < _ - v && (i > n ? t.drawDashedLine(i, s, f, o, e.UtipFunctions.calcLineStyle(g)) : t.drawDashedLine(i, s, m - C, s, e.UtipFunctions.calcLineStyle(g)), l = !0);
        else {
            var b = (s - o) / (n - i),
            T = b > 0,
            P = 0,
            D = 0;
            if (T ? (P = (f - i) / (n - i) - (S - s) / (o - s), D = (m - C - i) / (n - i) - (_ - v - s) / (o - s)) : (P = (f - i) / (n - i) - (_ - v - s) / (o - s), D = (m - C - i) / (n - i) - (S - s) / (o - s)), P > 0 && D < 0 || P < 0 && D > 0) {
                var I = 0,
                w = 0,
                M = 0,
                O = 0;
                r ? (I = i, w = s, M = i > n ? f: m - C) : (I = f, w = Math.round((I - i) * (o - s) / (n - i)) + s, M = m - C),
                O = Math.round((M - i) * (o - s) / (n - i)) + s,
                t.drawDashedLine(I, w, M, O, e.UtipFunctions.calcLineStyle(g)),
                l = !0
            }
            t.lineWidth = u,
            this instanceof e.AngleTrendLine && t.drawDashedLine(i, s, m, s, e.UtipFunctions.calcLineStyle(g))
        } else t.drawDashedLine(i, s, n, o, e.UtipFunctions.calcLineStyle(g)),
        t.lineWidth = u,
        this instanceof e.AngleTrendLine && t.drawDashedLine(i, s, Math.round(i + Math.abs(n - i)), s, e.UtipFunctions.calcLineStyle(g)),
        l = !0;
        return l
    },
    i.pointMove = function(t, i, s) {
        switch (s) {
        case e.linePoint.lpStart:
            this.getParameterByCaption("Time1").value = this._graphicWindows.XToDate(this.point1.x + t),
            this.getParameterByCaption("Value1").value = this._graphicArea.getValueByCoord(this.point1.y + i);
            break;
        case e.linePoint.lpCenter:
            this.getParameterByCaption("Time1").value = this._graphicWindows.XToDate(this.point1.x + t),
            this.getParameterByCaption("Value1").value = this._graphicArea.getValueByCoord(this.point1.y + i),
            this.getParameterByCaption("Time2").value = this._graphicWindows.XToDate(this.point2.x + t),
            this.getParameterByCaption("Value2").value = this._graphicArea.getValueByCoord(this.point2.y + i);
            break;
        case e.linePoint.lpEnd:
            this.getParameterByCaption("Time2").value = this._graphicWindows.XToDate(this.point2.x + t),
            this.getParameterByCaption("Value2").value = this._graphicArea.getValueByCoord(this.point2.y + i)
        }
    },
    i.pointsEqual = function(e, t) {
        return e.x == t.x && e.y == t.y
    },
    i.checkLineOn = function(e, t, i, s, n, o) {
        var a = !1,
        r = (e - i) * (o - s) - (t - s) * (n - i),
        l = this.calcSelectedRadius();
        return Math.abs(r) < 5 * this.drawStyle.lineWidth * this._length && (a = !0, null != this.getParameterByCaption("Ray") && this.getParameterByCaption("Ray").value || (i < n ? (e < i - l || e > n + l) && (a = !1) : i == n ? Math.abs(e - i) > l && (a = !1) : (e < n - l || e > i + l) && (a = !1), s < o ? (t < s - l || t > o + l) && (a = !1) : s == o ? Math.abs(t - s) > l && (a = !1) : (t < o - l || t > s + l) && (a = !1))),
        a
    },
    i.isUnderCursor = function(e, t) {
        var i = !1;
        return i = this.pointsEqual(this.point1, this.point2) ? Math.abs(this.point1.x - e) < 10 && Math.abs(this.point1.y - t) < 10 : this.checkLineOn(e, t, this.point1.x, this.point1.y, this.point2.x, this.point2.y)
    },
    i.nearestPoint = function(t, i) {
        var s = Math.sqrt(Math.pow(this.point1.x - t, 2) + Math.pow(this.point1.y - i, 2)),
        n = e.linePoint.lpStart,
        o = Math.sqrt(Math.pow(this.centerPoint.x - t, 2) + Math.pow(this.centerPoint.y - i, 2));
        return s > o && (s = o, n = e.linePoint.lpCenter),
        o = Math.sqrt(Math.pow(this.point2.x - t, 2) + Math.pow(this.point2.y - i, 2)),
        s > o && (s = o, n = e.linePoint.lpEnd),
        n
    },
    i = null,
    e.CustomFibo = function(t, i) {
        e.CustomFibo.base.constructor.apply(this, [t, i]),
        this._parameters.push({
            value: 0,
            type: "integer",
            caption: "Fibo Levels"
        }),
        this.drawFiboStyle = {
            lineWidth: 1,
            lineColor: "#FF8C00",
            lineStyle: "solid"
        }
    },
    e.initClass(e.CustomFibo, e.CustomLine);
    var s = e.CustomFibo.prototype;
    return s.clone = function() {
        var t = e.CustomFibo.base.clone.apply(this);
        return t.drawFiboStyle = e.cloneObject(this.drawFiboStyle),
        t
    },
    s.drawFiboLines = function(t, i, s, n, o, a, r) {
        t.save(),
        t.translate(.5, .5);
        var l, h, d = !1,
        c = this.drawFiboStyle,
        u = c.lineColor,
        g = e.graphicConst,
        p = g.GraphicWindowLeft;
        t.strokeStyle = u,
        t.lineWidth = c.lineWidth,
        t.fillStyle = u,
        t.font = "7pt Roboto";
        var m = this.getIndexByCaption("Fibo Levels");
        m++;
        var _ = this._parameters,
        y = _.length;
        for (m; m < y; m++) {
            var S = !1,
            f = o + Math.round((s - o) * _[m].value);
            if (i < n) {
                var v = i + Math.round(3 * Math.abs(i - n));
                a ? (l = this._graphicWindows.getWidth(), h = g.GraphicWindowRight, f > g.GraphicWindowTop && f < this._graphicArea.height - g.GraphicWindowBottom && i < l - h && (i = i > p ? i: p, t.drawDashedLine(i, f, l - h, f, this.calcFiboLineStyle()), S = !0)) : t.drawDashedLine(i, f, v, f, this.calcFiboLineStyle())
            } else v = n + Math.round(3 * Math.abs(i - n)),
            a ? (l = this._graphicWindows.getWidth(), h = g.GraphicWindowRight, f > g.GraphicWindowTop && f < this._graphicArea.height - g.GraphicWindowBottom && n < l - h && (n = n > p ? n: p, t.drawDashedLine(n, f, l - h, f, this.calcFiboLineStyle()), S = !0)) : t.drawDashedLine(n, f, v, f, this.calcFiboLineStyle());
            v = i > n ? n: i;
            var C = v,
            b = f - 5;
            S && v <= p && (C = p),
            t.fillText(_[m].caption + "", C, b)
        }
        return t.restore(),
        d
    },
    s.calcFiboLineStyle = function() {
        switch (this.drawFiboStyle.lineStyle) {
        case "solid":
            return [0];
        case "long_dash":
            return [3, 5];
        case "dotted":
            return [3, 3];
        case "dot_dash":
            return [10, 3, 1, 3];
        case "dash_two_dots":
            return [10, 3, 1, 3, 1, 3]
        }
    },
    s.applyDrawStyle = function() {
        e.UserSettings.LinesDefaults && e.UserSettings.LinesDefaults[this.className] && (this.drawStyle = e.UserSettings.LinesDefaults[this.className].drawStyle, this.drawFiboStyle = e.UserSettings.LinesDefaults[this.className].drawFiboStyle)
    },
    s.getSettingsForSave = function() {
        return {
            className: this.className,
            parameters: this.getParameters(),
            style: this.drawStyle,
            fiboStyle: this.drawFiboStyle
        }
    },
    s = null,
    e
}),
define("lines/baseLines", ["graphicObject"],
function(e) {
    function t(t, i) {
        var s = t.strokeStyle,
        n = e.hexToRgb(s),
        o = t.lineWidth,
        a = i.x,
        r = i.y,
        l = i.r,
        h = i.sA,
        d = i.fC;
        t.lineWidth = 1,
        t.strokeStyle = e.rgbToRgba(n.r, n.g, n.b, i.o),
        t.beginPath(),
        t.arc(a, r, l, h, 2 * Math.PI),
        t.stroke(),
        t.closePath(),
        t.lineWidth = o;
        var c, u;
        d ? (c = h, u = 2 * Math.PI) : (c = h - .5 * Math.PI, u = Math.PI),
        t.strokeStyle = s,
        t.beginPath(),
        t.arc(a, r, l, c, u),
        t.stroke(),
        t.closePath()
    }
    function i(e, t) {
        var i = e.lineWidth,
        s = t.x,
        n = t.y;
        e.lineWidth = 1,
        e.beginPath(),
        e.arc(s, n, t.r, t.sA, 2 * Math.PI),
        e.stroke(),
        e.closePath(),
        e.lineWidth = i
    }
    function s(e, t) {
        var i = t.x,
        s = t.y;
        e.beginPath(),
        e.drawLine(i - 7, s, i - 1, s + 6),
        e.stroke(),
        e.drawLine(i - 1, s + 6, i + 7, s - 4),
        e.stroke(),
        e.closePath()
    }
    function n(e, t) {
        var i = t.x,
        s = t.y;
        e.beginPath(),
        e.drawLine(i, s, i, s - 7.5),
        e.drawLine(i, s, i + 5, s + 5),
        e.stroke(),
        e.closePath()
    }
    function o(e, t) {
        var i = t.x,
        s = t.y;
        e.beginPath(),
        e.drawLine(i - 7.5, s, i + 7.5, s),
        e.stroke(),
        e.drawLine(i + 7.5, s, i + 2.5, s - 5),
        e.stroke(),
        e.drawLine(i + 7.5, s, i + 2.5, s + 5),
        e.stroke(),
        e.closePath()
    }
    e.drawOptionSettingsLine = function(a, r, l, h, d, c, u) {
        var g = a.getGraphicArea(),
        p = a.getGraphicArea().getGraphicWindows(),
        m = e.getOptionLineTypes(),
        _ = p.getPosition(),
        y = r.getContext("2d");
        e.graphicConst.GraphicWindowTop + 75;
        if (! (l < _)) {
            var S = p.getWidth() - e.graphicConst.GraphicWindowRight,
            f = p.DateToX(l, S),
            v = e.graphicConst.GraphicWindowTop + 50;
            if (! (f > S)) {
                y.save(),
                y.strokeStyle = d === m[0] ? p.options.colorScheme.openDateLine: d === m[1] ? p.options.colorScheme.stopLine: p.options.colorScheme.expiryLine;
                var C = y.strokeStyle,
                b = e.hexToRgb(C),
                T = u ? 1 : .7;
                y.strokeStyle = e.rgbToRgba(b.r, b.g, b.b, T),
                y.lineWidth = 2;
                var P = c.mainLine,
                D = 120;
                for (var I in c) {
                    var w = c[I];
                    if (w !== P && w !== -1) {
                        var M = p.DateToX(w, S),
                        O = f,
                        L = Math.abs(M - O);
                        M > S || O > S || u || (D = L < D ? L: D)
                    }
                }
                D /= 120,
                D = D > 1 ? 1 : D,
                u ? t(y, {
                    x: f,
                    y: g.top + v,
                    r: 15,
                    sA: 0,
                    t: h,
                    o: T / 2,
                    fC: !0
                }) : (y.strokeStyle = e.rgbToRgba(b.r, b.g, b.b, T * D), i(y, {
                    x: f,
                    y: g.top + v,
                    r: 15,
                    sA: 0,
                    t: h
                })),
                d === m[0] ? o(y, {
                    x: f,
                    y: g.top + v
                }) : d === m[1] ? n(y, {
                    x: f,
                    y: g.top + v
                }) : s(y, {
                    x: f,
                    y: g.top + v
                }),
                y.fillStyle = y.strokeStyle,
                y.font = "13px Roboto",
                y.textAlign = "center",
                y.textBaseline = "top",
                y.beginPath(),
                y.fillText(h, f, g.top + v - 35),
                y.closePath(),
                y.strokeStyle = e.rgbToRgba(b.r, b.g, b.b, T),
                d === m[0] || d === m[1] && !u ? y.drawDashedLine(f + .5, g.top + 75, f + .5, g.top + 2 + g.heightForBorders, [3, 3]) : y.drawLine(f + .5, g.top + 75, f + .5, g.top + 2 + g.heightForBorders),
                y.strokeStyle = C,
                y.restore()
            }
        }
    },
    e.drawOptionIntervalLine = function(t, i, s, n, o, a) {
        var r = t.getGraphicArea(),
        l = r.getGraphicWindows(),
        h = r.max,
        d = s.value;
        if (! (d < r.min || d > h || d > h)) {
            var c, u, g = i.getContext("2d"),
            p = l.options,
            m = p.colorScheme,
            _ = {};
            _.y = r.getYCoord(d),
            c = "topBorder" == s.type ? "Range" === a ? m.topRangeOptionLine: m.topOneTouchOptionLine: "Range" === a ? m.bottomRangeOptionLine: m.bottomOneTouchOptionLine,
            g.strokeStyle = c,
            g.fillStyle = c;
            var y = e.graphicConst,
            S = y.GraphicWindowLeft,
            f = y.GraphicWindowRight,
            v = l.getWidth(),
            C = _.y - 2,
            b = g.lineWidth;
            g.lineWidth = 1.25,
            u = c;
            var T = t.getLastDate(l._position).key,
            P = t.getValue(T, "close"),
            D = 1,
            I = r.getYCoord(P),
            w = Math.abs(C - I),
            M = e.hexToRgb(c);
            w <= 20 && w >= 0 && (D = ~~ (w / 2) / 10),
            c = e.rgbToRgba(M.r, M.g, M.b, D),
            g.strokeStyle = u,
            g.fillStyle = u,
            g.drawDashedLine(S, C + 1, S + v - f - 5, C + 1, [5, 5]),
            g.lineWidth = b,
            g.textBaseline = "top",
            g.fillText(n, S + 5, C - 12);
            var O = r.graphicObjects[0].getSymbolName(),
            L = e.SymbolsData.getSymbols()[O],
            k = e.numberFormat(s.value, L.getDigits(), ".", " ");
            S = S + l.getWidth() - f + 2,
            v = g.measureText(k).width + 25;
            var B = _.y - 5,
            N = 20;
            g.fillStyle = c,
            g.fillRect(S, B - 6, v, N),
            g.fillStyle = e.rgbToRgba(255, 255, 255, D),
            g.textBaseline = "top",
            g.fillText(k, S + 4, B - 2),
            g.strokeStyle = c,
            g.fillStyle = c,
            g.moveTo(S, B - 6),
            g.lineTo(S - 10, B - 5.5 + N / 2),
            g.lineTo(S, B - 6 + N),
            g.fill(),
            g.stroke(),
            g.closePath()
        }
    },
    e._TradeLine = function(t, i) {
        this._id = 0,
        this._orderType = "",
        this._openPrice = 0,
        this._takeProfit = 0,
        this._stopLoss = 0,
        this._optionHigh = 0,
        this._optionLow = 0,
        this._lineType = e.TradeLineType.openPrice,
        this._title = "",
        e._TradeLine.base.constructor.apply(this, [t, i]),
        this.selected = !1
    },
    e.initClass(e._TradeLine, e.BaseGraphicObject);
    var a = e._TradeLine.prototype;
    a.getID = function() {
        return this._id
    },
    a.getOrderType = function() {
        return this._orderType
    },
    a.getLineType = function() {
        return this._lineType
    },
    a.setTakeProfit = function(e) {
        this._takeProfit = e
    },
    a.setStopLoss = function(e) {
        this._stopLoss = e
    },
    a.setOpenPrice = function(e) {
        this._openPrice = e
    },
    a.setOptionHigh = function(e) {
        this._optionHigh = e
    },
    a.setOptionLow = function(e) {
        this._optionLow = e
    },
    a.getValue = function() {
        switch (this._lineType) {
        case e.TradeLineType.openPrice:
            return this._openPrice;
        case e.TradeLineType.stopLoss:
            return this._stopLoss;
        case e.TradeLineType.takeProfit:
            return this._takeProfit;
        default:
            return "high" === e.TradeLineType.optionLineHighOrLow(this._lineType) ? this._optionHigh: "low" === e.TradeLineType.optionLineHighOrLow(this._lineType) ? this._optionLow: this._openPrice
        }
    },
    a._selectLineColor = function(t, i, s) {
        switch (s) {
        case e._TraderData.positionType.buy:
            t.strokeStyle = i.positionLineBuy;
            break;
        case e._TraderData.positionType.sell:
            t.strokeStyle = i.positionLineSell;
            break;
        case e._TraderData.pendingOrderType[100]:
        case e._TraderData.pendingOrderType[102]:
            t.strokeStyle = i.pendingOrderLineBuy;
            break;
        case e._TraderData.pendingOrderType[101]:
        case e._TraderData.pendingOrderType[103]:
            t.strokeStyle = i.pendingOrderLineSell;
            break;
        default:
            t.strokeStyle = i.positionLineBuy
        }
    },
    a._selectTPColor = function(t, i, s) {
        switch (s) {
        case e._TraderData.positionType.buy:
        case e._TraderData.pendingOrderType[100]:
        case e._TraderData.pendingOrderType[102]:
            t.strokeStyle = i.takeProfitLineBuy;
            break;
        case e._TraderData.positionType.sell:
        case e._TraderData.pendingOrderType[101]:
        case e._TraderData.pendingOrderType[103]:
            t.strokeStyle = i.takeProfitLineSell;
            break;
        default:
            t.strokeStyle = i.takeProfitLineBuy
        }
    },
    a._selectSLColor = function(t, i, s) {
        switch (s) {
        case e._TraderData.positionType.buy:
        case e._TraderData.pendingOrderType[100]:
        case e._TraderData.pendingOrderType[102]:
            t.strokeStyle = i.stopLossLineBuy;
            break;
        case e._TraderData.positionType.sell:
        case e._TraderData.pendingOrderType[101]:
        case e._TraderData.pendingOrderType[103]:
            t.strokeStyle = i.stopLossLineSell;
            break;
        default:
            t.strokeStyle = i.stopLossLineBuy
        }
    },
    a.draw = function(t, i) {
        var s = this.getValue();
        if (! (s < this._graphicArea.min || s > this._graphicArea.max && !this.centerDrag || s > this._graphicArea.max)) {
            var n = this._graphicArea._graphicWindows.options.colorScheme,
            o = "";
            if ("Sell" === this._orderType) {
                n.positionLineSell
            } else if ("Buy" === this._orderType) {
                n.positionLineBuy
            }
            switch (this.centerPoint.y = this._graphicArea.getYCoord(s), this._lineType) {
            case e.TradeLineType.openPrice:
                o = this._id > 0 ? this._orderType + ": " + this._id: this._orderType,
                this._selectLineColor(t, n, this._orderType),
                t.fillStyle = t.strokeStyle;
                break;
            case e.TradeLineType.takeProfit:
                o = "TP: " + this._id,
                this._selectTPColor(t, n, this._orderType),
                t.fillStyle = t.strokeStyle;
                break;
            case e.TradeLineType.stopLoss:
                o = "SL: " + this._id,
                this._selectSLColor(t, n, this._orderType),
                t.fillStyle = t.strokeStyle;
                break;
            case e.TradeLineType.optionClassicHigh:
            case e.TradeLineType.optionExpressHigh:
                t.strokeStyle = n.highOptionPositionLine,
                t.fillStyle = t.strokeStyle;
                break;
            case e.TradeLineType.optionClassicLow:
            case e.TradeLineType.optionExpressLow:
                t.strokeStyle = n.lowOptionPositionLine,
                t.fillStyle = t.strokeStyle;
                break;
            case e.TradeLineType.optionOneTouchTop:
                t.strokeStyle = n.topOneTouchOptionLine,
                t.fillStyle = n.topOneTouchOptionLine;
                break;
            case e.TradeLineType.optionOneTouchBottom:
                t.strokeStyle = n.bottomOneTouchOptionLine,
                t.fillStyle = n.bottomOneTouchOptionLine;
                break;
            case e.TradeLineType.optionRangeTop:
                t.strokeStyle = n.topRangeOptionLine,
                t.fillStyle = n.topRangeOptionLine;
                break;
            case e.TradeLineType.optionRangeBottom:
                t.strokeStyle = n.bottomRangeOptionLine,
                t.fillStyle = n.bottomRangeOptionLine
            }
            if (this.drawLine(t, o, i), this.selected) {
                var a = this.getLineType(),
                r = this.getOrderType(),
                l = !(r == e._TraderData.positionType.buy || r == e._TraderData.positionType.sell),
                h = this.getID(),
                d = null,
                c = l ? e.TraderData.getPendingOrderByID(h) : e.TraderData.getPositionById(h);
                s = a == e.TradeLineType.takeProfit ? e.parseFloat(c.takeProfit) : a == e.TradeLineType.stopLoss ? e.parseFloat(c.stopLoss) : e.parseFloat(c.openPrice),
                d = this._graphicArea.getYCoord(this.getValue());
                var u = this.isStopLevel(null, d, null);
                if (u.success) if (this.used) u.valueSetterFunc(s);
                else for (var g = this._graphicArea.graphicObjects,
                p = g.length,
                m = null,
                _ = 1; _ < p; _++) m = g[_],
                m instanceof e._TradeLine && (m.used = !1)
            }
        }
    },
    a.getImgForLine = function() {
        var t = this._orderType;
        return t = t || this._lineType,
        "Sell" === t ? e.FontIcons.SellLine: "Buy" === t ? e.FontIcons.BuyLine: "Buy Limit" === t ? e.FontIcons.BuyLimitLine: "Buy Stop" === t ? e.FontIcons.BuyStopLine: "Sell Limit" === t ? e.FontIcons.SellLimitLine: "Sell Stop" === t ? e.FontIcons.SellStopLine: t === e.TradeLineType.optionExpressHigh || t === e.TradeLineType.optionClassicHigh ? e.FontIcons.HighOptionLine: t === e.TradeLineType.optionExpressLow || t === e.TradeLineType.optionClassicLow ? e.FontIcons.LowOptionLine: t === e.TradeLineType.optionOneTouchTop ? e.FontIcons.TopOneTouchLine: t === e.TradeLineType.optionOneTouchBottom ? e.FontIcons.BottomOneTouchLine: t === e.TradeLineType.optionRangeInside ? e.FontIcons.InsideRangeLine: t === e.TradeLineType.optionRangeOutside ? e.FontIcons.OutsideRangeLine: void 0
    },
    a.isPendingOrderTypeLine = function() {
        var t = this.getOrderType();
        return t !== e._TraderData.positionType.buy && t !== e._TraderData.positionType.sell && void 0 !== typeof t
    },
    a.drawLine = function(t, i, s) {
        var n = e.graphicConst.GraphicWindowLeft,
        o = e.graphicConst.GraphicWindowRight,
        a = this._graphicArea,
        r = a.getGraphicWindows(),
        l = r.getWidth(),
        h = r.options,
        d = this.getImgForLine(),
        c = t.strokeStyle,
        u = this._lineType,
        g = e.TradeLineType,
        p = this.centerPoint,
        m = (p.x, p.y),
        _ = e.hexToRgba(c, .75);
        t.strokeStyle = _;
        var y = (this.getOrderType(), this.isPendingOrderTypeLine()),
        S = t.lineWidth;
        if (t.lineWidth = 1.25, u == g.takeProfit || u == g.stopLoss || y ? t.drawDashedLine(n, m - .5, n + l - o - 10, m - .5, [5, 5]) : t.drawLine(n, m - .5, n + l - o - 7, m - .5, _), t.lineWidth = S, t.font = "11px Roboto", t.textBaseline = "top", t.fillText(i, n + 5, m - 13), (u == g.takeProfit || u == g.stopLoss || y) && this.selected) {
            var f = this.calcSelectedRadius(),
            v = Math.PI;
            t.fillStyle = [3, 3],
            t.beginPath(),
            t.arc(n, m, f, 0, 2 * v, !0),
            t.fill(),
            t.closePath(),
            t.beginPath(),
            t.arc(n + l - o + 1, m, f, 0, 2 * v, !0),
            t.fill(),
            t.closePath()
        }
        var C = (h.colorScheme, a.graphicObjects[0].getSymbolName()),
        b = e.SymbolsData.getSymbols()[C],
        T = e.numberFormat(this.getValue(), b.getDigits(), ".", " "),
        P = "";
        n = n + r.getWidth() - o + 2,
        l = t.measureText(T).width + 25;
        var D = m - 5,
        I = 20;
        u === g.takeProfit ? (P = "TP", d = "") : u === g.stopLoss && (P = "SL", d = ""),
        void 0 === s && (s = 1);
        var w = e.hexToRgba(c, s);
        t.beginPath(),
        t.fillStyle = w,
        t.fillRect(n, D - 6, l, I),
        t.fillStyle = e.hexToRgba(h.colorScheme.textOfPriceLevel, s),
        t.textBaseline = "top",
        t.font = "12px icomoon",
        t.fillText(d, n + 2, D - 2),
        t.font = "12px RobotoBold",
        t.fillText(P, n + 1, D - 2),
        t.font = "11px Roboto",
        t.fillText(T, n + 19, D - 2),
        t.closePath(),
        t.beginPath(),
        t.fillStyle = w,
        t.strokeStyle = w,
        t.moveTo(n, D - 6),
        t.lineTo(n - 10, D - 6 + I / 2),
        t.lineTo(n, D - 6 + I),
        t.fill(),
        t.stroke(),
        t.closePath()
    },
    a.isUnderCursor = function(e, t) {
        return Math.abs(this.centerPoint.y - t) < 20
    },
    a.isStopLevel = function(t, i, s) {
        var n, o = {
            success: !1
        },
        a = e.TradeLineType.takeProfit,
        r = e.TradeLineType.stopLoss,
        l = e.TradeLineType.openPrice,
        h = e._TraderData,
        d = e.TraderData,
        c = h.positionType.buy,
        u = h.positionType.sell,
        g = e.requestPendingOrderType,
        p = this._id,
        m = this._orderType,
        _ = this.isPendingOrderTypeLine(),
        y = _ ? d.getPendingOrderByID(p) : d.getPositionById(p),
        S = e.SymbolsData.getSymbols()[y.symbolName],
        f = this._lineType,
        v = S.getPrecision(),
        C = e.parseFloat(S.getStopLevel()) / v,
        b = n = Math.floor(this._graphicArea.getValueByCoord(i) * v) / v,
        T = _ && this._lineType != l ? e.parseFloat(y.openPrice) : e.parseFloat(y.positionType == c ? S.getAsk() : S.getBid()),
        P = T,
        D = !1,
        I = f == a ? this.setTakeProfit.bind(this) : f == r ? this.setStopLoss.bind(this) : this.setOpenPrice.bind(this);
        if (_ && f == l) {
            for (var w = P = e.parseFloat(parseInt(y.pendingOrderType) == g.BuyLimit || parseInt(y.pendingOrderType) == g.BuyStop ? S._Bid: S._Ask), M = this.getValue(), O = this._graphicArea.orderLineExists(p, m), L = [O.takeProfitLine || {
                getValue: function() {
                    return - 1
                }
            },
            O.stopLossLine || {
                getValue: function() {
                    return - 1
                }
            },
            {
                getValue: function() {
                    return P
                }
            }].sort(function(e, t) {
                return t.getValue() < e.getValue() ? -1 : 1
            }), k = -1, B = L.length, N = 0; N < B; N++) {
                var x = L[N].getValue();
                x <= M && x != -1 && k == -1 && (k = N - 1),
                L[N] = x
            }
            if (k != -1) {
                var A = L[k],
                V = L[k + 1],
                E = A - b <= C,
                F = b - V <= C;
                E && !F ? (n = A - C - 1 / v, o.success = !0) : !E && F && (n = V + C + 1 / v, o.success = !0)
            } else {
                var W = n,
                R = C;
                D = M > w,
                D && (w += W, W = w - W, w -= W, R *= -1);
                var H = Math.abs(R);
                w - W <= H && (n = P - R - 1 / v * (R / H), o.success = !0)
            }
        } else {
            if (_) {
                var K = parseInt(y.pendingOrderType),
                G = K == g.SellLimit || K == g.SellStop,
                U = K == g.BuyLimit || K == g.BuyStop;
                D = f == a && G || f == r && U
            } else D = f == a && y.positionType == u || f == r && y.positionType == c;
            D && (b += T, T = b - T, b -= T, C *= -1);
            var q = Math.abs(C);
            b - T <= q && (n = P + C + 1 / v * (C / q), o.success = !0)
        }
        return o.valueSetterFunc = I,
        o.currentValue = n,
        o.order = y,
        o
    },
    a.pointMove = function(t, i, s) {
        var n = this.isStopLevel(t, i, s);
        n.success || n.valueSetterFunc(n.currentValue);
        var o = this._graphicArea,
        a = o.markers;
        if (!e.valueIsEmpty(a)) {
            var r = e._TraderData,
            l = (r.positionType.buy, r.positionType.sell, this._orderType, this.isPendingOrderTypeLine());
            if (l) {
                var h = e.TraderData.getPendingOrderByID(this._id),
                d = this._openPrice,
                c = (this._id + "_" + e.UtipFunctions.getPositionPostfixType(h), o.markers[this._id + "_" + e.UtipFunctions.getPositionPostfixType(h)]);
                c.updatePrice(d ? d.toString() : h.openPrice)
            }
        }
    },
    a = null,
    e.TradeLineType = {
        openPrice: 1,
        takeProfit: 2,
        stopLoss: 3,
        optionExpressHigh: 4,
        optionExpressLow: 5,
        optionClassicHigh: 6,
        optionClassicLow: 7,
        optionOneTouchTop: 8,
        optionOneTouchBottom: 9,
        optionRangeInside: 10,
        optionRangeOutside: 11,
        optionRangeTop: 12,
        optionRangeBottom: 13,
        optionLineHighOrLow: function(e) {
            return "number" != typeof e ? null: e === this.optionExpressHigh || e === this.optionClassicHigh || e === this.optionOneTouchTop || e === this.optionRangeTop ? "high": e === this.optionExpressLow || e === this.optionClassicLow || e === this.optionOneTouchBottom || e === this.optionRangeBottom ? "low": null
        },
        isOptionLine: function(e) {
            return [this.openPrice, this.takeProfit, this.stopLoss].indexOf(e) === -1
        }
    },
    e.VerticalLine = function(e, t) {
        this._graphicArea = e,
        this._graphicWindows = e._graphicWindows,
        this._parameters = [],
        this.className = "TVerticalLine",
        this._parameters.push({
            value: this._graphicWindows.XToDate(t.x),
            type: "time",
            caption: "Time1"
        }),
        this.selected = !0,
        this.centerDrag = !1,
        this.centerPoint = t,
        this.drawStyle = {
            lineWidth: 1,
            lineColor: "#ff0000",
            lineStyle: "solid"
        },
        this._graphicWindows.addVerticalLine(this)
    },
    e.initClass(e.VerticalLine, e.BaseGraphicObject);
    var r = e.VerticalLine.prototype;
    r.isUnderCursor = function(e, t) {
        return Math.abs(this.centerPoint.x - e) < 10
    },
    r.pointMove = function(e, t, i) {
        this._parameters[0].value = this._graphicWindows.XToDate(e)
    },
    r.draw = function(t) {
        this.centerPoint.x = -1;
        var i = this.getGraphicWindows(),
        s = i.getHeight() - 2.5,
        n = i.getPosition(),
        o = e.graphicConst,
        a = o.GraphicWindowTop,
        r = this.getParameters()[0].value,
        l = o.GraphicWindowBottom,
        h = this.centerDrag;
        if (! (r < n) || h) {
            var d = i.getWidth() - o.GraphicWindowRight,
            c = i.DateToX(r, d);
            if (! (c > d) || h) {
                var u = this.drawStyle,
                g = u.lineColor;
                if (this.centerPoint.x = c, this.selected) {
                    a = o.GraphicWindowTop;
                    var p = this.calcSelectedRadius();
                    t.fillStyle = g,
                    t.beginPath(),
                    t.arc(c + .5, a, p, 0, 2 * Math.PI, !0),
                    t.fill(),
                    t.closePath(),
                    t.beginPath(),
                    t.arc(c + .5, s - l, p, 0, 2 * Math.PI, !0),
                    t.fill(),
                    t.closePath()
                }
                t.strokeStyle = g,
                t.lineWidth = u.lineWidth,
                t.drawDashedLine(c + .5, a, c + .5, s - l + 4, e.UtipFunctions.calcLineStyle(u.lineStyle));
                var m = e.UtipFunctions.formattedDateForChart(r, i.getPeriod()),
                _ = c - 12,
                y = 5 + t.measureText(m).width + 4,
                S = 20;
                a = s - l + 4,
                t.fillStyle = g,
                t.fillRect(_ - 20, a - 4, y, S),
                t.fillStyle = i.options.colorScheme.text,
                t.textBaseline = "top",
                t.fillText(m, _ - 16, a - 1),
                t.lineWidth = 1
            }
        }
    },
    r = null,
    e.HorizontalLine = function(t, i) {
        e.HorizontalLine.base.constructor.apply(this, [t, i]),
        this.className = "THorizontalLine",
        this._graphicWindows = t._graphicWindows,
        this.deleteParameterByCaption("Time1")
    },
    e.initClass(e.HorizontalLine, e.BaseGraphicObject);
    var l = e.HorizontalLine.prototype;
    l.isUnderCursor = function(e, t) {
        return Math.abs(this.centerPoint.y - t) < 10
    },
    l.pointMove = function(e, t, i) {
        this._parameters[0].value = this._graphicArea.getValueByCoord(t)
    },
    l.draw = function(t) {
        var i = this._parameters[0].value,
        s = this.getGraphicArea(),
        n = s.topForBorders,
        o = this.getGraphicWindows(),
        a = o.getWidth(),
        r = e.graphicConst,
        l = r.GraphicWindowLeft,
        h = r.GraphicWindowRight;
        if (! (i < s.min || i > s.max && !this.centerDrag)) {
            var d = this.centerPoint.y = s.getYCoord(i),
            c = this.drawStyle,
            u = c.lineColor;
            if (this.selected) {
                var g = this.calcSelectedRadius();
                t.fillStyle = u,
                t.beginPath(),
                t.arc(l, d + .5, g, 0, 2 * Math.PI, !0),
                t.fill(),
                t.closePath(),
                t.beginPath(),
                t.arc(l + a - h + 1, d + .5, g, 0, 2 * Math.PI, !0),
                t.fill(),
                t.closePath()
            }
            if (t.strokeStyle = u, t.lineWidth = c.lineWidth, t.drawDashedLine(l + 1.5, d + .5, l + a - h + 5, d + .5, e.UtipFunctions.calcLineStyle(c.lineStyle)), d > n && d < n + s.heightForBorders) {
                var p = s.graphicObjects[0];
                if (p instanceof e.Chart) var m = e.SymbolsData.getSymbols()[p.getSymbolName()],
                _ = m.getDigits();
                var y = e.numberFormat(i, _, ".", " "),
                S = d - 5,
                f = t.measureText(y).width + 25,
                v = 20;
                l = l + a - h + 5,
                t.fillStyle = u,
                t.fillRect(l, S - 4, f, v),
                t.fillStyle = o.options.colorScheme.text,
                t.textBaseline = "top",
                t.fillText(y, l + 4, S - 1)
            }
            t.lineWidth = 1
        }
    },
    l = null,
    e.TrendLine = function(t, i) {
        e.TrendLine.base.constructor.apply(this, [t, i]),
        this.className = "TTrendLine",
        this._graphicWindows = t._graphicWindows
    },
    e.initClass(e.TrendLine, e.CustomLine);
    var h = e.TrendLine.prototype;
    h.draw = function(e) {
        if (!this.outOfData() && (this.getParameterByCaption("Ray").value || (this.reset(), this.isVisible()))) {
            var t = this.initImage(e);
            this.drawBasePoints(t),
            this.drawLine(t, this.point1.x, this.point1.y, this.point2.x, this.point2.y, this.getParameterByCaption("Ray").value, !0),
            this.endImage(e, t)
        }
    },
    h = null,
    e.AngleTrendLine = function(t, i) {
        e.AngleTrendLine.base.constructor.apply(this, [t, i]),
        this.className = "TAngleTrendLine",
        this._parameters.push({
            value: 0,
            type: "float",
            caption: "Angle"
        })
    },
    e.initClass(e.AngleTrendLine, e.TrendLine);
    var d = e.AngleTrendLine.prototype;
    return d.draw = function(t) {
        e.AngleTrendLine.base.draw.apply(this, [t]);
        var i = 0,
        s = this.point2.x - this.point1.x,
        n = this.point2.y - this.point1.y,
        o = Math.sqrt(Math.pow(s, 2) + Math.pow(n, 2));
        0 != o && (i = e.UtipFunctions.radToDeg(Math.acos(s / o)), n > 0 && (i = e.UtipFunctions.radToDeg(2 * Math.PI) - i)),
        this.getParameterByCaption("Angle").value = i
    },
    d = null,
    e.getLineObjectNamesArray = function() {
        return ["THorizontalLine", "TVerticalLine", "TTrendLine", "TFiboLines", "TAngleTrendLine"]
    },
    e
}),
define("positionMark", ["graphicObject"],
function(e) {
    var t = 16;
    e._PositionMark = function(t, i) {
        this._markerId = null,
        this._symblName = "",
        this._positionId = "",
        this._graphicArea = t || e.activeChart.graphicAreas[0],
        e._PositionMark.base.constructor.apply(this, [t, i]),
        this.selected = !1
    };
    var i = e.imagePreload(["res/img/PositionMarks/Sell.png", "res/img/PositionMarks/Buy.png", "res/img/PositionMarks/Up.png", "res/img/PositionMarks/Down.png", "res/img/PositionMarks/Lower.png", "res/img/PositionMarks/Upper.png", "res/img/PositionMarks/Inside.png", "res/img/PositionMarks/Outside.png", "res/img/PositionMarks/Buy_Limit.png", "res/img/PositionMarks/Buy_Stop.png", "res/img/PositionMarks/Sell_Limit.png", "res/img/PositionMarks/Sell_Stop.png", "res/img/PositionMarks/Sell_select.png", "res/img/PositionMarks/Buy_select.png", "res/img/PositionMarks/Up_select.png", "res/img/PositionMarks/Down_select.png", "res/img/PositionMarks/Lower_select.png", "res/img/PositionMarks/Upper_select.png", "res/img/PositionMarks/Inside_select.png", "res/img/PositionMarks/Outside_select.png", "res/img/PositionMarks/Buy_Limit_select.png", "res/img/PositionMarks/Buy_Stop_select.png", "res/img/PositionMarks/Sell_Limit_select.png", "res/img/PositionMarks/Sell_Stop_select.png"]);
    e.PositionMarksImages = {
        Sell: i[0],
        Buy: i[1],
        Up: i[2],
        Down: i[3],
        Lower: i[4],
        Upper: i[5],
        Inside: i[6],
        Outside: i[7],
        BuyLimit: i[8],
        BuyStop: i[9],
        SellLimit: i[10],
        SellStop: i[11],
        Sell_select: i[12],
        Buy_select: i[13],
        Up_select: i[14],
        Down_select: i[15],
        Lower_select: i[16],
        Upper_select: i[17],
        Inside_select: i[18],
        Outside_select: i[19],
        BuyLimit_select: i[20],
        BuyStop_select: i[21],
        SellLimit_select: i[22],
        SellStop_select: i[23]
    },
    e.initClass(e._PositionMark, e.BaseGraphicObject);
    var s = e._PositionMark.prototype;
    s.init = function(t) {
        var i = e.cloneObject(t);
        this._symblName = i.symbolName,
        this._positionId = i.id,
        this._position = i,
        this._img = new Image,
        this._markerId = null,
        this.updateMarkerId(i);
        var s = i.id + "_" + e.UtipFunctions.getPositionPostfixType(i);
        if (s === this._graphicArea._graphicWindows.options._lastSelectedMark) {
            this.setSelected(!0);
            var n = this._graphicArea.graphicObjects[0],
            o = e.OptionsSettings.getFirstByTypeAndSymbol_OptionSettingsName(parseInt(t.optionType), t.settingName, t.symbolName);
            o && (n.optionPosition = t, n.setOptionSettingsId(o.getID()), n.setOptionSettingsType(o.getType()))
        }
        this._graphicArea.markers || (this._graphicArea.markers = {}),
        this._graphicArea.markers[s] = this
    },
    s.updateMarkerId = function(t) {
        var i = "";
        i = this.isOptionPosition() ? t.optionType: e.UtipFunctions.getPositionPostfixType(t),
        this._markerId = this._positionId + "_" + i
    },
    s.getMarkerId = function() {
        return this._markerId
    },
    s.updateTradePanelState = function() {
        var t = this._graphicArea.getGraphicWindows(),
        i = t.tradePanelModule;
        if (i) {
            if (i.equalPosition(this._position)) return;
            i.loadPosition(this._position),
            e.updateSizeTradePanels(t, i.showed)
        }
    },
    s.setSelected = function(t) {
        if (this.selected !== t && (this.selected = !!t, t === !1 && this._graphicArea._graphicWindows.selectedHorizontalLine)) {
            var i = this._graphicArea._graphicWindows.selectedHorizontalLine,
            s = i._orderType.replace(" ", ""),
            n = e.requestPendingOrderType[s];
            this._positionId === i._id && this._position.pendingOrderType == n && (i.setSelected(!1), this._graphicArea._graphicWindows.selectedHorizontalLine = !1)
        }
    },
    s.updatePrice = function(e) {
        this._position.openPrice = e
    },
    s.updatePosition = function() {
        var t = null;
        t = this.isOrderPosition() ? e.TraderData.getPositionById(this._positionId) : this.isPendingOrderPosition() ? e.TraderData.getPendingOrderByID(this._positionId) : e.TraderData.getOptionPositionById(this._positionId),
        e.valueIsEmpty(t) || (t = e.cloneObject(t), this._symblName = t.symbolName, this._positionId = t.id, this._position = t, this.updateMarkerId(t))
    },
    s.getPosition = function() {
        return this._position
    },
    s.getPositionID = function() {
        return this._positionId
    },
    s.getImageForMark = function() {
        var t = "";
        if ("optionType" in this._position) {
            var i = parseInt(this._position.direction);
            switch (i) {
            case 0:
            case 2:
                t = this.selected ? e.PositionMarksImages.Up_select: e.PositionMarksImages.Up;
                break;
            case 1:
            case 3:
                t = this.selected ? e.PositionMarksImages.Down_select: e.PositionMarksImages.Down;
                break;
            case 4:
                t = this.selected ? e.PositionMarksImages.Upper_select: e.PositionMarksImages.Upper;
                break;
            case 5:
                t = this.selected ? e.PositionMarksImages.Lower_select: e.PositionMarksImages.Lower;
                break;
            case 7:
                t = this.selected ? e.PositionMarksImages.Inside_select: e.PositionMarksImages.Inside;
                break;
            case 6:
                t = this.selected ? e.PositionMarksImages.Outside_select: e.PositionMarksImages.Outside
            }
        } else if ("positionType" in this._position) t = "Buy" === this._position.positionType ? this.selected ? e.PositionMarksImages.Buy_select: e.PositionMarksImages.Buy: this.selected ? e.PositionMarksImages.Sell_select: e.PositionMarksImages.Sell;
        else if ("pendingOrderType" in this._position) switch (i = parseInt(this._position.pendingOrderType)) {
        case e.requestPendingOrderType.BuyLimit:
            t = this.selected ? e.PositionMarksImages.BuyLimit_select: e.PositionMarksImages.BuyLimit;
            break;
        case e.requestPendingOrderType.SellLimit:
            t = this.selected ? e.PositionMarksImages.SellLimit_select: e.PositionMarksImages.SellLimit;
            break;
        case e.requestPendingOrderType.BuyStop:
            t = this.selected ? e.PositionMarksImages.BuyStop_select: e.PositionMarksImages.BuyStop;
            break;
        case e.requestPendingOrderType.SellStop:
            t = this.selected ? e.PositionMarksImages.SellStop_select: e.PositionMarksImages.SellStop
        }
        return t
    },
    s.isOrderPosition = function() {
        return this._position.hasOwnProperty("positionType")
    },
    s.isPendingOrderPosition = function() {
        return this._position.hasOwnProperty("pendingOrderType")
    },
    s.isOptionPosition = function() {
        var t = this._position,
        i = t.optionType;
        return ! e.valueIsEmpty(i)
    },
    s.getCurencySymbol = function() {
        var t = e.TraderData.getTraderGroup().depositCurrency.toLowerCase();
        switch (t) {
        case "usd":
            return e.FontIcons.Usd;
        case "eur":
            return e.FontIcons.Eur;
        case "gbp":
            return e.FontIcons.Gbp;
        case "rub":
            return e.FontIcons.Rub;
        case "jpy":
            return e.FontIcons.Jpy;
        case "chf":
            return e.FontIcons.Chf
        }
    },
    s.drawLabel = function(i) {
        var s = this._position,
        n = s.optionType,
        o = null != n && void 0 != n,
        a = this._graphicArea,
        r = a.getGraphicWindows();
        i.fillStyle = r.options.colorScheme.positionVolume,
        i.font = "12px RobotoBold",
        i.textBaseline = "top";
        var l, h, d = 6.85,
        c = this.coords;
        if (o) {
            l = s.investmentSum,
            h = l.length * d;
            var u = c.x - t / 2 - h - d - 10;
            i.fillText(l, u, c.y - 7),
            i.font = "bold 11px icomoon",
            i.fillText(this.getCurencySymbol(), u + h + 2.5, c.y - 5.5)
        } else {
            var g = e.SymbolsData.getSymbols()[s.symbolName];
            l = e.numberFormat(s.volume, e.UtipFunctions.getDecimals(g.getSymbolGroupName()), ".", "");
            var p = l.indexOf("."),
            m = 2;
            h = p != -1 ? (l.length - 1) * d + m: l.length * d,
            u = c.x - t / 2 - h - 5,
            i.fillText(l, u, c.y - 7)
        }
    },
    s.getGraphicArea = function() {
        return this._graphicArea
    },
    s.draw = function(i) {
        var s = this._graphicArea,
        n = s.getGraphicWindows(),
        o = n.getWidth() - e.graphicConst.GraphicWindowRight,
        a = this._position,
        r = {
            x: n.DateToX(a.openDate + 6e4 * (new Date).getTimezoneOffset()),
            y: s.getYCoord(a.openPrice)
        },
        l = r.x,
        h = r.y;
        return l <= e.graphicConst.GraphicWindowLeft || l > o ? void(this._outOfGraphicArea = !0) : void(h > s.heightForBorders + s.topForBorders - e.graphicConst.GraphicWindowTop || s.topForBorders + e.graphicConst.GraphicWindowTop > h || (this._img || (this._img = new Image), this._img = this.getImageForMark(), i.drawImage(this._img, l - t / 2, r.y - t / 2, t, t), this.coords = r, this.scale = t, this._outOfGraphicArea = !1, this.drawLabel(i)))
    },
    s.isOutOfGraphicArea = function() {
        return this._outOfGraphicArea
    },
    s.isUnderCursor = function(i, s) {
        return e.valueIsEmpty(this.coords) !== !0 && (Math.abs(this.coords.y - s) < t && Math.abs(this.coords.x - i) < t);
    },
    s.isSelected = function() {
        return !! this.selected
    },
    e.getPositionMarkByPositionId = function(t, i) {
        for (var s = i || e.activeChart,
        n = s.graphicAreas,
        o = n.length,
        a = 0; a < o; ++a) {
            var r = n[a];
            if (!e.valueIsEmpty(r.markers) && r.markers[t]) return r.markers[t]
        }
        return null
    },
    e.updatePositionMarkPlacements = function() {
        for (var t, i, s = e.Charts2.getAllGraphicWindows(), n = s.length, o = 0, a = null, r = null, l = null, h = null; o < n; ++o) for (a = s[o].graphicAreas, r = a.length, t = 0; t < r; ++t) if (l = a[t].markers, !e.valueIsEmpty(l)) for (i in l) h = l[i],
        h.updatePosition()
    }
}),
define("graphicArea", ["base", "lines/baseLines", "positionMark"],
function(e) {
    e.GraphicArea = function(t) {
        this._graphicWindows = t;
        var i = this,
        s = t;
        this.min = 0,
        this.max = 0,
        this.graphicObjects = [],
        this.modulus = 1,
        this.top = 0,
        this.height = 0,
        this._levels = [],
        this.showNames = !0,
        this._levelsStyle = {
            lineWidth: 1,
            lineColor: "#c0c0c0",
            lineStyle: "dotted"
        },
        this.eyeObject = {
            font: {
                size: "10pt",
                family: "icomoon",
                color: s.options.colorScheme.names,
                value: e.FontIcons.Eye
            },
            coords: null,
            active: !0,
            render: function() {
                var t = s.options.colorScheme;
                this.active = i.showNames,
                this.font.color = i.showNames ? t.names: e.hexToRgba(t.names, .75)
            },
            updateActive: function() {
                this.active = !this.active;
                var t = s.options.colorScheme;
                i.showNames = this.active,
                this.font.color = this.active ? t.names: e.hexToRgba(t.names, .75),
                e.getTerminal().saveSettings()
            },
            isUnderCursor: function(t, s) {
                if (e.valueIsEmpty(this.coords)) return ! 1;
                var n, o;
                return e.Browser.IsMobile ? (n = 25, o = 15) : (n = 8, o = 5),
                Math.abs(this.coords.y + i.top - s) < o && Math.abs(this.coords.x + 20 - t) < n
            }
        },
        this.eyeObject.render()
    },
    CanvasRenderingContext2D.prototype.dashedLine = function(e, t, i, s, n) {
        n || (n = [10, 5]),
        0 == u && (u = .001);
        var o = n.length;
        this.beginPath(),
        this.moveTo(e, t);
        for (var a = i - e,
        r = s - t,
        l = a ? r / a: 1e15 * Math.sign(r), h = Math.sqrt(a * a + r * r), d = 0, c = !0; h >= .1;) {
            var u = n[d++%o];
            u > h && (u = h);
            var g = Math.sqrt(u * u / (1 + l * l));
            a < 0 && (g = -g),
            e += g,
            t += l * g,
            this[c ? "lineTo": "moveTo"](e, t),
            h -= u,
            c = !c
        }
        this.closePath(),
        this.stroke()
    },
    CanvasRenderingContext2D.prototype.drawDashedLine = function(e, t, i, s, n) {
        n.length < 2 ? this.drawLine(e, t, i, s) : this.dashedLine(e, t, i, s, n)
    },
    CanvasRenderingContext2D.prototype.drawLine = function(e, t, i, s) {
        this.beginPath(),
        this.moveTo(e, t),
        this.lineTo(i, s),
        this.closePath(),
        this.stroke()
    };
    var t = e.GraphicArea.prototype;
    return t.setTop = function(t) {
        e.valueIsEmpty(t) || !isFinite(t) || t < 1 || (this.top = t, this.topForBorders = t + 10)
    },
    t.setHeight = function(t) {
        e.valueIsEmpty(t) || !isFinite(t) || t < 1 || (this.height = t, this.heightForBorders = t - 20)
    },
    t.setShowNames = function(t) {
        this.showNames = !!e.valueIsEmpty(t) || !!t,
        this.eyeObject.render()
    },
    t.fillBackground = function(t) {
        if (! (this.height <= 0) && (t.fillStyle = this._graphicWindows.options.colorScheme.innerBackground, t.fillRect(e.graphicConst.GraphicWindowLeft + 1, 1, this._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 10, this.heightForBorders + 13), this._graphicWindows.options.showGrid)) {
            t.strokeStyle = this._graphicWindows.options.colorScheme.grid;
            for (var i = e.UtipFunctions.div(this._graphicWindows.getWidth() - e.graphicConst.GraphicWindowLeft - e.graphicConst.GraphicWindowRight - e.UtipFunctions.div(this._graphicWindows.options.scale, 2) - 1, e.graphicConst.GraphicWindowCellWidth), s = 0; s <= i; s++) {
                var n = s * e.graphicConst.GraphicWindowCellWidth + e.UtipFunctions.div(this._graphicWindows.options.scale, 2) + 1 + e.graphicConst.GraphicWindowLeft,
                o = 10,
                a = n,
                r = this.heightForBorders + 13;
                t.lineWidth = .75,
                t.drawLine(n + .5, o, a + .5, r)
            }
            var l = e.graphicConst.GraphicWindowLeft,
            h = l + this._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 15;
            t.fillStyle = this._graphicWindows.options.colorScheme.grid,
            t.lineWidth = .75;
            var d = e.UtipFunctions.div(this.heightForBorders, e.graphicConst.GraphicWindowCellWidth) + 1;
            for (s = 1; s < d; s++) {
                var c = 20 + this.heightForBorders - e.graphicConst.GraphicWindowCellWidth * s;
                t.drawLine(l, c - .5, h + 5, c - .5)
            }
        }
    },
    t.draw = function(t) {
        if (! (this.height < 5)) {
            void 0 === this.buffer ? (this.buffer = document.createElement("canvas"), this.buffer.width = this._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 10, this.buffer.height = this.height + 13, this.fillBackground(this.buffer.getContext("2d"))) : this._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight == this.buffer.width && this.height == this.buffer.height || (this.buffer.width = this._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 10, this.buffer.height = this.height + 13, this.fillBackground(this.buffer.getContext("2d")));
            try {
                t.drawImage(this.buffer, 0, this.top - 10)
            } catch(e) {}
            if (this.graphicObjects.length > 0 && this.graphicObjects[0].drawBorders(t), this.graphicObjects[0] instanceof e.Chart && this.checkOrdersLine(), this.min != -1 && this.min != this.max) for (i = 0; i < this.graphicObjects.length; i++) this.graphicObjects[i] instanceof e._TradeLine || this.graphicObjects[i] instanceof e._PositionMark || this.graphicObjects[i].draw(t);
            if (this.graphicObjects[0] instanceof e.Chart && this.graphicObjects[0].showPrice(t), this._levels && this._levels.length > 0 && this._min != 1 / 0 && this.min != this.max) {
                t.fillStyle = this._levelsStyle.lineColor,
                t.strokeStyle = this._levelsStyle.lineColor,
                t.lineWidth = this._levelsStyle.lineWidth,
                t.font = "10px sans-serif",
                t.textBaseline = "bottom",
                t.textAlign = "left";
                for (var i = 0; i < this._levels.length; i++) {
                    var s = this._levels[i],
                    n = this.getYCoord(e.parseFloat(s.value)) + .5,
                    o = this._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 5;
                    t.drawDashedLine(e.graphicConst.GraphicWindowLeft, n, o, n, e.UtipFunctions.calcLineStyle(this._levelsStyle.lineStyle)),
                    t.fillText(s.description, o + 7, n)
                }
            }
        }
    },
    t.isNeedRemoveLine = function(t, i, s) {
        var n = e.TradeLineType.isOptionLine(s || i),
        o = i == e._TraderData.positionType.buy || i == e._TraderData.positionType.sell,
        a = !1,
        r = null;
        return r = o ? e.TraderData.getPositionById(t) : e.TraderData.getPendingOrderByID(t),
        n && (r = e.TraderData.getOptionPositionById(t), a = !0),
        null == r ? a = !0 : r.symbolName != this.graphicObjects[0].getSymbolName() && (a = !0),
        a
    },
    t.isNeedRemovePosMark = function(t) {
        var i = e.TraderData,
        s = !1,
        n = this.graphicObjects.filter(function(i) {
            return i instanceof e._TradeLine && i.getID() === t.id
        });
        return s = s || !i.getPositions().some(function(e) {
            return t === e
        }) && i.getPendingOrders().some(function(e) {
            return t === e
        }) && i.getOptionPositions().some(function(e) {
            return t === e
        }),
        s = s || !n.some(function(i) {
            var s = t.positionType || e._TraderData.pendingOrderType[t.pendingOrderType] || void 0;
            return i.getOrderType() === s
        })
    },
    t.deleteInvalidLine = function() {
        for (var t = 1; t < this.graphicObjects.length;) {
            var i = this.graphicObjects[t];
            if (i instanceof e._TradeLine) this.isNeedRemoveLine(i.getID(), i.getOrderType(), i.getLineType()) ? this.graphicObjects.splice(t, 1) : t++;
            else if (i instanceof e._PositionMark) {
                var s = i.getPosition(),
                n = s.id;
                this.isNeedRemovePosMark(s) === !0 ? (this.graphicObjects.splice(t, 1), e.valueIsEmpty(this.markers) || delete this.markers[n + "_" + e.UtipFunctions.getPositionPostfixType(s)]) : t++
            } else t++
        }
    },
    t.addTakeProfitLine = function(t, i) {
        var s = {
            id: t.id,
            orderType: i,
            takeProfit: 1 * t.takeProfit,
            lineType: e.TradeLineType.takeProfit
        },
        n = new e._TradeLine(this, {});
        n.initParameters(s)
    },
    t.addStopLossLine = function(t, i) {
        var s = {
            id: t.id,
            orderType: i,
            stopLoss: 1 * t.stopLoss,
            lineType: e.TradeLineType.stopLoss
        },
        n = new e._TradeLine(this, {});
        n.initParameters(s)
    },
    t.addOptionLine = function(t, i, s) {
        var n = {
            id: t.id,
            orderType: t.orderType,
            openPrice: 1 * t.openPrice,
            lineType: i,
            title: s
        },
        o = new e._TradeLine(this, n);
        o.initParameters(n),
        "high" === e.TradeLineType.optionLineHighOrLow(i) ? o.setOptionHigh(1 * t.openPrice) : "low" === e.TradeLineType.optionLineHighOrLow(i) && o.setOptionLow(1 * t.openPrice)
    },
    t.addPositionMarks = function(t) {
        var i = new e._PositionMark(this, {});
        i.init(t)
    },
    t.getOrderTypeForOption = function(t) {
        switch (parseInt(t.direction)) {
        case e.OptionPositionTypes.highExpress:
            return e.OptionTypeNames[e.OptionSettingsType.express] + " " + t.symbolName + " high";
        case e.OptionPositionTypes.lowExpress:
            return e.OptionTypeNames[e.OptionSettingsType.express] + " " + t.symbolName + " low";
        case e.OptionPositionTypes.highClassic:
            return e.OptionTypeNames[e.OptionSettingsType.classic] + " " + t.symbolName + " high";
        case e.OptionPositionTypes.lowClassic:
            return e.OptionTypeNames[e.OptionSettingsType.classic] + " " + t.symbolName + " low";
        case e.OptionPositionTypes.top:
            return e.OptionTypeNames[e.OptionSettingsType.oneTouch] + " " + t.symbolName + " top";
        case e.OptionPositionTypes.bottom:
            return e.OptionTypeNames[e.OptionSettingsType.oneTouch] + " " + t.symbolName + " bottom";
        case e.OptionPositionTypes.inside:
            return e.OptionTypeNames[e.OptionSettingsType.range] + " " + t.symbolName + " inside";
        case e.OptionPositionTypes.outside:
            return e.OptionTypeNames[e.OptionSettingsType.range] + " " + t.symbolName + " outside"
        }
    },
    t.orderLineAction = function(t, i) {
        var s = "";
        s = "positionType" in t ? t.positionType: "direction" in t ? this.getOrderTypeForOption(t) : e._TraderData.pendingOrderType[t.pendingOrderType];
        var n = this.orderLineExists(t.id, s);
        if (n.isExists) n.takeProfitLine && 1 * t.takeProfit > 0 && (!n.takeProfitLine.selected || i) && n.takeProfitLine.setTakeProfit(1 * t.takeProfit),
        n.takeProfitLine && 1 * t.takeProfit == 0 && this.graphicObjects.splice(this.graphicObjects.indexOf(n.takeProfitLine), 1),
        void 0 == n.takeProfitLine && 1 * t.takeProfit > 0 && this.addTakeProfitLine(t, s),
        n.stopLossLine && 1 * t.stopLoss > 0 && (!n.stopLossLine.selected || i) && n.stopLossLine.setStopLoss(1 * t.stopLoss),
        n.stopLossLine && 1 * t.stopLoss == 0 && this.graphicObjects.splice(this.graphicObjects.indexOf(n.stopLossLine), 1),
        void 0 == n.stopLossLine && 1 * t.stopLoss > 0 && this.addStopLossLine(t, s),
        n.openPriceLine && 1 * t.openPrice > 0 && (!n.openPriceLine.selected || i) && n.openPriceLine.setOpenPrice(1 * t.openPrice),
        n.optionHighLine && 1 * t.openPrice == 0 && (this.graphicObjects.splice(this.graphicObjects.indexOf(n.optionHighLine), 1), this.graphicObjects.splice(this.graphicObjects.indexOf(n.positionMark), 1)),
        n.optionHighLine && 1 * t.openPrice > 0 && (this.addOptionLine(t, s), n.optionHighLine.setOptionHigh(t.openPrice)),
        n.optionLowLine && 1 * t.openPrice == 0 && (this.graphicObjects.splice(this.graphicObjects.indexOf(n.optionLowLine), 1), this.graphicObjects.splice(this.graphicObjects.indexOf(n.positionMark), 1)),
        n.optionLowLine && 1 * t.openPrice > 0 && (this.addOptionLine(t, s), n.optionLowLine.setOptionLow(t.openPrice));
        else {
            switch (parseInt(t.direction)) {
            case e.OptionPositionTypes.highExpress:
                this.addOptionLine(t, e.TradeLineType.optionExpressHigh, s),
                this.addPositionMarks(t);
                break;
            case e.OptionPositionTypes.lowExpress:
                this.addOptionLine(t, e.TradeLineType.optionExpressLow, s),
                this.addPositionMarks(t);
                break;
            case e.OptionPositionTypes.highClassic:
                this.addOptionLine(t, e.TradeLineType.optionClassicHigh, s),
                this.addPositionMarks(t);
                break;
            case e.OptionPositionTypes.lowClassic:
                this.addOptionLine(t, e.TradeLineType.optionClassicLow, s),
                this.addPositionMarks(t);
                break;
            case e.OptionPositionTypes.top:
                var o = e.SymbolsData.getSymbols()[t.symbolName],
                a = {
                    id: t.id,
                    orderType: e.TradeLineType.optionOneTouchTop,
                    openPrice: 1 * t.openPrice + parseInt(t.interval) / o.getPrecision(),
                    lineType: e.TradeLineType.optionOneTouchTop
                };
                this.addOptionLine(a, e.TradeLineType.optionOneTouchTop, s),
                this.addPositionMarks(t);
                break;
            case e.OptionPositionTypes.bottom:
                var o = e.SymbolsData.getSymbols()[t.symbolName],
                r = {
                    id: t.id,
                    orderType: e.TradeLineType.optionOneTouchBottom,
                    openPrice: 1 * t.openPrice - parseInt(t.interval) / o.getPrecision(),
                    lineType: e.TradeLineType.optionOneTouchBottom
                };
                this.addOptionLine(r, e.TradeLineType.optionOneTouchBottom, s),
                this.addPositionMarks(t);
                break;
            case e.OptionPositionTypes.outside:
                var o = e.SymbolsData.getSymbols()[t.symbolName],
                r = {
                    id: t.id,
                    orderType: e.TradeLineType.optionRangeOutside,
                    openPrice: 1 * t.openPrice - parseInt(t.interval) / o.getPrecision(),
                    lineType: e.TradeLineType.optionRangeTop
                },
                a = {
                    id: t.id,
                    orderType: e.TradeLineType.optionRangeOutside,
                    openPrice: 1 * t.openPrice + parseInt(t.interval) / o.getPrecision(),
                    lineType: e.TradeLineType.optionRangeBottom
                };
                this.addOptionLine(a, e.TradeLineType.optionRangeTop, s),
                this.addOptionLine(r, e.TradeLineType.optionRangeBottom, s),
                this.addPositionMarks(t);
                break;
            case e.OptionPositionTypes.inside:
                var o = e.SymbolsData.getSymbols()[t.symbolName],
                r = {
                    id: t.id,
                    orderType: e.TradeLineType.optionRangeInside,
                    openPrice: 1 * t.openPrice - parseInt(t.interval) / o.getPrecision(),
                    lineType: e.TradeLineType.optionRangeTop
                },
                a = {
                    id: t.id,
                    orderType: e.TradeLineType.optionRangeInside,
                    openPrice: 1 * t.openPrice + parseInt(t.interval) / o.getPrecision(),
                    lineType: e.TradeLineType.optionRangeBottom
                };
                this.addOptionLine(a, e.TradeLineType.optionRangeTop, s),
                this.addOptionLine(r, e.TradeLineType.optionRangeBottom, s),
                this.addPositionMarks(t)
            }
            if (!t.direction) {
                var l = {
                    id: t.id,
                    orderType: s,
                    openPrice: 1 * t.openPrice,
                    lineType: e.TradeLineType.openPrice
                },
                h = new e._TradeLine(this, l);
                h.initParameters(l),
                this.addPositionMarks(t)
            }
            t.takeProfit > 0 && this.addTakeProfitLine(t, s),
            t.stopLoss > 0 && this.addStopLossLine(t, s)
        }
    },
    t.checkOrdersLine = function(t) {
        this.deleteInvalidLine();
        var i = this.graphicObjects[0];
        i instanceof e.Chart && (e.TraderData.getPositions().forEach(function(e) {
            e.symbolName == i.getSymbolName() && this.orderLineAction(e, t)
        },
        this), e.TraderData.getPendingOrders().forEach(function(s) {
            if (s.symbolName == i.getSymbolName() && (this.orderLineAction(s, t), !e.valueIsEmpty(this.markers))) {
                var n = this.markers[s.id + "_" + s.pendingOrderType];
                n && t && n.updatePrice(s.openPrice)
            }
        },
        this), e.TraderData.getOptionPositions().forEach(function(s) {
            var n = e.OptionsSettings.getOptionSettingsByName(s.settingName);
            if (n) {
                var o = n.getSymbolName();
                o == i.getSymbolName() && this.orderLineAction(s, t)
            }
        },
        this))
    },
    t.deleteOptionLine = function(e) {},
    t.orderLineExists = function(t, i) {
        var s = {};
        s.isExists = !1;
        for (var n = 1; n < this.graphicObjects.length; n++) if (this.graphicObjects[n] instanceof e._TradeLine) {
            var o = this.graphicObjects[n];
            if (o.getID() == t && o.getOrderType() == i) switch (s.isExists = !0, o.getLineType()) {
            case e.TradeLineType.openPrice:
                s.openPriceLine = o;
                break;
            case e.TradeLineType.stopLoss:
                s.stopLossLine = o;
                break;
            case e.TradeLineType.takeProfit:
                s.takeProfitLine = o;
                break;
            case e.TradeLineType.optionHigh:
                s.optionHighLine = o;
                break;
            case e.TradeLineType.optionLow:
                s.optionLowLine = o
            }
        } else this.graphicObjects[n] instanceof e._PositionMark && this.graphicObjects[n]._positionId === t && (s.positionMark = this.graphicObjects[n]);
        return s
    },
    t.getYCoord = function(e) {
        return Math.round(this.top + this.heightForBorders - (e - this.min) / (this.max - this.min) * this.heightForBorders)
    },
    t.getValueByCoord = function(e) {
        return this.min == -1 ? 0 : (this.top + this.heightForBorders - e) / this.heightForBorders * (this.max - this.min) + this.min
    },
    t.getStrValueByCoord = function(t) {
        var i = this.getValueByCoord(t);
        if (this.graphicObjects[0] instanceof e.Chart) var s = e.SymbolsData.getSymbols()[this.graphicObjects[0].getSymbolName()]._Digits;
        return e.numberFormat(i, s, ",", " ")
    },
    t.deleteGraphicObject = function(e) {
        this.graphicObjects.splice(this.graphicObjects.indexOf(e), 1)
    },
    t.getGraphicWindows = function() {
        return this._graphicWindows
    },
    t.addLevel = function(e) {
        this._levels.push(e)
    },
    t.getLevels = function() {
        return this._levels
    },
    t.setLevels = function(e) {
        this._levels = e
    },
    t.getLevelsStyle = function() {
        return this._levelsStyle
    },
    t.clearLevels = function() {
        this._levels = []
    },
    t.setLevelsStyle = function(e) {
        this._levelsStyle = e
    },
    e
}),
define("chart", ["base"],
function(e) {
    e.Chart = function(e, t, i, s) {
        this._visibleMin = 1 / 0,
        this._visibleMax = 0,
        this._graphicArea = e,
        this._graphicArea.graphicObjects.push(this),
        this.volumesModulus = 1,
        this.quotesData = null,
        this._digits = 0,
        this.setSymbolName(t),
        this.volumeIndicator = null,
        this._visibleDates = [],
        this.setPeriod(this._graphicArea._graphicWindows.getPeriod()),
        this.namesCanvas = document.createElement("canvas"),
        this.optionPosition = null,
        this._optionSettingsId = i,
        this._optionSettingsType = s,
        this._graphicArea.eyeObject.coords = this.getCoordForNames()
    };
    var t = e.Chart.prototype;
    t.getOptionSettingsId = function() {
        return this._optionSettingsId
    },
    t.setOptionSettingsId = function(e) { (e || 0 == e) && (this._optionSettingsId = e)
    },
    t.getOptionSettingsType = function() {
        return this._optionSettingsType
    },
    t.setOptionSettingsType = function(e) { (e || 0 == e) && (this._optionSettingsType = e)
    },
    t.getSymbolName = function() {
        return this._symbolName
    },
    t.getGraphicArea = function() {
        return this._graphicArea
    },
    t.getDigits = function() {
        return this._digits
    },
    t.setSymbolName = function(t) {
        this._symbolName = t,
        this._digits = e.SymbolsData.getSymbols()[t].getDigits()
    },
    t.setPeriod = function(t) {
        var i = e.QuotesArchive.getArchive(this._symbolName, t);
        if (this.quotesData = i, i.isEmpty()) this.isNeedMoveBar = !0,
        i.getLastCandle(500);
        else if (e.SymbolsData._LastChangedTime > 0) {
            var s = this.getLastDate().key;
            s = this.getPrevDate(s),
            i.getArchiveByDateExcludeTimezone(s, e.SymbolsData._LastChangedTime + 1, !0, !1)
        }
        this.period = t
    },
    t._onSocketMessage = function(t) {
        if ("lastQuote" === t.msgType) {
            var i = this.getLastDate().key;
            i = this.getPrevDate(i),
            this.quotesData.getArchiveByDateExcludeTimezone(i, e.SymbolsData._LastChangedTime + 1, !0, !1)
        }
        e.Socket.register(this)
    },
    t.getFirstDate = function() {
        return this.quotesData.getFirst()
    },
    t.getLastDate = function() {
        return this.quotesData.getLast()
    },
    t.getPrevDate = function(e) {
        return this.quotesData.getPrev(e)
    },
    t.getNextDate = function(e) {
        return this.quotesData.getNext(e)
    },
    t.getValue = function(e, t) {
        if (!this.quotesData) return - 1;
        var i = -1;
        if (!this.quotesData.candles) return i;
        var s = this.quotesData.candles.get(e);
        return s && s.value && (i = s.value[t]),
        i
    },
    t.getQuote = function(e) {
        var t = {
            open: -1,
            close: -1,
            high: -1,
            low: -1,
            volume: -1
        };
        if (!this.quotesData.candles) return t;
        var i = this.quotesData.candles.get(e);
        return i && i.value && (t = i.value),
        t
    },
    t.drawBorders = function(t) {
        var i = this.getGraphicArea(),
        s = i.heightForBorders,
        n = i.topForBorders,
        o = i.getGraphicWindows(),
        a = e.graphicConst,
        r = a.GraphicWindowLeft,
        l = a.GraphicWindowRight,
        h = a.GraphicWindowCellWidth,
        d = this._graphicArea._graphicWindows.options,
        c = d.colorScheme,
        u = this._graphicArea._graphicWindows._position,
        g = this.getQuote(u),
        p = g.high,
        m = g.low;
        if (this.quotesData.isEmpty()) {
            t.fillStyle = c.innerBackground,
            t.fillRect(r + 1, n + 1, o.getWidth() - l, s),
            t.font = "22pt Roboto",
            t.fillStyle = c.text,
            t.textBaseline = "middle",
            t.textAlign = "center";
            var _ = e.LangManager.getStringByKey("cMGLoading") + "..." || "Loading...";
            t.fillText(_, e.UtipFunctions.div(o.getWidth() - r - l, 2), n + e.UtipFunctions.div(s, 2)),
            this.drawNames({},
            !1),
            i.min = m,
            i.max = p
        }
        var y = this.updateVisibleCandles();
        if (m = y.min, p = y.max, 0 == p) return i.min = m,
        void(i.max = p);
        var S = e.SymbolsData.getSymbols()[this._symbolName],
        f = S ? S.getDigits() : "",
        v = Math.pow(10, f),
        C = Math.round((p - m) * v);
        0 == C && (C = 10),
        C = Math.round(C * this._graphicArea._graphicWindows.verticalScale);
        var b = Math.round(p * v + .05 * C),
        T = Math.round(m * v - .05 * C);
        T < 0 && (T = 0);
        for (var P = b - T,
        D = s / h,
        I = 0; P / D > I;) I += 5;
        var w = Math.round(I * D);
        w - P < 2 && (w = Math.round((I + 5) * D));
        for (var M = e.UtipFunctions.div(w - P, 2), O = T - M; O % 5 != 0;) O--,
        M++;
        for (var L = b + w - P - M; O < 0;) O++,
        L++;
        var k = L / v,
        B = O / v;
        for ((k - p < 0 || k === u) && (k += 5 / v, B += 5 / v), i.max = k, i.min = B; Math.round(B * v) % 5 != 0 && B > 0 && i.getYCoord(B) - i.getYCoord(m) < h;) i.min = i.min - 1 / v;
        var N = r,
        x = N + o.getWidth() - l;
        t.lineWidth = .2;
        var A = n + s - 1,
        V = i.min;
        t.fillStyle = c.grid,
        t.fillStyle = c.text,
        t.font = "11px Roboto",
        t.textBaseline = "bottom",
        t.textAlign = "left";
        for (var E = e.UtipFunctions.div(s, h) + 1, F = 1; F < E; F++) A = n + s - h * F,
        V = i.getValueByCoord(A),
        t.fillStyle = c.text,
        t.textAlign = "left",
        t.fillText(e.numberFormat(V, f, ".", " "), x + 7, A + 5)
    },
    t.draw = function(t) {
        var i = this._graphicArea,
        s = i._graphicWindows,
        n = s.options,
        o = n.colorScheme,
        a = 0;
        switch (n.scale) {
        case 1:
            a = 0;
            break;
        case 2:
        case 4:
        case 8:
            a = 1;
            break;
        case 16:
            a = 3;
            break;
        case 32:
            a = 4
        }
        var r = n.scale - a,
        l = s._position,
        h = 1;
        n.barStyle == e.barStyles.line && (t.strokeStyle = o.line);
        var d = !0;
        this._visibleMin = 1 / 0,
        this._visibleMax = 0;
        for (var c = e.UtipFunctions.div(n.scale, 2), u = e.UtipFunctions.div(r, 2), g = this._visibleDates, p = g.length, m = 0; m < p; m++) {
            var _ = g[m];
            l = _.date;
            var y = e.graphicConst.GraphicWindowLeft + h + c,
            S = _.candle;
            if (S.open > -1) {
                var f = S.open,
                v = S.close,
                C = S.high,
                b = S.low,
                T = i.getYCoord(v);
                if (n.barStyle != e.barStyles.line) {
                    var P = y - u + .5,
                    D = i.getYCoord(f) + .5,
                    I = r - 1,
                    w = T - D - .5;
                    t.strokeStyle = v > f ? o.bullCandle: o.bearCandle
                }
                switch (C > this._visibleMax && (this._visibleMax = C), b < this._visibleMin && (this._visibleMin = b), n.barStyle) {
                case e.barStyles.gBar:
                    t.lineWidth = 2,
                    t.drawLine(y + .5, i.getYCoord(C) + .5, y + .5, i.getYCoord(b) + .5),
                    t.drawLine(P + .5, D, y + .5, D),
                    I = y + r - u + .5,
                    t.drawLine(y + .5, T + .5, I, T + .5);
                    break;
                case e.barStyles.jCandle:
                    t.lineWidth = 1,
                    t.beginPath(),
                    t.moveTo(y + .5, i.getYCoord(C)),
                    t.lineTo(y + .5, i.getYCoord(b)),
                    t.closePath(),
                    t.stroke(),
                    t.fillStyle = v < f ? o.bearCandle: o.bullCandle,
                    D == w ? (t.moveTo(P, D), t.lineTo(I, w)) : (w++, t.strokeRect(P, D, I, w), t.fillRect(P, D, I, w));
                    break;
                case e.barStyles.line:
                    t.lineWidth = 2.5,
                    d ? (t.beginPath(), t.moveTo(y, T), d = !1) : (t.lineTo(y, T), t.moveTo(y, T))
                }
            } else {
                var M = this.getLastDate();
                if (M.key > -1 && M.key < l) break
            }
            h += n.scale
        }
        n.barStyle == e.barStyles.line && (t.closePath(), t.stroke()),
        this.drawNames(S, !1),
        this.updateCurrentBarX(),
        t.lineWidth = 1
    },
    t.updateVisibleCandles = function() {
        var e = this._graphicArea.getGraphicWindows(),
        t = e.getPosition(),
        i = this.getQuote(t),
        s = i.high,
        n = i.low,
        o = [],
        a = e.getVisiblePositions();
        o.push({
            date: t,
            candle: i
        });
        for (var r = 0,
        l = e.getVisibleBarsCount() - 1; r < l; r++) {
            t = a[r + 1];
            var h = this.getQuote(t),
            d = h.high,
            c = h.low; (d > -1 && s < d || s == -1) && (s = d),
            (c > -1 && n > c || n == -1) && (n = c),
            o.push({
                date: t,
                candle: h
            })
        }
        return this._visibleDates = o,
        {
            min: n,
            max: s
        }
    },
    t.updateCurrentBarX = function() {
        var e = this._graphicArea.getGraphicWindows().options,
        t = (this._visibleDates || []).map(function(e) {
            return e.date
        }),
        i = t.length,
        s = t[i - 1] || -1,
        n = this.getLastDate().key;
        if (n > s) this._currentBarX = 1 + e.scale * i;
        else {
            var o = t.indexOf(n);
            this._currentBarX = 1 + (o !== -1 ? e.scale * o: 0)
        }
    },
    t.showPrice = function(t) {
        var i = this._graphicArea._graphicWindows._position,
        s = this._graphicArea._graphicWindows.options,
        n = s.colorScheme,
        o = e.SymbolsData.getSymbols()[this._symbolName];
        if (o) {
            i = this.getLastDate(i).key;
            var a = this.getValue(i, "close");
            if (s.showCurrentPrice && i > -1 && a > -1) {
                var r = o._Digits;
                this.drawTradeObjects(t, a, o._Ask),
                this.drawOptionObjects(t),
                s.showAskLine && !e.getTerminal().useOnlyOptions && this.drawAskLine(t, o._Ask, n.askLine, s, r, a),
                this.drawPriceLine(t, a, n.bidLine, s, r)
            }
        }
    },
    t.drawTradeObjects = function(t, i, s) {
        var n = this._graphicArea.getYCoord(i),
        o = this._graphicArea.getYCoord(s),
        a = (e.graphicConst.GraphicWindowLeft + this._graphicArea._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 2, e.graphicConst.GraphicWindowRight - 1, 0),
        r = this._graphicArea.graphicObjects,
        l = r.length,
        h = null,
        d = void 0;
        a = n - 5;
        for (var c = function() {
            for (var t = 1; t < l; t++) if (r[t] instanceof e._PositionMark && r[t].selected === !0) {
                var i = r[t],
                s = i.getPosition(),
                n = s.id;
                return n + "_" + e.UtipFunctions.getPositionPostfixType(s)
            }
        }.call(this), u = 1; u < l; u++) {
            var g = a,
            p = r[u];
            if (d = 1, p instanceof e._TradeLine) {
                if (0 === p._takeProfit && 0 === p._stopLoss) {
                    var m = p.centerPoint.y ? p.centerPoint.y - 5 : p._graphicArea.getYCoord(p.getValue()) - 5;
                    h = p,
                    this._graphicArea._graphicWindows.options.showAskLine && (g = Math.abs(m - g) < Math.abs(o - m) ? g: o - 5)
                } else {
                    var _ = a,
                    m = p.centerPoint.y ? p.centerPoint.y: p._graphicArea.getYCoord(p.getValue());
                    g = h.centerPoint.y || _,
                    g > m ? (m += 5, _ += 5, o += 5) : (_ -= 5, m -= 5, o -= 5),
                    this._graphicArea._graphicWindows.options.showAskLine && (g = Math.abs(m - g) < Math.abs(o - m) ? g: o),
                    g = Math.abs(m - g) > Math.abs(m - _) ? _: g
                }
                var y = Math.abs(g - m);
                y <= 20 && y >= 0 && (d = ~~ (y / 2) / 10);
                var S, f, v, C = p.isPendingOrderTypeLine();
                S = e.TradeLineType.isOptionLine(p.getLineType()) ? e.TraderData.getOptionPositionById(p._id) : C ? e.TraderData.getPendingOrderByID(p._id) : e.TraderData.getPositionById(p._id),
                v = e.UtipFunctions.getPositionPostfixType(S),
                f = p._id + "_" + v,
                f === c && p.draw(t, d)
            } else p instanceof e._PositionMark || p.draw(t)
        }
    },
    t.resetMinMax = function() {
        this._visibleMin = 0,
        this._visibleMax = 0
    },
    t.drawPriceLine = function(t, i, s, n, o) {
        if (i > this._graphicArea.min && i < this._graphicArea.max) {
            var a = this._graphicArea.getYCoord(i),
            r = e.SymbolsData.getSymbols()[this._symbolName]._BidDirection,
            l = e.hexToRgba(s, .75);
            t.strokeStyle = l,
            t.beginPath(),
            t.moveTo(e.graphicConst.GraphicWindowLeft, a - .5),
            t.lineTo(e.graphicConst.GraphicWindowLeft + this._graphicArea._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 5 - 11, a - .5),
            t.closePath(),
            t.stroke();
            var h = e.UtipFunctions.splitPriceWithDigits(i, o),
            d = e.graphicConst.GraphicWindowLeft + this._graphicArea._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 2,
            c = a - 5,
            u = e.graphicConst.GraphicWindowRight - 1,
            g = 20;
            t.font = "11px Roboto",
            t.fillStyle = s,
            t.fillRect(d, c - 6, u, g),
            t.fillStyle = n.colorScheme.currentPriceText,
            t.textBaseline = "top",
            t.fillText(h.value, d + 5, c - 1),
            t.fillStyle = r === !0 ? n.colorScheme.positionLineBuy: n.colorScheme.positionLineSell,
            t.textBaseline = "top",
            t.font = "12px RobotoBold",
            t.fillText(h.tail, d + 5 + h.offsetLeft, c - 2),
            t.font = "11px Roboto",
            t.beginPath(),
            t.fillStyle = s,
            t.strokeStyle = s,
            t.moveTo(d, c - 6),
            t.lineTo(d - 10, c - 6 + g / 2),
            t.lineTo(d, c - 6 + g),
            t.fill(),
            t.closePath(),
            t.stroke()
        }
    },
    t.drawAskLine = function(t, i, s, n, o, a) {
        if (i > this._graphicArea.min && i < this._graphicArea.max) {
            var r = this._graphicArea.getYCoord(a),
            l = this._graphicArea.getYCoord(i),
            h = e.hexToRgba(s, .75),
            d = e.SymbolsData.getSymbols()[this._symbolName]._AskDirection;
            t.strokeStyle = h,
            t.beginPath(),
            t.moveTo(e.graphicConst.GraphicWindowLeft, l - .5),
            t.lineTo(e.graphicConst.GraphicWindowLeft + this._graphicArea._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 5 - 11, l - .5),
            t.closePath(),
            t.stroke();
            var c = e.UtipFunctions.splitPriceWithDigits(i, o),
            u = e.graphicConst.GraphicWindowLeft + this._graphicArea._graphicWindows.getWidth() - e.graphicConst.GraphicWindowRight + 2,
            g = l - 5,
            p = e.graphicConst.GraphicWindowRight - 1,
            m = 20,
            _ = 1,
            y = Math.abs(l - r);
            y <= 20 && y >= 0 && (_ = ~~ (y / 2) / 10),
            s = e.hexToRgba(s, _),
            t.font = "11px Roboto",
            t.fillStyle = s,
            t.fillRect(u, g - 6, p, m),
            t.fillStyle = e.hexToRgba(n.colorScheme.currentPriceText, _),
            t.textBaseline = "top",
            t.fillText(c.value, u + 5, g - 1),
            t.fillStyle = d === !0 ? e.hexToRgba(n.colorScheme.positionLineBuy, _) : e.hexToRgba(n.colorScheme.positionLineSell, _),
            t.textBaseline = "top",
            t.font = "12px RobotoBold",
            t.fillText(c.tail, u + 5 + c.offsetLeft, g - 2),
            t.font = "11px Roboto",
            t.beginPath(),
            t.fillStyle = s,
            t.strokeStyle = s,
            t.moveTo(u, g - 6),
            t.lineTo(u - 10, g - 6 + m / 2),
            t.lineTo(u, g - 6 + m),
            t.fill(),
            t.stroke(),
            t.closePath()
        }
    },
    t.drawNames = function(t, i) {
        if (!e.Browser.IsMobile) {
            var s = this.getGraphicArea(),
            n = s._graphicWindows,
            o = this.namesCanvas.getContext("2d");
            if (this.namesCanvas.width = n.getCanvas().width, this.namesCanvas.height = s.height, !(this.namesCanvas.height <= 0)) {
                if (this._graphicArea.showNames) {
                    var a = this._symbolName,
                    r = e.SymbolsData.getSymbols()[a],
                    l = r.getDigits(),
                    h = n.getPeriod(),
                    d = this._visibleMin == 1 / 0 ? 0 : this._visibleMin;
                    if (a = " " + e.periodNames[e.getPeriodCode(h)] + "  Max: " + e.numberFormat(this._visibleMax, l, ".", " ") + "  Min: " + e.numberFormat(d, l, ".", " "), i && !e.Browser.IsMobile) {
                        var c = new Date(n.currentBarDate),
                        u = c.toLocaleFormat("%d.%m.%Y %H:%M");
                        a = a + "  D: " + u + "  O: " + e.numberFormat(t.open, l, ".", " ") + "  H: " + e.numberFormat(t.high, l, ".", " ") + "  L: " + e.numberFormat(t.low, l, ".", " ") + "  C: " + e.numberFormat(t.close, l, ".", " ") + "  V: " + t.volume
                    }
                }
                this.prepareRectAndDrawNames(this._graphicArea.showNames, a, o);
                var g = e.graphicConst;
                this.namesCanvas.height > 0 && n._canvas.getContext("2d").drawImage(this.namesCanvas, g.GraphicWindowLeft + 10, g.GraphicWindowTop + s.top - 5)
            }
        }
    },
    t.prepareRectAndDrawNames = function(e, t, i) {
        if (!i) return 0;
        var s = this.getGraphicArea(),
        n = this.getCoordForNames(),
        o = 0,
        a = 0,
        r = this._symbolName,
        l = e && !!t;
        l && (i.font = "10.5pt Roboto", o += i.measureText(t).width, i.font = "10.5pt RobotoBold", a = i.measureText(r).width, o += a);
        var h = s.eyeObject.font;
        i.font = h.size + " " + h.family,
        o += i.measureText(h.value).width;
        var d = s.getGraphicWindows(),
        c = d.options,
        u = c.colorScheme,
        g = i.strokeStyle = u.names;
        i.fillStyle = u.innerBackground,
        i.fillRect(0, 0, o + 10, 14),
        l && (i.lineWidth = 1, i.fillStyle = g, i.font = "10.5pt RobotoBold", i.font.fontcolor(g), i.fillText(r, n.x + 20, n.y + 2), i.font = "10.5pt Roboto", i.font.fontcolor(g), i.fillText(t, n.x + 25 + a, n.y + 2)),
        i.font = h.size + " " + h.family,
        i.fillStyle = g,
        i.font.fontcolor(g),
        i.fillText(h.value, n.x, n.y + 2)
    },
    t.getCoordForNames = function() {
        return {
            x: 0,
            y: 10
        }
    },
    t.positionIsVisible = function(e) {
        for (var t = this._visibleDates,
        i = t.length,
        s = !1,
        n = 0; n < i; n++) if (t[n].date === e) return s = !0;
        return s
    },
    t.getSettingsForSave = function() {
        return {
            className: "chart",
            symbolName: this._symbolName,
            volumes: this.isVolumeShowed(),
            volumesModulus: this.volumesModulus,
            optionSettingsId: this._optionSettingsId,
            optionSettingsType: this._optionSettingsType
        }
    },
    t.loadSettings = function(e) {
        this._symbolName === e.symbolName && e.volumes && (this.showVolume(), this.volumeIndicator._graphicArea.modulus = e.volumesModulus),
        this.setOptionSettingsId(e.optionSettingsId),
        this.setOptionSettingsType(e.optionSettingsType)
    },
    t.getGraphicArea = function() {
        return this._graphicArea
    },
    t.isVolumeShowed = function() {
        return null != this.volumeIndicator
    },
    t.showVolume = function() {
        var t = null,
        i = null;
        if (this.isVolumeShowed()) i = this.volumeIndicator._graphicArea,
        t = i.getGraphicWindows(),
        t.removeGraphicArea(i),
        this.volumeIndicator = null,
        this.volumesModulus = 0;
        else {
            t = this.getGraphicArea().getGraphicWindows(),
            i = new e.GraphicArea(t);
            var s = t.graphicAreas.indexOf(this.getGraphicArea());
            t.addGraphicArea(i, !0, s + 1),
            this.volumeIndicator = new e.VolumeIndicator(i, this)
        }
        t.updateGAHeights()
    },
    t.getCurrentBarX = function() {
        return this._currentBarX ? this._currentBarX: 0
    },
    t.setTPMOptionSettingsId = function(e) {
        this._tpmOptionSettingsId = e
    },
    t.getTPMOptionSettingsId = function() {
        return this._tpmOptionSettingsId
    },
    t.setTPMOptionSettingsType = function(e) {
        this._tpmOptionSettingsType = e
    },
    t.getTPMOptionSettingsType = function() {
        return this._tpmOptionSettingsType
    },
    t.hasTradePanelModuleBinaryData = function() {
        var t = e.valueIsEmpty;
        return ! t(this._tpmOptionSettingsId) && !t(this._tpmOptionSettingsType) && this._tpmOptionSettingsId !== -1 && this._tpmOptionSettingsType !== -1
    },
    t.drawOptionObjects = function(t) {
        var i = e.valueIsEmpty,
        s = this._graphicArea,
        n = s.getGraphicWindows(),
        o = n.tradePanelModule,
        a = !!o && o.showed;
        if (n.isShowOptionSettingsLines()) {
            var r, l, h = this.hasTradePanelModuleBinaryData() && a;
            h ? (r = this._tpmOptionSettingsId, l = this._tpmOptionSettingsType) : (r = this._optionSettingsId, l = this._optionSettingsType);
            var d, c = this._symbolName,
            u = e.cloneObject(this.optionPosition);
            if (u ? (d = e.OptionsSettings.getOptionSettingsByNameAndType(u.settingName, u.optionType), r = d.getID(), l = d.getType()) : d = e.OptionsSettings.byID(r), d) {
                var g = d.lastSelectedValue;
                if (!h && (i(g) || d.lastSelectedValue === -1)) {
                    var p = d.getParams();
                    d.lastSelectedValue = 1e3 * parseInt(p[0].period)
                }
                if (c !== d.getSymbolName() && (u = null), s.height > 75) {
                    var m = e.UtipFunctions.getOptionTimesForChart(this, d, !u),
                    _ = null,
                    y = d.getParams();
                    if (u) {
                        var S = (parseInt(u.expiryDate.toString(), 10) - parseInt(u.openDate.toString(), 10)) / 1e3;
                        y.forEach(function(e, t) {
                            if (e.period == S.toString() && e.earlyClosing == u.earlyClosing && e.interval == u.interval && e.stopLine == u.stopLine) return _ = t,
                            null
                        })
                    }
                    var f = e.drawOptionSettingsLine,
                    v = e.LangManager.getStringByKey.bind(e.LangManager),
                    C = e.UtipFunctions,
                    b = t.canvas,
                    T = C.getUTCDate(e.SymbolsData.getLastChangedTime().valueOf()),
                    P = e.getOptionLineTypes(),
                    D = {
                        openDate: m.openDate,
                        stopTime: u ? m.stopTime: -1,
                        expiryTime: m.expiryTime > -1 ? m.expiryTime: -1
                    },
                    I = !1;
                    u && c == u.symbolName && (D.mainLine = D.openDate, f(this, b, m.openDate, v("cQOBBuy") || "Buy", P[0], D, !1));
                    var w;
                    w = i(_) ? u ? u.stopLine: "0": y[_].stopLine,
                    "0" != w && u && (I = !I, D.mainLine = D.stopTime, f(this, b, m.stopTime, v("cCUEarlyExecution") || "Early execution", P[1], D, T <= m.stopTime)),
                    m.expiryTime > -1 && (D.mainLine = D.expiryTime, f(this, b, m.expiryTime, v("cCUExpiryTime") || "Expiry time", P[2], D, T > m.stopTime && T < m.expiryTime || !I))
                }
                if (d && !u && !e.Browser.IsMobile) {
                    var M = e.OptionSettingsType;
                    if (l !== M.oneTouch && l !== M.range) return;
                    var O = 0;
                    a && !e.Browser.IsMobile && (O = o.package.binary.periodControl.getSelectedOption());
                    var L = e.SymbolsData.getSymbols()[d.getSymbolName()],
                    k = parseFloat(d.getPrice()),
                    B = d.getParams(),
                    N = B[O],
                    x = parseInt(N.interval),
                    A = d.getName(),
                    V = e.OptionTypeNames[l],
                    E = L.getPrecision(),
                    F = k + x / E,
                    W = k - x / E,
                    R = {
                        type: "topBorder",
                        value: F
                    },
                    H = {
                        type: "bottomBorder",
                        value: W
                    },
                    K = e.drawOptionIntervalLine;
                    K(this, b, R, V + " " + A, null, V),
                    K(this, b, H, V + " " + A, null, V)
                }
            }
        }
    },
    t.clearBinaryPosition = function() {
        this.optionPosition = null
    },
    t.updateExpirationLine = function(t) {
        var i = e.OptionsSettings.byID(this.getOptionSettingsId());
        if (!e.valueIsEmpty(i)) {
            for (var s = i.getParams(), n = s.length, o = !1, a = 0; a < n; ++a) {
                var r = s[a];
                if (1e3 * parseInt(r.period) === t) {
                    o = !0;
                    break
                }
            }
            i.lastSelectedValue = o === !0 ? t: -1
        }
    },
    t.setTimeframe = function(e) {
        var t = this.getGraphicArea(),
        i = t.getGraphicWindows();
        i.setTimeframe(e)
    },
    t.turnOffMarks = function(e) {
        var t = this.getGraphicArea(),
        i = t.getGraphicWindows();
        i.deActivateMarks(e)
    },
    t.refreshTradePanelData = function(e) {
        var t = this.getGraphicArea(),
        i = t.getGraphicWindows();
        i.refreshTradePanelData(e)
    },
    t.getIndex = function() {
        var e = this.getGraphicArea(),
        t = e.getGraphicWindows();
        return t.charts.indexOf(this)
    },
    t.isChartOfActiveGraphicWindow = function() {
        var t = this.getGraphicArea(),
        i = t.getGraphicWindows();
        return i === e.activeChart;
    },
    t = null,
    e.VolumeIndicator = function(e, t) {
        this._graphicArea = e,
        this._graphicArea.graphicObjects.push(this),
        this._chart = t
    };
    var i = e.VolumeIndicator.prototype;
    return i.draw = function(t) {
        var i = this._graphicArea._graphicWindows,
        s = i._position,
        n = i.getVisibleBarsCount(),
        o = i.options,
        a = e.graphicConst.GraphicWindowLeft,
        r = null,
        l = 0,
        h = 0;
        l = a + 1 - o.scale + e.UtipFunctions.div(o.scale, 2),
        s = i.getPrevDate(s),
        t.strokeStyle = o.colorScheme.volume || "#ffff00";
        for (var d = 1; d < n; d++) l += o.scale,
        s = i.getNextDate(s),
        r = this._chart.getQuote(s),
        r.open !== -1 && (h = this._graphicArea.getYCoord(r.volume), t.drawLine(l, this._graphicArea.topForBorders + this._graphicArea.heightForBorders - 1, l, h));
        this._chart.volumesModulus = this._graphicArea.modulus
    },
    i.drawBorders = function(t) {
        for (var i = this._graphicArea,
        s = i.getGraphicWindows(), n = s.getWidth(), o = s._position, a = s.getVisibleBarsCount(), r = 0, l = e.graphicConst.GraphicWindowRight, h = e.graphicConst.GraphicWindowLeft, d = null, c = 1; c < a; c++) d = this._chart.getQuote(o),
        d.open > -1 && d.volume > r && (r = d.volume),
        o = s._visiblePositions[c];
        0 != r ? (i.max = r, i.min = 0, this.drawNames(t), i.max += .1 * r, t.font = "7pt Roboto", t.textBaseline = "top", t.fillStyle = s.options.colorScheme.text, t.fillText(Math.floor(i.max), h + n - l + 7, i.top - 5), t.fillText(this._graphicArea.min, h + n - l + 7, i.heightForBorders + i.top - 10)) : (t.fillStyle = s.options.colorScheme.innerBackground, t.fillRect(h + 1, i.topForBorders + 1, n - l, i.heightForBorders - 1), this.drawNames(t))
    },
    i.drawNames = function(t) {
        var i = this._graphicArea,
        s = i.getGraphicWindows(),
        n = s.options,
        o = "";
        n.showNames && (t.font = "7pt Roboto", t.textBaseline = "top", t.fillStyle = n.colorScheme.names, o = "VOLUME ", 0 != this._graphicArea.max && (o += " Max: " + Math.floor(i.max) + " Min: " + i.min), t.fillText(o, e.graphicConst.GraphicWindowLeft + 10, i.top + 5))
    },
    i.getSettingsForSave = function() {
        return {
            className: "volume",
            symbolName: this._chart.symbolName
        }
    },
    i.getChart = function() {
        return this._chart
    },
    i = null,
    e
}),
define("menuNewChart", ["menu"],
function(e) {
    e.NewChartMenu = function(t) {
        this._defineEvents(["NewChart"]),
        e.SymbolsData.register(this),
        e.OptionsSettings.register(this),
        e.Socket.register(this),
        this.lastOpenedChartCount = 0,
        e.NewChartMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.NewChartMenu, e.Menu);
    var t = e.NewChartMenu.prototype;
    return t.composeByForexMode = function(t, i, s) {
        var n = e.Delegate,
        o = this._addChart,
        a = this.getSymbolsBySymbolGroup.bind(this),
        r = e.SymbolsData.getSymbolsGroups(),
        l = [];
        for (var h in r) if (r.hasOwnProperty(h)) {
            var d = r[h],
            c = a(d.id) || [];
            c.length && l.push({
                Text: d.name,
                Menu: {
                    CheckedType: i || "NoChecked",
                    Items: c,
                    ItemClick: n(this, s || o),
                    Class: t || ""
                }
            })
        }
        return this._Items = l
    },
    t.composeByBinaryMode = function(t, i, s) {
        var n = e.Delegate,
        o = this._addChart,
        a = e.SymbolsData.getSymbols(),
        r = e.OptionsSettings,
        l = r.getFavoritesByType.bind(r),
        h = r.getOptionsSettingsMenuItemsList.bind(r),
        d = e.OptionTypeNames,
        c = [];
        for (var u in d) if (d.hasOwnProperty(u)) {
            var g = l(parseInt(u)).filter(function(e) {
                try {
                    return a[e.getSymbolName()].canUse()
                } catch(e) {
                    return ! 1
                }
            });
            g.length && c.push({
                Text: d[u],
                Menu: {
                    CheckedType: i || "NoChecked",
                    Items: h(g),
                    ItemClick: n(this, s || o),
                    Class: t || ""
                }
            })
        }
        return this._Items = c
    },
    t._render = function() {
        this.clear(),
        this._Items = [],
        this._CheckedType = "NoChecked",
        this.ItemClick = e.Delegate(this, this._onNewChartItemClick),
        this._Items = this._Items.concat(this.getLastOpenedCharts()),
        this.lastOpenedChartCount = this._Items.length;
        var t = this._Class.indexOf("MenuPanelSettings") != -1 ? "MenuPanelSettings": "";
        e.getTerminal().useOnlyOptions ? this.composeByBinaryMode(t) : this.composeByForexMode(t),
        e.NewChartMenu.base._render.apply(this, arguments)
    },
    t.getLastOpenedCharts = function() {
        var t = e.UserSettings.Terminal.LastOpenedChart,
        i = [];
        for (var s in t) if (e.getTerminal().useOnlyOptions) {
            if (e.OptionsSettings.getAllFavoriteSymbolsNames().indexOf(t[s]) == -1) continue;
            i.push({
                Text: t[s],
                ItemClick: this.ItemClick
            })
        } else {
            if (e.SymbolsData.getSelectedSymbols().indexOf(t[s]) == -1) continue;
            i.push({
                Text: t[s],
                ItemClick: this.ItemClick
            })
        }
        return i.reverse()
    },
    t._createGraphicWindow = function(t) {
        var i, s, n, o, a, r = e.getTerminal(),
        l = e.OptionsSettings,
        h = r.getSwiperQuotes(),
        d = h.getSelectedPage(),
        c = "Quotes" === d.getId();
        if (c) o = t;
        else {
            var u = l.getOptionsSettings(),
            g = u.filter(function(e, i, s) {
                return e.getSymbolName() === t && e.canUse()
            }),
            p = g.filter(function(e, i, s) {
                return e.getName() === t
            });
            0 !== p.length ? i = p[0] : 0 !== g.length && (i = g[0]),
            i || (i = l.getOptionSettingsByName(t)),
            o = e.getTerminal().useOnlyOptions ? i.getSymbolName() : t,
            i && i.canUse() && (s = i.getID(), n = i.getType())
        }
        var m = e.tradePanelConst,
        _ = m.workMode,
        y = c || !i ? _.market: _.binary,
        S = e.valueIsEmpty(n) || y !== _.binary ? m.toolType[_.market].buySell: n,
        f = e.showTradePanel(),
        v = {
            workMode: y,
            toolType: S,
            symbolName: o,
            binaryOptionId: s || null,
            chartIndex: 0,
            showed: f
        };
        a = r.createNewChart(o, s, n),
        a.initTradePanelModule(v),
        e.updateSizeTradePanels(a, f)
    },
    t._onSymbolGroupClick = function(t) {
        var i = t.Item;
        this._createGraphicWindow(i.getText()),
        i._ParentMenu.hide(),
        e._menuMasterObject.hideAll()
    },
    t.getSymbolsBySymbolGroup = function(t) {
        var i = function() {};
        if (this instanceof e.ChangeChartMenu) {
            var s = this._CurrentChartSymbol;
            i = function(e) {
                return e === s
            }
        } else i = function(e) {
            return ! 1
        };
        var n = e.SymbolsData,
        o = n.getSymbolByGroupID(t),
        a = n.getSelectedSymbols(),
        r = {},
        l = [];
        a.forEach(function(e) {
            r[e] = !0
        });
        for (var h = 0,
        d = o.length; h < d; ++h) {
            var c = o[h],
            u = c.getSymbolName();
            c.canUse() && r[u] && l.push({
                Text: u,
                Key: u,
                Checked: i(u)
            })
        }
        return l
    },
    t._onNewChartItemClick = function(e) {
        null == e.Item._Menu && (this.hide(), this._MenuSource._ParentMenu && this._MenuSource._ParentMenu.hide(), this._createGraphicWindow(e.Item.getText()))
    },
    t.clearItemClick = function(e, t, i) {
        e.Click.removeAll()
    },
    t._onGetOptionsSettings = function(e) {
        this._onGetSymbols(e)
    },
    t._onGetSymbols = function(t) {
        if (this._Items) {
            for (var i = this.lastOpenedChartCount; i < this._Items.length; i++) this._Items[i].removeFromDom();
            this._Items.splice(this.lastOpenedChartCount, this._Items.length - this.lastOpenedChartCount);
            for (var i = 0; i < this._Items.length; i++) e.SymbolsData.getSymbols()[this._Items[i]._Text] || (this._Items[i].removeFromDom(), this._Items.splice(i, 1))
        }
        var s = this._Class.indexOf("MenuPanelSettings") != -1 ? "MenuPanelSettings": "",
        n = [],
        o = !1;
        if (this.lastOpenedChartCount > 0 && null == this._DomNode.querySelector(".WTHorisontalSeparator") && (o = !0), e.getTerminal().useOnlyOptions) {
            var a = e.OptionTypeNames,
            r = [];
            for (var l in a) if (r = e.OptionsSettings.getOptionsByTypeExceptForbidden(parseInt(l), !0), 0 != r.length) {
                var h = {};
                h.Text = a[l],
                o && (h.Separator = !0, o = !1),
                h.Menu = {
                    CheckedType: "NoChecked",
                    Items: e.OptionsSettings.getOptionsSettingsMenuItemsList(r),
                    ItemClick: e.Delegate(this, this._onSymbolGroupClick),
                    Class: s
                },
                n.push(h)
            }
        } else {
            var d = e.SymbolsData.getSymbolsGroups();
            for (var l in d) if (0 != this.getSymbolsBySymbolGroup(d[l].id).length) {
                var h = {};
                h.Text = d[l].name,
                o && (h.Separator = !0, o = !1),
                h.Menu = {
                    CheckedType: "NoChecked",
                    ItemClick: e.Delegate(this, this._onSymbolGroupClick),
                    Items: this.getSymbolsBySymbolGroup(d[l].id),
                    Class: s
                },
                n.push(h)
            }
        }
        this._Items.forEach(this.clearItemClick, this),
        this._Items = this._Items.concat(n),
        this.updateMenuItems()
    },
    t._onGetGroups = function(e) {
        this._render()
    },
    t.update = function() {
        for (var e = 0; e < this.lastOpenedChartCount; e++) null != this._Items[e] && this._Items[e].removeFromDom();
        this._Items.splice(0, this.lastOpenedChartCount);
        var t = this.getLastOpenedCharts();
        this.lastOpenedChartCount = t.length,
        null != this._Items && this._Items.length > 0 && this._Items[0]._ParentMenu.getDomNode().getElementsByClassName("WTHorisontalSeparator").length > 0 && this._Items[0]._ParentMenu.getDomNode().removeChild(this._Items[0]._ParentMenu.getDomNode().getElementsByClassName("WTHorisontalSeparator")[0]),
        t = t.concat(this._Items),
        this._Items = t,
        this.updateMenuItems(),
        this._onGetSymbols()
    },
    t.show = function(t, i) {
        this.update(),
        e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i)
    },
    t.reRender = function() {},
    t.reInit = function() {
        return this._unRegisterFromAll(),
        e._newChartMenu = null,
        e._newChartMenu = new e.NewChartMenu({}),
        e._newChartMenu
    },
    t._unRegisterFromAll = function() {
        e.SymbolsData.unRegister(this),
        e.OptionsSettings.unRegister(this),
        e.Socket.unRegister(this)
    },
    t._onSocketClose = function() {
        this._unRegisterFromAll()
    },
    t = null,
    e.getNewChartMenu = function(t) {
        return e._newChartMenu && delete e._newChartMenu,
        t = t || {},
        e._newChartMenu = new e.NewChartMenu(t),
        e._newChartMenu
    },
    e
}),
define("menuChangeChart", ["menuNewChart"],
function(e) {
    e.ChangeChartMenu = function(t) {
        this._defineEvents(["NewChart"]),
        e.SymbolsData.register(this),
        this.lastOpenedChartCount = 0,
        e.ChangeChartMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.ChangeChartMenu, e.NewChartMenu);
    var t = e.ChangeChartMenu.prototype;
    return t._render = function() {
        if (this.clear(), this._Items = [], this._CheckedType = "NoChecked", e.activeChart) {
            this._CurrentChartSymbol = e.activeChart.getMainSymbolName();
            var t = this._changeCurrentChart;
            e.getTerminal().useOnlyOptions ? this.composeByBinaryMode(null, "Unique", t) : this.composeByForexMode(null, "Unique", t),
            e.NewChartMenu.base._render.apply(this, arguments)
        }
    },
    t._changeCurrentChart = function(t) {
        e._menuMasterObject.hideAll();
        var i, s = t.Item.getText() || "",
        n = parseInt(t.Item.getId());
        "" != s && (e.valueIsEmpty(n) || (i = e.OptionsSettings.byID(n)), i || (i = e.OptionsSettings.getOptionSettingsByOptionTypeAndSymbolName(e.OptionsSettings.getSelectedOptionType(), s)), i || (i = e.OptionsSettings.searchOptionSettings(s)), i && !i.canUse() && (i = null)),
        i && (s = i.getSymbolName());
        var o = e.cloneObject(e.UserSettings.WindowsTemplates || e.getDefaultWindowsTemplate());
        e.UserSettings.WindowsTemplates || (e.UserSettings.WindowsTemplates = o);
        var a = e.periodNames[e.getPeriodCode(o.period)],
        r = e.activeChart.realCurrentObject == e.activeChart.charts[0];
        if (e.activeChart.realCurrentObject ? (i && (e.activeChart.realCurrentObject.setOptionSettingsId(i.getID()), e.activeChart.realCurrentObject.setOptionSettingsType(i.getType())), e.activeChart.realCurrentObject.setSymbolName(s), e.activeChart.realCurrentObject.setPeriod(e.activeChart.getPeriod())) : (i && (e.activeChart.realCurrentObject.setOptionSettingsId(i.getID()), e.activeChart.realCurrentObject.setOptionSettingsType(i.getType())), e.activeChart.charts[0].setSymbolName(s), e.activeChart.charts[0].setPeriod(e.activeChart.getPeriod())), 0 == e.activeChart.charts.indexOf(e.activeChart.realCurrentObject ? e.activeChart.realCurrentObject: e.activeChart.charts[0])) if (e.getTerminal().showChartsAs == e.chartsMode.tabs) e.getTerminal().getSwiperCharts().getSelectedPage().setTitle('<div class="Symbol">' + s + '</div> <div class="Period">' + a + "</div>"),
        e.getTerminal().getSwiperCharts().getSelectedPage().setData(s);
        else if (e.getTerminal().showChartsAs == e.chartsMode.windows) {
            e.activeChartDialog.setTitle('<div class="Symbol">' + s + '</div> <div class="Period">' + a + "</div>");
            var l = e.getTerminal().getSwiperCharts().getTabButtonByKey(e.activeChartDialog.ownGraphicWindow.getContainerID());
            l.setText('<div class="Symbol">' + s + '</div> <div class="Period">' + a + "</div>")
        }
        if (e.activeChart.show(), !r) return void e.getTerminal().saveSettings();
        var h = e.activeChart,
        d = h.realCurrentObject || h.charts[0],
        c = i ? i.getID() : null,
        u = null !== c ? i.getType() : null,
        g = e.getTerminal().getSwiperQuotes(),
        p = g.getSelectedPage(),
        m = e.tradePanelConst,
        _ = m.workMode,
        y = "Quotes" != p.getId() && i ? _.binary: _.market,
        S = e.valueIsEmpty(u) || y !== _.binary ? m.toolType[_.market].buySell: u,
        f = {
            workMode: y,
            toolType: S,
            symbol: e.SymbolsData.getSymbols()[s],
            binaryOption: e.OptionsSettings.byID(c),
            chart: d
        };
        h.tradePanelModule.changeData(f)
    },
    t.show = function() {
        var t, i = {},
        s = e.activeChart;
        if (s) {
            var n = s.realCurrentObject,
            o = s.tradePanelModule,
            a = !!o && o.showed,
            r = n instanceof e.Chart ? n: s.charts[0];
            e.getTerminal().useOnlyOptions ? (t = function(e, t) {
                return i.name === e && i.id === t
            },
            i.id = r.hasTradePanelModuleBinaryData() && a ? r.getTPMOptionSettingsId() : r.getOptionSettingsId(), "number" != typeof i.id || isNaN(i.id) || (i.name = e.OptionsSettings.byID(i.id).getName())) : (t = function(e, t) {
                return i.name === e
            },
            i.name = r.getSymbolName())
        }
        this.getItems().forEach(function(e) {
            for (var i, s = !1,
            n = e.getMenu(), o = n.getItems(), a = 0; i = o[a];) {
                if (t(i.getText(), i.getID())) {
                    i.setChecked(!0),
                    s = !0;
                    break
                }++a
            }
            s || n.uncheckAll()
        }),
        e.NewChartMenu.base.show.apply(this, arguments)
    },
    t._onGetSymbols = function(t) {
        function i() {
            for (var e, t = 0,
            i = n.getItems(); e = i[0];) {
                var s = e.getMenu();
                if (s) {
                    s._IsOpen && (o = t);
                    for (var a, r = s.getItems(); a = r[0];) a.unregister(),
                    a.removeFromDom(),
                    r.splice(0, 1)
                }
                e.unregister(),
                e.removeFromDom(),
                i.splice(0, 1),
                ++t
            }
        }
        function s() {
            var t = a.useOnlyOptions ? n.composeByBinaryMode() : n.composeByForexMode(),
            i = e.Delegate,
            s = e.MenuItem,
            r = n._onItemClick.bind(n),
            l = n._onItemCheckedChanged.bind(n);
            if (n.setItems(t.map(function(e) {
                var t = e;
                t.ParentMenu = n,
                t = new s(t);
                var o = {
                    Item: t
                };
                return t.Click.removeAll(),
                t.Click.add(i(n, r, o)),
                t.CheckedChanged.removeAll(),
                t.CheckedChanged.add(i(n, l, o)),
                t
            })), o !== -1) {
                var h = n.getItems()[o],
                d = h.getDomNode();
                h.getMenu().show(d.offsetParent.offsetLeft + d.offsetLeft + d.offsetWidth + 2, d.offsetParent.offsetTop + d.offsetTop),
                h.setHovered(!0)
            }
        }
        var n = this,
        o = -1,
        a = e.getTerminal();
        i(),
        s()
    },
    t = null,
    e.getChangeChartMenu = function() {
        return e._changeChartMenu && (e._changeChartMenu.hide(), e._changeChartMenu.unregister(), delete e._changeChartMenu),
        e._changeChartMenu = new e.ChangeChartMenu
    },
    e
}),
define("menuAddChart", ["menuNewChart"],
function(e) {
    e.AddChartMenu = function(t) {
        this._defineEvents(["NewChart"]),
        e.SymbolsData.register(this),
        this.lastOpenedChartCount = 0,
        e.AddChartMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.AddChartMenu, e.NewChartMenu);
    var t = e.AddChartMenu.prototype;
    return t._render = function() {
        this.clear(),
        this._Items = [],
        this._CheckedType = "NoChecked",
        e.getTerminal().useOnlyOptions ? this.composeByBinaryMode() : this.composeByForexMode(),
        e.NewChartMenu.base._render.apply(this, arguments)
    },
    t._addChart = function(t) {
        e._menuMasterObject.hideAll();
        var i, s = "",
        n = parseInt(t.Item.getId());
        if (e.getTerminal().useOnlyOptions) {
            var o = t.Item.getText();
            e.valueIsEmpty(n) || (i = e.OptionsSettings.byID(n)),
            i || (i = e.OptionsSettings.getOptionSettingsByName(o)),
            s = i.getSymbolName()
        } else s = t.Item.getText(),
        e.OptionsSettings.getFavoritesByType(e.OptionsSettings.getSelectedOptionSettings().getType()).forEach(function(e) {
            e._symbolName === s && (i = e)
        }),
        e.valueIsEmpty(n) || (i = e.OptionsSettings.byID(n)),
        i || (i = e.OptionsSettings.getOptionSettingsBySymbolName(t.Item.getText()));
        var a = e.cloneObject(e.UserSettings.WindowsTemplates || e.getDefaultWindowsTemplate());
        e.UserSettings.WindowsTemplates || (e.UserSettings.WindowsTemplates = a);
        var r = i ? i.getID() : void 0,
        l = i ? i.getType() : void 0;
        e.activeChart.createChart(s, r, l),
        e.activeChart.show(),
        e.saveUserSettings()
    },
    t._onGetSymbols = function(t) {
        function i() {
            for (var e, t = 0,
            i = n.getItems(); e = i[0];) {
                var s = e.getMenu();
                if (s) {
                    s._IsOpen && (o = t);
                    for (var a, r = s.getItems(); a = r[0];) a.unregister(),
                    a.removeFromDom(),
                    r.splice(0, 1)
                }
                e.unregister(),
                e.removeFromDom(),
                i.splice(0, 1),
                ++t
            }
        }
        function s() {
            var t = a.useOnlyOptions ? n.composeByBinaryMode() : n.composeByForexMode(),
            i = e.Delegate,
            s = e.MenuItem,
            r = n._onItemClick.bind(n),
            l = n._onItemCheckedChanged.bind(n);
            if (n.setItems(t.map(function(e) {
                var t = e;
                t.ParentMenu = n,
                t = new s(t);
                var o = {
                    Item: t
                };
                return t.Click.removeAll(),
                t.Click.add(i(n, r, o)),
                t.CheckedChanged.removeAll(),
                t.CheckedChanged.add(i(n, l, o)),
                t
            })), o !== -1) {
                var h = n.getItems()[o],
                d = h.getDomNode();
                h.getMenu().show(d.offsetParent.offsetLeft + d.offsetLeft + d.offsetWidth + 2, d.offsetParent.offsetTop + d.offsetTop),
                h.setHovered(!0)
            }
        }
        var n = this,
        o = -1,
        a = e.getTerminal();
        i(),
        s()
    },
    t = null,
    e.getAddChartMenu = function() {
        return e._addChartMenu && (e._addChartMenu.hide(), e._addChartMenu.unregister(), delete e._addChartMenu),
        e._addChartMenu = new e.AddChartMenu
    },
    e
}),
define("menuChart", ["menu", "menuChangeChart", "menuAddChart"],
function(e) {
    e.ChartMenu = function() {
        this._graphicWindows = null,
        this._MenuSource = null,
        e.ChartMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.ChartMenu, e.Menu);
    var t = e.ChartMenu.prototype;
    return t._render = function() {
        this.BeforeOpen = e.Delegate(this, this._onContextMenuBeforeOpen),
        this._CheckedType = "NoChecked",
        this.ItemClick = e.Delegate(this, this._onItemClick),
        this._Items = [{
            Text: this.symbolName,
            Enabled: !1
        },
        {
            Text: "New market order",
            Id: "New_market_order",
            Key: "cMFNewMarketOrder",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 17,
            ImageListCol: 0,
            Separator: !0,
            HotkeyText: window.IsTabletApplication() ? "": "F9"
        },
        {
            Text: "New pending order",
            Id: "New_pending_order",
            Key: "cMFNewPendingOrder",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 18,
            ImageListCol: 0
        },
        {
            Text: "Buy option",
            Id: "buy_option",
            Key: "cMFBuyOption",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 20,
            ImageListCol: 0
        },
        {
            Text: "Change symbol",
            Id: "Change_symbol",
            Key: "cMFEditSymbols",
            Menu: new e.ChangeChartMenu,
            Separator: !0
        },
        {
            Text: "Add symbol",
            Id: "add_symbol",
            Key: "cMFAddSymbols",
            Menu: new e.AddChartMenu
        },
        {
            Text: "Delete symbol",
            Id: "delete_symbol",
            Key: "cMFDelChart"
        },
        {
            Text: "Refresh",
            Id: "Refresh",
            Key: "cMFRefreshVisible"
        },
        {
            Text: "Volumes",
            Id: "Volumes",
            Key: "cICVolumes",
            Separator: !0
        },
        {
            Text: "Levels",
            Id: "levels",
            Key: "cMFLevels"
        },
        {
            Text: "Remove all objects",
            Id: "Remove_all_objects",
            Key: "cMFClearArea",
            Separator: !0
        },
        {
            Text: "Step by step",
            Id: "Step_by_step",
            Key: "cMFStepbyStep",
            Separator: !0,
            HotkeyText: "&uarr;/&darr;"
        },
        {
            Text: "Settings",
            id: "settings",
            Key: "cBTNSettings",
            Menu: new e.ChartSettingsMenu
        }],
        e.ChartMenu.base._render.apply(this, arguments),
        this.getItemById("buy_option").investorModeDependency = !0,
        this.getItemById("New_market_order").investorModeDependency = !0,
        this.getItemById("New_pending_order").investorModeDependency = !0
    },
    t.reRender = function() {
        this.unregisterItems(),
        e.ChartMenu.base.reRender.apply(this, arguments)
    },
    t._onContextMenuBeforeOpen = function() {
        var t = e.SymbolsData.getSymbols()[this.symbolName].getCalculationTypeName(),
        i = e.SymbolsData.getSelectedSymbols(),
        s = e.OptionsSettings.getOptionSettingsBySymbolName(this.symbolName),
        n = this.getItemById("New_market_order"),
        o = this.getItemById("New_pending_order"),
        a = this.getItemById("buy_option"),
        r = this.getItemById("Change_symbol"),
        l = this.getItemById("add_symbol");
        "index" === t ? (n.setEnabled(!1), o.setEnabled(!1)) : (n.setEnabled(!0), o.setEnabled(!0)),
        i.length <= 0 && (r.setEnabled(!1), l.setEnabled(!1), n.setEnabled(!1), o.setEnabled(!1)),
        null == s || s.isShowClassicOption === !1 && s.isShowExpressOption === !1 ? a.setEnabled(!1) : a.setEnabled(!0);
        var h = this.getItemById("buy_option");
        e.getTerminal().useOptions ? h.setVisible(!0) : h.setVisible(!1),
        e.getTerminal().useOnlyOptions ? (this.getItemById("New_market_order").setVisible(!1), this.getItemById("New_pending_order").setVisible(!1)) : (this.getItemById("New_market_order").setVisible(!0), this.getItemById("New_pending_order").setVisible(!0)),
        this.getItemById("Change_symbol").getMenu()._render();
        var d = e.activeChart,
        c = this._graphicWindows.realCurrentObject.getGraphicArea().graphicObjects,
        u = 1;
        c.forEach(function(t) { (t instanceof e._PositionMark || t instanceof e._TradeLine) && u++
        }),
        d.getVerticalLines().length > 0 || d._indicators.length > 0 || c.length - u > 0 ? this.getItemById("Remove_all_objects").setEnabled(!0) : this.getItemById("Remove_all_objects").setEnabled(!1),
        e.investorAccount && (this._DomNode.querySelector(".WTHorisontalSeparator").style.display = "none")
    },
    t._onItemClick = function(t) {
        t.preventDefault();
        var i = t.Item.getId();
        if (i && this._graphicWindows.realCurrentObject instanceof e.Chart) {
            var s;
            switch (i) {
            case "New_market_order":
                s = e.getDialogNewOrder(),
                s.setCurrentQuote(this.symbolName),
                s.show();
                break;
            case "New_pending_order":
                s = e.getDialogPendingOrder(),
                s.setCurrentQuote(this.symbolName),
                s.show();
                break;
            case "buy_option":
                e.getTerminal().showBuyOptionDialogByChart(e.OptionsSettings.getSelectedOptionSettings());
                break;
            case "delete_symbol":
                this._graphicWindows.deleteChart(),
                e.Charts2.saveOpenedCharts(),
                e.saveUserSettings();
                break;
            case "Refresh":
                this._refreshChart();
                break;
            case "Volumes":
                this._graphicWindows.realCurrentObject.showVolume(),
                e.Charts2.saveOpenedCharts(),
                e.saveUserSettings();
                break;
            case "levels":
                var n = e.getDialogLevels();
                n.show(this._graphicWindows.realCurrentObject.getGraphicArea());
                break;
            case "Step_by_step":
                e.activeChart.setPosition(e.activeChart.getNextDate(e.activeChart.getPosition()));
                break;
            case "Remove_all_objects":
                var o = this._graphicWindows.realCurrentObject;
                this.removeAllObjects(o)
            }
            null == t.Item._Menu && this.hide()
        }
    },
    t.removeAllObjects = function(t) {
        for (var i = e.activeChart,
        s = 0,
        n = i.getVerticalLines(); n.length > 0;) i.deleteVerticalLine(n[s]),
        s++;
        for (i.graphicAreas.forEach(function(t) {
            for (var i = t.graphicObjects,
            s = i.filter(function(t) {
                return ! (t instanceof e.Chart || t instanceof e.Indicator || t instanceof e.VolumeIndicator)
            }), n = 0, o = s.length; n < o; n++) t.deleteGraphicObject(s[n])
        }), s = 0; i._indicators.length > 0;) {
            var o = i._indicators[s];
            o._graphicArea.deleteGraphicObject(o),
            i.deleteIndicator(o)
        }
        i.updateGAHeights(),
        e.getTerminal().saveSettings()
    },
    t._refreshChart = function() {
        var t = this._graphicWindows || e.activeChart,
        i = t.realCurrentObject || t.charts[0];
        if (i.quotesData.isEmpty()) i.quotesData.getLastCandle(500);
        else {
            var s = t._position,
            n = s,
            o = t.getVisibleBarsCount(),
            a = t.getVisiblePositions(),
            r = a.length;
            o <= r ? n = a[o - 1] : 0 !== r && (n = a[r - 1]),
            i.quotesData.getArchiveByDateExcludeTimezone(s, n, !0, !0)
        }
    },
    t.updateAndShowMenu = function(t, i, s) {
        this._graphicWindows = t,
        this.symbolName = this._graphicWindows.realCurrentObject.getSymbolName(),
        this._Items[0].setText(this._graphicWindows.realCurrentObject.getSymbolName()),
        this.getItemById("delete_symbol").setEnabled(1 != t.charts.length);
        var n = this._graphicWindows.realCurrentObject.isVolumeShowed();
        this.getItemById("Volumes").setChecked(n),
        this.hide(),
        this.show(i, s);
        var o, a = e.SymbolsData.getSymbols()[this.symbolName],
        r = "index" === a.getCalculationTypeName();
        o = !!a && (!r && a.allowTrade());
        var l = this.getItemById("New_market_order"),
        h = this.getItemById("New_pending_order");
        l.setEnabled(o),
        h.setEnabled(o);
        var d = e.OptionsSettings.getSelectedOptionSettings(),
        c = this.getItemById("buy_option"); (!d || d && !e.SymbolsData.getSymbols()[d.getSymbolName()].allowTrade()) && c.setEnabled(!1)
    },
    t.getGraphicWindows = function() {
        return this._graphicWindows
    },
    t = null,
    e.getChartMenu = function() {
        return e._chartMenu && (e._chartMenu.hide(), e._chartMenu.unregister(), delete e._chartMenu),
        e._chartMenu = new e.ChartMenu
    },
    e
}),
define("inputImage", ["inputSelect"],
function(e) {
    e.InputImage = function(t) {
        this._MenuWidth = 0,
        this._ClassMenu = "InputSelectOptionsMenu InputImageSelectOptionsMenu",
        e.InputImage.base.constructor.apply(this, arguments)
    },
    e.initClass(e.InputImage, e.InputSelect);
    var t = e.InputImage.prototype;
    return t._onOptionsMenuItemClick = function(e) {
        var t = e.Item;
        this._optionsMenu.hide(),
        t.getId() !== this._SelectedOption && (this.setValue(t._ImageUrl), this._SelectedOption = t.getId(), this.ChangedValue.fire({
            event: e,
            sender: this
        }))
    },
    t.setValue = function(e) {
        this._Value = e,
        this._fieldNode.style.backgroundImage = e ? 'url("' + e + '")': ""
    },
    t.getSelectedOptionData = function() {
        return this.getOptions()[this._SelectedOption].Data
    },
    t.setSelectedOptionByData = function(e) {
        this.getOptions().forEach(function(t, i) {
            t.Data == e && this.setSelectedOption(i)
        },
        this)
    },
    t.setSelectedOption = function(e) {
        this._SelectedOption = e,
        this.setValue(this._optionsMenu.getItems()[this._SelectedOption]._ImageUrl)
    },
    t.reCreateMenu = function() {
        delete this._optionsMenu,
        this._optionsMenu = new e.Menu({
            Class: this._ClassMenu,
            Items: this.getMenuItems(),
            CheckedType: "NoChecked",
            Width: this._MenuWidth,
            CustomScrollEnabled: !e.Browser.IsMobile,
            ItemClick: e.Delegate(this, this._onOptionsMenuItemClick),
            Closed: e.Delegate(this, this._hideMenu)
        })
    },
    t._render = function() {
        this._SelectedOption < 0 && (this._SelectedOption = 0),
        this._Template = e._Templates.InputImage,
        e.InputSelect.base._render.apply(this, arguments),
        this.reCreateMenu(),
        this._Options.length && this.setValue(this._optionsMenu._Items[this._SelectedOption]._ImageUrl),
        this._binds.selectButtonClick = this._onSelectButtonClick.bind(this),
        this._selectButton = this._DomNode.querySelector(".InputSelectButton"),
        this._inputNode = this._DomNode.querySelector(".WTInputImageField"),
        this._Edit ? e.addEvent(this._selectButton, "click", this._binds.selectButtonClick) : (this.addCSSClass("Locked"), this.setReadOnly(!0), this._NeedNotEditedStyle && this.addCSSClass("NotEdited"), e.addEvent(this._inputNode, "click", this._binds.selectButtonClick)),
        this.setWidth(this._Width),
        this.setFieldNodeWidth(this._Width - 13),
        this.setHeight(this._Height)
    },
    t.setFieldNodeWidth = function(t) {
        this._widthUnit = "px",
        "string" == typeof t && t.indexOf("%") ? (this._Width = Math.max(0, parseInt(t)), this._widthUnit = "%") : this._Width = Math.min(Math.max(0, t), e.DisplaySize.getWidth()),
        this._fieldNode && (this._fieldNode.style.width = this._Width ? this._Width + this._widthUnit: "")
    },
    t._showMenu = function() {
        if (this._Options.length >= 2) {
            this.addCSSClass("Active");
            var t = e.getCoords(this._inputNode);
            this._optionsMenu.setWidth(this._MenuWidth),
            this._optionsMenu.show(t.left, t.bottom)
        }
    },
    t = null,
    e
}),
define("dialogLineSettings", ["dialog", "inputImage"],
function(e) {
    e.DialogLineSettings = function(t) {
        this._object = null,
        this._caption = "",
        this._isFibo = !1,
        e.DialogLineSettings.base.constructor.apply(this, arguments),
        this.parametersContainer = [],
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogLineSettings, e.Dialog);
    var t = e.DialogLineSettings.prototype;
    return t._onClosed = function() {
        delete e._dialogLineSettings
    },
    t._render = function() {
        this._Height = 300,
        this._Width = 450,
        this._WithBlock = !0,
        this._Title = this._caption,
        this._ImageList = e.MainImageList,
        this._ImageListRow = 4,
        this._ImageListCol = 17,
        this._Content = e.htmlToDOM(e._Templates.DialogLineSettingsContent);
        var t = this._Content.querySelector(".DFooterControls"),
        i = this._Content.querySelector(".DTabControlContainer"),
        s = e.htmlToDOM(e._Templates.LineSettingsGeneralContent),
        n = e.htmlToDOM(e._Templates.LineSettingsOptionsContent),
        o = e.htmlToDOM(e._Templates.LineSettingsLevelsContent),
        a = s.querySelector(".LineStyleContent");
        this._saveBtn = new e.Button({
            ParentNode: t,
            Class: "DGreenButton",
            Width: 110,
            Key: "cMFSave",
            Text: "Save",
            Click: e.Delegate(this, this._onSaveLine)
        }),
        this._Swiper = new e.Swiper({
            ParentNode: i,
            Height: 230,
            TabMode: "Normal",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            Pages: this._getSwiperPages(s, n, o)
        }),
        this._colorLinePicker = new e.Input({
            ParentNode: a,
            Template: e._Templates.ColorSelect,
            Label: "Style",
            Width: 68,
            Class: "SelectedColor",
            Key: "cMFStyle",
            ReadOnly: !0,
            LabelPostfix: ": "
        }),
        this._lineStyleSelect = new e.InputImage({
            ParentNode: a,
            Width: 100,
            MenuWidth: 98,
            Edit: !1,
            Options: e.UtipFunctions.getLineStyle()
        }),
        this._lineWidthSelect = new e.InputImage({
            ParentNode: a,
            Width: 100,
            Edit: !1,
            ClassMenu: "InputSelectOptionsMenu InputImageSelectOptionsMenu MenuImage",
            MenuWidth: 150,
            Options: e.UtipFunctions.getLineWidth()
        }),
        e.DialogLineSettings.base._render.apply(this, arguments),
        this.addCSSClass("dialogLineSettings")
    },
    t._getSwiperPages = function(e, t, i) {
        var s = [{
            Title: "General",
            Key: "cLSFGEnaral",
            Id: "general",
            Content: e
        },
        {
            Title: "Options",
            Key: "cLSFParam",
            Id: "options",
            Content: t
        }];
        return this._object.className.indexOf("Fibo") != -1 && (this._isFibo = !0, s.push({
            Title: "Levels",
            Key: "cLSFFibolevel",
            Id: "levels",
            Content: i
        })),
        s
    },
    t.show = function() {
        e.DialogLineSettings.base.show.apply(this, arguments),
        jscolor.bind(),
        this._lineWidthSelect.setSelectedOptionByData(this._object.drawStyle.lineWidth),
        this._lineStyleSelect.setSelectedOptionByData(this._object.drawStyle.lineStyle),
        this._colorLinePicker._fieldNode.color.fromString("#" + this._object.drawStyle.lineColor)
    },
    t._onSaveLine = function() {
        var t = this._object,
        i = t.className;
        if (i.indexOf("Fibo") != -1 && !this._checkLevelsTable()) return void e.showErrorDialog(e.LangManager.getStringByKey("cLSWrongFibos") || "Invalid format value Fibonacci");
        var s = this._object.getParameters();
        if (i.indexOf("Fibo") != -1) {
            var n = this._levelsTable;
            if (n) {
                var o = n.getRows(),
                a = t.getIndexByCaption("Fibo Levels");
                a++;
                for (var r in o) if (o.hasOwnProperty(r)) {
                    var l = o[r],
                    h = l.getChildByFieldName("Level"),
                    d = l.getChildByFieldName("Description");
                    h && d && (t._parameters[a] = {
                        value: e.parseFloat(h.input.value.length > 5 ? h.input.value: e.numberFormat(h.input.value, 3, ".", "")),
                        type: "float",
                        caption: d.input.value
                    }),
                    a++
                }
                t._parameters = t._parameters.slice(0, a),
                t.drawFiboStyle.lineColor = "#" + this._fiboLineColorPicker._fieldNode.color,
                t.drawFiboStyle.lineWidth = this._fiboLineWidthSelect.getSelectedOptionData(),
                t.drawFiboStyle.lineStyle = this._fiboLineStyleSelect.getSelectedOptionData()
            }
            t.drawStyle.lineColor = "#" + this._colorLinePicker._fieldNode.color,
            t.drawStyle.lineWidth = this._lineWidthSelect.getSelectedOptionData(),
            t.drawStyle.lineStyle = this._lineStyleSelect.getSelectedOptionData(),
            e.UserSettings.LinesDefaults = e.UserSettings.LinesDefaults || {},
            e.UserSettings.LinesDefaults[i] = {
                drawFiboStyle: t.drawFiboStyle,
                drawStyle: t.drawStyle
            }
        } else t.drawStyle.lineColor = "#" + this._colorLinePicker._fieldNode.color,
        t.drawStyle.lineWidth = this._lineWidthSelect.getSelectedOptionData(),
        t.drawStyle.lineStyle = this._lineStyleSelect.getSelectedOptionData(),
        e.UserSettings.LinesDefaults = e.UserSettings.LinesDefaults || {},
        e.UserSettings.LinesDefaults[i] = t.drawStyle;
        for (var c = this.parametersContainer,
        u = c.length,
        g = 0; g < u; ++g) {
            var p = c[g],
            m = p.control,
            _ = s.indexOf(p.parameter),
            y = s[_],
            S = y.type;
            if ("time" == S) {
                var f = m.getValue().split(" "),
                v = f[0].split("."),
                C = f[1].split(":"),
                b = v[2] + "-" + v[1] + "-" + v[0] + "T" + C[0] + ":" + C[1] + ":00Z";
                y.value = new Date(b).valueOf() + (new Date).getTimezoneOffset() / 60 * 1e3 * 60 * 60
            } else if ("float" == S) if ("Angle" == y.caption) {
                for (var T = e.UtipFunctions,
                P = T.degToRad.bind(T), D = Math.round.bind(Math), I = Math.abs.bind(Math), w = e.parseFloat(m.getValue()); I(w) > 360;) w -= 360 * Math.sign(w);
                y.value = w;
                var M = t.getLength(),
                O = w;
                w = Math.cos(P(O)) * M;
                var L = t.getGraphicWindows().XToDate(D(t.point1.x + w));
                t.getParameterByCaption("Time2").value = L,
                w = Math.sin(P(O)) * M,
                L = t.getGraphicArea().getValueByCoord(D(t.point1.y - w)),
                t.getParameterByCaption("Value2").value = L
            } else y.value = e.parseFloat(m.getValue());
            else y.value = p.control.getChecked();
            s[_] = y
        }
        this.hide(),
        e.getTerminal().saveSettings()
    },
    t.clearLastSwiperPage = function(e) {
        for (var t = e.childElementCount,
        i = 0; i < t; i++) e.removeChild(e.childNodes[0])
    },
    t._onSwiperChangeSelectedPage = function(t) {
        if (1 == t.getSelectedPageIndex()) {
            this.parametersContainer.forEach(function(e) {
                e.control.removeFromDom()
            },
            this);
            for (var i = this._object.getParameters(), s = 0; s < i.length; s++) {
                var n = i[s];
                if ("Fibo Levels" == n.caption) break;
                var o = this._Content.querySelectorAll(".DLeftControls")[0],
                a = this._Content.querySelectorAll(".DRightControls")[0],
                r = this._Content.querySelector(".DAnyControls"),
                l = null,
                h = "";
                "time" == n.type ? (l = o, h = new Date(n.value).toLocaleFormat("%d.%m.%Y %H:%M")) : "float" == n.type ? (h = e.numberFormat(n.value, 6, ".", ""), l = "Angle" === n.caption ? r: a) : (l = r, h = n.value);
                var d = this.translateParameterCaption(n.caption),
                c = {};
                c = "time" == n.type || "float" == n.type ? new e.Input({
                    ParentNode: l,
                    Label: d.caption,
                    Key: d.key,
                    LabelPostfix: d.postfix + ": ",
                    Width: 125,
                    Value: h
                }) : new e.CheckBox({
                    ParentNode: l,
                    LabelPosition: "Right",
                    LabelPostfix: d.postfix,
                    Label: d.caption,
                    Key: d.key,
                    Checked: h
                }),
                this.parametersContainer.push({
                    control: c,
                    parameter: n
                })
            }
        }
        if (2 == t.getSelectedPageIndex()) {
            var o = this._Content.querySelectorAll(".DLeftControls")[0],
            a = this._Content.querySelectorAll(".DRightControls")[0];
            this.clearLastSwiperPage(o),
            this.clearLastSwiperPage(a),
            this._createLevelsTable(o),
            this._fiboLinesStyleSettings = new e.Container({
                ParentNode: a,
                Width: 200,
                Height: 160,
                Class: "FiboLinesStyleSettings"
            }),
            this._appendFiboLinesStyleSettingsControls(),
            this._loadCurrentFiboLinesStyleSettings(),
            this._createLevelsTableButtons(this._fiboLinesStyleSettings._DomNode)
        }
    },
    t._createLevelsTable = function(t) {
        var i = [],
        s = this._object.getParameters(),
        n = this._object.getIndexByCaption("Fibo Levels");
        for (n++, n; n < s.length; n++) {
            var o = s[n],
            a = o.value.toFixed(3),
            r = o.caption;
            i.push({
                cellValues: {
                    Level: a.length > 5 ? a: e.numberFormat(a, 3, ".", ""),
                    Description: r
                }
            })
        }
        if (!this._levelsTable) {
            var l = e._Templates;
            this._levelsTable = new e.DivTable({
                Template: l.TableLevels,
                HeaderTemplate: l.TableLevelsHeader,
                RowTemplates: [l.TableLevelsRow],
                TableType: "Levels",
                HeaderColumns: {
                    Level: {
                        Title: "Level",
                        Key: "cLRLevel",
                        Id: "Level",
                        IsVisible: !0,
                        Index: 0,
                        Width: "50%"
                    },
                    Description: {
                        Title: "Description",
                        Key: "cSODescription",
                        Id: "Description",
                        IsVisible: !0,
                        Index: 1,
                        Width: "50%"
                    }
                },
                AutoSizes: [1, 1],
                IsAutoSize: !0,
                IsSizingEnabled: !0,
                Data: [],
                Editable: !0,
                CustomScrollEnabled: !0
            })
        }
        if (t) {
            var h = e.htmlToDOM(e._Templates.LevelsContent),
            d = h.querySelector(".tableContent"),
            c = this._levelsTable.getDomNode();
            d.appendChild(c),
            t.appendChild(h)
        }
        this._levelsTable.fillTable(i),
        this._levelsTable.resizeHeader(),
        this._levelsTable.setSelectedRow(0)
    },
    t._createLevelsTableButtons = function(t) {
        this._deleteBtn = new e.Button({
            ParentNode: t,
            Class: "DButton",
            Width: 90,
            Text: "Delete",
            Key: "cDFGDeleteDataFeed",
            Click: e.Delegate(this, this._onDeleteBtnClick)
        }),
        this._addBtn = new e.Button({
            ParentNode: t,
            Class: "DButton",
            Width: 90,
            Text: "Add",
            Key: "cDFGAddDataFeed",
            Click: e.Delegate(this, this._onAddBtnClick)
        })
    },
    t._appendFiboLinesStyleSettingsControls = function() {
        var t = document.createElement("div");
        t.className = "InputsContainer";
        var i = document.createElement("div");
        i.className = "HeadContainer",
        this._fiboLinesStyleSettings.setItems([i, t]),
        this._headStyleLabel = new e.Input({
            ParentNode: i,
            Label: "Style",
            Key: "cMFStyle",
            LabelPostfix: ""
        }),
        this._fiboLineColorPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Color",
            Class: "SelectedColor",
            Width: 68,
            Key: "cLSFColor",
            ReadOnly: !0,
            LabelPostfix: ": "
        }),
        this._fiboLineStyleSelect = new e.InputImage({
            ParentNode: t,
            Width: 88,
            MenuWidth: 98,
            Label: "View",
            Key: "cLSFType",
            Edit: !1,
            Options: e.UtipFunctions.getLineStyle(),
            LabelPostfix: ": "
        }),
        this._fiboLineWidthSelect = new e.InputImage({
            ParentNode: t,
            Width: 88,
            MenuWidth: 150,
            Label: "Width",
            Key: "cLSFWidht",
            Edit: !1,
            ClassMenu: "InputSelectOptionsMenu InputImageSelectOptionsMenu MenuImage",
            Options: e.UtipFunctions.getLineWidth(),
            LabelPostfix: ": "
        }),
        jscolor.bind()
    },
    t._loadCurrentFiboLinesStyleSettings = function() {
        this._fiboLineWidthSelect.setSelectedOptionByData(this._object.drawFiboStyle.lineWidth),
        this._fiboLineStyleSelect.setSelectedOptionByData(this._object.drawFiboStyle.lineStyle),
        this._fiboLineColorPicker._fieldNode.color.fromString("#" + this._object.drawFiboStyle.lineColor)
    },
    t._onAddBtnClick = function() {
        var e = this._levelsTable.getData() || [];
        e.push({
            cellValues: {
                Level: "0.000",
                Description: "0"
            }
        }),
        this._saveBtn.setEnabled(!0),
        this._levelsTable.fillTable(e),
        this._levelsTable.resizeHeader(),
        this._levelsTable.setSelectedRow(0)
    },
    t._onDeleteBtnClick = function() {
        var e = this._levelsTable.getSelectedRowID(),
        t = this._levelsTable.getData();
        t.splice(e, 1),
        this._levelsTable.fillTable(t),
        this._levelsTable.setSelectedRow(0)
    },
    t._checkLevelsTable = function() {
        var e = this._levelsTable;
        if (e) {
            var t = e.getRows();
            for (var i in t) if (t.hasOwnProperty(i)) {
                var s = t[i].getChildByFieldName("Level");
                if (s) {
                    var n = parseFloat(s.input.value);
                    if (isNaN(n)) return ! 1
                }
            }
        }
        return ! 0
    },
    t.getConstFromParamCaption = function(t) {
        switch (t[t.length - 1] >= 0 && t[t.length - 1] <= 9 && (t = t.substr(0, t.length - 1)), t) {
        case "Time":
            return {
                key:
                "cEDTime",
                caption: e.LangManager.getStringByKey("cEDTime") || "Time"
            };
        case "Value":
            return {
                key:
                "cICValue",
                caption: e.LangManager.getStringByKey("cICValue") || "Value"
            };
        case "Ray":
            return {
                key:
                "cLPRay",
                caption: e.LangManager.getStringByKey("cLPRay") || "Ray"
            };
        case "Angle":
            return {
                key:
                "cLPAngle",
                caption: e.LangManager.getStringByKey("cLPAngle") || "Angle"
            };
        case "HalfEllipse":
            return {
                key:
                "cLPHalfEllipse",
                caption: e.LangManager.getStringByKey("cLPHalfEllipse") || "Half-ellipse"
            };
        case "Ellipse":
            return {
                key:
                "cLPEllipse",
                caption: e.LangManager.getStringByKey("cLPEllipse") || "Elipse"
            };
        case "Index":
            return {
                key:
                "cLPIndex",
                caption: e.LangManager.getStringByKey("cLPIndex") || "Index"
            };
        default:
            return {
                key:
                "wrong_string",
                caption: "Wrong string"
            }
        }
    },
    t.translateParameterCaption = function(e) {
        var t = {};
        return e[e.length - 1] >= 0 && e[e.length - 1] <= 9 ? (t = this.getConstFromParamCaption(e), t.postfix = e[e.length - 1]) : (t = this.getConstFromParamCaption(e), t.postfix = ""),
        t
    },
    t = null,
    e.getDialogLineSettings = function(t, i) {
        return e._dialogLineSettings || (e._dialogLineSettings = new e.DialogLineSettings({
            object: t,
            caption: i
        })),
        e._dialogLineSettings
    },
    e
}),
define("menuLineSettings", ["menu", "dialogLineSettings"],
function(e) {
    e.LineSettingsMenu = function(t) {
        this._object = null,
        e.LineSettingsMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.LineSettingsMenu, e.Menu);
    var t = e.LineSettingsMenu.prototype;
    return t._render = function() {
        this._CheckedType = "NoChecked",
        this.ItemClick = e.Delegate(this, this._onItemClick),
        this._Items = [{
            Text: "object name",
            Id: "object_name",
            Enabled: !1
        },
        {
            Text: "Property",
            Id: "property",
            Key: "cMFProperty",
            Separator: !0
        },
        {
            Text: "Delete",
            Id: "delete",
            Key: "cMFdelete"
        }],
        e.LineSettingsMenu.base._render.apply(this, arguments)
    },
    t._onItemClick = function(t) {
        t.preventDefault();
        var i = t.Item.getId();
        if (i) {
            switch (i) {
            case "property":
                var s = e.getDialogLineSettings(this._object, this.getItemById("object_name").getText());
                s.show();
                break;
            case "delete":
                e.activeChart && (this._object instanceof e.VerticalLine ? e.activeChart.deleteVerticalLine(this._object) : this._object._graphicArea.deleteGraphicObject(this._object), e.getTerminal().saveSettings())
            }
            this.hide()
        }
    },
    t.getObjectCaption = function(t) {
        for (var i = e.getLinesMenu(), s = i.getItems(), n = 0; n < s.length; n++) {
            var o = s[n];
            if (o.getMenu()) {
                for (var a = o.getMenu().getItems(), r = 0; r < a.length; r++) if (o = a[r], o.getData() === t.constructor) return o.getText()
            } else if (o.getData() === t.constructor) return o.getText()
        }
        return ""
    },
    t.updateAndShowMenu = function(e, t, i) {
        this._object = e;
        var s = this.getObjectCaption(e);
        this.getItems()[0].setText(s),
        this.hide(),
        this.show(t, i)
    },
    t = null,
    e.getLineSettingsMenu = function() {
        return e._lineSettingsMenu && (e._lineSettingsMenu.hide(), e._lineSettingsMenu.unregister(), delete e._lineSettingsMenu),
        e._lineSettingsMenu = new e.LineSettingsMenu
    },
    e
}),
define("dialogIndicatorSettings", ["dialog", "inputImage"],
function(e) {
    e.DialogIndicatorSettings = function(t) {
        this._object = null,
        this._caption = "",
        this._graphicArea = null,
        this._graphicWindows = null,
        this._sources = [],
        this._signals = [],
        this._colors = [],
        this._styles = [],
        this._widths = [],
        this._isNewIndicator = !0,
        this.parameterHeight = 45,
        e.DialogIndicatorSettings.base.constructor.apply(this, arguments),
        this.parametersContainer = [],
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogIndicatorSettings, e.Dialog);
    var t = e.DialogIndicatorSettings.prototype;
    return t._onClosed = function() {
        delete e._dialogIndicatorSettings
    },
    t._render = function() {
        this._Height = 390,
        this._Width = 500,
        this._WithBlock = !0,
        this._Title = this._caption,
        this._ImageList = e.MainImageList,
        this._ImageListRow = 4,
        this._ImageListCol = 17,
        this._Content = e.htmlToDOM(e._Templates.DialogIndicatorSettingsContent);
        var t = this._Content.querySelector(".DFooterControls"),
        i = this._Content.querySelector(".DTabControlContainer"),
        s = e.htmlToDOM(e._Templates.IndicatorSettingsOptionsContent),
        n = e.htmlToDOM(e._Templates.IndicatorSettingsStyleContent);
        n.querySelector(".LineStyleContent");
        this._saveBtn = new e.Button({
            ParentNode: t,
            Class: "DButton",
            Width: 75,
            Key: "cMFSave",
            Text: "Save",
            Click: e.Delegate(this, this._onSaveIndicator)
        }),
        this._Swiper = new e.Swiper({
            ParentNode: i,
            Height: 340,
            TabMode: "Normal",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            Pages: this._getSwiperPages(s, n),
            Animation: e.SwiperAnimationConst.Smoothly
        }),
        e.DialogIndicatorSettings.base._render.apply(this, arguments),
        this.addCSSClass("dialogIndicatorSettings");
        var o = e.LangManager.getStringByKey("cICPeriod") || "Period",
        a = e.LangManager.getStringByKey("cICShift") || "Shift",
        r = e.LangManager.getStringByKey("cICK") || "%K",
        l = e.LangManager.getStringByKey("cICD") || "%D",
        h = e.LangManager.getStringByKey("cICJaw") || "Jaws",
        d = e.LangManager.getStringByKey("cICTeeth") || "Teeth",
        c = e.LangManager.getStringByKey("cICLips") || "Lips",
        u = e.LangManager.getStringByKey("cICShort") || "Short",
        g = e.LangManager.getStringByKey("cICLong") || "Long",
        p = e.LangManager.getStringByKey("cICMFI") || "MFI",
        m = e.LangManager.getStringByKey("cICDown") || "Down",
        _ = e.LangManager.getStringByKey("cICVolume") || "Volume",
        y = e.LangManager.getStringByKey("cICUp") || "Up";
        e.LangManager.setStringByKey("cICPeriodK", o + ", " + r),
        e.LangManager.setStringByKey("cICPeriodD", o + ", " + l),
        e.LangManager.setStringByKey("cICPeriodJaw", o + ", " + h),
        e.LangManager.setStringByKey("cICPeriodTeeth", o + ", " + d),
        e.LangManager.setStringByKey("cICPeriodLips", o + ", " + c),
        e.LangManager.setStringByKey("cICShiftJaw", a + ", " + h),
        e.LangManager.setStringByKey("cICShiftTeeth", a + ", " + d),
        e.LangManager.setStringByKey("cICShiftLips", a + ", " + c),
        e.LangManager.setStringByKey("cICPeriod1", o + " 1"),
        e.LangManager.setStringByKey("cICPeriod2", o + " 2"),
        e.LangManager.setStringByKey("cICShortPeriod", u + " " + o),
        e.LangManager.setStringByKey("cICLongPeriod", g + " " + o),
        e.LangManager.setStringByKey("cICMFIStyleDownDown", p + " " + m + ", " + _ + " " + m),
        e.LangManager.setStringByKey("cICMFIStyleUpUp", p + " " + y + ", " + _ + " " + y),
        e.LangManager.setStringByKey("cICMFIStyleUpDown", p + " " + y + ", " + _ + " " + m),
        e.LangManager.setStringByKey("cICMFIStyleDownUp", p + " " + m + ", " + _ + " " + y)
    },
    t._getSwiperPages = function(e, t) {
        return [{
            Title: "Options",
            Key: "cLSFParam",
            Id: "options",
            Content: e
        },
        {
            Title: "Style",
            Key: "cMFStyle",
            Id: "style",
            Content: t
        }]
    },
    t.clearLineStyleContent = function(e) {
        for (var t = e.childElementCount,
        i = 0; i < t; i++) e.removeChild(e.childNodes[0])
    },
    t._onSwiperChangeSelectedPage = function(t) {
        if (1 == t.getSelectedPageIndex()) {
            this._colors.forEach(function(e) {
                e.removeFromDom()
            },
            this),
            this._styles.forEach(function(e) {
                e.removeFromDom()
            },
            this),
            this._widths.forEach(function(e) {
                e.removeFromDom()
            },
            this);
            var i = this._Content.querySelectorAll(".LineStyleContent")[0];
            this.clearLineStyleContent(i);
            for (var s = 0; s < this._object.getSignals().length; s++) for (var n = this._object.getSignal(s), o = 0; o < n.getStyles().length; o++) {
                var a = n.getStyle(o),
                r = e.htmlToDOM("<div></div>");
                r.style.paddingBottom = "10px",
                i.appendChild(r),
                s >= this._object.getParameters().length + this._object.getSourceNumber && this.setFormHeight(this._Height + this.parameterHeight);
                var l = new e.Input({
                    ParentNode: r,
                    Template: e._Templates.ColorSelect,
                    Label: "Value",
                    Class: "WTLongInputLabel",
                    Key: a.caption,
                    ReadOnly: !0,
                    LabelPostfix: ": "
                });
                jscolor.bind(),
                l._fieldNode.color.fromString(a.lineStyle.lineColor),
                this._colors.push(l);
                var h = new e.InputImage({
                    ParentNode: r,
                    Width: 100,
                    MenuWidth: 98,
                    Edit: !1,
                    Options: e.UtipFunctions.getLineStyle()
                });
                h.setSelectedOptionByData(a.lineStyle.lineStyle),
                this._styles.push(h);
                var d = new e.InputImage({
                    ParentNode: r,
                    Width: 100,
                    Edit: !1,
                    ClassMenu: "InputSelectOptionsMenu InputImageSelectOptionsMenu MenuImage",
                    MenuWidth: 150,
                    Options: e.UtipFunctions.getLineWidth()
                });
                d.setSelectedOptionByData(a.lineStyle.lineWidth),
                this._widths.push(d)
            }
        }
    },
    t._onSaveIndicator = function() {
        var t = this._object.getParameters();
        if (this.parametersContainer.forEach(function(i) {
            var s = t[t.indexOf(i.parameter)];
            "float" == s.type && (s.value = e.parseFloat(i.control.getValue()))
        },
        this), this._object.getMAUsing()) {
            var i = t.length - 1;
            t[i].value = this._mAverageControl.getOptions()[this._mAverageControl.getSelectedOption()].Data
        }
        if (this._object instanceof e.PivotPoints) {
            var i = t.length - 1;
            t[i].value = this._periodControl.getOptions()[this._periodControl.getSelectedOption()].Data
        }
        if (this._object instanceof e.ZigZag) {
            var i = t.length - 1;
            t[i].value = this._devTypeControl.getOptions()[this._devTypeControl.getSelectedOption()].Data
        }
        this._object.clearSources();
        for (var s = null,
        n = null,
        o = 0; o < this._object.getSourceNumber(); o++) {
            s = this._sources[o];
            var a = {};
            a.object = s.getOptions()[s.getSelectedOption()].Data,
            this._signals.length > 0 && (n = this._signals[o], a.signalType = n.getOptions()[n.getSelectedOption()].Data),
            this._object.addSource(a)
        }
        if (this._colors.length > 0) for (var r = 0,
        o = 0; o < this._object.getSignals().length; o++) for (var l = this._object.getSignal(o), h = 0; h < l.getStyles().length; h++) {
            var d = l.getStyle(h);
            d.lineStyle.lineColor = "#" + this._colors[r]._fieldNode.color,
            d.lineStyle.lineStyle = this._styles[r].getSelectedOptionData(),
            d.lineStyle.lineWidth = this._widths[r].getSelectedOptionData(),
            r++
        }
        this._isNewIndicator ? (this.updateLastIndicators(), this._graphicArea ? this._graphicArea = this._object.getSource(0).object.getGraphicArea() : (this._graphicArea = new e.GraphicArea(this._graphicWindows), this._graphicWindows.addGraphicArea(this._graphicArea, !0)), this._graphicWindows.addIndicator(this._object), this._object.initGraphicArea(this._graphicArea), this.addLevels()) : this._object.getDrawInExistsGraphicArea() && (this._graphicArea.deleteGraphicObject(this._object), this._object.initGraphicArea(this._object.getSource(0).object.getGraphicArea())),
        this._object.setSource(),
        this._object.calculate(),
        this.hide(),
        e.getTerminal().saveSettings(),
        e.saveUserSettings()
    },
    t.updateLastIndicators = function() {
        var t = e.UserSettings.Terminal.LastIndicators;
        void 0 == t && (t = []);
        var i = e.getIndicatorsMenu().getItemByData(this._object.constructor);
        t.indexOf(i.getID()) == -1 && (5 == t.length && t.splice(4, 1), t.splice(0, 0, i.getID()), e.UserSettings.Terminal.LastIndicators = t, e.getIndicatorsMenu().reRender())
    },
    t.addLevels = function() {
        var t = !1,
        i = !1,
        s = this._object.getGraphicArea(),
        n = null,
        o = null,
        a = 0;
        if (this._object instanceof e.RelativeStrengthIndex || this._object instanceof e.StochasticOscillator) {
            for (t = !1, i = !1, n = s.getLevels(), a = 0; a < n.length; a++) o = n[a],
            "80" == o.value && (t = !0),
            "20" == o.value && (i = !0);
            t || s.addLevel({
                value: "80.0",
                description: "80"
            }),
            i || s.addLevel({
                value: "20.0",
                description: "20"
            })
        }
        if (this._object instanceof e.CommodityChannelIndex) {
            for (t = !1, i = !1, n = s.getLevels(), a = 0; a < n.length; a++) o = n[a],
            "100" == o.value && (t = !0),
            "-100" == o.value && (i = !0);
            t || s.addLevel({
                value: "100.0",
                description: "100"
            }),
            i || s.addLevel({
                value: "-100.0",
                description: "-100"
            })
        }
        if (this._object instanceof e.DeMarker) {
            for (t = !1, i = !1, n = s.getLevels(), a = 0; a < n.length; a++) o = n[a],
            "0.7" == o.value && (t = !0),
            "0.3" == o.value && (i = !0);
            t || s.addLevel({
                value: "0.7",
                description: "0.7"
            }),
            i || s.addLevel({
                value: "0.3",
                description: "0.3"
            })
        }
        if (this._object instanceof e.RangeActionVerificationIndex) {
            for (t = !1, i = !1, n = s.getLevels(), a = 0; a < n.length; a++) o = n[a],
            "0.3" == o.value && (t = !0),
            "-0.3" == o.value && (i = !0);
            t || s.addLevel({
                value: "0.3",
                description: "0.3"
            }),
            i || s.addLevel({
                value: "-0.3",
                description: "-0.3"
            })
        }
    },
    t.show = function() {
        e.DialogIndicatorSettings.base.show.apply(this, arguments),
        jscolor.bind(),
        this.addParameters();
        var t = this._object.getStyleCount();
        this._Height - 120 < t * this.parameterHeight && this.setFormHeight(120 + t * this.parameterHeight + 20)
    },
    t._keyPress = function(t) {
        e.banLetters(t)
    },
    t._installParameterIndicator = function(t, i) {
        for (var s = 0; s <= i; s++) {
            var n = this._object.getParameter(s);
            this.setFormHeight(this._Height + this.parameterHeight);
            var o = new e.Input({
                ParentNode: t,
                Label: e.LangManager.getStringByKey(n.caption) || "",
                Key: n.caption,
                Width: 150,
                Value: n.value || "0",
                KeyPress: e.Delegate(this, this._keyPress)
            });
            this.parametersContainer.push({
                control: o,
                parameter: n
            })
        }
    },
    t._addComboBoxWithSettings = function(t, i) {
        if (this._object.getMAUsing() && (i++, this.setFormHeight(this._Height + this.parameterHeight), this._mAverageControl = new e.InputSelect({
            ParentNode: t,
            Width: 150,
            Edit: !1,
            Label: "MA method",
            Key: "cICMAMethod",
            LabelPosition: "Left",
            Options: this.getMAMetods(),
            AutoWidthMenu: !1
        }), this._mAverageControl.setSelectedOption(this._object.getParameter(i).value)), this._object instanceof e.PivotPoints) {
            i++,
            this.setFormHeight(this._Height + this.parameterHeight);
            var s = this.getPeriods();
            this._periodControl = new e.InputSelect({
                ParentNode: t,
                Width: 150,
                Edit: !1,
                Label: "Period",
                Key: "cICPeriod",
                LabelPosition: "Left",
                Options: s,
                AutoWidthMenu: !1
            });
            for (var n = 0; n < s.length; n++) if (s[n].Data == this._object.getParameter(i).value) {
                this._periodControl.setSelectedOption(n);
                break
            }
        }
        return this._object instanceof e.ZigZag && (i++, this.setFormHeight(this._Height + this.parameterHeight), this._devTypeControl = new e.InputSelect({
            ParentNode: t,
            Width: 150,
            Edit: !1,
            Label: "In",
            Key: "cICDevType",
            LabelPosition: "Left",
            Options: [{
                Text: e.LangManager.getStringByKey("cICDevPoints") || "Points",
                Id: "points",
                Data: 0
            },
            {
                Text: e.LangManager.getStringByKey("cICDevPercents") || "Percents",
                Id: "percents",
                Data: 1
            }],
            AutoWidthMenu: !1
        }), this._devTypeControl.setSelectedOption(this._object.getParameter(i).value)),
        i++,
        i
    },
    t._installAllPossibleSource = function(t, i) {
        for (var s = i,
        n = i; n < i + this._object.getSourceNumber(); n++) {
            this.setFormHeight(this._Height + this.parameterHeight);
            var o = e.htmlToDOM("<div></div>");
            o.className = "SourceParent",
            t.appendChild(o);
            var a = {
                ParentNode: o,
                Options: [],
                Width: 150,
                Label: (e.LangManager.getStringByKey("cSCSource") || "Source") + " " + (n - this._object.getParameters().length + 1)
            };
            if (this._object.getChartSourceOnly()) if (this._graphicArea && this._graphicArea.graphicObjects[0] instanceof e.Chart && this._object.getUseWholeChart()) {
                var r = this._graphicArea.graphicObjects[0].getSymbolName();
                a.Options.push({
                    Text: r,
                    Data: this._graphicArea.graphicObjects[0]
                }),
                a.Enabled = !1
            } else {
                for (var l = 0; l < this._graphicWindows.charts.length; l++) {
                    var r = this._graphicWindows.charts[l].getSymbolName();
                    a.Options.push({
                        Text: r,
                        Data: this._graphicWindows.charts[l]
                    })
                }
                a.Enabled = !1
            } else {
                for (var l = 0; l < this._graphicWindows.charts.length; l++) {
                    var r = this._graphicWindows.charts[l].getSymbolName();
                    a.Options.push({
                        Text: r,
                        Data: this._graphicWindows.charts[l]
                    })
                }
                for (var h = 0; h < this._graphicWindows.getIndicators().length && this._graphicWindows.getIndicator(h).getSource(0).object != this._object; h++);
                l == this._graphicWindows.getIndicators().length - 1
            }
            a.Options.length > 1 && (a.Enabled = !0),
            a.ChangedValue = e.Delegate(this, this._onSourceChanged),
            a.Disabled = !0;
            var d = new e.InputSelect(a);
            if (this._sources.push(d), !this._object.getUseWholeChart()) {
                var c = new e.InputSelect({
                    ParentNode: o,
                    Width: 150,
                    Edit: !1,
                    Options: []
                });
                this._signals.push(c),
                d.setData(c),
                d.setSelectedOption(0),
                d.onChange(),
                s++
            }
            if (this._object.getSources().length > 0) {
                for (var u = a.Options,
                l = 0; l < u.length; l++) if (this._object.getSource(n - this._object.getParameters().length).object == u[l].Data) {
                    d.setSelectedOption(l),
                    d.onChange();
                    break
                }
                if (c) for (var u = c.getOptions(), l = 0; l < u.length; l++) if (this._object.getSource(n - this._object.getParameters().length).signalType == u[l].Data) {
                    c.setSelectedOption(l);
                    break
                }
            }
        }
        return s
    },
    t.addParameters = function() {
        var t = this._object.getParameters().length - 1,
        i = 120; (this._object.getMAUsing() || this._object instanceof e.PivotPoints || this._object instanceof e.ZigZag) && t--,
        this.setFormHeight(i);
        var s = this._Content.querySelectorAll(".DCenterControls")[0];
        this._installParameterIndicator(s, t),
        t = this._addComboBoxWithSettings(s, t),
        this._installAllPossibleSource(s, t)
    },
    t.getPeriods = function() {
        var t = [];
        return t.push({
            Text: e.LangManager.getStringByKey("cPM1") || "1 minute",
            Id: "1min",
            Data: e.allPeriods.PC_M1
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPM5") || "5 minutes",
            Id: "5min",
            Data: e.allPeriods.PC_M5
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPM10") || "10 minutes",
            Id: "10min",
            Data: e.allPeriods.PC_M10
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPM15") || "15 minutes",
            Id: "15min",
            Data: e.allPeriods.PC_M15
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPM30") || "30 minutes",
            Id: "30min",
            Data: e.allPeriods.PC_M30
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPH1") || "1 hour",
            Id: "1hour",
            Data: e.allPeriods.PC_H1
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPH2") || "2 hours",
            Id: "2hour",
            Data: e.allPeriods.PC_H2
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPH3") || "3 hours",
            Id: "3hour",
            Data: e.allPeriods.PC_H3
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPH4") || "4 hours",
            Id: "4hour",
            Data: e.allPeriods.PC_H4
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPH6") || "6 hours",
            Id: "6hour",
            Data: e.allPeriods.PC_H6
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPH8") || "8 hours",
            Id: "8hour",
            Data: e.allPeriods.PC_H8
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPH12") || "12 hours",
            Id: "12hour",
            Data: e.allPeriods.PC_H12
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPD1") || "Daily",
            Id: "1day",
            Data: e.allPeriods.PC_D1
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPW1") || "Weekly",
            Id: "1week",
            Data: e.allPeriods.PC_W1
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPMn") || "Monthly",
            Id: "1mn",
            Data: e.allPeriods.PC_MN
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPQ1") || "Quarterly",
            Id: "1q",
            Data: e.allPeriods.PC_Q1
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cPY1") || "Yearly",
            Id: "1year",
            Data: e.allPeriods.PC_Y1
        }),
        t
    },
    t._onSourceChanged = function(t) {
        var i = t.sender.getOptions()[t.sender.getSelectedOption()].Data,
        s = t.sender.getData();
        if (s) {
            var n = [];
            i instanceof e.Chart && (n.push({
                Text: "Open",
                Data: e.signalTypes.stOpen
            }), n.push({
                Text: "High",
                Data: e.signalTypes.stHigh
            }), n.push({
                Text: "Low",
                Data: e.signalTypes.stLow
            }), n.push({
                Text: "Close",
                Data: e.signalTypes.stClose
            }), n.push({
                Text: "(H+L)/2)",
                Data: e.signalTypes.stHL2
            }), n.push({
                Text: "(O+C)/2)",
                Data: e.signalTypes.stOC2
            }), n.push({
                Text: "(H+L+C)/3",
                Data: e.signalTypes.stHLC3
            }), n.push({
                Text: "(O+H+L+C)/4",
                Data: e.signalTypes.stOHLC4
            }), s.setOptions(n), this._object instanceof e.Alligator || this._object instanceof e.GatorOscillator ? s.setSelectedOption(4) : this._object instanceof e.AverageDirectionalMovementIndex ? s.setSelectedOption(2) : this._object instanceof e.CommodityChannelIndex ? s.setSelectedOption(6) : s.setSelectedOption(3)),
            1 === s.getOptions().length ? s.setEnabled(!1) : s.setEnabled(!0)
        }
    },
    t.getMAMetods = function() {
        var t = [];
        return t.push({
            Text: e.LangManager.getStringByKey("cICMASimple") || "Simple",
            Id: "simple",
            Data: e.movingAverageTypes.matSMA
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cICMAExponential") || "Exponential",
            Id: "exponential",
            Data: e.movingAverageTypes.matEMA
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cICMASmoothed") || "Smoothed",
            Id: "smoothed",
            Data: e.movingAverageTypes.matSMMA
        }),
        t.push({
            Text: e.LangManager.getStringByKey("cICMALinearWeighted") || "Liner weighted",
            Id: "liner_weighted",
            Data: e.movingAverageTypes.matLWMA
        }),
        t
    },
    t.setFormHeight = function(t) {
        if (!e.Browser.IsMobile) {
            this._Height = t,
            this.getDomNode().style.height = t + "px";
            var i = this.getDomNode().querySelector(".WTDialogContent");
            i.style.height = t - 20 - 1 + "px",
            this._Swiper.getDomNode().style.height = t - 60 + "px";
            var s = this._Swiper.getDomNode().querySelector(".WTSwiperContent");
            s.style.height = t - 98 + "px"
        }
    },
    t = null,
    e.getDialogIndicatorSettings = function(t, i, s, n, o) {
        return e._dialogIndicatorSettings || (e._dialogIndicatorSettings = new e.DialogIndicatorSettings({
            object: t,
            caption: i,
            graphicArea: s,
            graphicWindows: n,
            isNewIndicator: o
        })),
        e._dialogIndicatorSettings
    },
    e
}),
define("dialogLevels", ["dialog", "inputImage"],
function(e) {
    e.DialogLevels = function(t) {
        this._graphicArea = null,
        e.DialogLevels.base.constructor.apply(this, arguments)
    },
    e.initClass(e.DialogLevels, e.Dialog);
    var t = e.DialogLevels.prototype;
    return t._render = function() {
        this._Height = 287,
        this._Width = 450,
        this._WithBlock = !0,
        this._Title = "Levels",
        this._Key = "cMFLevels",
        this._ImageList = e.MainImageList,
        this._ImageListRow = 4,
        this._ImageListCol = 17,
        this._Content = e.htmlToDOM(e._Templates.LineSettingsLevelsContent),
        this._Content.appendChild(e.htmlToDOM('<div class="DFooterControls Right"></div>'));
        var t = this._Content.querySelectorAll(".DLeftControls")[0],
        i = this._Content.querySelectorAll(".DRightControls")[0],
        s = this._Content.querySelector(".DFooterControls");
        this._saveBtn = new e.Button({
            ParentNode: s,
            Class: "DGreenButton",
            Width: 110,
            Key: "cMFSave",
            Text: "Save",
            Click: e.Delegate(this, this._onSaveLevels)
        }),
        this._createLevelsTable(t),
        this._levelsStyleSettings = new e.Container({
            ParentNode: i,
            Width: 210,
            Height: 211,
            Class: "FiboLinesStyleSettings"
        }),
        this._appendLevelsStyleSettingsControls(),
        e.DialogLevels.base._render.apply(this, arguments),
        this.addCSSClass("dialogLevels")
    },
    t._loadCurrentLevelsStyleSettings = function() {
        this._levelWidthSelect.setSelectedOptionByData(this._graphicArea.getLevelsStyle().lineWidth),
        this._levelStyleSelect.setSelectedOptionByData(this._graphicArea.getLevelsStyle().lineStyle),
        this._levelColorPicker._fieldNode.color.fromString(this._graphicArea.getLevelsStyle().lineColor),
        this._createLevelsTableButtons(this._levelsStyleSettings._DomNode)
    },
    t._createLevelsTableButtons = function(t) {
        this._addBtn && this._deleteBtn || (this._deleteBtn = new e.Button({
            ParentNode: t,
            Class: "DButton",
            Width: 90,
            Text: "Delete",
            Key: "cDFGDeleteDataFeed",
            Click: e.Delegate(this, this._onDeleteBtnClick)
        }), this._addBtn = new e.Button({
            ParentNode: t,
            Class: "DButton",
            Width: 90,
            Text: "Add",
            Key: "cDFGAddDataFeed",
            Click: e.Delegate(this, this._onAddBtnClick)
        }))
    },
    t._onAddBtnClick = function() {
        var t = this._levelsTable.getData() || [],
        i = e.SymbolsData.getSymbols()[this._graphicArea.graphicObjects[0].getSymbolName()];
        t.push({
            cellValues: {
                Level: e.numberFormat(0, i.getDigits(), ".", " "),
                Description: "0"
            }
        }),
        this._saveBtn.setEnabled(!0),
        this._levelsTable.fillTable(t),
        this._levelsTable.resizeHeader(),
        this._levelsTable.setSelectedRow(0)
    },
    t._onDeleteBtnClick = function() {
        var e = this._levelsTable.getSelectedRowID(),
        t = this._levelsTable.getData();
        t.splice(e, 1),
        this._levelsTable.fillTable(t),
        this._levelsTable.setSelectedRow(0),
        this._saveBtn.setEnabled(!0)
    },
    t._appendLevelsStyleSettingsControls = function() {
        var t = document.createElement("div");
        t.className = "HeadContainer";
        var i = document.createElement("div");
        i.className = "InputsContainer",
        this._levelsStyleSettings.setItems([t, i]),
        this._headStyleLabel = new e.Input({
            ParentNode: t,
            Label: "Style",
            Key: "cMFStyle",
            LabelPostfix: ""
        }),
        this._levelColorPicker = new e.Input({
            ParentNode: i,
            Template: e._Templates.ColorSelect,
            Width: 68,
            Class: "SelectedColor",
            Edit: !1,
            Label: "Color",
            Key: "cLSFColor",
            LabelPostfix: ": ",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._levelsChanged)
        }),
        this._levelStyleSelect = new e.InputImage({
            ParentNode: i,
            Width: 88,
            MenuWidth: 98,
            Label: "View",
            Key: "cLSFType",
            Edit: !1,
            Options: e.UtipFunctions.getLineStyle(),
            LabelPostfix: ": ",
            ChangedValue: e.Delegate(this, this._levelsChanged)
        }),
        this._levelWidthSelect = new e.InputImage({
            ParentNode: i,
            Width: 88,
            MenuWidth: 150,
            Label: "Width",
            Key: "cLSFWidht",
            Edit: !1,
            ClassMenu: "InputSelectOptionsMenu InputImageSelectOptionsMenu MenuImage",
            Options: e.UtipFunctions.getLineWidth(),
            LabelPostfix: ": ",
            ChangedValue: e.Delegate(this, this._levelsChanged)
        }),
        jscolor.bind()
    },
    t._createLevelsTable = function(t) {
        var i = e._Templates;
        this._levelsTable = new e.DivTable({
            Template: i.TableLevels,
            HeaderTemplate: i.TableLevelsHeader,
            RowTemplates: [i.TableLevelsRow],
            TableType: "Levels",
            HeaderColumns: {
                Level: {
                    Title: "Level",
                    Key: "cLRLevel",
                    Id: "Level",
                    IsVisible: !0,
                    Index: 0,
                    Width: "50%"
                },
                Description: {
                    Title: "Description",
                    Key: "cSODescription",
                    Id: "Description",
                    IsVisible: !0,
                    Index: 1,
                    Width: "50%"
                }
            },
            AutoSizes: [1, 1],
            IsAutoSize: !0,
            IsSizingEnabled: !0,
            Data: [],
            Editable: !0,
            CustomScrollEnabled: !0,
            SetterOverride: this.setValue.bind(this)
        });
        var s = e.htmlToDOM(e._Templates.LevelsContent),
        n = s.querySelector(".tableContent"),
        o = this._levelsTable.getDomNode();
        o.style.width = "100%",
        n.appendChild(o),
        t.appendChild(s);
        var a = this._Content.querySelector(".DLeftControls"),
        r = this._Content.querySelector(".DRightControls");
        a.style.height = r.style.height = "211px"
    },
    t.setValue = function(e, t, i) {
        var s = !0;
        if (e._Parent.editable()) {
            var n = e.getChildByFieldName(t);
            if (!n) return;
            e._CellValues[t] = i
        } else if (void 0 != e._CellValues[t]) {
            e._CellValues[t] = i;
            var o = e._DomNode.querySelector("." + t);
            o.innerHTML = i,
            color && (o.style.color = color)
        } else s = !1,
        console.log("No such field " + t);
        s && this._levelsChanged()
    },
    t.show = function(t) {
        e.DialogLevels.base.show.apply(this, arguments),
        this._graphicArea = t,
        jscolor.bind(),
        this._loadCurrentLevelsStyleSettings(),
        this.setLevels(),
        this._saveBtn.setEnabled(!1)
    },
    t.setLevels = function() {
        for (var e = [], t = this._graphicArea.getLevels(), i = 0; i < t.length; i++) {
            var s = t[i],
            n = s.value.toString(),
            o = s.description;
            e.push({
                rowId: i,
                cellValues: {
                    Level: n,
                    Description: o
                }
            })
        }
        this._levelsTable.fillTable(e),
        this._levelsTable.resizeHeader(),
        this._levelsTable.setSelectedRow(0)
    },
    t._checkLevelsTable = function() {
        var e = this._levelsTable;
        if (e) {
            var t = e.getRows();
            for (var i in t) if (t.hasOwnProperty(i)) {
                var s = t[i].getChildByFieldName("Level");
                if (s) {
                    var n = parseFloat(s.input.value);
                    if (isNaN(n)) return ! 1
                }
            }
        }
        return ! 0
    },
    t._levelsChanged = function() {
        this._saveBtn.setEnabled(!0)
    },
    t._onSaveLevels = function() {
        var t = this._checkLevelsTable();
        if (!t) return void e.showErrorDialog(e.LangManager.getStringByKey("cLMWrongLevels") || "Invalid format of levels");
        var i = this._graphicArea;
        i.clearLevels();
        var s = this._levelsTable,
        n = s.getRows();
        for (var o in n) if (n.hasOwnProperty(o)) {
            var a = n[o],
            r = a.getChildByFieldName("Level"),
            l = a.getChildByFieldName("Description");
            r && l && i.addLevel({
                value: parseFloat(r.input.value),
                description: l.input.value
            })
        }
        var h = {
            lineColor: "#" + this._levelColorPicker._fieldNode.color,
            lineWidth: this._levelWidthSelect.getSelectedOptionData(),
            lineStyle: this._levelStyleSelect.getSelectedOptionData()
        };
        i.setLevelsStyle(h),
        this.hide();
        var d = e.getTerminal();
        d.saveSettings()
    },
    t = null,
    e.getDialogLevels = function(t) {
        return e._dialoglevels || (e._dialoglevels = new e.DialogLevels({
            graphicArea: t
        })),
        e._dialoglevels
    },
    e
}),
define("menuIndicatorSettings", ["menu", "dialogIndicatorSettings", "dialogLevels"],
function(e) {
    e.IndicatorSettingsMenu = function(t) {
        this._object = null,
        e.IndicatorSettingsMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.IndicatorSettingsMenu, e.Menu);
    var t = e.IndicatorSettingsMenu.prototype;
    return t._render = function() {
        this._CheckedType = "NoChecked",
        this.ItemClick = e.Delegate(this, this._onItemClick),
        this._Items = [{
            Text: "object name",
            Id: "object_name",
            Enabled: !1
        },
        {
            Text: "Property",
            Id: "property",
            Key: "cMFProperty",
            Separator: !0
        },
        {
            Text: "Delete",
            Id: "delete",
            Key: "cMFdelete"
        },
        {
            Text: "Levels",
            Id: "levels",
            Key: "cMFLevels",
            Separator: !0
        }],
        e.IndicatorSettingsMenu.base._render.apply(this, arguments)
    },
    t._onItemClick = function(t) {
        t.preventDefault();
        var i = t.Item.getId();
        if (i) {
            switch (i) {
            case "property":
                var s = e.getDialogIndicatorSettings(this._object, this.getItemById("object_name").getText(), this._object.getGraphicArea(), e.activeChart, !1);
                s.show();
                break;
            case "delete":
                e.activeChart && (this._object._graphicArea.deleteGraphicObject(this._object), e.activeChart.deleteIndicator(this._object), e.getTerminal().saveSettings());
                break;
            case "levels":
                var s = e.getDialogLevels(this._object.getGraphicArea());
                s.show(this._object.getGraphicArea())
            }
            this.hide()
        }
    },
    t.getObjectCaption = function(t) {
        for (var i = e.getIndicatorsMenu(), s = i.getItems(), n = 0; n < s.length; n++) {
            var o = s[n];
            if (o.getMenu()) {
                for (var a = o.getMenu().getItems(), r = 0; r < a.length; r++) if (o = a[r], o.getData() === t.constructor) return o.getText()
            } else if (o.getData() === t.constructor) return o.getText()
        }
        return ""
    },
    t.updateAndShowMenu = function(e, t, i) {
        this._object = e;
        var s = this.getObjectCaption(e);
        this.getItems()[0].setText(s),
        this.hide(),
        this.show(t, i)
    },
    t = null,
    e.getIndicatorSettingsMenu = function() {
        return e._indicatorSettingsMenu && (e._indicatorSettingsMenu.hide(), e._indicatorSettingsMenu.unregister(), delete e._indicatorSettingsMenu),
        e._indicatorSettingsMenu = new e.IndicatorSettingsMenu
    },
    e
}),
define("lines/fibonacciLines", ["lines/baseLines"],
function(e) {
    e.FiboLines = function(t, i) {
        e.FiboLines.base.constructor.apply(this, [t, i]),
        this.className = "TFiboLines",
        this._graphicWindows = t._graphicWindows,
        this._parameters.push({
            value: 0,
            type: "float",
            caption: "0"
        }),
        this._parameters.push({
            value: .236,
            type: "float",
            caption: "23.6"
        }),
        this._parameters.push({
            value: .382,
            type: "float",
            caption: "38.2"
        }),
        this._parameters.push({
            value: .5,
            type: "float",
            caption: "50.0"
        }),
        this._parameters.push({
            value: .618,
            type: "float",
            caption: "61.8"
        }),
        this._parameters.push({
            value: 1,
            type: "float",
            caption: "100.0"
        }),
        this._parameters.push({
            value: 1.618,
            type: "float",
            caption: "161.8"
        })
    },
    e.initClass(e.FiboLines, e.CustomFibo);
    var t = e.FiboLines.prototype;
    return t.draw = function(e) {
        if (!this.outOfData() && (this.getParameterByCaption("Ray").value || (this.reset(), this.isVisible()))) {
            var t = this.initImage(e);
            this.drawBasePoints(t),
            this.drawLine(t, this.point1.x, this.point1.y, this.point2.x, this.point2.y, !1, !0),
            this.drawFiboLines(t, this.point1.x, this.point1.y, this.point2.x, this.point2.y, this.getParameterByCaption("Ray").value, !0),
            this.endImage(e, t)
        }
    },
    t = null,
    e
}),
define("mobile/mobileMenuTapToGraphic", ["menu"],
function(t) {
    t.MobileMenuTapToGraphic = function(e) {
        t.MobileMenuTapToGraphic.base.constructor.apply(this, arguments),
        this.Closed.add(t.Delegate(this, this._onClosed)),
        t.Socket.register(this)
    },
    t.initClass(t.MobileMenuTapToGraphic, t.Menu);
    var i = t.MobileMenuTapToGraphic.prototype;
    return i._onClosed = function(e) {
        this.Delete()
    },
    i._render = function() {
        this.BeforeOpen = t.Delegate(this, this._onContextMenuBeforeOpen),
        this._ItemsIndicators = [],
        this._symbolName = t.getTerminal().graphicWindow.charts[0].getSymbolName();
        for (var e = t.getTerminal().graphicWindow.getIndicators(), i = e.length, s = 0; s < i; s++) this._ItemsIndicators.push({
            Text: e[s]._indicatorName,
            Id: e[s]._indicatorName,
            Data: e[s].getData(),
            Menu: new t.Menu({
                CheckedType: "NoChecked",
                ItemClick: t.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Property",
                    Id: "Property",
                    Key: "cMFProperty"
                },
                {
                    Text: "Delete",
                    Id: "Delete",
                    Key: "cMFdelete"
                }]
            })
        });
        var n = [];
        t.getTerminal().useOnlyOptions || (n.push({
            Text: "New order",
            Id: "New_order",
            Key: "cMFNewMarketOrder"
        }), n.push({
            Text: "New pending order",
            Id: "New_pending_order",
            Key: "cMFNewPendingOrder"
        })),
        t.getTerminal().useOptions === !0 && n.push({
            Text: "Buy option",
            Id: "Buy_option",
            Enabled: t.OptionsSettings.getOptionSettingsBySymbolName(t.getTerminal().graphicWindow.charts[0].getSymbolName()),
            Key: "cMFBuyOption"
        }),
        i > 0 && n.push({
            Text: "Remove all objects",
            Id: "Remove_all_objects",
            Key: "cMFClearArea"
        }),
        this._CheckedType = "NoChecked",
        this.ItemClick = t.Delegate(this, this._onItemClick),
        this._Items = n,
        t.MobileMenuTapToGraphic.base._render.apply(this, arguments),
        t.addCSSClass(this.getDomNode(), "menuTapToGraphic")
    },
    i.checkForexAvailable = function() {
        var e = t.getTerminal();
        if (!e.useOnlyOptions) {
            var i = this.getItemById("New_order"),
            s = this.getItemById("New_pending_order"),
            n = t.activeChart,
            o = t.SymbolsData.getSymbols()[n.getMainSymbolName()],
            a = o.getCalculationTypeName(),
            r = o.allowTrade() && "index" !== a;
            i.setEnabled(r),
            s.setEnabled(r)
        }
    },
    i.checkBinaryOptionAvailable = function() {
        var e = t.getTerminal();
        if (e.useOptions) {
            var i = this,
            s = t.SymbolsData.getSymbols(),
            n = t.OptionsSettings.getOptionsSettings(),
            o = n.filter(function(e, t, n) {
                var o = e.getSymbolName(),
                a = s[o];
                return o === i._symbolName && e.canUse() && a.allowTrade()
            });
            this.getItemById("Buy_option").setEnabled(o.length > 0)
        }
    },
    i._onContextMenuBeforeOpen = function(e) {
        this.checkForexAvailable(),
        this.checkBinaryOptionAvailable()
    },
    i._onSocketMessage = function(e) {
        var t = e.msgType;
        switch (t) {
        case "addOptionSettings":
        case "changeOptionSettings":
        case "deleteOptionSettings":
            this.checkBinaryOptionAvailable()
        }
    },
    i._onIndicatorsItemClick = function() {
        event.preventDefault();
        for (var i, s = t.activeChart.getIndicators(), n = s.length, o = 0; o < n; o++) if (s[o]._indicatorName == e.Item.getParentMenu().getMenuSource().getId()) {
            i = t.activeChart.getIndicator(o);
            break
        }
        if (!i) return void t._menuMasterObject.hideAll();
        switch (e.Item.getId()) {
        case "Property":
            if (t.activeChart) {
                var a = t.activeChart,
                r = null;
                i.getDrawInExistsGraphicArea() && (r = a.graphicAreas[0]);
                var l = t.getMobileDialogIndicatorSettings(i, i._indicatorName, r, a, !1);
                l.show()
            }
            break;
        case "Delete":
            i._graphicArea.deleteGraphicObject(i),
            t.activeChart.deleteIndicator(i),
            t.saveUserSettings()
        }
        t._menuMasterObject.hideAll()
    },
    i._onItemClick = function(e) {
        switch (e.preventDefault(), e.Item.getID()) {
        case "New_order":
            t.getMobileDialogNewOrder().show(null, this._symbolName);
            break;
        case "New_pending_order":
            t.getMobileDialogPendingOrder().show(null, this._symbolName);
            break;
        case "Buy_option":
            t.getMobileDialogBuyOption().show(null, this._symbolName);
            break;
        case "Remove_all_objects":
            var i = t.getChartMenu(),
            s = t.activeChart.charts[0];
            i.removeAllObjects(s),
            t._menuMasterObject.hideAll(),
            t.saveUserSettings()
        }
    },
    i.Delete = function() {
        t.Socket.unRegister(this),
        t._menuMasterObject.unRegister(this),
        this.removeFromDom(),
        delete t._menuTapToGraphic,
        delete this
    },
    i = null,
    t.getMobileMenuTapToGraphic = function() {
        return t._menuTapToGraphic && delete t._menuTapToGraphic,
        t._menuTapToGraphic = new t.MobileMenuTapToGraphic,
        t._menuTapToGraphic
    },
    t
}),
define("inputNumber", ["input"],
function(e) {
    e.InputNumber = function(t) {
        this._Value = 0,
        this._MaxValue = 1e3,
        this._MinValue = 0,
        this._Step = 1,
        this._Decimals = 0,
        this._IsMobile = !1,
        this._defineEvents(["BeforeChange"]),
        e.InputNumber.base.constructor.apply(this, arguments),
        this.KeyDown.add(e.Delegate(this, this.keyDown))
    },
    e.initClass(e.InputNumber, e.Input);
    var t = e.InputNumber.prototype;
    return t._render = function() {
        this._Template = e._Templates.InputNumber,
        e.InputNumber.base._render.apply(this, arguments),
        this._binds.checkNumberKey = this._checkNumberKey.bind(this),
        e.addEvent(this._fieldNode, "keypress", this._binds.checkNumberKey),
        this._inputNode = this._DomNode.querySelector(".WTInputNumberField"),
        this._iconNode = this._DomNode.querySelector(".WTInputFieldIcon"),
        this._captionNode = this._DomNode.querySelector(".WTInputFieldCaption"),
        this._increaseBtn = this._DomNode.querySelector(".Up"),
        this._binds.increase = this._increase.bind(this),
        this._binds.startIncrease = this._startIncrease.bind(this),
        this._binds.stopIncrease = this._stopIncrease.bind(this),
        this._increaseBtn && (e.Browser.IsMobile ? (e.addEvent(this._increaseBtn, "touchstart", this._binds.startIncrease), e.addEvent(this._increaseBtn, "touchend", this._binds.stopIncrease), e.addEvent(document, "touchend", this._binds.stopIncrease)) : (e.addEvent(this._increaseBtn, "mousedown", this._binds.startIncrease), e.addEvent(document, "mouseup", this._binds.stopIncrease))),
        this._decreaseBtn = this._DomNode.querySelector(".Down"),
        this._binds.decrease = this._decrease.bind(this),
        this._binds.startDecrease = this._startDecrease.bind(this),
        this._binds.stopDecrease = this._stopDecrease.bind(this),
        this._decreaseBtn && (e.Browser.IsMobile ? (e.addEvent(this._decreaseBtn, "touchstart", this._binds.startDecrease), e.addEvent(this._decreaseBtn, "touchend", this._binds.stopDecrease), e.addEvent(document, "touchend", this._binds.stopDecrease)) : (e.addEvent(this._decreaseBtn, "mousedown", this._binds.startDecrease), e.addEvent(document, "mouseup", this._binds.stopDecrease))),
        this._fieldNode.min = this._MinValue,
        this._fieldNode.max = this._MaxValue,
        this.setWidth(this._Width),
        this._IsMobile && e.addEvent(this._fieldNode, "click", this._onInputNodeFocus.bind(this))
    },
    t._startIncrease = function(e) {
        this._IsMobile && (this._fieldNode.blur(), this._fieldNode.setAttribute("readonly", "true")),
        this.BeforeChange.fire({
            sender: this,
            direction: "up"
        }),
        this._startedInc || (this._increase(), this._startedInc = !0, this._incInterval = setInterval(this._binds.increase, 100)),
        e.preventDefault(),
        e.stopPropagation()
    },
    t._stopIncrease = function(e) {
        this._startedInc && (this._incInterval && clearInterval(this._incInterval), this._startedInc = !1, this._incInterval = null)
    },
    t._startDecrease = function(e) {
        this._IsMobile && (this._fieldNode.blur(), this._fieldNode.setAttribute("readonly", "true")),
        this.BeforeChange.fire({
            sender: this,
            direction: "down"
        }),
        this._startedDec || (this._decrease(), this._startedDec = !0, this._decInterval = setInterval(this._binds.decrease, 100)),
        e.preventDefault(),
        e.stopPropagation()
    },
    t._stopDecrease = function() {
        this._startedDec && (this._decInterval && clearInterval(this._decInterval), this._startedDec = !1, this._decInterval = null)
    },
    t._increase = function(e) {
        var t = this._validNumber((this.getValue() || 0) + this._Step);
        this._Value !== t && (this.setValue(t), this.focus()),
        this.ChangedValue.fire({
            event: e,
            sender: this,
            changeDirection: "up"
        })
    },
    t._decrease = function(e) {
        var t = this._validNumber((this.getValue() || 0) - this._Step);
        this._Value !== t && (this.setValue(t), this.focus()),
        this.ChangedValue.fire({
            event: e,
            sender: this,
            changeDirection: "down"
        })
    },
    t.getValue = function() {
        var t = e.InputNumber.base.getValue.apply(this, arguments);
        return this._Value = e.parseFloat(t),
        this._Value
    },
    t.setValue = function(t) {
        this._Value = this._validNumber(t),
        this._fieldNode.value = "" === this._Value || isNaN(this._Value) ? "": e.numberFormat(this._Value, this._Decimals, ".", "")
    },
    t.setDecimals = function(t) {
        this._Decimals = t,
        this._fieldNode.value = e.numberFormat(this._Value, this._Decimals, ".", "")
    },
    t._onChangedValue = function(e) {
        var t = this._validNumber();
        this._Value !== t && (this.setValue(t), this.ChangedValue.fire({
            event: e,
            sender: this
        }))
    },
    t._onInputNodeFocus = function() {
        this._fieldNode.removeAttribute("readonly"),
        this._fieldNode.focus()
    },
    t._validNumber = function(t) {
        if ("" === t) return "";
        var i = void 0 == t ? this.getValue() : t;
        return i = "string" == typeof i ? e.parseFloat(i) : i,
        i < this._MinValue ? i = this._MinValue: i > this._MaxValue && (i = this._MaxValue),
        i
    },
    t.setStep = function(e) {
        this._Step = e
    },
    t.getStep = function() {
        return this._Step
    },
    t.setMinValue = function(e) {
        this._MinValue = e
    },
    t.setMaxValue = function(e) {
        this._MaxValue = e
    },
    t.setWidth = function(t) {
        this._widthUnit = "px",
        "string" == typeof t && t.indexOf("%") ? (this._Width = Math.max(0, parseInt(t)), this._widthUnit = "%") : this._Width = Math.min(Math.max(0, t), e.DisplaySize.getWidth()),
        this._inputNode && (this._inputNode.style.width = this._Width ? this._Width + this._widthUnit: ""),
        this._fieldNode && (this._fieldNode.style.width = this._Width ? this._Width - 18 + "px": "")
    },
    t.setEnabled = function(e) {
        e !== !1 ? this.removeCSSClass("Locked") : this.addCSSClass("Locked")
    },
    t.keyDown = function(t) {
        var i = t.event.charCode ? t.event.charCode: t.event.keyCode ? t.event.keyCode: t.event.which ? t.event.which: 0,
        s = e.UtipFunctions.getDecimalIndex(this._fieldNode.value),
        n = 0;
        s > -1 && (n = this._fieldNode.value.substr(s + 1, 100).length),
        this._Decimals > 0 && n >= this._Decimals && 8 != i && 46 != i && 37 != i && 39 != i && 190 != i && 188 != i && t.event.preventDefault()
    },
    t = null,
    e
}),
define("inputSelectNumber", ["inputSelect"],
function(e) {
    e.InputSelectNumber = function(t) {
        this._Decimals = 0,
        this._MaxValue = null,
        this._MinValue = null,
        e.InputSelectNumber.base.constructor.apply(this, arguments),
        this.KeyDown.add(e.Delegate(this, this.keyDown))
    },
    e.initClass(e.InputSelectNumber, e.InputSelect);
    var t = e.InputSelectNumber.prototype;
    return t.keyDown = function(t) {
        this.oldValue = t.event.target.value;
        var i = 0 == this._fieldNode.selectionStart && this._fieldNode.selectionEnd == this._fieldNode.value.length,
        s = t.event.charCode ? t.event.charCode: t.event.keyCode ? t.event.keyCode: t.event.which ? t.event.which: 0,
        n = e.UtipFunctions.getDecimalIndex(this._fieldNode.value),
        o = 0,
        a = parseFloat(this._fieldNode.value.splice(this._fieldNode.selectionStart, 0, String.fromCharCode(s))),
        r = this._MaxValue && a > parseFloat(this._MaxValue);
        n > -1 && (o = this._fieldNode.value.substr(n + 1, 100).length),
        (o >= this._Decimals && this._Decimals > 0 || r) && 8 != s && 46 != s && 37 != s && 39 != s && !i && t.event.preventDefault()
    },
    t.setDecimals = function(e) {
        this._Decimals = e
    },
    t.getDecimals = function() {
        return this._Decimals
    },
    t = null,
    e
}),
define("inputStops", ["input"],
function(e) {
    e.InputStops = function(t) {
        this._Icon = null,
        this._Caption = null,
        this._active = !1,
        this._WithStops = null,
        this._defineEvents(["ChangeState"]),
        e.InputStops.base.constructor.apply(this, arguments)
    },
    e.initClass(e.InputStops, e.InputNumber);
    var t = e.InputStops.prototype;
    return t._render = function() {
        if (e.InputStops.base._render.apply(this, arguments), this._fieldNode = this._DomNode.querySelector(".WTInputField"), this._iconNode = this._DomNode.querySelector(".WTInputFieldIcon"), this._captionNode = this._DomNode.querySelector(".WTInputFieldCaption"), this._inputNumberButtonNode = this._DomNode.querySelector(".InputNumberButton"), this._Icon ? this._iconNode.style.background = this._Icon: this._Caption && (this._captionNode.innerText = this._Caption), this._WithStops) {
            this._iconNode.classList.remove("None"),
            e.addEvent(this._iconNode, "click", this.changeState.bind(this)),
            e.addEvent(this._captionNode, "click", this.changeState.bind(this)),
            e.addEvent(this._fieldNode, "click", this.changeStateFieldNode.bind(this)),
            e.addEvent(this._fieldNode, "focus", this.changeStateFieldNode.bind(this));
            var t = this.getDomNode().querySelector(".InputNumberButton");
            t.classList.add("NotUse")
        }
        e.addEvent(this._fieldNode, "keypress", this._checkNumberKey.bind(this))
    },
    t._startIncrease = function(t) {
        e.InputStops.base._startIncrease.apply(this, arguments)
    },
    t.handChangeState = function(e) {
        null !== e && void 0 !== e && (this._active = !e, this.changeState(!0))
    },
    t.changeStateFieldNode = function(e) {
        this._active || (this._active = !this._active, this._iconNode.classList.add("Use"), this._captionNode.classList.add("Use"), this._fieldNode.removeAttribute("readonly"), this._inputNumberButtonNode.classList.add("Use"), this._inputNumberButtonNode.classList.remove("NotUse"), this._WithStops = !0, this.setWidth(140), this.ChangeState.fire({
            sender: this
        }))
    },
    t.changeState = function(e) {
        this._active = !this._active && !!e,
        this._active ? (this._iconNode.classList.add("Use"), this._captionNode.classList.add("Use"), this._inputNumberButtonNode.classList.add("Use"), this._inputNumberButtonNode.classList.remove("NotUse"), this._WithStops = !0) : (this._iconNode.classList.remove("Use"), this._captionNode.classList.remove("Use"), this._inputNumberButtonNode.classList.remove("Use"), this._inputNumberButtonNode.classList.add("NotUse"), this._WithStops = !1),
        this.setWidth(140),
        this.ChangeState.fire({
            sender: this
        })
    },
    t.usedStopOrderButtons = function() {
        return this._WithStops
    },
    t.turnOff = function(e) {
        this.ChangedValue.remove(e),
        this._iconNode.classList.remove("Use"),
        this._captionNode.classList.remove("Use"),
        this._inputNumberButtonNode.classList.remove("Use"),
        this._inputNumberButtonNode.classList.add("NotUse"),
        this._WithStops = !1
    },
    t.setWidth = function(t) {
        e.InputStops.base.setWidth.apply(this, arguments),
        this._fieldNode && this._iconNode && this._captionNode && (this._fieldNode.style.width = "calc(100% - " + ((this._Icon || this._Caption ? (this._iconNode.offsetWidth || this._captionNode.offsetWidth) + 1 : 0) + (this._WithStops ? 20 : 0)) + "px)")
    },
    t.useStopsNode = function() {
        return this._active
    },
    e
}),
define("tradeFunctions", ["listener"],
function(e) {
    e._TradeFunctions = function() {
        return this instanceof e._TradeFunctions ? void e._TradeFunctions.base.constructor.apply(this, arguments) : new e._TradeFunctions
    },
    e.initClass(e._TradeFunctions, e.Listener);
    var t = e._TradeFunctions.prototype;
    return t.getOpenedParam = function(t, i, s, n) {
        for (var o = i.getCoverageMarginStrategy(), a = 0, r = 0, l = 0, h = 0, d = 0, c = 0, u = "Buy" == s ? i._Ask: i._Bid, g = this.getMarginRate(i, e.SymbolsData.getSymbolByCurrency(t.getGroup().depositCurrency), t.getGroup().getDepositLocation(), s), p = 0; p < t._Positions.length; p++) {
            var m = e.positionTypeCode[t._Positions[p].positionType];
            if (t._Positions[p].symbolName === i._SymbolName) {
                var _ = e.parseFloat(t._Positions[p].volume),
                y = e.parseFloat(t._Positions[p].margin);
                switch (a += _, o) {
                case e.Symbol.CoverageMarginStrategy.off:
                    r += y;
                    break;
                case e.Symbol.CoverageMarginStrategy.max:
                case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
                    m == e.positionTypeCode.Buy ? l += y: h += y
                }
                m == e.positionTypeCode.Buy ? d += _: c += _
            }
        }
        n || (n = {
            volume: 0
        });
        var S = e.TraderData.optionsInvestments(),
        f = e.TraderData.getPositionsMargin(),
        v = null,
        C = null,
        b = 0,
        T = e.parseFloat(t.getTraderInfo().leverage),
        P = i._ContractSize,
        D = i.getPercentage(),
        I = n.volume,
        w = l,
        M = h;
        switch (o) {
        case e.Symbol.CoverageMarginStrategy.off:
            switch (b = l + h, i._CalculationTypeID) {
            case e.Symbol.CalculationTypeID.Forex:
                v = f + P * I / T * D / 100 * g;
                break;
            case e.Symbol.CalculationTypeID.ForexNonLeverage:
                v = f + P * I * D / 100 * g;
                break;
            default:
                v = f + P * I * u * D / 100 * g
            }
            break;
        case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
        case e.Symbol.CoverageMarginStrategy.max:
            var O = o == e.Symbol.CoverageMarginStrategy.tenPercentageOfMin;
            switch (i._CalculationTypeID) {
            case e.Symbol.CalculationTypeID.Forex:
                C = P * I / T * D / 100 * g;
                break;
            case e.Symbol.CalculationTypeID.ForexNonLeverage:
                C = P * I * D / 100 * g;
                break;
            default:
                C = P * I * u * D / 100 * g
            }
            b = O ? Math.max(l, h) - .9 * Math.min(l, h) : Math.max(l, h),
            f -= b + S,
            e.positionTypeCode[s] == e.positionTypeCode.Buy ? l += C: h += C,
            v = f + Math.max(l, h),
            O && (v -= h > l ? .9 * l: .9 * h)
        }
        return {
            OpenedVolume: Math.abs(a),
            OpenedMargin: Math.abs(b),
            CurrentVolumeBuy: d,
            CurrentVolumeSell: c,
            SummaryMarginBuy: w,
            SummaryMarginSell: M,
            NewMargin: v
        }
    },
    t.getMarginRate = function(t, i, s, n) {
        var o = 0,
        a = 0,
        r = 0;
        switch (n) {
        case "Buy":
            a = "USDUSD" !== t._MarginSymbol && t._MarginSymbol ? e.SymbolsData.getSymbols()[t._MarginSymbol]._Ask: 1,
            r = "USDUSD" === i._SymbolName ? 1 : i._Ask;
            break;
        case "Sell":
            a = "USDUSD" !== t._MarginSymbol && t._MarginSymbol ? e.SymbolsData.getSymbols()[t._MarginSymbol]._Bid: 1,
            r = "USDUSD" === i._SymbolName ? 1 : i._Bid
        }
        var l = "USDUSD" !== t._MarginSymbol && t._MarginSymbol ? t._MarginSymbolLocation: e.Symbol.SymbolLocation.DirectQuote;
        return l == e.Symbol.SymbolLocation.DirectQuote && s == e.Symbol.SymbolLocation.DirectQuote && (o = a / r),
        l == e.Symbol.SymbolLocation.DirectQuote && s == e.Symbol.SymbolLocation.ReverseQuote && (o = a * r),
        l == e.Symbol.SymbolLocation.ReverseQuote && s == e.Symbol.SymbolLocation.DirectQuote && (o = 1 / (a * r)),
        l == e.Symbol.SymbolLocation.ReverseQuote && s == e.Symbol.SymbolLocation.ReverseQuote && (o = r / a),
        o
    },
    t.getForexMaxVolumeBuy = function(t, i, s, n) {
        var o = this.getOpenedParam(t, i, s, n),
        a = t.getEquity() - t.optionsInvestments() - t.calcOptionPositionsProfit(),
        r = t.getFreeEquity(),
        l = this.getMarginRate(i, e.SymbolsData.getSymbolByCurrency(t.getGroup().depositCurrency), t.getGroup().getDepositLocation(), s),
        h = 0;
        switch (i.getCoverageMarginStrategy()) {
        case e.Symbol.CoverageMarginStrategy.off:
            h = r * parseInt(t._TraderInfo.leverage) / (i._ContractSize * l * i.getPercentage() / 100);
            break;
        case e.Symbol.CoverageMarginStrategy.max:
        case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
            if (o.SummaryMarginBuy > o.SummaryMarginSell) h = e.round(parseInt(t._TraderInfo.leverage) * r / (i._ContractSize * l * i.getPercentage() / 100), 2);
            else {
                var d;
                d = i.getCoverageMarginStrategy() == e.Symbol.CoverageMarginStrategy.tenPercentageOfMin ? e.round(parseInt(t.getTraderInfo().leverage) * (1.9 * (o.SummaryMarginSell - o.SummaryMarginBuy) + r) / (i._ContractSize * l * i.getPercentage() / 100), 2) : e.round(parseInt(t.getTraderInfo().leverage) * (o.SummaryMarginSell - o.SummaryMarginBuy + r) / (i._ContractSize * l * i.getPercentage() / 100), 2);
                var c = e.round( - (parseInt(t._TraderInfo.leverage) * r) / (i._ContractSize * l * i.getPercentage() / 100), 2);
                h = Math.max(d, c)
            }
        }
        return (a / o.NewMargin < 1 || "1" == t.getTraderInfo().equityMarginCall && a - t.getSumBonus() <= 0) && (h = 0),
        h
    },
    t.getForexMaxVolumeSell = function(t, i, s, n) {
        var o = this.getOpenedParam(t, i, s, n),
        a = t.getEquity() - t.optionsInvestments() - t.calcOptionPositionsProfit(),
        r = t.getFreeEquity(),
        l = this.getMarginRate(i, e.SymbolsData.getSymbolByCurrency(t.getGroup().depositCurrency), t.getGroup().getDepositLocation(), s),
        h = 0;
        switch (i.getCoverageMarginStrategy()) {
        case e.Symbol.CoverageMarginStrategy.off:
            h = r * parseInt(t._TraderInfo.leverage) / (i._ContractSize * l * i.getPercentage() / 100);
            break;
        case e.Symbol.CoverageMarginStrategy.max:
        case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
            if (o.SummaryMarginSell > o.SummaryMarginBuy) h = e.round(parseInt(t._TraderInfo.leverage) * r / (i._ContractSize * l * i.getPercentage() / 100), 2);
            else {
                var d;
                d = i.getCoverageMarginStrategy() == e.Symbol.CoverageMarginStrategy.tenPercentageOfMin ? e.round(parseInt(t.getTraderInfo().leverage) * (1.9 * (o.SummaryMarginBuy - o.SummaryMarginSell) + r) / (i._ContractSize * l * i.getPercentage() / 100), 2) : e.round(parseInt(t.getTraderInfo().leverage) * (o.SummaryMarginBuy - o.SummaryMarginSell + r) / (i._ContractSize * l * i.getPercentage() / 100), 2);
                var c = e.round( - (parseInt(t.getTraderInfo().leverage) * r) / (i._ContractSize * l * i.getPercentage() / 100), 2);
                h = Math.max(d, c)
            }
        }
        return (a / o.NewMargin < 1 || "1" == t.getTraderInfo().equityMarginCall && a - t.getSumBonus() <= 0) && (h = 0),
        h
    },
    t.getCFDMaxVolumeBuy = function(t, i, s, n, o) {
        var a = this.getOpenedParam(t, i, s, o),
        r = t.getEquity() - t.optionsInvestments() - t.calcOptionPositionsProfit(),
        l = t.getFreeEquity(),
        h = i._ContractSize,
        d = i.getPercentage(),
        c = i._Ask,
        u = i.getCoverageMarginStrategy();
        try {
            var g = this.getMarginRate(i, e.SymbolsData.getSymbolByCurrency(t.getGroup().depositCurrency), t.getGroup().getDepositLocation(), s),
            p = 0;
            switch (u) {
            case e.Symbol.CoverageMarginStrategy.off:
                p = e.round(l / (h * g * n * d / 100), 2);
                break;
            case e.Symbol.CoverageMarginStrategy.max:
            case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
                if (a.CurrentVolumeBuy >= a.CurrentVolumeSell) p = e.round(l / (h * g * c * d / 100), 2);
                else {
                    var m;
                    m = u == e.Symbol.CoverageMarginStrategy.tenPercentageOfMin ? e.round((1.9 * (a.SummaryMarginSell - a.SummaryMarginBuy) + l) / (h * g * c * d / 100), 2) : e.round((a.SummaryMarginSell - a.SummaryMarginBuy + l) / (h * g * c * d / 100), 2);
                    var _ = e.round( - (l / (h * g * c * d / 100)), 2);
                    p = Math.max(m, _)
                }
            } (r / a.NewMargin < 1 || "1" == t.getTraderInfo().equityMarginCall && r - t.getSumBonus() <= 0) && (p = 0)
        } catch(e) {
            console.log("name: " + e.name + "\nmessage: " + e.message + "\nstack: " + e.stack)
        } finally {
            return p
        }
    },
    t.getCFDMaxVolumeSell = function(t, i, s, n, o) {
        var a = this.getOpenedParam(t, i, s, o),
        r = t.getEquity() - t.optionsInvestments() - t.calcOptionPositionsProfit(),
        l = t.getFreeEquity(),
        h = i._ContractSize,
        d = i.getPercentage(),
        c = i._Bid,
        u = i.getCoverageMarginStrategy();
        try {
            var g = this.getMarginRate(i, e.SymbolsData.getSymbolByCurrency(t.getGroup().depositCurrency), t.getGroup().getDepositLocation(), s),
            p = 0;
            switch (u) {
            case e.Symbol.CoverageMarginStrategy.off:
                p = e.round(l / (h * g * n * d / 100), 2);
                break;
            case e.Symbol.CoverageMarginStrategy.max:
            case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
                if (a.CurrentVolumeSell >= a.CurrentVolumeBuy) p = e.round(l / (h * g * c * d / 100), 2);
                else {
                    var m;
                    m = u == e.Symbol.CoverageMarginStrategy.tenPercentageOfMin ? e.round((1.9 * (a.SummaryMarginBuy - a.SummaryMarginSell) + l) / (h * g * c * d / 100), 2) : e.round((a.SummaryMarginBuy - a.SummaryMarginSell + l) / (h * g * c * d / 100), 2);
                    var _ = e.round( - (l / (h * g * c * d / 100)), 2);
                    p = Math.max(m, _)
                }
            } (r / a.NewMargin < 1 || "1" == t.getTraderInfo().equityMarginCall && r - t.getSumBonus() <= 0) && (p = 0)
        } catch(e) {
            console.log("name: " + e.name + "\nmessage: " + e.message + "\nstack: " + e.stack)
        } finally {
            return p
        }
    },
    t.getForexNonLeverageMaxVolumeBuy = function(t, i, s, n) {
        var o = this.getOpenedParam(t, i, s, n),
        a = t.getEquity() - t.optionsInvestments() - t.calcOptionPositionsProfit(),
        r = t.getFreeEquity(),
        l = this.getMarginRate(i, e.SymbolsData.getSymbolByCurrency(t.getGroup().depositCurrency), t.getGroup().getDepositLocation(), s),
        h = 0;
        switch (i.getCoverageMarginStrategy()) {
        case e.Symbol.CoverageMarginStrategy.off:
            h = r / (i._ContractSize * l * i.getPercentage() / 100);
            break;
        case e.Symbol.CoverageMarginStrategy.max:
        case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
            if (o.SummaryMarginBuy > o.SummaryMarginSell) h = e.round(r / (i._ContractSize * l * i.getPercentage() / 100), 2);
            else {
                var d;
                d = i.getCoverageMarginStrategy() == e.Symbol.CoverageMarginStrategy.tenPercentageOfMin ? e.round((1.9 * (o.SummaryMarginSell - o.SummaryMarginBuy) + r) / (i._ContractSize * l * i.getPercentage() / 100), 2) : e.round((o.SummaryMarginSell - o.SummaryMarginBuy + r) / (i._ContractSize * l * i.getPercentage() / 100), 2);
                var c = e.round( - r / (i._ContractSize * l * i.getPercentage() / 100), 2);
                h = Math.max(d, c)
            }
        }
        return (a / o.NewMargin < 1 || "1" == t.getTraderInfo().equityMarginCall && a - t.getSumBonus() <= 0) && (h = 0),
        h
    },
    t.getForexNonLeverageMaxVolumeSell = function(t, i, s, n) {
        var o = this.getOpenedParam(t, i, s, n),
        a = t.getEquity() - t.optionsInvestments() - t.calcOptionPositionsProfit(),
        r = t.getFreeEquity(),
        l = this.getMarginRate(i, e.SymbolsData.getSymbolByCurrency(t.getGroup().depositCurrency), t.getGroup().getDepositLocation(), s),
        h = 0;
        switch (i.getCoverageMarginStrategy()) {
        case e.Symbol.CoverageMarginStrategy.off:
            h = r / (i._ContractSize * l * i.getPercentage() / 100);
            break;
        case e.Symbol.CoverageMarginStrategy.max:
        case e.Symbol.CoverageMarginStrategy.tenPercentageOfMin:
            if (o.SummaryMarginSell > o.SummaryMarginBuy) h = e.round(r / (i._ContractSize * l * i.getPercentage() / 100), 2);
            else {
                var d;
                d = i.getCoverageMarginStrategy() == e.Symbol.CoverageMarginStrategy.tenPercentageOfMin ? e.round((1.9 * (o.SummaryMarginBuy - o.SummaryMarginSell) + r) / (i._ContractSize * l * i.getPercentage() / 100), 2) : e.round((o.SummaryMarginBuy - o.SummaryMarginSell + r) / (i._ContractSize * l * i.getPercentage() / 100), 2);
                var c = e.round( - r / (i._ContractSize * l * i.getPercentage() / 100), 2);
                h = Math.max(d, c)
            }
        }
        return (a / o.NewMargin < 1 || "1" == t.getTraderInfo().equityMarginCall && a - t.getSumBonus() <= 0) && (h = 0),
        h
    },
    t.getValidVolume = function(e, t, i) {
        return i ? (parseInt(e / t) + 1) * t: parseInt(e / t) * t
    },
    t.getMinVolume = function(t) {
        var i = 0;
        switch (t) {
        case e._TraderData.positionStep.ps1:
            i = 1;
            break;
        case e._TraderData.positionStep.ps0_1:
            i = .1;
            break;
        case e._TraderData.positionStep.ps0_01:
            i = .01
        }
        return i
    },
    t.getVolumeByLeverage = function(t, i, s) {
        var n = e.round(t, 2),
        o = this.getMinVolume(i);
        return 0 !== e.parseFloat((t % o).toFixed(4)) && (n = e.round(this.getValidVolume(t, o, s), 2)),
        n
    },
    t.maxVolumeOnType = function(t, i, s, n) {
        var o = 0,
        a = 0,
        r = 0;
        switch (i._CalculationTypeID) {
        case e.Symbol.CalculationTypeID.Forex:
            o = this.getForexMaxVolumeBuy(t, i, s, n),
            a = this.getForexMaxVolumeSell(t, i, s, n);
            break;
        case e.Symbol.CalculationTypeID.CFD:
            o = this.getCFDMaxVolumeBuy(t, i, s, i._Bid, n),
            a = this.getCFDMaxVolumeSell(t, i, s, i._Ask, n);
            break;
        case e.Symbol.CalculationTypeID.ForexNonLeverage:
            o = this.getForexNonLeverageMaxVolumeBuy(t, i, s, n),
            a = this.getForexNonLeverageMaxVolumeSell(t, i, s, n)
        }
        switch (o = o < 0 ? 0 : o, a = a < 0 ? 0 : a, s) {
        case e._TraderData.positionType.buy:
            r = this.getVolumeByLeverage(o, t.getPositionStep(), !1);
            break;
        case e._TraderData.positionType.sell:
            r = this.getVolumeByLeverage(Math.abs(a), t.getPositionStep(), !1)
        }
        return r
    },
    t.maxVolumeOnSymbol = function(t, i) {
        var s, n = 0;
        return t ? (s = this.maxVolumeOnType(i, t, e._TraderData.positionType.buy), n = this.maxVolumeOnType(i, t, e._TraderData.positionType.sell), Math.max(s, n)) : 0
    },
    t.marginCalculate = function(t, i, s, n) {
        var o = 0;
        if (i.getGroup()) {
            var a = this.getMarginRate(t, e.SymbolsData.getSymbolByCurrency(i.getGroup().depositCurrency), i.getGroup().getDepositLocation(), s);
            switch (t._CalculationTypeID) {
            case e.Symbol.CalculationTypeID.Forex:
                o = t._ContractSize * parseFloat(n) / parseInt(i._TraderInfo.leverage) * t.getPercentage() / 100 * a;
                break;
            case e.Symbol.CalculationTypeID.CFD:
                o = s === e._TraderData.positionType.buy ? t._ContractSize * parseFloat(n) * t._Ask * t._Percentage / 100 * a: t._ContractSize * parseFloat(n) * t._Bid * t._Percentage / 100 * a;
                break;
            case e.Symbol.CalculationTypeID.ForexNonLeverage:
                o = t._ContractSize * parseFloat(n) * t.getPercentage() / 100 * a
            }
            return o
        }
        return o
    },
    t.onePipsCalculate = function(t, i, s, n) {
        var o = 0,
        a = e.SymbolsData.getSymbols()[t._QuoteSymbolName],
        r = e.SymbolsData.getSymbolByCurrency(e.TraderData._TraderGroup.depositCurrency),
        l = a ? "Buy" == s ? a._Bid: a._Ask: 1,
        h = "USDUSD" !== r ? "Buy" == s ? r._Bid: r._Ask: 1,
        d = a ? t._QuoteSymbolLocation: e.Symbol.SymbolLocation.DirectQuote,
        c = e.TraderData._TraderGroup.getDepositLocation(),
        u = e._SymbolsData.getProfitRate(l, d, h, c);
        return o = t._ContractSize * n * t.getFormattedPrecision() * u
    },
    t = null,
    e.tradeFunctions = new e._TradeFunctions,
    e
}),
define("tradePanelModule", ["button", "inputNumber", "inputSelectNumber", "inputStops", "symbolsData", "optionsSettingsData", "tradeFunctions", "templates"],
function(e) {
    e.TradePanelModule = function(t) {
        var i = e.getTerminal(),
        s = e.cloneObject,
        n = e.htmlToDOM,
        o = s(e._Templates),
        a = this._fullView = n(o.TradePanel);
        this._toolTypeView = a.querySelector(".Type"),
        this._contentView = this._fullView.querySelector(".Content"),
        this._marketView = n(o.TradePanelMarket),
        this._pendingView = n(o.TradePanelPending),
        this._binaryView = n(o.TradePanelBinary),
        this._currentView = this._marketView;
        var r = s(e.tradePanelConst);
        this.workMode = null,
        this.toolType = null,
        this.chart = null,
        this.viewVisualState = r.viewVisualState.maximize,
        this.forexMode = !i.useOptions,
        this.binaryMode = i.useOnlyOptions,
        this.usedNewBinary = i.useNewOptions,
        this.investorMode = e.investorAccount,
        this.width = 160,
        this.height,
        this.fcsovDelegate = e.Delegate(this, this.firstChangeStopOrderValue),
        this.package = {},
        this._symbol = null,
        this._symbolName = null,
        this._binaryOption = null,
        this._position = null,
        this.requestData = {
            requestToOpenPositionIsSent: !1,
            type: null
        },
        this.registered = null,
        this.ready = !1,
        this.showed = !1,
        e.TradePanelModule.base.constructor.apply(this, arguments),
        this.ready !== !1 && this.subscribe(),
        o = null,
        r = null
    },
    e.initClass(e.TradePanelModule, e.BaseControl);
    var t = e.TradePanelModule.prototype;
    return e.tradePanelConst = {
        width: {
            max: 160,
            min: 140
        },
        viewVisualState: {
            maximize: 0,
            minimize: 1,
            invisible: 2,
            hidden: 3
        },
        workMode: {
            market: 0,
            pending: 1,
            binary: 2
        },
        positionMode: {
            hasNot: 0,
            has: 1
        },
        toolType: {
            0 : {
                0 : 0,
                buySell: 0
            },
            1 : {
                100 : e.requestPendingOrderType.BuyLimit,
                101 : e.requestPendingOrderType.SellLimit,
                102 : e.requestPendingOrderType.BuyStop,
                103 : e.requestPendingOrderType.SellStop,
                buyLimit: e.requestPendingOrderType.BuyLimit,
                sellLimit: e.requestPendingOrderType.SellLimit,
                buyStop: e.requestPendingOrderType.BuyStop,
                sellStop: e.requestPendingOrderType.SellStop
            },
            2 : {
                0 : e.OptionSettingsType.express,
                1 : e.OptionSettingsType.classic,
                2 : e.OptionSettingsType.oneTouch,
                3 : e.OptionSettingsType.range,
                express: e.OptionSettingsType.express,
                classic: e.OptionSettingsType.classic,
                oneTouch: e.OptionSettingsType.oneTouch,
                range: e.OptionSettingsType.range
            }
        }
    },
    t.subscribe = function() {
        var t = this.registered;
        t !== !0 && (e.Socket.register(this), e.SymbolsData.register(this), null === t && (e.TraderData.register(this), e.LangManager.register(this)), this.registered = !0)
    },
    t.dropOutOfFollowers = function(t) {
        this.registered !== !1 && (e.Socket.unRegister(this), e.SymbolsData.unRegister(this), t === !0 && (e.TraderData.unRegister(this), e.LangManager.unRegister(this)), this.registered = !1)
    },
    t._onGetQuote = function(e) {
        this.s_getQuote(e)
    },
    t.s_getQuote = function(t) {
        if (t === this._symbol) {
            var i, s, n, o, a, r = e.tradePanelConst,
            l = this.workMode,
            h = this.toolType,
            d = r.workMode,
            c = r.toolType,
            u = e.parseFloat,
            g = this._position;
            switch (l) {
            case d.market:
                try {
                    i = this.package.market;
                    var p = t.getBid(),
                    m = t.getAsk();
                    if (this.hasOrderPosition()) {
                        s = "Sell" == g.positionType,
                        n = t.getPrecision(),
                        o = s ? m: p,
                        a = u(t.getStopLevel()) / n;
                        var _ = !e.UtipFunctions.canClosePosition(u(g.takeProfit), u(g.stopLoss), o, a);
                        i.buttonControls.close.setEnabled(_),
                        this.refreshStopOrderApplyButton(i)
                    } else this.refreshMarketButtons();
                    this.refreshMarketPriceView()
                } catch(e) {
                    console.log('trade panel: function\'s error. function name "onGetQuote" -> market. ' + e.message)
                }
                break;
            case d.pending:
                try {
                    if (this.hasOrderPosition()) {
                        i = this.package.pending;
                        var y = g.pendingOrderType;
                        s = y == c[l].buyLimit || y == c[l].buyStop,
                        n = t.getPrecision(),
                        o = s ? m: p,
                        a = u(t.getStopLevel()) / n;
                        var S = !e.UtipFunctions.canClosePendingOrder(g, o, a);
                        i.buttonControls.close.setEnabled(S),
                        this.refreshStopOrderApplyButton(i)
                    } else this.refreshPendingButton()
                } catch(e) {
                    console.log('trade panel: function\'s error. function name "onGetQuote" -> pending. ' + e.message)
                }
                break;
            case d.binary:
                try {
                    if (this.hasBinaryPosition()) this.calculateBinaryTimeAndCommission(g);
                    else {
                        if (this.refreshBinaryButtons(), h === c[l].express || h === c[l].classic) break;
                        this.calculateBinaryBorders()
                    }
                } catch(e) {
                    console.log('trade panel: function\'s error. function name "onGetQuote" -> binary. ' + e.message)
                }
            }
        }
    },
    t._onSocketMessage = function(e) {
        var t = e.msgType,
        i = e.msgData;
        switch (t) {
        case "traderData":
        case "traderGroup":
            this.s_traderData(i);
            break;
        case "positions":
            this.s_marketOrdersReceived(i);
            break;
        case "pendingOrders":
            this.s_pendingOrdersReceived(i);
            break;
        case "optionsPositions":
            this.s_binaryOptionsReceived(i);
            break;
        case "optionsSettingsName":
            this.s_changeBinaryTypeNames(i);
            break;
        case "changePosition":
        case "changeMT4Position":
            this.s_changeMarketPosition(i);
            break;
        case "changePendingOrder":
        case "changeMT4PendingOrder":
            this.s_changePendingPosition(i);
            break;
        case "openPosition":
        case "openMT4Position":
            this.s_openMarketPosition(i);
            break;
        case "openPendingOrder":
        case "openMT4PendingOrder":
            this.s_openPendingPosition(i);
            break;
        case "openOptionPosition":
            this.s_openBinaryPosition(i);
            break;
        case "closePosition":
            this.s_closeMarketPosition(i);
            break;
        case "closeOptionPosition":
            this.s_closeBinaryPosition(i);
            break;
        case "addedSymbol":
            this.s_symbolAdded(i);
            break;
        case "deletedSymbol":
            this.s_symbolDeleted(i);
            break;
        case "addOptionSettings":
            this.s_binaryOptionAdded(i);
            break;
        case "changeOptionSettings":
            this.s_binaryOptionChanged(i);
            break;
        case "deleteOptionSettings":
            this.s_binaryOptionDeleted(i)
        }
    },
    t._onSocketClose = function(e) {},
    t.s_traderData = function(e) {
        this.refreshBinarySums(!1),
        this.refreshBinaryButtons()
    },
    t.s_symbolAdded = function(t) {
        var i = t.symbolName;
        if (this._symbolName === i) {
            this._symbol = e.SymbolsData.getSymbols()[i];
            var s = e.tradePanelConst,
            n = s.workMode,
            o = this.workMode,
            a = this.toolType;
            if (this.forexMode && o === n.binary) o = n.market,
            a = s.toolType[o].buySell;
            else if (this.binaryMode && (o === n.market || o === n.pending)) {
                var r = this.__determineAvailableToolTypes__(),
                l = r.binary && r.binary.length > 0;
                l && (o = n.binary, a = s.toolType[o][l[0]])
            }
            var h = {
                workMode: o,
                toolType: a,
                symbol: this._symbol,
                binaryOption: this._binaryOption,
                position: null
            };
            this.assembleToolTypesPackage(),
            this.restoreServiceability(),
            this.changeData(h)
        }
    },
    t.s_symbolDeleted = function(e) {},
    t.s_marketOrdersReceived = function(e) {
        var t = this.hasOrderPosition(),
        i = t && this.isPendingOrderPosition(),
        s = this.hasBinaryPosition();
        if (!t || i || s) this.positionNeedle = !1,
        this.skipPositionsBySocket = !0,
        t || s || this.restoreBaseState(!0);
        else {
            this.positionNeedle = !0;
            for (var n, o = this._symbolName,
            a = !1,
            r = this._position,
            l = null,
            h = e,
            d = h.length,
            c = 0; c < d; ++c) {
                if (n = h[c], n.id === r.id) {
                    this.s_a_loadPositionThroughTableTrade(n),
                    this.positionNeedle = !1,
                    this._position = r = n,
                    l = null,
                    a = !0;
                    break
                }
                a || l || n.symbolName !== o || (this.positionNeedle = !1, l = n)
            }
            l ? this.s_a_loadPositionThroughTableTrade(l) : a || this.restoreBaseState(!0)
        }
    },
    t.s_openMarketPosition = function(e) {},
    t.s_changeMarketPosition = function(t) {
        var i = this.hasOrderPosition();
        if (i && t) {
            var s = t.id,
            n = this._position;
            if (n.id === s) {
                var o = e.TraderData.getPositionById(s);
                this._position = o,
                this.block(!1)
            }
        } ! i && this._symbol.allowTrade() && this.block(!1)
    },
    t.s_closeMarketPosition = function(e) {
        var t = this.hasOrderPosition();
        if (t && e) {
            var i = e.id,
            s = this._position;
            s.id === i && (this.restoreBaseState(), this.block(!1))
        } ! t && this._symbol.allowTrade() && this.block(!1)
    },
    t.s_pendingOrdersReceived = function(e) {
        var t = this.positionNeedle,
        i = this.skipPositionsBySocket,
        s = this.hasOrderPosition(),
        n = s && this.isPendingOrderPosition(),
        o = this.hasBinaryPosition();
        if (t !== !0 && !n || i === !0 || o) t === !0 && i !== !0 || (this.positionNeedle = !1, this.skipPositionsBySocket = !0, s || o || this.restoreBaseState(!0));
        else {
            this.positionNeedle = !0;
            for (var a, r = this._symbolName,
            l = !1,
            h = this._position,
            d = null,
            c = e,
            u = c.length,
            g = 0; g < u; ++g) {
                if (a = c[g], h && a.id === h.id) {
                    this.s_a_loadPositionThroughTableTrade(a),
                    this.positionNeedle = !1,
                    d = null,
                    l = !0;
                    break
                }
                l || d || a.symbolName !== r || (this.positionNeedle = !1, d = a)
            }
            d ? this.s_a_loadPositionThroughTableTrade(d) : l || this.restoreBaseState(!0)
        }
    },
    t.s_openPendingPosition = function(e) {},
    t.s_changePendingPosition = function(e) {
        var t = this.hasOrderPosition(); ! t && this._symbol.allowTrade() && this.block(!1)
    },
    t.s_binaryOptionsReceived = function(t) {
        var i = this.positionNeedle,
        s = this.skipPositionsBySocket,
        n = this.hasOrderPosition(),
        o = this.hasBinaryPosition();
        if (i !== !0 && !o || s === !0) delete this.positionNeedle,
        delete this.skipPositionsBySocket,
        n || o || this.restoreBaseState(!0),
        this.block(!1);
        else {
            this.positionNeedle = !0;
            for (var a, r = this._symbolName,
            l = !1,
            h = this._position,
            d = null,
            c = t,
            u = c.length,
            g = 0; g < u; ++g) {
                if (a = c[g], h && a.id === h.id) {
                    delete this.positionNeedle,
                    delete this.skipPositionsBySocket,
                    this.s_a_loadPositionThroughTableTrade(a),
                    d = null,
                    l = !0;
                    break
                }
                l || d || a.symbolName !== r || (d = a)
            }
            d ? this.s_a_loadPositionThroughTableTrade(d) : l || (delete this.positionNeedle, delete this.skipPositionsBySocket, this.restoreBaseState(!0), e.getTerminal().saveSettings())
        }
    },
    t.s_openBinaryPosition = function(e) {
        this.block(!1)
    },
    t.s_closeBinaryPosition = function(e) {
        var t = this.hasBinaryPosition();
        if (t && e) {
            var i = e.id,
            s = this._position;
            s.id === i && (this.restoreBaseState(), this.block(!1))
        } ! t && this._symbol.allowTrade() && this.block(!1)
    },
    t.s_a_loadPositionThroughTableTrade = function(t) {
        if (this.chart.isChartOfActiveGraphicWindow() && t) {
            var i = e.getTableTrade(),
            s = i.getRowIdByPosition(t),
            n = i.getRowById(s);
            n ? n.setSelected(!0) : this.loadPosition(t),
            this.hasAnyPosition() || this.loadPosition(t)
        }
    },
    t.s_changeBinaryTypeNames = function(e) {
        var t = this.package.toolType.ourControl,
        i = t.getSelectedOption();
        this.assembleToolTypesPackage(),
        t.setSelectedOption(i),
        t.ChangedValue.fire({
            event: {
                Item: t.getItemByParametersData({
                    workMode: this.workMode,
                    toolType: this.toolType
                },
                "item")
            },
            sender: t,
            saving: !1
        })
    },
    t.s_binaryOptionAdded = function(e) {
        this._symbolName === e.symbolName && this.assembleToolTypesPackage()
    },
    t.s_binaryOptionChanged = function(t) {
        var i = this.hasAnyPosition(),
        s = this._binaryOption,
        n = s ? s.getID() : null,
        o = this._symbol,
        a = o.getSymbolName(),
        r = parseInt(t.id),
        l = e.OptionsSettings.byID(r),
        h = JSON.parse(t.optionParams),
        d = h.length,
        c = t.symbolName;
        if (a === c) {
            var u = this.workMode,
            g = e.tradePanelConst.workMode;
            if (u === g.market || u === g.pending) return void this.assembleToolTypesPackage();
            var p = this.package.binary,
            m = p.periodControl;
            if (r === n) if (l.canUse()) {
                if (i) return this.setBinaryPeriods(l),
                !0;
                for (var _ = m.getSelectedData(), y = _.period, S = 0, f = 0; f < d; ++f) if (y === 1e3 * parseInt(h[f].period)) {
                    S = f;
                    break
                }
                this.setBinaryPeriods(l),
                m.setSelectedOption(S),
                m.ChangedValue.fire({
                    event: null,
                    sender: m
                }),
                this.setBinaryOptionData(l),
                this.assembleToolTypesPackage()
            } else {
                this.assembleToolTypesPackage();
                var v, C, b = this.package.toolType.ourControl,
                T = this.__determineAvailableToolTypes__(),
                P = T.binary && T.binary.length > 0;
                if (P) {
                    if (i) return ! 0;
                    v = T.binary[0],
                    C = b.getItemByParametersData({
                        workMode: g.binary,
                        toolType: v
                    },
                    "full"),
                    b.setSelectedOption(C.index),
                    b.ChangedValue.fire({
                        event: {
                            Item: C.item
                        },
                        sender: b
                    })
                } else {
                    if (this.binaryMode) return ! 1;
                    v = T.market[0],
                    C = b.getItemByParametersData({
                        workMode: g.market,
                        toolType: v
                    },
                    "full"),
                    b.setSelectedOption(C.index),
                    b.ChangedValue.fire({
                        event: {
                            Item: C.item
                        },
                        sender: b
                    })
                }
            } else a === c && this.assembleToolTypesPackage()
        }
    },
    t.changeBinaryOption = function(t) {
        function i(e) {
            return e && e.canUse()
        }
        function s(e) {
            if (!i(e)) return ! 1;
            var t = {
                workMode: a,
                toolType: null
            };
            return g = e.getType(),
            n.setGroupNameByGroupItem(T.getItemByParametersData(t, "item")),
            t.toolType = g,
            T.setSelectedOption(T.getItemByParametersData(t, "index")),
            n.setBinaryOptionData(e),
            _.setTPMOptionSettingsId(e.getID()),
            _.setTPMOptionSettingsType(g),
            n.toolType = g,
            !0
        }
        var n = this,
        o = e.OptionsSettings,
        a = n.workMode,
        r = e.tradePanelConst,
        l = r.workMode,
        h = r.toolType;
        if (n.hasBinaryPosition() || a === l.market || a === l.pending) {
            if (n.assembleToolTypesPackage(), this.binaryMode) {
                var d = this.__determineAvailableToolTypes__(),
                c = d.binary;
                if (0 !== c.length) return ! 0
            }
            return ! 1
        }
        var u, g, p, m = !1,
        _ = n.chart,
        y = n._symbol,
        S = y.getSymbolName(),
        f = n._binaryOption,
        v = parseInt(t.id),
        C = null,
        b = null;
        if (f && (C = f.getID(), b = f.getType()), v === C || null === C) {
            var T = n.package.toolType.ourControl;
            if (u = o.getFirstByTypeAndSymbolName(b, S), m = s(u), m === !1 && (u = o.getFirstByTypeAndSymbolName(o.getSelectedOptionType(), S), m = s(u)), m === !1) {
                var P = o.getOptionsSettings();
                for (var D in P) {
                    var I = P[D];
                    if (I.getSymbolName() === S && I.canUse()) {
                        u = I;
                        break
                    }
                }
                m = s(u)
            }
            if (m === !1) {
                if (p = n.__determineAvailableToolTypes__(), n.binaryMode) return n.saveSettings(),
                !1;
                n.assembleToolTypesPackage();
                var w = null !== p.market && null !== p.pending;
                if (w !== !0) return ! 1;
                var M = {
                    symbol: this._symbol,
                    binaryOption: null,
                    workMode: l.market,
                    toolType: h[l.market].buySell
                };
                n.changeData(M)
            } else {
                var M = {
                    workMode: a,
                    toolType: u._type,
                    symbol: this._symbol,
                    binaryOption: u
                };
                n.changeData(M)
            }
        } else n.assembleToolTypesPackage();
        return n.saveSettings(),
        !0
    },
    t.s_binaryOptionDeleted = function(e) {
        this.changeBinaryOption(e)
    },
    t.hasAnyPosition = function() {
        return this.hasOrderPosition() || this.hasBinaryPosition()
    },
    t.hasOrderPosition = function() {
        var t = this._position,
        i = e.valueIsEmpty;
        return !! t && (!i(t.positionType) || !i(t.pendingOrderType))
    },
    t.isPendingOrderPosition = function() {
        var t = this._position,
        i = e.valueIsEmpty;
        return !! t && !i(t.pendingOrderType)
    },
    t.hasBinaryPosition = function() {
        var t = this._position;
        return !! t && !e.valueIsEmpty(t.optionType)
    },
    t.refreshMarketButtons = function() {
        var t = e.getTerminal(),
        i = e.UtipFunctions,
        s = e.tradeFunctions.maxVolumeOnType.bind(e.tradeFunctions),
        n = this.package.market,
        o = n.buttonControls,
        a = n.stopOrderControls,
        r = !0,
        l = !0,
        h = parseFloat(n.volumeControl.getValue()) || 0,
        d = parseFloat(a.takeProfit.getValue()) || 0,
        c = a.takeProfit.useStopsNode(),
        u = parseFloat(a.stopLoss.getValue()) || 0,
        g = a.stopLoss.useStopsNode(),
        p = this._symbol,
        m = p.getDigits(),
        _ = p.getStopLevel() / Math.pow(10, m),
        y = 0 === h || !i.isAllowTrade(i.setServerFormatDate(e.SymbolsData.getLastChangedTime()), p),
        S = !0,
        f = !0;
        if (t.platformType === e.PlatformTypes.ptUTIP) {
            var v = e._TraderData.positionType,
            C = e.TraderData,
            b = s(C, p, v.buy),
            T = s(C, p, v.sell);
            d > 21e3 || u > 21e3 || y ? (r = !1, l = !1) : (S = b >= h, f = T >= h)
        }
        if (!y) {
            var P = e.parseFloat,
            D = e.numberFormat,
            I = p.getBid(),
            w = p.getAsk(),
            M = !c || !d,
            O = !g || !u;
            d = P(d),
            u = P(u),
            r = S && (O || u < P(D(I - _, m, "."))) && (M || d > P(D(I + _, m, ","))),
            l = f && (O || u > P(D(w + _, m, "."))) && (M || d < P(D(w - _, m, ".")))
        }
        o.buy.setEnabled(r),
        o.sell.setEnabled(l)
    },
    t.refreshMarketPriceView = function() {
        var t = e.numberFormat,
        i = this.package.market,
        s = i.nodes,
        n = this._symbol,
        o = n.getDigits(),
        a = n.getBid(),
        r = n.getAsk();
        s.bid.innerText = t(a, o, ".", ""),
        s.ask.innerText = t(r, o, ".", "")
    },
    t.refreshPendingButton = function() {
        var t, i, s, n, o, a = e.UtipFunctions,
        r = e.parseFloat,
        l = this.package.pending,
        h = l.stopOrderControls,
        d = this._symbol,
        c = d.getDigits(),
        u = r(l.priceControl.getValue()) || 0,
        g = r(l.volumeControl.getValue()) || 0,
        p = d.getStopLevel() / Math.pow(10, c),
        m = 0 === u || isNaN(u) || 0 === g || isNaN(g) || !a.isAllowTrade(a.setServerFormatDate(e.SymbolsData.getLastChangedTime()), d),
        _ = parseFloat(h.takeProfit.getValue()) || 0,
        y = h.takeProfit.useStopsNode(),
        S = parseFloat(h.stopLoss.getValue()) || 0,
        f = h.stopLoss.useStopsNode(),
        v = e.tradePanelConst,
        C = v.toolType,
        b = this.workMode,
        T = this.toolType,
        P = C[b];
        if (m) t = !1;
        else {
            switch (T) {
            case P.buyLimit:
            case P.buyStop:
                i = T === P.buyLimit ? 1 : -1,
                s = u * i < d.getAsk() * i - p,
                n = p + S < u,
                o = _ - p > u;
                break;
            case P.sellLimit:
            case P.sellStop:
                i = T === P.sellStop ? 1 : -1,
                s = u * i < d.getBid() * i - p,
                n = S - p > u,
                o = _ + p < u;
                break;
            default:
                m = !0
            }
            var D = !y || !_ || o && _ >= 0,
            I = !f || !S || n && S >= 0;
            t = s && D && I
        }
        l.buttonControls.place.setEnabled(t)
    },
    t.refreshStopOrderApplyButton = function(t) {
        try {
            if (!this._position) return;
            var i = e.tradePanelConst,
            s = i.toolType[i.workMode.pending],
            n = e.parseFloat,
            o = e.UtipFunctions,
            a = t.stopOrderControls,
            r = !1,
            l = a.takeProfit.usedStopOrderButtons(),
            h = a.stopLoss.usedStopOrderButtons(),
            d = this._position,
            c = e.SymbolsData.getSymbols()[d.symbolName],
            u = c.getDigits();
            if (!l && !h) return;
            var g = this.hasOrderPosition();
            if (g === !0) {
                var p = d.positionType === e._TraderData.positionType.buy || d.pendingOrderType === s.buyLimit || d.pendingOrderType === s.buyStop,
                m = p === !0 ? c.getBid() : c.getAsk(),
                _ = p === !0 ? 1 : -1,
                y = parseInt(c.getStopLevel()),
                S = a.takeProfit.getValue() || 0,
                f = a.stopLoss.getValue() || 0;
                if (parseFloat(S || 0) === parseFloat(d.takeProfit) && parseFloat(f || 0) === parseFloat(d.stopLoss)) r = !0;
                else if (this.isPendingOrderPosition()) {
                    y /= c.getPrecision();
                    var v, C, b, T = e.requestPendingOrderType,
                    P = parseInt(d.pendingOrderType),
                    D = c.getAsk(),
                    I = c.getBid(),
                    w = parseFloat(t.priceControl.getValue());
                    switch (P) {
                    case T.BuyLimit:
                    case T.BuyStop:
                        _ = P === T.BuyLimit ? 1 : -1,
                        C = f + y < w,
                        b = S - y > w,
                        v = D;
                        break;
                    case T.SellLimit:
                    case T.SellStop:
                        _ = P === T.SellStop ? 1 : -1,
                        C = f - y > w,
                        b = S + y < w,
                        v = I;
                        break;
                    default:
                        r = !0
                    }
                    var M = w * _ < v * _ - y;
                    r = !(M && (!S || b) && (!f || C) && o.isAllowTrade(o.setServerFormatDate(e.SymbolsData.getLastChangedTime()), c) && o.canClosePendingOrder(d, m, y / c.getPrecision()))
                } else {
                    var O, L, k;
                    l && (O = parseInt(Math.round(Math.abs(S - m) * Math.pow(10, u))), k = n(S) > m ? _: -_, O *= k),
                    h && (L = parseInt(Math.round(Math.abs(f - m) * Math.pow(10, u))), k = n(f) > m ? -_: _, L *= k),
                    r = S > 0 && O < y || f > 0 && L < y || n(S) < 0 || n(f) < 0 || null !== o.canClosePosition(d.takeProfit || 0, d.stopLoss || 0, m, y / c.getPrecision())
                }
            } else r = !1;
            var B = r === !0 ? "addCSSClass": "removeCSSClass";
            a.updateStopOrders[B]("Disabled")
        } catch(e) {
            console.error("trade panel: error while updating the button for changing stop-orders. " + e.message)
        }
    },
    t.refreshBinaryButtons = function() {
        var e = this.package.binary,
        t = e.buttonControls,
        i = this.canOpenBinaryPosition();
        t.high.setEnabled(i),
        t.low.setEnabled(i)
    },
    t.calculateBinaryTimeAndCommission = function(t) {
        var i = this.package.binary,
        s = e.numberFormat,
        n = i.nodes,
        o = e.UtipFunctions.canCloseOptionPosition(t),
        a = n.closeButton;
        i.buttonControls.close.setEnabled(o);
        var r = a.querySelector(".Content .WTStopLineTime"),
        l = a.querySelector(".Content .WTCommission");
        if (o === !0) {
            var h = parseInt(t.expiryDate),
            d = parseInt(t.stopLine),
            c = 6e4,
            u = 36e5,
            g = 864e5,
            p = h - 1e3 * d - e.SymbolsData.getLastChangedTime();
            p = p < c ? e.UtipFunctions.getUTCDate(p).toLocaleFormat("%Ss") : p < u ? e.UtipFunctions.getUTCDate(p).toLocaleFormat("%Mm") : p < g ? e.UtipFunctions.getUTCDate(p).toLocaleFormat("%Hh") : Math.floor(e.UtipFunctions.getUTCDate(p) / 864e5) + "d",
            r.innerHTML = p,
            l.innerText = "$" + s(parseInt(t.investmentSum) / 100 * parseInt(t.earlyClosing), 2, "."),
            a.classList.remove("Blocked")
        } else r.innerHTML = "",
        l.innerText = "",
        a.classList.add("Blocked")
    },
    t.calculateBinaryBorders = function() {
        var t = this.package,
        i = t.binary,
        s = i.nodes.borders,
        n = s.top,
        o = s.bottom,
        a = e.numberFormat,
        r = this._binaryOption,
        l = e.parseFloat(r.getPrice()),
        h = i.periodControl.getSelectedData(),
        d = h.paramID,
        c = r.getParamsByID(d),
        u = parseInt(c.interval),
        g = this._symbol,
        p = g.getPrecision(),
        m = g.getDigits();
        n.innerHTML = a(l + u / p, m, "."),
        o.innerHTML = a(l - u / p, m, ".")
    },
    t.canOpenBinaryPosition = function() {
        var t = this.package.binary,
        i = e.UtipFunctions,
        s = e.TraderData.getTraderGroup(),
        n = !1,
        o = e.SymbolsData.getLastChangedTime(),
        a = i.isAllowTrade(i.setServerFormatDate(o), this._symbol),
        r = t.sumControl.getValue(),
        l = "" === r;
        if (r = parseInt(r), l || (n = r >= s.minOptionSum && r <= s.maxOptionSum), !e.UtipFunctions.binaryEquityEnough(r) || l || !n || !a) return ! 1;
        var h = t.periodControl.getSelectedData();
        if (t.periodControl.hasOptions()) {
            var d = h.period;
            if (!this.checkAvailabilityPeriodForThePurchase(o + d)) return ! 1
        }
        return ! 0
    },
    t.isWorkMode = function(t) {
        var i = e.tradePanelConst,
        s = i.workMode,
        n = i.toolType,
        o = n[s.market],
        a = n[s.pending],
        r = n[s.binary];
        return o.hasOwnProperty(t) ? s.market: a.hasOwnProperty(t) ? s.pending: r.hasOwnProperty(t) ? s.binary: null
    },
    t.__determineAvailableToolTypes__ = function() {
        var t = this._symbol;
        return e.UtipFunctions.availableToolTypesBySymbol(t)
    },
    t.restoreBaseState = function(t) {
        function i() {
            o.switchView(a, r),
            a === h.market ? (n = o.package.market, o.switchMarketButtons(l.positionMode.hasNot)) : (n = o.package.pending, o.switchPendingButtons(l.positionMode.hasNot), o.refreshPendingViewClassName(r));
            var e = n.volumeControl,
            t = n.stopOrderControls,
            i = t.takeProfit,
            s = t.stopLoss;
            null != e.getOptions() && 0 !== e.getOptions().length || o._onVolumeInputSelectNumberDropDown(e),
            e.setSelectedOption(0),
            i.changeState(null),
            s.changeState(null),
            i.setValue(""),
            s.setValue(""),
            e.ChangedValue.fire({
                event: null,
                sender: e
            })
        }
        function s() {
            n = o.package.binary,
            o.switchView(a, r),
            o.switchBinaryButtonsByPositionMode(l.positionMode.hasNot),
            o.calculateBinaryBorders(),
            o.setBinaryBordersVisible(r === d[a].oneTouch || r === d[a].range),
            o.refreshBinaryViewClassName(r);
            var e = o.chart,
            t = -1,
            i = -1,
            s = o._binaryOption;
            e.clearBinaryPosition(),
            s && (t = s.getID(), i = r),
            e.setTPMOptionSettingsId(t),
            e.setTPMOptionSettingsType(i)
        }
        var n, o = this,
        a = this.workMode,
        r = this.toolType,
        l = e.tradePanelConst,
        h = l.workMode,
        d = l.toolType;
        this._position = null;
        var c = o.__determineAvailableToolTypes__(),
        u = c.binary;
        if (a === h.binary) if (0 === c.binary.length) this.workMode = a = 0,
        this.toolType = r = 0;
        else if (c.binary.indexOf(r) === -1) {
            this.toolType = r = c.binary[0];
            var g = e.OptionsSettings.getOptionsByTypeExceptForbidden(r, !0).filter(function(e) {
                return e._symbolName === o._symbolName
            })[0];
            null != g && this.setBinaryOptionData(g)
        }
        switch (a === h.pending && (0 === c.pending.length ? (this.workMode = a = 0, this.toolType = r = 0) : c.pending.indexOf(r) === -1 && (this.toolType = r = c.pending[0])), a === h.market && 0 === c.market.length && console.log("there is no available tool type for trade panel"), a) {
        case h.market:
        case h.pending:
            if (t === !0 && o.binaryMode) {
                var p = this.changeBinaryOption({});
                if (p === !1) return void e.Charts2.closeGraphicWindowsBySymbolName(this._symbolName);
                if (p === !0) {
                    var m = e.OptionsSettings.getOptionSettingsByOptionTypeAndSymbolName(u[0], this._symbolName),
                    _ = {
                        workMode: h.binary,
                        toolType: u[0],
                        symbol: this._symbol,
                        binaryOption: m
                    };
                    this.changeData(_)
                }
                break
            }
            i();
            break;
        case h.binary:
            if (t === !0) {
                if (o.forexMode) {
                    var y = h.market,
                    S = {
                        workMode: y,
                        toolType: d[y].buySell,
                        symbol: this._symbol,
                        binaryOption: null
                    };
                    this.changeData(S);
                    break
                }
                if (o.binaryMode) {
                    if (0 === u.length) return void e.Charts2.closeGraphicWindowsBySymbolName(this._symbolName);
                    if (u.indexOf(r) === -1) {
                        var f = e.OptionsSettings.getOptionSettingsByOptionTypeAndSymbolName(u[0], this._symbolName),
                        v = {
                            workMode: a,
                            toolType: u[0],
                            symbol: this._symbol,
                            binaryOption: f
                        };
                        this.changeData(v)
                    }
                }
            }
            s()
        }
        o.block(!1),
        o.saveSettings()
    },
    t.loadPosition = function(t, i) {
        var s = !1;
        if (t || (s = !0), s || this.correctlyPosition(t) && !this.equalPosition(t) || (s = !0), s) return void this.block(!1);
        this.subscribe();
        var n, o, a, r, l = this.workMode,
        h = this.toolType,
        d = e.tradePanelConst,
        c = d.workMode,
        u = d.toolType,
        g = this.chart,
        p = e.UtipFunctions,
        m = e.numberFormat,
        _ = this._symbol,
        y = _.getDigits(),
        S = _.getFormattedPrecision();
        switch (this._position = t, i !== !0 && (this.hasOrderPosition() ? this.isPendingOrderPosition() ? (l = c.pending, h = u[l][parseInt(t.pendingOrderType)]) : (l = c.market, h = u[l][0]) : (l = c.binary, h = u[l][parseInt(t.optionType)]), _ = e.SymbolsData.getSymbols()[t.symbolName], y = _.getDigits(), this._symbol = _, this._symbolName = t.symbolName, this.switchView(l, h, !1)), l) {
        case c.market:
        case c.pending:
            l === c.market ? (n = this.package.market, this.switchMarketButtons(d.positionMode.has)) : (n = this.package.pending, this.switchPendingButtons(d.positionMode.has), this.refreshPendingViewClassName(h), n.priceControl.setValue(m(t.openPrice, y, ".", "")));
            var f = m(t.volume, p.getDecimals(_.getSymbolGroupName()), ".");
            o = n.volumeControl,
            a = o.getOptions(),
            a = p.pasteNumberValueBetweenValues(a, f),
            r = n.stopOrderControls,
            o.setOptions(a),
            o.setValue(f);
            var v = r.takeProfit,
            C = r.stopLoss;
            v.changeState(null),
            v.setStep(S),
            v.setDecimals(y),
            v.setValue(parseFloat(t.takeProfit) || ""),
            C.changeState(null),
            C.setStep(S),
            C.setDecimals(y),
            C.setValue(parseFloat(t.stopLoss) || ""),
            o.ChangedValue.fire({
                event: null,
                sender: o
            }),
            this.refreshOrderControlsSize(this.viewVisualState),
            g.setTPMOptionSettingsId( - 1),
            g.setTPMOptionSettingsType( - 1);
            break;
        case c.binary:
            var b = t.settingName,
            T = t.optionType,
            P = e.OptionsSettings.getOptionSettingsByNameAndType(b, T);
            if (!P) return;
            n = this.package.binary,
            this.switchBinaryButtonsByPositionMode(d.positionMode.has),
            this.setBinaryOptionData(P),
            this.setBinaryBordersVisible(!1);
            var D = parseInt(t.expiryDate) - parseInt(t.openDate),
            I = P.getParamsByPeriod(D / 1e3),
            w = {
                period: D,
                paramID: I.id
            },
            M = n.periodControl.indexOfData(w);
            M = M === -1 ? 0 : M,
            n.sumControl.setValue(t.investmentSum),
            n.periodControl.setSelectedOption(M),
            this.refreshBinaryPayout(),
            this.calculateBinaryTimeAndCommission(t),
            this.refreshBinaryViewClassName(h),
            g.setTPMOptionSettingsId(P.getID()),
            g.setTPMOptionSettingsType(P.getType()),
            g.optionPosition = t
        }
        var O = this.package.toolType.ourControl,
        L = O.getItemByParametersData({
            workMode: l,
            toolType: h
        },
        "index");
        O.setSelectedOption(L),
        this.setGroupNameByGroupItem(O.getItemByParametersData({
            workMode: l,
            toolType: null
        },
        "item")),
        this.ready = !0,
        this.s_getQuote(_),
        this.block(!0),
        this.saveSettings();
        var k = g.getGraphicArea(),
        B = k.getGraphicWindows();
        e.updateSizeTradePanels(B, this.showed)
    },
    t.correctlyPosition = function(t) {
        return t.positionType ? !!e.TraderData.getPositionById(t.id) : t.pendingOrderType ? !!e.TraderData.getPendingOrderByID(t.id) : !e.valueIsEmpty(t.optionType) && !!e.TraderData.getOptionPositionById(t.id)
    },
    t.equalPosition = function(t) {
        if (this.hasAnyPosition()) return e.equalsObjects(t, this._position)
    },
    t.requestIsSent = function() {
        return !! this.requestData.requestToOpenPositionIsSent
    },
    t.getPosition = function() {
        return this._position
    },
    t.openMarketPosition = function(t) {
        this.block(!0);
        var i = this._symbol,
        s = this.package.market,
        n = e.getTerminal(),
        o = e.PlatformTypes,
        a = e.TraderData.getTraderInfo(),
        r = this.getStopOrderValues(s, t),
        l = {
            symbolName: i.getSymbolName(),
            traderID: a.id,
            operationType: e.requestPositionType[t],
            volume: e.parseFloat(s.volumeControl.getValue()),
            price: t == e._TraderData.positionType.buy ? i.getAsk() : i.getBid(),
            takeProfit: r.takeProfit,
            stopLoss: r.stopLoss,
            takeProfitByPips: r.takeProfitByPips || 0,
            stopLossByPips: r.stopLossByPips || 0
        };
        switch (n.platformType) {
        case o.ptUTIP:
            e.requester.openPosition(l);
            break;
        case o.ptMT:
            l.operationType = e.TraderData.convertOrderTypeToMTFormat(l.operationType),
            e.requester.openMTPosition(l)
        }
        this.requestData.requestToOpenPositionIsSent = !0,
        this.requestData.type = this.workMode
    },
    t.openPendingPosition = function(t, i) {
        this.block(!0);
        var s = this._symbol,
        n = this.package.pending,
        o = e.getTerminal(),
        a = e.PlatformTypes,
        r = e.TraderData.getTraderInfo(),
        l = this.getStopOrderValues(n, t),
        h = {
            symbolName: s.getSymbolName(),
            traderID: r.id,
            operationType: e.requestPositionType[t],
            orderType: i,
            volume: e.parseFloat(n.volumeControl.getValue()),
            price: e.parseFloat(n.priceControl.getValue()),
            takeProfit: l.takeProfit,
            stopLoss: l.stopLoss
        };
        switch (o.platformType) {
        case a.ptUTIP:
            e.requester.openPendingOrder(h);
            break;
        case a.ptMT:
            h.operationType = e.TraderData.convertOrderTypeToMTFormat(i),
            e.requester.openMTPendingOrder(h)
        }
        this.requestData.requestToOpenPositionIsSent = !0,
        this.requestData.type = this.workMode
    },
    t.openBinaryPosition = function(t) {
        this.block(!0),
        e.requester.openOptionPosition(t),
        this.requestData.requestToOpenPositionIsSent = !0,
        this.requestData.type = this.workMode
    },
    t.changeMarketOrderPosition = function(t) {
        var i = e.getTerminal();
        switch (i.platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.changePosition(t);
            break;
        case e.PlatformTypes.ptMT:
            e.requester.changeMTPosition(t)
        }
    },
    t.changePendingOrderPosition = function(t) {
        var i = e.getTerminal();
        switch (i.platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.changePendingOrder(t);
            break;
        case e.PlatformTypes.ptMT:
            t.operationType = e.TraderData.convertOrderTypeToMTFormat(t.orderType),
            e.requester.changeMTPendingOrder(t)
        }
    },
    t.closeMarketOrderPosition = function() {
        var t = e.TraderData.getTraderInfo(),
        i = e.getTerminal(),
        s = i.platformType,
        n = e.PlatformTypes,
        o = this._position,
        a = this.package.market,
        r = e.SymbolsData.getSymbols()[o.symbolName],
        l = e.parseFloat(a.volumeControl.getValue());
        if (!this.validVolume(o, l)) return void e.showErrorDialog(e.LangManager.getStringByKey("cSMSInvalidVolume") || "Invalid volume");
        var h = {
            ID: o.id,
            symbolName: o.symbolName,
            traderID: t.id,
            operationType: e.requestPositionType[o.positionType],
            volume: l,
            price: "Sell" == o.positionType ? r.getAsk() : r.getBid(),
            takeProfit: o.takeProfit,
            stopLoss: o.stopLoss
        };
        s === n.ptUTIP ? e.requester.closePosition(h) : s === n.ptMT && (h.operationType = e.TraderData.convertOrderTypeToMTFormat(h.operationType), e.requester.closeMTPosition(h))
    },
    t.closePendingOrderPosition = function() {
        var t = e.TraderData.getTraderInfo(),
        i = e.getTerminal(),
        s = i.platformType,
        n = e.PlatformTypes,
        o = this._position,
        a = this.package.pending,
        r = e.SymbolsData.getSymbols()[o.symbolName],
        l = e.parseFloat(a.volumeControl.getValue());
        if (!this.validVolume(o, l)) return void e.showErrorDialog(e.LangManager.getStringByKey("cSMSInvalidVolume") || "Invalid volume");
        var h = {
            ID: o.id,
            traderID: t.id
        };
        if (s === n.ptUTIP) e.requester.deletePendingOrder(h);
        else if (s === n.ptMT) {
            var d = e.requestPendingOrderType;
            switch (parseInt(o.pendingOrderType)) {
            case d.BuyLimit:
            case d.BuyStop:
                h.closePrice = r.getAsk();
                break;
            case d.SellLimit:
            case d.SellStop:
                h.closePrice = r.getBid()
            }
            e.requester.deleteMTPendingOrder(h)
        }
    },
    t.closeBinaryPosition = function() {
        var t = e.TraderData.getTraderInfo(),
        i = this._position,
        s = {
            ID: i.id,
            traderID: t.id
        };
        e.requester.closeOptionPosition(s)
    },
    t.changeData = function(t) {
        function i(t, i, o) {
            try {
                var a = e.tradePanelConst.workMode,
                r = o.position || {};
                s.ready = !0,
                s.workMode = t,
                s.toolType = i,
                s.restoreBaseState(),
                s.subscribe(),
                s.block(!1),
                s.setChart(o.chart),
                s.assembleToolTypesPackage();
                var l = !n(r.positionType) && s.workMode == a.market,
                h = !n(r.pendingOrderType) && s.workMode != a.pending,
                d = !n(r.optionType) && s.workMode == a.binary;
                l || h || d || s.switchView(s.workMode, i, !1),
                s.extractDataFromLocalStorage(s.workMode, i),
                s.s_a_loadPositionThroughTableTrade(o.position),
                s.saveSettings(),
                s.ready = !0
            } catch(e) {
                s.stopServiceability("trade panel: error while updating state panel. " + e.message, !0)
            }
        }
        var s = this,
        n = e.valueIsEmpty,
        o = t.symbol;
        s._symbol = o,
        s._symbolName = o.getSymbolName(),
        this.setBinaryOptionData(t.binaryOption);
        var a = t.workMode,
        r = t.toolType;
        try {
            var l = e.tradePanelConst,
            h = l.workMode;
            if (!t.position && (n(a) || n(r) || a === h.binary && this.forexMode || (a === h.market || a === h.pending) && this.binaryMode)) throw {
                function: s.changeData,
                parameters: t,
                context: s,
                message: "trade panel: incorrect parameters. attempt to restore efficiency."
            };
            i(a, r, t)
        } catch(e) {
            s.changeDataCatch(e, i)
        }
    },
    t.changeDataCatch = function(t, i) {
        console.error(t.message);
        var s = t.parameters,
        n = s.workMode,
        o = s.toolType,
        a = e.valueIsEmpty;
        if (a(n) && a(o)) return this.stopServiceability("trade panel: empty parameters."),
        void e.Charts2.closeGraphicWindowsBySymbolName(this._symbolName);
        var r = this.__determineAvailableToolTypes__(),
        l = null !== r.market && r.market.length > 0 && null !== r.pending && r.pending.length > 0,
        h = null !== r.binary && r.binary.length > 0,
        d = e.tradePanelConst,
        c = d.workMode,
        u = d.toolType,
        g = null,
        p = null,
        m = null;
        if (a(o)) {
            switch (h && !s.binaryOption && (s.binaryOption = e.OptionsSettings.getOptionSettingsByOptionTypeAndSymbolName(r.binary[0], this._symbolName), this.setBinaryOptionData(s.binaryOption)), n) {
            case c.market:
                if (l === !0) {
                    m = u[n][r.market[0]];
                    break
                }
                if (h === !0) {
                    m = u[n][r.binary[0]];
                    break
                }
                g = "trade panel: types for this symbol is not available.";
                break;
            case c.pending:
                if (l === !0) {
                    m = u[n][r.pending[0]];
                    break
                }
                if (h === !0) {
                    m = u[n][r.binary[0]];
                    break
                }
                g = "trade panel: types for this symbol is not available.";
                break;
            case c.binary:
                if (h === !0) {
                    m = u[n][r.binary[0]];
                    break
                }
                if (l === !0) {
                    m = u[n][r.market[0]];
                    break
                }
                g = "trade panel: types for this symbol is not available.";
                break;
            default:
                g = "trade panel: empty parameter."
            }
            null !== g ? (this.stopServiceability(g), e.Charts2.closeGraphicWindowsBySymbolName(this._symbolName)) : i(n, m, s)
        } else {
            if (n = this.isWorkMode(o), p = n, m = o, null !== n) {
                var _ = l && (n === c.market || n === c.pending),
                y = h && n === c.binary,
                S = null;
                h && !s.binaryOption && (S = s.binaryOption = e.OptionsSettings.getOptionSettingsByOptionTypeAndSymbolName(r.binary[0], this._symbolName), this.setBinaryOptionData(S)),
                _ || y ? g = null: !h || n !== c.market && n !== c.pending ? l && n === c.binary ? (p = c.market, m = u[c.market][r.market[0]]) : g = "trade panel: types for this symbol is not available.": (p = c.binary, m = u[c.binary][r.binary[0]])
            } else g = "trade panel: empty parameter.";
            null !== g ? (this.stopServiceability(g), e.Charts2.closeGraphicWindowsBySymbolName(this._symbolName)) : i(p, m, s)
        }
    },
    t.validVolume = function(t, i) {
        return e.UtipFunctions.isVolumeValid(i, e.TraderData.getPositionStep()) && i <= e.parseFloat(t.volume) && i >= 0
    },
    t.refreshPendingPrice = function() {
        if (!this._position) {
            var t = e.tradePanelConst.toolType[this.workMode],
            i = this._symbol,
            s = this.toolType,
            n = s == t.buyLimit || s == t.buyStop,
            o = 1 / i.getPrecision(),
            a = i.getStopLevel(),
            r = parseInt(a) > 0 ? parseInt(a) : 1,
            l = i.getGPipsCount() * (r * o),
            h = s == t.buyLimit || s == t.sellStop ? -1 : 1,
            d = n === !0 ? i.getAsk() : i.getBid(),
            c = d + l * h;
            c < 0 && (c = c / c - 1),
            this.package.pending.priceControl.setValue(e.numberFormat(c, i.getDigits(), ".", ""))
        }
    },
    t.refreshBinaryPayout = function() {
        if (this._binaryOption) {
            var t = this.package.binary,
            i = t.nodes,
            s = i.percentProfit,
            n = i.currentProfit,
            o = t.periodControl.getSelectedData(),
            a = this._binaryOption.getProfitPercentageByPeriod(o.period),
            r = t.sumControl.getValue();
            if (r) {
                r = parseInt(r) || 0;
                var l = r * a / 100,
                h = l > 0 || 0 == l;
                s.innerText = (h ? a: "0") + "%",
                n.innerText = (h ? "+": "-") + " $" + e.numberFormat(l, 2, ".", "")
            } else s.innerHTML = "0%",
            n.innerText = "$" + e.numberFormat(0, 2, ".", "")
        }
    },
    t.prepareBinaryOptionData = function() {
        var t = this.package.binary,
        i = this._binaryOption,
        s = t.periodControl,
        n = s.getSelectedData(),
        o = n.paramID,
        a = i.getParamsByID(o);
        return {
            settingName: i.getName(),
            optionType: i.getType(),
            openPrice: e.parseFloat(i.getPrice()),
            investmentSum: t.sumControl.getValue(),
            symbolName: i.getSymbolName(),
            stopLine: a.stopLine,
            payoutPercentage: a.payoutPercentage,
            earlyClosing: a.earlyClosing,
            interval: a.interval,
            period: a.period,
            optionParamId: o,
            optionSettingsId: i.getID().toString()
        }
    },
    t._render = function() {
        e.TradePanelModule.base._render.apply(this, arguments);
        var t = this.workMode,
        i = this.toolType,
        s = this._position,
        n = {
            workMode: t,
            toolType: i,
            symbol: this._symbol,
            binaryOption: this._binaryOption,
            position: s,
            chart: this.chart
        };
        if (this.attachToolTypeInputSelect(), this.attachMarketControls(), this.attachPendingControls(), this.attachBinaryControls(), this.changeData(n), this.ready !== !1) {
            var o = e.tradePanelConst,
            a = this.package.toolType.ourControl,
            r = o.workMode,
            l = s ? o.positionMode.has: o.positionMode.hasNot;
            t = this.workMode,
            i = this.toolType;
            var h = a.getItemByParametersData({
                workMode: t,
                toolType: i
            },
            "index");
            switch (t) {
            case r.pending:
                this.refreshPendingViewClassName(i),
                this.switchPendingButtons(l);
                break;
            case r.binary:
                var d = this._binaryOption,
                c = o.toolType[t];
                this.setBinaryPeriods(d),
                this.refreshBinarySums(),
                this.refreshBinaryViewClassName(i),
                this.switchBinaryButtonsByPositionMode(l),
                this.setBinaryBordersVisible(i === c.oneTouch || i === c.range);
                break;
            default:
            case r.market:
                this.switchMarketButtons(l)
            }
            a.setSelectedOption(h)
        }
    },
    t._onChangeLang = function(e) {
        this.changeLanguageOrderWorkMode(),
        this.changeLanguageBinaryWorkMode(),
        this.changeLanguageGroupView()
    },
    t.changeLanguageOrderWorkMode = function() {
        try {
            this.package.pending.priceControl.setCaptionText((e.LangManager.getStringByKey("cWCTTradePositionsFormOpenPrice") || "Price") + ":");
            var t;
            this.workMode === e.tradePanelConst.workMode.pending ? (this.refreshOrderControlsSize(this.viewVisualState), t = this.package.pending.stopOrderControls) : this.workMode === e.tradePanelConst.workMode.market && (t = this.package.market.stopOrderControls),
            this.workMode !== e.tradePanelConst.workMode.binary && (t.takeProfit.setCaptionText(e.LangManager.getStringByKey("cTOTP") || "TP"), t.stopLoss.setCaptionText(e.LangManager.getStringByKey("cTOSL") || "SL"))
        } catch(e) {
            console.error("trade panel: error while changing the language. type - orders. " + e.message)
        }
    },
    t.changeLanguageBinaryWorkMode = function() {
        try {
            this.package.binary.nodes.captionProfit.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ":"
        } catch(e) {
            console.error("trade panel: error while changing the language. type - binary. " + e.message)
        }
    },
    t.changeLanguageGroupView = function() {
        var t, i, s = e.tradePanelConst.workMode;
        switch (this.workMode) {
        case s.market:
            i = "cCSFMarket",
            t = "Market order";
            break;
        case s.pending:
            this.refreshOrderControlsSize(this.viewVisualState),
            i = "cTPPendingOrder",
            t = "Pending order";
            break;
        case s.binary:
            i = "cTPBinaryOption",
            t = "Binary option";
            break;
        default:
            return
        }
        this.package.toolType.parentView.querySelector(".Group").innerText = e.LangManager.getStringByKey(i) || t;
        var n = this.package.toolType.ourControl.getSelectedOption();
        n && n >= 0 && (this.package.toolType.ourControl.getOptionsMenu().getItems()[n]._onChangeLang(), this.package.toolType.ourControl.setSelectedOption(n))
    },
    t._onToolTypeInputSelectChangeActiveState = function(e) {
        var t = this.package.toolType.parentView;
        t.classList[e.property]("Active")
    },
    t._onToolTypeInputSelectChange = function(t) {
        var i = t.event.Item,
        s = t.saving,
        n = i.getData(),
        o = n.workMode,
        a = n.toolType;
        s = !!e.valueIsEmpty(s) || !!s;
        var r = e.tradePanelConst,
        l = r.workMode,
        h = r.toolType;
        switch (this.switchView(o, a, !0), o) {
        case l.market:
            this.switchMarketButtons(e.tradePanelConst.positionMode.hasNot),
            this.refreshOrderControlsSize(this.viewVisualState),
            this.restoreBaseState();
            break;
        case l.pending:
            this.switchPendingButtons(e.tradePanelConst.positionMode.hasNot),
            this.refreshPendingPrice(),
            this.refreshPendingViewClassName(a),
            this.refreshOrderControlsSize(this.viewVisualState),
            this.restoreBaseState();
            break;
        case l.binary:
            switch (this.switchBinaryButtonsByPositionMode(e.tradePanelConst.positionMode.hasNot), this.setBinaryOptionData(n.custom), a) {
            case h[o].express:
            case h[o].classic:
                this.setBinaryBordersVisible(!1);
                break;
            case h[o].oneTouch:
            case h[o].range:
                this.setBinaryBordersVisible(!0),
                this.calculateBinaryBorders()
            }
            this.refreshBinaryViewClassName(a),
            this.refreshBinaryPayout(),
            this.refreshBinaryButtons(),
            this.refreshBinaryControlsSize(this.viewVisualState),
            this.extractDataFromLocalStorage(o, a)
        }
        var d = this.chart,
        c = d.getGraphicArea(),
        u = c.getGraphicWindows();
        e.updateSizeTradePanels(u, this.showed),
        this.saveSettings();
        var g = e.getTerminal();
        g.saveSettings(s)
    },
    t.setGroupNameByGroupItem = function(t) {
        try {
            if (!t) return;
            var i = this._fullView.querySelector(".Type .Group"),
            s = e.LangManager.getStringByKey(t.getKey()) || t.getText();
            i.innerHTML = s
        } catch(e) {
            console.log(e.message)
        }
    },
    t.refreshPendingViewClassName = function(t) {
        for (var i = e.tradePanelConst.toolType,
        s = this._pendingView,
        n = ["BuyLimit", "BuyStop", "SellLimit", "SellStop"], o = n.length, a = "", r = 0; r < o; ++r) s.classList.remove(n[r]);
        switch (t) {
        case i[this.workMode].buyLimit:
            a = "BuyLimit";
            break;
        case i[this.workMode].buyStop:
            a = "BuyStop";
            break;
        case i[this.workMode].sellLimit:
            a = "SellLimit";
            break;
        case i[this.workMode].sellStop:
            a = "SellStop"
        }
        s.classList.add(a)
    },
    t.refreshBinaryViewClassName = function(t) {
        for (var i = e.tradePanelConst.toolType,
        s = this._binaryView,
        n = ["Express", "Classic", "OneTouch", "Range"], o = n.length, a = "", r = 0; r < o; ++r) s.classList.remove(n[r]);
        switch (t) {
        case i[this.workMode].express:
            a = "Express";
            break;
        case i[this.workMode].classic:
            a = "Classic";
            break;
        case i[this.workMode].oneTouch:
            a = "OneTouch";
            break;
        case i[this.workMode].range:
            a = "Range"
        }
        s.classList.add(a)
    },
    t._onVolumeInputSelectNumberDropDown = function(t) {
        var i, s = e.UtipFunctions,
        n = e.tradePanelConst.workMode,
        o = this.workMode,
        a = this._symbol,
        r = this._position;
        switch (o) {
        case n.pending:
            i = s.getVolumesList(a, 5);
            break;
        default:
            i = s.getVolumesList(a, r ? r.volume: null)
        }
        if (r && this.workMode == e.tradePanelConst.workMode.market) {
            var l = e.numberFormat(this.getPositionVolume(a, r), 2, ".", "");
            s.pasteNumberValueBetweenValues(i, l, !0)
        }
        t.setOptions(i || []),
        t.setDecimals(s.getDecimalCount(a))
    },
    t._onVolumeInputSelectNumberChange = function(t) {
        var i, s, n = {},
        o = this._position,
        a = e.tradePanelConst.workMode,
        r = this.workMode === a.market;
        if (o) {
            if (r) {
                i = this.package.market;
                var l = e.parseFloat,
                h = this._symbol,
                d = "Sell" == o.positionType,
                c = h.getPrecision(),
                u = d ? h.getAsk() : h.getBid(),
                g = l(h.getStopLevel()) / c,
                p = i.buttonControls.close,
                m = this.getPositionVolume(this._symbol, o),
                _ = l(i.volumeControl.getValue()),
                y = "";
                y = m <= _ ? e.LangManager.getStringByKey("cWCTTradePositionsFormClose") || "Close": e.LangManager.getStringByKey("cClPFNotAllClose") || "Partially";
                var S = !e.UtipFunctions.canClosePosition(l(o.takeProfit), l(o.stopLoss), u, g);
                p.setText(y),
                p.setEnabled( !! _ && S)
            }
        } else r ? (this.refreshMarketButtons(), i = this.package.market) : (this.refreshPendingButton(), i = this.package.pending, n.price = i.priceControl.getValue()),
        s = i.stopOrderControls,
        n.volume = i.volumeControl.getValue(),
        n.takeProfit = s.takeProfit.getValue(),
        n.stopLoss = s.stopLoss.getValue(),
        this.saveDataToLocalStorage(n, this.workMode, this.toolType);
        this.saveSettings()
    },
    t._onBuyButtonClick = function(t) {
        this.openMarketPosition(e._TraderData.positionType.buy)
    },
    t._onSellButtonClick = function(t) {
        this.openMarketPosition(e._TraderData.positionType.sell)
    },
    t._onPlaceButtonClick = function(t) {
        var i, s, n = e._TraderData.positionType,
        o = e.requestPendingOrderType,
        a = this.package.toolType.ourControl.getSelectedData(),
        r = a.toolType;
        switch (r) {
        case o.BuyLimit:
            i = n.buy,
            s = o.BuyLimit;
            break;
        case o.BuyStop:
            i = n.buy,
            s = o.BuyStop;
            break;
        case o.SellStop:
            i = n.sell,
            s = o.SellStop;
            break;
        case o.SellLimit:
            i = n.sell,
            s = o.SellLimit
        }
        this.openPendingPosition(i, s)
    },
    t._onChangeStopOrdersValue = function(t) {
        var i = this.workMode,
        s = e.tradePanelConst.workMode,
        n = i === s.market,
        o = n ? this.package.market: this.package.pending;
        this.hasOrderPosition() ? (this.positionEditMode = !0, this.refreshStopOrderApplyButton(o), this.switchStopOrderButtonsState(!0)) : (n ? this.refreshMarketButtons() : this.refreshPendingButton(), this.assembleAndSaveDataAfterStopOrdersChangedValue(n, o), this.saveSettings())
    },
    t._onChangeStateStopOrders = function(t) {
        var i = this.workMode,
        s = e.tradePanelConst.workMode,
        n = i === s.market,
        o = this.hasOrderPosition(),
        a = t.sender,
        r = a.useStopsNode(),
        l = this._symbol;
        if (r) a.setStep(l.getFormattedPrecision()),
        a.setDecimals(l.getDigits()),
        o ? (a.ChangedValue.remove(this.fcsovDelegate), a.ChangedValue.fire({
            event: null,
            sender: a
        }), this.firstChangeStopOrderValue({
            sender: a,
            bypassingPosition: !0
        }), this.refreshStopOrderApplyButton(n ? this.package.market: this.package.pending)) : a.ChangedValue.add(this.fcsovDelegate);
        else {
            a.ChangedValue.remove(this, this.fcsovDelegate);
            var h = a.getId(),
            d = "",
            c = this._position;
            if (o) {
                switch (h) {
                case "TakeProfitNumEdit":
                    d = c.takeProfit;
                    break;
                case "StopLossNumEdit":
                    d = c.stopLoss
                }
                d = parseFloat(d) ? e.numberFormat(d, l.getDigits(), ".", "") : ""
            } else this.switchStopOrderButtonsState(!1);
            a.setValue(d),
            this.refreshStopOrderApplyButton(n ? this.package.market: this.package.pending),
            this.stopOrderButtonsSwitchNeedle(i) && (this.positionEditMode = !1, this.switchStopOrderButtonsState(!1))
        }
        n ? this.refreshMarketButtons() : this.refreshPendingButton(),
        this.saveSettings()
    },
    t.assembleAndSaveDataAfterStopOrdersChangedValue = function(e, t) {
        if (!this.hasAnyPosition()) {
            var i = {};
            e || (i.price = t.priceControl.getValue());
            var s = t.stopOrderControls;
            i.volume = t.volumeControl.getValue(),
            i.takeProfit = s.takeProfit.getValue(),
            i.stopLoss = s.stopLoss.getValue(),
            this.saveDataToLocalStorage(i, this.workMode, this.toolType)
        }
    },
    t.firstChangeStopOrderValue = function(t) {
        var i, s, n = e.tradePanelConst,
        o = t.sender,
        a = o.getId(),
        r = t.changeDirection,
        l = this.hasOrderPosition(),
        h = t.bypassingPosition,
        d = this.workMode,
        c = n.workMode,
        u = d === c.market,
        g = n.toolType[c.pending];
        if (l) {
            if (h === !0) {
                var p, m, _, y = this._position,
                S = parseFloat(y.takeProfit),
                f = parseFloat(y.stopLoss),
                v = e._TraderData,
                C = y.positionType,
                b = parseInt(y.pendingOrderType),
                T = v.positionType;
                v.pendingOrderType;
                switch (a) {
                case "TakeProfitNumEdit":
                    m = "up",
                    _ = "down",
                    p = S;
                    break;
                case "StopLossNumEdit":
                    m = "down",
                    _ = "up",
                    p = f
                } (e.valueIsEmpty(p) || isNaN(p) || 0 === p) && (i = C === T.buy ? this.getCalculatedMarketStopOrderValue(m, a) : C === T.sell ? this.getCalculatedMarketStopOrderValue(_, a) : b === g.buyLimit || b === g.buyStop ? this.getCalculatedPendingStopOrderValue(m, parseFloat(y.openPrice), a) : this.getCalculatedPendingStopOrderValue(_, parseFloat(y.openPrice), a), o.setValue(i), u ? this.refreshMarketButtons() : this.refreshPendingButton())
            }
        } else {
            u || (s = parseFloat(this.package.pending.priceControl.getValue())),
            i = u ? this.getCalculatedMarketStopOrderValue(r, a) : this.getCalculatedPendingStopOrderValue(r, s, a),
            o.setValue(i),
            o.ChangedValue.remove(this, this.fcsovDelegate);
            var P;
            u ? (P = this.package.market, this.refreshMarketButtons()) : (P = this.package.pending, this.refreshPendingButton()),
            this.assembleAndSaveDataAfterStopOrdersChangedValue(u, P)
        }
    },
    t.getCalculatedMarketStopOrderValue = function(t, i) {
        var s = this._symbol,
        n = s.getStopLevel(),
        o = s.getDigits(),
        a = s.getBid(),
        r = s.getAsk(),
        l = s.getGPipsCount();
        switch (n = n > 0 ? n: 1, l *= n, i) {
        case "TakeProfitNumEdit":
            return "up" === t ? e.numberFormat(e.parseFloat(a) + l / Math.pow(10, o), o, ".", "") : "down" === t ? e.numberFormat(e.parseFloat(r) - l / Math.pow(10, o), o, ".", "") : e.numberFormat(a, o, ".", "");
        case "StopLossNumEdit":
            return "up" === t ? e.numberFormat(e.parseFloat(r) + l / Math.pow(10, o), o, ".", "") : "down" === t ? e.numberFormat(e.parseFloat(a) - l / Math.pow(10, o), o, ".", "") : e.numberFormat(a, o, ".", "")
        }
    },
    t.getCalculatedPendingStopOrderValue = function(e, t, i) {
        var s = this._symbol,
        n = parseFloat(s.getStopLevel()),
        o = s.getGPipsCount();
        switch (n = n > 0 ? n: 1, o *= n * s.getFormattedPrecision(), i) {
        case "TakeProfitNumEdit":
            if ("up" === e) return t + o;
            if ("down" === e) return t - o;
            break;
        case "StopLossNumEdit":
            if ("up" === e) return t + o;
            if ("down" === e) return t - o
        }
    },
    t._onApplyStopOrdersButtonClick = function(t) {
        var i, s, n, o = this.isPendingOrderPosition(),
        a = e.TraderData.getTraderInfo(),
        r = this._position;
        if (o === !1) s = this.package.market,
        i = s.stopOrderControls,
        n = {
            traderID: a.id,
            positionID: this._position.id,
            takeProfit: i.takeProfit.getValue() || 0,
            stopLoss: i.stopLoss.getValue() || 0
        },
        this.changeMarketOrderPosition(n);
        else {
            s = this.package.pending,
            i = s.stopOrderControls;
            var l, h = e.parseFloat,
            d = parseInt(r.pendingOrderType),
            c = e.requestPendingOrderType;
            switch (d) {
            case c.BuyLimit:
            case c.BuyStop:
                l = e._TraderData.positionType.buy;
                break;
            case c.SellLimit:
            case c.SellStop:
                l = e._TraderData.positionType.sell
            }
            n = {
                id: r.id,
                symbolName: this._symbol.getSymbolName(),
                traderID: a.id,
                orderType: r.pendingOrderType,
                volume: h(s.volumeControl.getValue()),
                operationType: e.requestPositionType[l],
                price: h(s.priceControl.getValue()),
                takeProfit: i.takeProfit.getValue() || 0,
                stopLoss: i.stopLoss.getValue() || 0
            },
            this.changePendingOrderPosition(n)
        }
        var u = this.fcsovDelegate;
        this.positionEditMode = !1,
        this.block(!0),
        this.switchStopOrderButtonsState(!1),
        i.takeProfit.turnOff(u),
        i.stopLoss.turnOff(u),
        this.requestData.requestToOpenPositionIsSent = !0,
        this.requestData.type = this.toolType
    },
    t._onDiscardStopOrdersButtonClick = function(t) {
        var i, s = e.tradePanelConst.workMode,
        n = this.workMode;
        switch (n) {
        case s.market:
            i = this.package.market;
            break;
        case s.pending:
            i = this.package.pending
        }
        var o = this._position,
        a = i.stopOrderControls,
        r = a.takeProfit,
        l = a.stopLoss;
        r.changeState(null),
        l.changeState(null),
        r.setValue(parseFloat(o.takeProfit) || ""),
        l.setValue(parseFloat(o.stopLoss) || ""),
        this.positionEditMode = !1,
        this.switchStopOrderButtonsState(!1),
        this.saveSettings()
    },
    t.stopOrderButtonsSwitchNeedle = function(t) {
        if (!this.hasOrderPosition()) return ! 1;
        var i, s = this._position,
        n = e.tradePanelConst.workMode;
        i = t === n.market ? this.package.market: this.package.pending;
        var o = i.stopOrderControls,
        a = o.takeProfit,
        r = o.stopLoss;
        return ! a.useStopsNode() && parseFloat(s.takeProfit) == parseFloat(a.getValue() || 0) && !r.useStopsNode() && parseFloat(s.stopLoss) == parseFloat(r.getValue() || 0)
    },
    t.getPositionVolume = function(t, i) {
        var s, n = e.getTerminal(),
        o = e.UtipFunctions,
        a = e.PlatformTypes;
        if (n.platformType == a.ptUTIP) s = 2;
        else if (n.platformType == a.ptMT) {
            var r = e.SymbolsData.getMTSymbolGroupsParameters(),
            l = r[t.getSymbolGroupName()],
            h = l.minimumLot,
            d = l.lotStep;
            s = Math.max(o.getStepDecimals(h), o.getStepDecimals(d))
        }
        return e.parseFloat(i.volume, s, ".")
    },
    t._onSumInputSelectNumberChanged = function(e) {
        this.refreshBinaryPayout(),
        this.refreshBinaryButtons();
        var t = this.package.binary;
        this.saveDataToLocalStorage({
            sum: t.sumControl.getValue(),
            period: t.periodControl.getValue()
        },
        this.workMode, this.toolType),
        this.saveSettings()
    },
    t.refreshBinarySums = function() {
        var t = this.package.binary.sumControl,
        i = t.getValue(),
        s = e.TraderData.getTraderGroup();
        t.setOptions([s.optionSumLevel1, s.optionSumLevel2, s.optionSumLevel3]);
        var n = t.indexOfText(i);
        n = n === -1 ? 0 : n,
        t.setSelectedOption(n),
        t.ChangedValue.fire({
            event: null,
            sender: t
        })
    },
    t._onPeriodInputSelectChanged = function(t) {
        var i = this.package.binary,
        s = i.periodControl,
        n = s.getSelectedData(),
        o = n.period,
        a = e.SymbolsData.getLastChangedTime(),
        r = this.checkAvailabilityPeriodForThePurchase(a + o);
        if (this.refreshBinaryButtons(), r) {
            var l = this._binaryOption,
            h = l.getParamsByPeriod(o / 1e3),
            d = -1;
            null !== h && (d = o),
            l.lastSelectedValue = d
        } else s.drop();
        this.refreshBinaryPayout();
        var c = this.chart;
        if (c.clearBinaryPosition(), c.updateExpirationLine(o), e.UserSettings.WindowsTemplates.autoTimeframe === !0) {
            var u = t.sender.getSelectedData(),
            o = u.period;
            c.setTimeframe(o)
        }
        this.saveDataToLocalStorage({
            sum: i.sumControl.getValue(),
            period: s.getValue()
        },
        this.workMode, this.toolType),
        this.saveSettings()
    },
    t._onHighButtonClick = function(t) {
        var i = e.tradePanelConst.toolType[this.workMode],
        s = this.toolType,
        n = this.prepareBinaryOptionData();
        switch (s) {
        case i.express:
            n.direction = e.OptionPositionTypes.highExpress;
            break;
        case i.classic:
            n.direction = e.OptionPositionTypes.highClassic;
            break;
        case i.oneTouch:
            n.direction = e.OptionPositionTypes.top;
            break;
        case i.range:
            n.direction = e.OptionPositionTypes.inside
        }
        this.openBinaryPosition(n)
    },
    t._onLowButtonClick = function(t) {
        var i = e.tradePanelConst.toolType[this.workMode],
        s = this.toolType,
        n = this.prepareBinaryOptionData();
        switch (s) {
        case i.express:
            n.direction = e.OptionPositionTypes.lowExpress;
            break;
        case i.classic:
            n.direction = e.OptionPositionTypes.lowClassic;
            break;
        case i.oneTouch:
            n.direction = e.OptionPositionTypes.bottom;
            break;
        case i.range:
            n.direction = e.OptionPositionTypes.outside
        }
        this.openBinaryPosition(n)
    },
    t.setBinaryOptionData = function(t) {
        var i;
        if (t instanceof e.OptionSettings || null === t ? i = t: "number" == typeof t && (i = e.OptionsSettings.byID(t)), this._binaryOption = i, i) {
            var s = this.chart;
            s.setTPMOptionSettingsId(i.getID()),
            s.setTPMOptionSettingsType(i.getType())
        }
        this.setBinaryPeriods(i),
        this.refreshBinaryPayout()
    },
    t.setBinaryPeriods = function(t) {
        if (!e.valueIsEmpty(t)) {
            for (var i, s = t.getOptionPeriodCaptions(), n = s.length, o = 0; o < n; ++o) i = s[o].Data.period,
            this.checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + i) || (s[o].Text += " (" + (e.LangManager.getStringByKey("cOPClosed") || "closed") + ")");
            var a = this.package.binary.periodControl;
            a.setOptions(s),
            a.setSelectedOption(0)
        }
    },
    t.setBinaryBordersVisible = function(e) {
        var t = this._binaryView.querySelector(".Borders"),
        i = e === !0 ? "add": "remove";
        t.classList[i]("Active")
    },
    t.checkAvailabilityPeriodForThePurchase = function(t) {
        var i = e.UtipFunctions,
        s = this._symbol;
        return !! s && (!i.isHoliday(t, s) || !i.isTradeTime(t, s))
    },
    t._onNewPositionButtonClick = function(t) {
        var i = this.chart;
        i.clearBinaryPosition(),
        i.turnOffMarks(!0),
        this.restoreBaseState(!0),
        this.assembleToolTypesPackage();
        var s = e.getTerminal();
        s.saveSettings()
    },
    t.attachToolTypeInputSelect = function() {
        var t, i = this._fullView.querySelector(".Type"),
        s = "";
        this.viewVisualState === e.tradePanelConst.viewVisualState.minimize && (s += " Minimize");
        try {
            t = new e.InputSelect({
                ParentNode: i,
                Enabled: !this.hasAnyPosition(),
                Class: "NewSelect",
                MenuClass: "NewSelect Order" + s,
                DropDown: e.Delegate(this, this._onToolTypeInputSelectChangeActiveState, {
                    property: "add"
                }),
                Closed: e.Delegate(this, this._onToolTypeInputSelectChangeActiveState, {
                    property: "remove"
                }),
                ChangedValue: e.Delegate(this, this._onToolTypeInputSelectChange),
                OnlyNumbers: !0
            }),
            this.package.toolType = {
                parentView: i,
                ourControl: t
            },
            this.assembleToolTypesPackage()
        } catch(e) {
            console.error("trade panel: error while creating tool types. " + e.message)
        }
    },
    t.assembleToolTypesPackage = function() {
        var e, t = this.getOrderToolTypesPackageData(),
        i = this.getBinaryToolTypesPackageData();
        e = t.concat(i),
        this.package.toolType.ourControl.setOptions(e)
    },
    t.getOrderToolTypesPackageData = function() {
        function t(e, t, i) {
            return {
                workMode: e,
                toolType: t,
                custom: i
            }
        }
        try {
            var i = this._symbol,
            s = this.binaryMode,
            n = !e.SymbolsData.isSelectedSymbol(i) || s === !0;
            n = !n;
            var o = e.tradePanelConst,
            a = o.workMode,
            r = a.market,
            l = a.pending,
            h = o.toolType;
            return [{
                Data: t(r, null, "Group"),
                Text: "Market order",
                Key: "cCSFMarket",
                Enabled: !1,
                Visible: n
            },
            {
                Data: t(r, h[r].buySell, null),
                Text: "Buy / Sell",
                Visible: n
            },
            {
                Data: t(l, null, "Group"),
                Text: "Pending order",
                Key: "cTPPendingOrder",
                Enabled: !1,
                Visible: n
            },
            {
                Data: t(l, h[l].buyLimit, "Group"),
                Text: "Buy Limit",
                Key: "cBuyLimit",
                Visible: n
            },
            {
                Data: t(l, h[l].sellLimit, "Group"),
                Text: "Sell Limit",
                Key: "cSellLimit",
                Visible: n
            },
            {
                Data: t(l, h[l].buyStop, "Group"),
                Text: "Buy Stop",
                Key: "cBuyStop",
                Visible: n
            },
            {
                Data: t(l, h[l].sellStop, "Group"),
                Text: "Sell Stop",
                Key: "cSellStop",
                Visible: n
            }]
        } catch(e) {
            console.error("trade panel: an error occurred while collecting information about the instrument. types - orders. " + e.message)
        }
    },
    t.getBinaryToolTypesPackageData = function() {
        function t(t, i, s) {
            return {
                workMode: t,
                toolType: i,
                custom: s && s instanceof e.OptionSettings ? s.getID() : s
            }
        }
        try {
            var i = this.forexMode,
            s = this.usedNewBinary,
            n = this._symbol.getSymbolName(),
            o = e.OptionsSettings,
            a = o.getOptionSettingsByOptionTypeAndSymbolName.bind(o),
            r = e.OptionSettingsType,
            l = e.OptionTypeNames,
            h = a(r.express, n),
            d = a(r.classic, n),
            c = a(r.oneTouch, n),
            u = a(r.range, n),
            g = e.tradePanelConst,
            p = g.workMode,
            m = p.binary,
            _ = g.toolType;
            i === !0 ? (h = null, d = null, c = null, u = null) : s === !1 && (c = null, u = null);
            var y = h || d || c || u;
            return [{
                Data: t(m, null, "Group"),
                Text: "Binary option",
                Key: "cTPBinaryOption",
                Enabled: !1,
                Visible: !!y
            },
            {
                Data: t(m, _[m].express, h),
                Text: l[0],
                Visible: !!h
            },
            {
                Data: t(m, _[m].classic, d),
                Text: l[1],
                Visible: !!d
            },
            {
                Data: t(m, _[m].oneTouch, c),
                Text: l[2],
                Visible: !!c
            },
            {
                Data: t(m, _[m].range, u),
                Text: l[3],
                Visible: !!u
            }]
        } catch(e) {
            console.error("tradePanel: an error occurred while collecting information about the instrument. type - binary. " + e.message)
        }
    },
    t.attachMarketControls = function() {
        var t = this._marketView;
        try {
            var i = t.querySelector(".Bid"),
            s = t.querySelector(".Ask"),
            n = t.querySelector(".Price"),
            o = t.querySelector(".TP-SL"),
            a = this.appendMarketVolumeInput(t),
            r = this.appendMarketButtons(t),
            l = this.appendOptionalOrderPositionButtons(t, e.tradePanelConst.workMode.market),
            h = {
                buy: r.buy,
                sell: r.sell,
                close: l.close,
                new: l.new
            },
            d = this.appendStopOrders(t, e.tradePanelConst.workMode.market);
            this.package.market = {
                nodes: {
                    symbolPriceNode: n,
                    stopOrdersNode: o,
                    bid: i,
                    ask: s
                },
                volumeControl: a,
                stopOrderControls: d,
                buttonControls: h
            }
        } catch(e) {
            console.error("trade panel: error while creating controls for the market order. " + e.message)
        }
    },
    t.appendMarketVolumeInput = function(e) {
        var t = e.querySelector(".Volume"),
        i = this.appendVolumeInput(t);
        return i
    },
    t.appendMarketButtons = function(t) {
        var i, s, n = t.querySelector(".Buttons");
        return i = new e.Button({
            ParentNode: n,
            Class: "DButton BigButton GreenButton",
            Text: "Buy",
            Key: "cMDBuy",
            Height: 50,
            ImageUrl: "res/img/mobileImg/buttons/white_up.png",
            Click: e.Delegate(this, this._onBuyButtonClick)
        }),
        s = new e.Button({
            ParentNode: n,
            Class: "DButton BigButton RedButton",
            Text: "Sell",
            Key: "cMDSell",
            Height: 50,
            ImageUrl: "res/img/mobileImg/buttons/white_down.png",
            Click: e.Delegate(this, this._onSellButtonClick)
        }),
        {
            buy: i,
            sell: s
        }
    },
    t.attachPendingControls = function() {
        var t = this._pendingView;
        try {
            var i = t.querySelector(".TP-SL"),
            s = this.appendPendingVolumeInput(t),
            n = this.appendPendingPriceInput(t),
            o = this.appendStopOrders(t, e.tradePanelConst.workMode.pending),
            a = this.appendPendingButton(t),
            r = this.appendOptionalOrderPositionButtons(t, e.tradePanelConst.workMode.pending),
            l = {
                place: a,
                close: r.close,
                new: r.new
            };
            this.package.pending = {
                nodes: {
                    stopOrdersNode: i
                },
                volumeControl: s,
                priceControl: n,
                stopOrderControls: o,
                buttonControls: l
            }
        } catch(e) {
            console.error("trade panel: error while creating controls for the pending order. " + e.message)
        }
    },
    t.appendPendingVolumeInput = function(e) {
        var t = e.querySelector(".Volume-Price"),
        i = this.appendVolumeInput(t);
        return i
    },
    t.appendPendingPriceInput = function(t) {
        var i, s = t.querySelector(".Volume-Price");
        return i = new e.Input({
            ParentNode: s,
            Enabled: !this._exists,
            Class: "New",
            Width: 140,
            Caption: (e.LangManager.getStringByKey("cWCTTradePositionsFormOpenPrice") || "Price") + ":",
            ChangeValue: e.Delegate(this, this.refreshPendingButton),
            ChangedValue: e.Delegate(this, this.refreshPendingButton),
            Template: e._Templates.InputWithIcons
        })
    },
    t.appendPendingButton = function(t) {
        var i, s = t.querySelector(".Buttons");
        return i = new e.Button({
            ParentNode: s,
            Class: "DButton BigButton GreenButton",
            Text: "Place",
            Key: "cNPFPut",
            Height: 50,
            Click: e.Delegate(this, this._onPlaceButtonClick)
        })
    },
    t.attachBinaryControls = function() {
        var t = this._binaryView;
        try {
            var i = this.appendBinaryInputs(t),
            s = this.appendBinaryButtons(t),
            n = this.appendOptionalBinaryPositionButtons(t),
            o = {
                high: s.high,
                low: s.low,
                close: n.close,
                new: n.new
            },
            a = t.querySelector(".Profit"),
            r = a.querySelector(".Caption"),
            l = a.querySelector(".Value"),
            h = t.querySelector(".CurrentProfit"),
            d = t.querySelector(".Borders"),
            c = d.querySelector(".TopBorder"),
            u = d.querySelector(".BottomBorder"),
            g = o.close.getDomNode();
            r.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ":",
            this.package.binary = {
                nodes: {
                    profit: a,
                    captionProfit: r,
                    percentProfit: l,
                    currentProfit: h,
                    borders: {
                        top: c,
                        bottom: u
                    },
                    closeButton: g
                },
                periodControl: i.period,
                sumControl: i.sum,
                buttonControls: o
            }
        } catch(e) {
            console.error("trade panel: error while creating control for the binary option. " + e.message)
        }
    },
    t.appendBinaryInputs = function(t) {
        var i, s, n = t.querySelector(".Period"),
        o = t.querySelector(".Price"),
        a = "",
        r = e.TraderData.getTraderGroup();
        this.viewVisualState === e.tradePanelConst.viewVisualState.minimize && (a += " Minimize");
        var l = r.minOptionSum,
        h = r.maxOptionSum;
        return s = new e.InputSelectNumber({
            ParentNode: o,
            OnlyNumbers: !0,
            Edit: !0,
            Width: 140,
            Value: l,
            Options: [r.optionSumLevel1, r.optionSumLevel2, r.optionSumLevel3],
            MinValue: l,
            MaxValue: h,
            MaxLength: h.toString().length,
            Class: "Icons Sums",
            MenuClass: "OptionalNewSelect" + a,
            ChangeValue: e.Delegate(this, this._onSumInputSelectNumberChanged),
            ChangedValue: e.Delegate(this, this._onSumInputSelectNumberChanged)
        }),
        i = new e.InputSelect({
            ParentNode: n,
            Class: "Icons Periods",
            MenuClass: "OptionalNewSelect" + a,
            Edit: !1,
            Width: 140,
            ChangedValue: e.Delegate(this, this._onPeriodInputSelectChanged)
        }),
        {
            period: i,
            sum: s
        }
    },
    t.appendBinaryButtons = function(t) {
        var i, s, n = t.querySelector(".Buttons");
        return i = new e.Button({
            ParentNode: n,
            Class: "DButton BigButton GreenButton",
            Enabled: !this.hasBinaryPosition(),
            Text: "High",
            Key: "cWCTOptionHigh",
            Height: 50,
            Click: e.Delegate(this, this._onHighButtonClick)
        }),
        s = new e.Button({
            ParentNode: n,
            Class: "DButton BigButton RedButton",
            Enabled: !this.hasBinaryPosition(),
            Text: "Low",
            Key: "cWCTOptionLow",
            Height: 50,
            Click: e.Delegate(this, this._onLowButtonClick)
        }),
        {
            high: i,
            low: s
        }
    },
    t.switchMarketButtons = function(t) {
        var i, s, n, o, a = this.package.market,
        r = a.buttonControls,
        l = e.tradePanelConst.positionMode;
        switch (t) {
        case l.hasNot:
            i = r.buy.getDomNode(),
            s = r.sell.getDomNode(),
            n = r.close.getDomNode(),
            o = r.new.getDomNode();
            break;
        case l.has:
            i = r.close.getDomNode(),
            s = r.new.getDomNode(),
            n = r.buy.getDomNode(),
            o = r.sell.getDomNode()
        }
        i.style.display = "",
        s.style.display = "",
        n.style.display = "none",
        o.style.display = "none",
        this.refreshMarketButtons()
    },
    t.switchPendingButtons = function(t) {
        var i = this.package.pending,
        s = i.buttonControls,
        n = e.tradePanelConst.positionMode,
        o = s.place.getDomNode(),
        a = s.close.getDomNode(),
        r = s.new.getDomNode();
        t === n.hasNot ? (o.style.display = "", a.style.display = "none", r.style.display = "none") : (o.style.display = "none", a.style.display = "", r.style.display = ""),
        this.refreshPendingButton()
    },
    t.switchBinaryButtonsByPositionMode = function(t) {
        var i, s, n, o, a = this.package.binary,
        r = a.buttonControls,
        l = e.tradePanelConst.positionMode;
        switch (t) {
        case l.hasNot:
            i = r.high.getDomNode(),
            s = r.low.getDomNode(),
            n = r.close.getDomNode(),
            o = r.new.getDomNode();
            break;
        case l.has:
            i = r.close.getDomNode(),
            s = r.new.getDomNode(),
            n = r.high.getDomNode(),
            o = r.low.getDomNode()
        }
        i.style.display = "",
        s.style.display = "",
        n.style.display = "none",
        o.style.display = "none",
        this.refreshBinaryButtons()
    },
    t.switchBinaryButtonsByBinaryOptionType = function(t) {
        var i, s, n = e.OptionSettingsType,
        o = t,
        a = this.package.binary,
        r = a.buttonControls,
        l = e.LangManager;
        switch (o) {
        case n.express:
        case n.classic:
            i = l.getStringByKey("cWCTOptionHigh") || "High",
            s = l.getStringByKey("cWCTOptionLow") || "Low";
            break;
        case n.oneTouch:
            i = l.getStringByKey("cOPTTop") || "Top",
            s = l.getStringByKey("cOPTBottom") || "Bottom";
            break;
        case n.range:
            i = l.getStringByKey("cOPTInside") || "Inside",
            s = l.getStringByKey("cOPTOutside") || "Outside"
        }
        r.high.setText(i),
        r.low.setText(s)
    },
    t.appendVolumeInput = function(t) {
        var i, s = "";
        return this.viewVisualState === e.tradePanelConst.viewVisualState.minimize && (s += " Minimize"),
        i = new e.InputSelectNumber({
            ParentNode: t,
            Width: 140,
            Class: "Icons",
            MenuClass: "OptionalNewSelect" + s,
            Caption: (e.LangManager.getStringByKey("") || "Vol") + ":",
            DropDown: e.Delegate(this, this._onVolumeInputSelectNumberDropDown),
            ChangeValue: e.Delegate(this, this._onVolumeInputSelectNumberChange),
            ChangedValue: e.Delegate(this, this._onVolumeInputSelectNumberChange),
            OnlyNumbers: !0
        }),
        i.DropDown.fire(i),
        i
    },
    t.appendOptionalOrderPositionButtons = function(t, i) {
        var s, n, o, a = t.querySelector(".Buttons");
        return o = i === e.tradePanelConst.workMode.market ? this.closeMarketOrderPosition: this.closePendingOrderPosition,
        s = new e.Button({
            ParentNode: a,
            Template: e._Templates.BPCloseEarlyButton,
            Class: "DButton BigButton RedButton CloseEarly",
            Text: "Delete",
            Key: "cMFdelete",
            Click: e.Delegate(this, o)
        }),
        n = new e.Button({
            ParentNode: a,
            Class: "DButton BigButton GreenButton New",
            Text: "New",
            Key: "cMobileNewPassword",
            Height: 50,
            Click: e.Delegate(this, this._onNewPositionButtonClick)
        }),
        {
            close: s,
            new: n
        }
    },
    t.appendOptionalBinaryPositionButtons = function(t) {
        var i, s, n = t.querySelector(".Buttons");
        return i = new e.Button({
            ParentNode: n,
            Template: e._Templates.BPCloseEarlyButton,
            Class: "DButton BigButton RedButton CloseEarly",
            Text: "Close",
            Key: "cWCTTradePositionsFormClose",
            Click: e.Delegate(this, this.closeBinaryPosition)
        }),
        s = new e.Button({
            ParentNode: n,
            Class: "DButton BigButton GreenButton New",
            Text: "New",
            Key: "cMobileNewPassword",
            Height: 50,
            Click: e.Delegate(this, this._onNewPositionButtonClick)
        }),
        {
            close: i,
            new: s
        }
    },
    t.appendStopOrders = function(t, i) {
        var s, n, o = t.querySelector(".TP-SL"),
        a = this._symbol.getDigits();
        s = new e.InputStops({
            ParentNode: o,
            Width: 140,
            Caption: e.LangManager.getStringByKey("cTOTP") || "TP",
            Id: "TakeProfitNumEdit",
            Class: "New Icons TakeProfit",
            WithStops: !0,
            MaxValue: 999999,
            Decimals: a,
            ChangeState: e.Delegate(this, this._onChangeStateStopOrders),
            ChangeValue: e.Delegate(this, this._onChangeStopOrdersValue),
            ChangedValue: e.Delegate(this, this._onChangeStopOrdersValue),
            Template: e._Templates.InputWithIcons
        }),
        n = new e.InputStops({
            ParentNode: o,
            Width: 140,
            Caption: e.LangManager.getStringByKey("cTOSL") || "SL",
            Id: "StopLossNumEdit",
            Class: "New Icons StopLoss",
            WithStops: !0,
            MaxValue: 999999,
            Decimals: a,
            ChangeState: e.Delegate(this, this._onChangeStateStopOrders),
            ChangeValue: e.Delegate(this, this._onChangeStopOrdersValue),
            ChangedValue: e.Delegate(this, this._onChangeStopOrdersValue),
            Template: e._Templates.InputWithIcons
        });
        var r = this.appendStopOrderButtons(o);
        return {
            takeProfit: s,
            stopLoss: n,
            updateStopOrders: r.updateStopOrders,
            notUpdateStopOrders: r.notUpdateStopOrders
        }
    },
    t.appendStopOrderButtons = function(t) {
        var i = document.createElement("div");
        i.classList.add("ChangeTPSLControls"),
        i.classList.add("Disabled");
        var s, n;
        return s = new e.Button({
            ParentNode: i,
            Enabled: !0,
            Class: "DButton ApplyBtn",
            Height: 30,
            ImgWidth: 16,
            Click: e.Delegate(this, this._onApplyStopOrdersButtonClick)
        }),
        n = new e.Button({
            ParentNode: i,
            Enabled: !0,
            Class: "DButton DiscardBtn",
            Height: 30,
            ImgWidth: 16,
            Click: e.Delegate(this, this._onDiscardStopOrdersButtonClick)
        }),
        t.appendChild(i),
        {
            updateStopOrders: s,
            notUpdateStopOrders: n
        }
    },
    t.switchStopOrderButtonsState = function(t, i) {
        var s, n = e.tradePanelConst.workMode,
        o = this.workMode;
        switch (o) {
        case n.market:
            s = this.package.market;
            break;
        case n.pending:
            s = this.package.pending;
            break;
        default:
            return
        }
        var a = t === !0 ? "removeCSSClass": "addCSSClass",
        r = s.nodes.stopOrdersNode.querySelector(".ChangeTPSLControls");
        e[a](r, "Disabled"),
        i !== !1 && e.updateSizeTradePanels(this.chart.getGraphicArea().getGraphicWindows(), this.showed),
        this.refreshHeight()
    },
    t.isPositionEditMode = function() {
        var t, i, s, n = this.workMode,
        o = e.tradePanelConst.workMode;
        return n != o.binary && (s = n === o.market ? this.package.market: this.package.pending, t = s.stopOrderControls, i = t.takeProfit.useStopsNode() || t.stopLoss.useStopsNode(), i && this.hasOrderPosition())
    },
    t.getStopOrderValues = function(e) {
        var t = e.stopOrderControls,
        i = t.takeProfit,
        s = t.stopLoss,
        n = i.useStopsNode() ? i.getValue() || 0 : 0,
        o = s.useStopsNode() ? s.getValue() || 0 : 0;
        return {
            takeProfit: n,
            stopLoss: o
        }
    },
    t.switchView = function(t, i, s) {
        var n, o = e.tradePanelConst,
        a = o.workMode,
        r = o.positionMode;
        if (!e.valueIsEmpty(t)) {
            switch (t) {
            case a.pending:
                this.refreshPendingButton(),
                this.switchPendingButtons(r.hasNot),
                n = this._pendingView;
                break;
            case a.binary:
                this.switchBinaryButtonsByBinaryOptionType(i),
                this.switchBinaryButtonsByPositionMode(r.hasNot),
                n = this._binaryView;
                break;
            default:
            case a.market:
                this.refreshMarketButtons(),
                this.switchMarketButtons(r.hasNot),
                this.refreshMarketPriceView(),
                n = this._marketView
            }
            var l = this.package.toolType.ourControl;
            this.setGroupNameByGroupItem(l.getItemByParametersData({
                workMode: t,
                toolType: null
            },
            "item")),
            s !== !0 && l.setSelectedOption(l.getItemByParametersData({
                workMode: t,
                toolType: i
            },
            "index"));
            var h = this._contentView,
            d = this._currentView,
            c = d.parentNode;
            if (c) {
                if (n.parentNode === h) return this.workMode = t,
                void(this.toolType = i);
                c === h && c.removeChild(d)
            }
            h.appendChild(n),
            this._currentView = n,
            this.workMode = t,
            this.toolType = i
        }
    },
    t.setChart = function(t) {
        var i = t instanceof e.Chart;
        t && i && (this.chart = t)
    },
    t.show = function() {
        try {
            if (this.investorMode) throw {
                message: "торговая панель: в режиме инвестора нельзя пользоваться панелью."
            };
            this.showed = !0;
            var t = this._fullView;
            t.classList.remove("NotActive"),
            t.classList.add("Active");
            var i = e.tradePanelConst.workMode,
            s = this.workMode,
            n = this.viewVisualState;
            switch (s) {
            case i.market:
            case i.pending:
                this.refreshOrderControlsSize(n);
                break;
            case i.binary:
                this.refreshBinaryControlsSize(n)
            }
            this.refreshToolTypeControlSize(n),
            this.refreshHeight(),
            this.saveSettings()
        } catch(e) {
            this.investorMode || console.log(e.message)
        }
    },
    t.block = function(e) {
        this.investorMode === !0 && (e = !0);
        var t = this.package.toolType.ourControl,
        i = t.getDomNode(),
        s = e === !0 ? "add": "remove",
        n = this._fullView,
        o = n.classList;
        this.hasAnyPosition() ? (o.add("Exist"), o.add("Disabled"), o.remove("NotExist"), i.classList.add("Disabled"), t.setEnabled(!1)) : (o.remove("Exist"), o.add("NotExist"), o[s]("Disabled"), i.classList[s]("Disabled"), t.setEnabled(!e))
    },
    t.restoreServiceability = function() {
        if (this.ready === !1) {
            this.subscribe(),
            this.block(!1),
            this.show(),
            this.ready = !0,
            this.showed = !0;
            var t = e.getTerminal(),
            i = t.getChartPanel(),
            s = i.getTradePanelButton(),
            n = this.chart,
            o = n.getGraphicArea();
            o.getGraphicWindows();
            s.setPressed(!0),
            this.saveSettings()
        }
    },
    t.stopServiceability = function(t, i) {
        this.dropOutOfFollowers(!1),
        this.block(!0),
        this.hide(),
        this.ready = !1,
        this.ready = !1,
        this.showed = !1,
        t && console.log(t);
        try {
            i !== !0 && this.restoreBaseState()
        } catch(e) {
            console.log('trade panel: malfunction. function name "stopServiceability"')
        }
        var s = e.getTerminal(),
        n = s.getChartPanel(),
        o = n.getTradePanelButton(),
        a = this.chart,
        r = a.getGraphicArea();
        r.getGraphicWindows();
        o.setPressed(!1),
        this.saveSettings()
    },
    t.dispose = function() {
        this.showed === !0 && this.hide(!0),
        this.dropOutOfFollowers(!0);
        var e = this._fullView,
        t = e.parentNode;
        t && t.removeChild(e),
        delete this._fullView,
        delete this._contentView,
        delete this._marketView,
        delete this._pendingView,
        delete this._binaryView,
        delete this._currentView,
        delete this._symbol,
        delete this._symbolName,
        delete this._binaryOption,
        delete this._position,
        delete this.chart,
        delete this.workMode,
        delete this.toolType,
        delete this.investorMode,
        delete this.forexMode,
        delete this.binaryMode,
        delete this.usedNewBinary,
        delete this.viewVisualState,
        delete this.registered,
        delete this.ready
    },
    t.hide = function(t) {
        t !== !0 ? this.showed = !1 : this.viewVisualState = e.tradePanelConst.viewVisualState.invisible;
        var i = this._fullView;
        i.classList.remove("Active"),
        i.classList.add("NotActive"),
        this.saveSettings()
    },
    t.saveSettings = function() {
        var e = this.chart,
        t = this._binaryOption,
        i = {
            workMode: this.workMode,
            toolType: this.toolType,
            symbolName: this._symbolName,
            binaryOptionId: t ? t.getID() : null,
            chartIndex: e.getIndex(),
            position: this._position,
            showed: this.showed
        };
        e.refreshTradePanelData(i)
    },
    t.saveDataToLocalStorage = function(t, i, s) {
        var n = e.valueIsEmpty;
        if (! (n(t) || n(i) || n(s))) {
            var o, a = this._symbolName,
            r = this.assembleStorage(i, s),
            l = r[a][i][s],
            h = e.tradePanelConst.workMode;
            switch (i) {
            case h.market:
            case h.pending:
                o = this.package.market,
                i === h.pending && (o = this.package.pending, l = {},
                l.price = t.price || o.priceControl.getValue() || 0);
                var d = o.stopOrderControls;
                l = {
                    volume: t.volume || o.volumeControl.getValue() || 0,
                    takeProfit: t.takeProfit || d.takeProfit.getValue() || "",
                    stopLoss: t.stopLoss || d.stopLoss.getValue() || ""
                };
                break;
            case h.binary:
                var c = e.TraderData.getTraderGroup();
                o = this.package.binary,
                l = {
                    sum: t.sum || o.sumControl.getValue() || c.minOptionSum,
                    period: t.period || o.periodControl.getValue() || ""
                }
            }
            r[a][i][s] = l,
            localStorage.setItem("tradePanelDataStorage", JSON.stringify(r))
        }
    },
    t.assembleStorage = function(t, i) {
        var s = e.valueIsEmpty,
        n = this._symbolName,
        o = JSON.parse(localStorage.getItem("tradePanelDataStorage") || "{ }"),
        a = o[n];
        return s(a) && (o[n] = a = {}),
        a = a[t],
        s(a) && (o[n][t] = a = {}),
        a = a[i],
        s(a) && (o[n][t][i] = {}),
        o
    },
    t.extractDataFromLocalStorage = function(t, i) {
        var s = e.valueIsEmpty;
        if (!s(t) && !s(i)) {
            var n, o = this._symbol,
            a = this._symbolName,
            r = this.assembleStorage(t, i),
            l = r[a][t][i],
            h = e.tradePanelConst,
            d = h.workMode,
            c = -1,
            u = 0;
            switch (t) {
            case d.market:
            case d.pending:
                n = this.package.pending,
                t === d.market && (n = this.package.market);
                var g = l.volume,
                p = n.volumeControl,
                m = n.stopOrderControls;
                if (c = p.indexOfText(g), c === -1) if (parseFloat(g) > 0) p.setValue(g);
                else {
                    var _ = p.getOptions();
                    0 !== _.length ? p.setSelectedOption(u) : p.setValue("")
                } else p.setSelectedOption(c);
                if (t === d.pending) {
                    var y = n.priceControl,
                    S = parseFloat(l.price);
                    s(S) || isNaN(S) || S < 0 ? this.refreshPendingPrice() : y.setValue(S)
                }
                var f = o.getDigits(),
                v = m.takeProfit,
                C = m.stopLoss;
                v.setDecimals(f),
                C.setDecimals(f),
                v.setValue(parseFloat(l.takeProfit) || ""),
                C.setValue(parseFloat(l.stopLoss) || ""),
                p.ChangedValue.fire({
                    event: null,
                    sender: p
                });
                break;
            case d.binary:
                var b = e.TraderData.getTraderGroup();
                n = this.package.binary;
                var T = l.sum,
                P = n.sumControl,
                D = n.periodControl;
                s(T) || parseFloat(T) < 0 ? P.setValue(b.optionSumLevel1) : P.setValue(T),
                c = D.indexOfText(l.period),
                c === -1 ? D.setSelectedOption(u) : D.setSelectedOption(c),
                D.ChangedValue.fire({
                    event: null,
                    sender: D
                })
            }
        }
    },
    t.refreshToolTypeControlSize = function(t) {
        var i, s = "Minimize",
        n = this.package.toolType.ourControl,
        o = n.getOptionsMenu(),
        a = e.tradePanelConst.viewVisualState;
        switch (t) {
        case a.minimize:
            i = "addCSSClass";
            break;
        case a.maximize:
            i = "removeCSSClass"
        }
        o[i](s),
        n._MenuClass = n._MenuClass.replace("Minimize", "")
    },
    t.refreshOrderControlsSize = function(t) {
        var i, s = e.tradePanelConst,
        n = s.workMode,
        o = this.workMode;
        switch (o) {
        case n.market:
            i = this.package.market;
            break;
        case n.pending:
            i = this.package.pending
        }
        var a = i.stopOrderControls,
        r = i.volumeControl,
        l = i.volumeControl.getOptionsMenu(),
        h = t === s.viewVisualState.maximize ? "removeCSSClass": "addCSSClass";
        if (r.setWidth("calc(100%)"), l[h]("Minimize"), o === n.pending) {
            var d = i.priceControl;
            d.setWidth("calc(99%)")
        }
        a.takeProfit.setWidth(140),
        a.stopLoss.setWidth(140)
    },
    t.refreshBinaryControlsSize = function(t) {
        var i = this.package.binary,
        s = t === e.tradePanelConst.viewVisualState.maximize ? "removeCSSClass": "addCSSClass",
        n = i.sumControl,
        o = i.periodControl,
        a = n.getOptionsMenu(),
        r = o.getOptionsMenu();
        n.setWidth("calc(100%)"),
        o.setWidth("calc(100%)"),
        a[s]("Minimize"),
        r[s]("Minimize")
    },
    t.minimize = function() {
        var t = e.tradePanelConst,
        i = t.workMode,
        s = this.workMode,
        n = t.viewVisualState.minimize;
        switch (s) {
        case i.market:
        case i.pending:
            this.refreshOrderControlsSize(n);
            break;
        case i.binary:
            this.refreshBinaryControlsSize(n)
        }
        this.refreshToolTypeControlSize(n);
        var o = this._fullView;
        o.classList.remove("NotMinimize"),
        o.classList.add("Minimize"),
        this.width = 140,
        this.viewVisualState = n,
        this.refreshHeight()
    },
    t.maximize = function() {
        var t = e.tradePanelConst,
        i = t.workMode,
        s = this.workMode,
        n = t.viewVisualState.maximize;
        switch (s) {
        case i.market:
        case i.pending:
            this.refreshOrderControlsSize(n);
            break;
        case i.binary:
            this.refreshBinaryControlsSize(n)
        }
        this.refreshToolTypeControlSize(n);
        var o = this._fullView;
        o.classList.remove("Minimize"),
        o.classList.add("NotMinimize"),
        this.width = 160,
        this.viewVisualState = n,
        this.refreshHeight()
    },
    t.refreshHeight = function() {
        if (this.viewVisualState !== e.tradePanelConst.viewVisualState.invisible) {
            var t = this._toolTypeView.offsetHeight,
            i = this._contentView.offsetHeight,
            s = 15;
            this.height = t + i + s;
            var n = this._fullView,
            o = n.parentNode;
            o && (n.style.height = o.offsetHeight - 2 + "px")
        }
    },
    t.getHeight = function() {
        return this.height
    },
    t.getBaseView = function() {
        return this._fullView
    },
    t.isOurChart = function(e) {
        return this.chart == e
    },
    e
}),
define("graphicWindow", ["graphicArea", "quoteArchive", "chart", "menuChart", "menuLineSettings", "menuIndicatorSettings", "lines/fibonacciLines", "mobile/mobileMenuTapToGraphic", "tradePanelModule"],
function(e) {
    e.graphicConst = {
        GraphicAreaBorder: 3,
        GraphicWindowBottom: 20,
        GraphicWindowRight: 70,
        GraphicWindowLeft: 5,
        GraphicWindowTop: 10,
        GraphicWindowCellWidth: 64
    },
    e.barStyles = {
        gBar: 0,
        jCandle: 1,
        line: 2
    },
    e.MouseButtonState = {
        notClick: 0,
        leftClick: 1,
        middleClick: 2,
        rightClick: 3
    },
    e.GraphicWindow = function(t) {
        this._tradePanel = null,
        this._parentNode = t[1],
        this._containerID = t[0],
        this._canvas = {},
        this._period = e.allPeriods.PC_H1,
        this._position = -1,
        this._scaling = !1,
        this._width = 0,
        this._height = 0,
        this.getParentNode = function() {
            return this._parentNode
        },
        this._verticalLines = [],
        this.selectedHorizontalLine = null,
        this.isActive = !0,
        this.charts = [],
        this.options = t[2],
        this.graphicAreas = [],
        this._indicators = [],
        this._mouseButtonState = e.MouseButtonState.notClick,
        this.verticalScale = 1,
        this.currentBarDate = -1,
        this.crossBarDate = -1,
        this.currentObject = null,
        this.realCurrentObject = null,
        this.currentX = 0,
        this.currentY = 0,
        this.crossX = 0,
        this.crossY = 0,
        this.bordersChanging = !1,
        this.graphicAreaIndexForBorderChange = 0,
        this.scrolling = !1,
        this.cursor = "default",
        this.lastCursor = "",
        this.cursorGuiding = !1,
        this.isSensor = !1,
        this._period = this.options.period,
        this.selectedMenuItem = null,
        this.addingObject = !1,
        this.touchArray = [],
        this.lastSelectedOptionSettings = null,
        this._binds = {
            touchStart: this._onTouchStart.bind(this),
            touchMove: this._onTouchMove.bind(this),
            touchEnd: this._onTouchEnd.bind(this),
            mouseDown: this._onMouseDown.bind(this),
            mouseUp: this._onMouseUp.bind(this),
            mouseMove: this._onMouseMove.bind(this),
            mouseWheel: this._onMouseWheel.bind(this),
            click: this._onClick.bind(this),
            dblClick: this._onDbClick.bind(this),
            dragover: this._onDragOver.bind(this),
            drop: this._onDrop.bind(this),
            contextMenu: this._onContextMenu.bind(this),
            dragstart: function(e) {
                e.preventDefault()
            }
        },
        this.clickTimer = null,
        this.contextMenuTimers = []
    };
    var t = e.GraphicWindow.prototype;
    return t.getContainerID = function() {
        return this._containerID
    },
    t.addEvents = function() {
        this.deleteEvents(),
        e.addEvent(this._canvas, "mousedown", this._binds.mouseDown),
        e.addEvent(this._canvas, "mousemove", this._binds.mouseMove),
        e.addEvent(this._canvas, "touchstart", this._binds.touchStart),
        e.addEvent(this._canvas, "touchmove", this._binds.touchMove),
        e.addEvent(this._canvas, "touchend", this._binds.touchEnd),
        e.addEvent(this._canvas, "mouseup", this._binds.mouseUp),
        e.addEvent(this._canvas, "touchend", this._binds.mouseUp),
        e.addEvent(this._canvas, "dragover", this._binds.dragover),
        e.addEvent(this._canvas, "drop", this._binds.drop),
        e.Browser.IsMobile || e.Browser.IsTablet || (e.addEvent(this._canvas, "contextmenu", this._binds.contextMenu), e.addEvent(this._canvas, "click", this._binds.click)),
        e.Browser.IsMobile || e.Browser.IsTablet || e.addEvent(this._canvas, "dblclick", this._binds.dblClick),
        addWheelListener(this._canvas, this._binds.mouseWheel),
        this.lastZoomFireTime = 0,
        e.activeChart && this._canvas.addEventListener("dragstart", this._binds.dragstart)
    },
    t.deleteEvents = function() {
        var t = e.removeEvent.bind(e),
        i = this._binds,
        s = this._canvas;
        removeWheelListener(s, i.mouseWheel),
        t(s, "contextmenu", i.contextMenu),
        t(s, "touchstart", i.touchStart),
        t(s, "dragstart", i.dragstart),
        t(s, "mousedown", i.mouseDown),
        t(s, "mousemove", i.mouseMove),
        t(s, "touchmove", i.touchMove),
        t(s, "dblclick", i.dblClick),
        t(s, "dragover", i.dragover),
        t(s, "touchend", i.touchEnd),
        t(s, "touchend", i.mouseUp),
        t(s, "mouseup", i.mouseUp),
        t(s, "click", i.click),
        t(s, "drop", i.drop)
    },
    t.getDifferenceSize = function() {
        if (e.Browser.IsMobile) return 0;
        var t = this.tradePanelModule;
        if (!t) return 0;
        var i = t.showed && !t.investorMode;
        return i ? i && t.viewVisualState === e.tradePanelConst.viewVisualState.invisible ? 0 : t.width + 2 : 0
    },
    t.processByResize = function() {
        var e = document.getElementById(this._containerID),
        t = this._parentNode.offsetHeight,
        i = this._parentNode.offsetWidth - this.getDifferenceSize(); ! e || 0 == i || 0 == t || e.height === t && e.width === i || (this._canvas = e, this._canvas.classList.add("Canvas"), this.bufferCanvas = document.createElement("canvas"), this._canvas.height = this._height = t, this._canvas.width = this._width = i, this.updateGAHeights(), this.setDefaultValues(), this.addEvents())
    },
    t.init = function() {
        this.processByResize()
    },
    t.initTradePanelModule = function(t) {
        this.tradePanelData = this.tradePanelData || t;
        var i = this.tradePanelData || {},
        s = i.showed,
        n = i.workMode || 0,
        o = i.toolType || 0,
        a = i.symbolName || this.getMainSymbolName(),
        r = i.binaryOptionId || null,
        l = i.chartIndex || 0,
        h = i.position,
        d = e.valueIsEmpty(s) ? e.showTradePanel() : s;
        e.SymbolsData.isActiveSymbol(a) && !e.getTerminal().useOnlyOptions || e.OptionsSettings.isActiveOption(a) || (d = !1);
        var c = {
            workMode: n,
            toolType: o,
            symbol: e.SymbolsData.getSymbols()[a],
            binaryOption: e.OptionsSettings.byID(r),
            chart: this.charts[l],
            position: h,
            showed: d
        };
        this.tradePanelModule = new e.TradePanelModule(c),
        this.appendTradePanelModule()
    },
    t.removeTradePanelModule = function() {
        this.tradePanelModule && (this.tradePanelModule.dispose(), delete this.tradePanelModule)
    },
    t.goToCurrentPrice = function() {
        this.refreshOffset(this.options.offsetForAction || .3),
        this.options.useOffset = !0,
        this.setAutoScroll(!this.options.userTurnOffAutoScroll),
        this.getToEnd(),
        e.saveUserSettings()
    },
    t.appendTradePanelModule = function() {
        var e = this.tradePanelModule.getBaseView(),
        t = this._parentNode,
        i = e.parentNode;
        t != i && (i && i.removeChild(e), t.appendChild(e, this._canvas))
    },
    t.tradePanelModuleShown = function() {
        return e.Browser.IsMobile ? !!e._tradePanel: this.tradePanelModule.showed
    },
    t.canShowTradePanel = function() {
        var e = this.tradePanelModule;
        return !! e && (e.ready !== !1 && !e.investorMode && e.showed !== !0)
    },
    t.setDefaultValues = function() {
        void 0 == this.options.showOptionSettingsLine && (this.options.showOptionSettingsLine = !0),
        void 0 == this.options.autoTimeframe && (this.options.autoTimeframe = !0),
        void 0 == this.options.colorScheme.stopLine && (this.options.colorScheme.stopLine = e.getDefaultColorSchemes()[0].stopLine),
        void 0 == this.options.colorScheme.expiryLine && (this.options.colorScheme.expiryLine = e.getDefaultColorSchemes()[0].expiryLine),
        void 0 == this.options.colorScheme.highOptionPositionLine && (this.options.colorScheme.highOptionPositionLine = e.getDefaultColorSchemes()[0].highOptionPositionLine),
        void 0 == this.options.colorScheme.lowOptionPositionLine && (this.options.colorScheme.lowOptionPositionLine = e.getDefaultColorSchemes()[0].lowOptionPositionLine)
    },
    t.getWidth = function() {
        return this._width
    },
    t.getHeight = function() {
        return this._height
    },
    t.getPeriod = function() {
        return this._period
    },
    t.getPosition = function() {
        return this._position
    },
    t.setPosition = function(e) {
        this._position = e
    },
    t.setPeriod = function(t) {
        if (this._period = t, 0 == this.charts.length) return void(this._position = e.QuotesArchive.getStartPeriodDate(new Date, this._period));
        for (var i = 0; i < this.charts.length; i++) this.charts[i].setPeriod(t);
        if (this.options.autoScroll) this.getToEnd();
        else for (this._position = e.QuotesArchive.getStartPeriodDate(this._position, this._period); ! this.currentDateAssigned() && this.nextDateAssigned();) this._position = this.getNextDate(this._position)
    },
    t.getMainSymbolName = function() {
        return this.charts.length > 0 ? this.charts[0].getSymbolName() : ""
    },
    t.getMainPeriod = function() {
        return this.charts.length > 0 ? e.getKeyByValue(e.allPeriods, this.charts[0].period).substr(3) : ""
    },
    t.getToStart = function() {
        for (var e = null,
        t = 1 / 0,
        i = 0; i < this.charts.length; i++) {
            e = this.charts[i];
            var s = this.charts[i].getFirstDate();
            s.key < t && (this._position = s.key, t = this._position)
        }
    },
    t.getToEnd = function() {
        for (var t = !1,
        i = 0; i < this.charts.length; i++) {
            var s = this.charts[i].getLastDate(),
            n = s.key;
            n > -1 && (!t || n > this._position) && (this._position = n, t = !0)
        }
        if (t === !0) {
            var o = e.graphicConst,
            a = this._width || this._parentNode.offsetWidth,
            r = e.UtipFunctions.div(a - o.GraphicWindowLeft - o.GraphicWindowRight, this.options.scale);
            for (this._position = e.QuotesArchive.getStartPeriodDate(this._position, this._period, !1), this.options.useOffset && (r -= Math.ceil(r * this.options.offset)), i = 1; i < r; i++) this._position = this.getPrevDate(this._position)
        }
    },
    t.goToPosition = function(t) {
        this._position = e.QuotesArchive.getStartPeriodDate(t, this._period, !1);
        var i = this.getVisibleBarsCount();
        this.options.useOffset && (i -= Math.ceil(i * this.options.offsetForAction));
        for (var s = 1; s < i; s++) this._position = this.getPrevDate(this._position);
        this.updateDataForDraw(),
        this.getVisiblePositions()[this.getVisibleBarsCount() - 1] < this.charts[0].getLastDate().key ? this.refreshOffset(0) : this.refreshOffset(this.options.offsetForAction)
    },
    t.currentDateAssigned = function() {
        for (var e = !1,
        t = 0; t < this.charts.length; t++) if (this.charts[t].getValue(this._position, "close") > -1) {
            e = !0;
            break
        }
        return e
    },
    t.nextDateAssigned = function() {
        for (var e = !1,
        t = 0; t < this.charts.length; t++) {
            var i = this.charts[t];
            if (!i.quotesData.isEmpty() && i.quotesData.getLast() > this._position) {
                e = !0;
                break
            }
        }
        return e
    },
    t.createChart = function(t, i, s) {
        var n = new e.GraphicArea(this);
        this.addGraphicArea(n);
        var o = new e.Chart(n, t, i, s);
        return this.addChart(o),
        o
    },
    t.addGraphicArea = function(e, t, i) {
        var s, n = void 0 !== t && t,
        o = void 0 === i ? -1 : i;
        s = n ? 1 / (1 + 2 * this.charts.length + this._indicators.length) : 1 / (1 + this.charts.length + this._indicators.length),
        o === -1 ? this.graphicAreas.push(e) : this.graphicAreas.splice(i, 0, e),
        e.modulus = this.graphicAreas.length * s;
        for (var a, r = 0; r < this.graphicAreas.length; r++) e != this.graphicAreas[r] && (a = this.graphicAreas[r], a.modulus = a.modulus * (1 - s) * (1 + 1 / (this.graphicAreas.length - 1)));
        this.updateGAHeights()
    },
    t.addChart = function(t) {
        if (this.charts.push(t), 1 == this.charts.length) {
            var i = t.getLastDate().key;
            this._position = i > -1 ? i: e.QuotesArchive.getStartPeriodDate(new Date, this._period);
            var s = this.getVisibleBarsCount();
            this.options.useOffset && (s -= this.options.offset);
            for (var n = 1; n < s - 1; n++) this._position = this.getPrevDate(this._position)
        }
    },
    t.getVisibleBarsCount = function() {
        return e.UtipFunctions.div(this._width - e.graphicConst.GraphicWindowLeft - e.graphicConst.GraphicWindowRight, this.options.scale)
    },
    t.getPrevDate = function(e) {
        for (var t = this.charts[0].getPrevDate(e), i = t - 1, s = this.charts.length, n = 0, o = 0;;) {
            if (t > -1 && (n++, t > i && (i = t)), o++, o == s) break;
            t = this.charts[o].getPrevDate(e)
        }
        return 0 == n ? this.shiftPositionByPeriod(this._period, e, !1) : i
    },
    t.getNextDate = function(t) {
        for (var i = this.charts[0].getNextDate(t), s = 1; s < this.charts.length && (e.valueIsEmpty(i) || !(i > -1)); ++s) i = this.charts[s].getNextDate(t);
        var n = i + 1,
        o = this.charts.length,
        a = 0;
        for (s = 0;;) {
            if (i > -1 && (a++, i < n && (n = i)), s++, s == o) break;
            i = this.charts[s].getNextDate(t)
        }
        return 0 == a ? this.shiftPositionByPeriod(this._period, t, !0) : n
    },
    t.shiftPositionByPeriod = function(t, i, s) {
        var n = 100 * e.UtipFunctions.div(t, 100),
        o = t % 100,
        a = s ? 1 : -1,
        r = new Date(i),
        l = e.UtipFunctions.getPeriodLength(t);
        switch (n) {
        case DTC_SECONDS:
        case DTC_MINUTES:
        case DTC_HOURS:
        case DTC_DAYS:
            do i += l * a,
            r.setTime(i);
            while (0 === r.getUTCDay() || 6 === r.getUTCDay());
            break;
        case DTC_WEEKS:
            i = e.UtipFunctions.getMonday(i),
            r.setDate(i.getDate() + 7 * a);
            break;
        case DTC_MONTHS:
            r.setMonth(r.getMonth() + a, 1);
            break;
        case DTC_YEARS:
            r.setFullYear(r.getFullYear() + a, 0, 1);
            break;
        case DTC_QUARTERS:
            i += l * (o * a),
            r.setTime(i)
        }
        return r.valueOf()
    },
    t.show = function() {
        var t = e.getTerminal();
        if (e.Browser.IsMobile) t.getHeaderPanel()._tradePanelBtn.setPressed(this.options.autoScroll);
        else {
            var i = e.SymbolsData.getSelectedSymbols(),
            s = t.getChartPanel();
            s._onChangePeriod(e.periodNames[e.getPeriodCode(this._period)]),
            1 == this.options.scale ? s._increaseChartBtn.setEnabled(!1) : s._increaseChartBtn.setEnabled(!0),
            32 == this.options.scale ? s._reduceChartBtn.setEnabled(!1) : s._reduceChartBtn.setEnabled(!0);
            var n = this.charts[0],
            o = n.getSymbolName(),
            a = s.getTradePanelButton();
            e.SymbolsData.isActiveSymbol(o) && !e.getTerminal().useOnlyOptions || e.OptionsSettings.isActiveOption(o) ? a.setEnabled(!0) : (a.setPressed(!1), a.setEnabled(!1), e.updateSizeTradePanels(this, !1)),
            s._onButtonBlock(0 != i.length),
            0 !== this.options.offset && this.getToEnd()
        }
        var r = t.getSwiperQuotes();
        if (r && 1 == r.getSelectedPageIndex()) {
            var l = "",
            h = e.OptionsSettings.byID(this.charts[0].getOptionSettingsId());
            h && (l = h.getName()),
            e.getOptionsSettingsTable().setActiveRowBySymbolName(this.getMainSymbolName(), l)
        }
        e.Charts2.setActiveGraphicWindows(this)
    },
    t.getFirstDate = function() {
        for (var e = 1 / 0,
        t = 0; t < this.charts.length; t++) {
            var i = this.charts[t].getFirstDate();
            i.key > -1 && e > i.key && (e = i.key)
        }
        return e
    },
    t.getLastDate = function() {
        for (var e = -1,
        t = 0; t < this.charts.length; t++) {
            var i = this.charts[t].getLastDate();
            i.key > -1 && e < i.key && (e = i.key)
        }
        return e
    },
    t.initSize = function() {
        this._width = this._parentNode.offsetWidth - this.getDifferenceSize(),
        this._height = this._parentNode.offsetHeight
    },
    t.chartHasOptionPositions = function(t) {
        var i = !1,
        s = e.TraderData._OptionPositions;
        return void 0 == s || 0 == s.length ? i: (s.forEach(function(e) {
            e.symbolName === t._symbolName && (i = !0)
        }), i)
    },
    t.getCanvas = function() {
        return this._canvas
    },
    t.getVisiblePositions = function() {
        return this._visiblePositions
    },
    t.updateVisiblePositions = function() {
        var t = [],
        i = this._position;
        t.push(i);
        var s = this._parentNode,
        n = s.clientWidth,
        o = this.graphicAreas.length,
        a = [];
        if (o > 0) for (var r = e.graphicConst,
        l = r.GraphicWindowCellWidth,
        h = r.GraphicWindowLeft,
        d = this.options.scale,
        c = e.UtipFunctions.div(n - h - r.GraphicWindowRight - e.UtipFunctions.div(d, 2) - 1 - this.getDifferenceSize(), l) + 1, u = 2 * e.UtipFunctions.div(l, d), g = 0; g < c; g += 2) {
            for (var p = e.UtipFunctions.formattedDateForChart(i, this._period), m = 0; m < u; ++m) i = this.getNextDate(i),
            t.push(i);
            a.push({
                x: g * l + e.UtipFunctions.div(d, 2) + 1 + h,
                date: p
            })
        }
        return this._visiblePositions = t,
        {
            gaDates: a
        }
    },
    t.draw = function() {
        var t = this._canvas,
        i = this.graphicAreas,
        s = this.options,
        n = s.colorScheme,
        o = t.width,
        a = t.height;
        this.bufferCanvas.width = o,
        this.bufferCanvas.height = a;
        var r = this.bufferCanvas.getContext("2d");
        this._visiblePositions = [],
        r.fillStyle = n.outerBackground,
        r.fillRect(0, 0, o, a);
        var l = this.getFirstDate(),
        h = this.getLastDate(),
        d = this._position;
        for (l > -1 && h > -1 && (d < l && (d = l), d > h && (d = h)); ! this.currentDateAssigned() && this.nextDateAssigned();) d = this.getNextDate(d);
        this._position = d;
        for (var c = this.updateVisiblePositions(), u = i.length, g = c.gaDates, p = u - 1; p > -1; --p) {
            var m = i[p],
            _ = m.top + m.heightForBorders;
            if (m.draw(r), g.length > 0) {
                r.textAlign = "left",
                r.textBaseline = "top",
                r.font = "11px Roboto",
                r.fillStyle = n.outerBackground,
                r.fillRect(0, _ - 5, this._width - e.graphicConst.GraphicWindowRight, 15),
                r.fillStyle = n.text;
                var y = g.length;
                for (j = 0; j < y; ++j) {
                    var S = g[j];
                    r.fillText(S.date, S.x + 2.5, _ + 2.5)
                }
            }
        }
        this._verticalLines.forEach(function(e) {
            e.draw(r)
        },
        this);
        var f = [];
        for (j = 0; j < u; j++) {
            var v = i[j],
            C = v.markers;
            if (!e.valueIsEmpty(C)) for (var b in C) {
                var T = C[b];
                T.selected ? f.push(T) : T.draw(r)
            }
        }
        var P = f.length;
        for (j = 0; j < P; j++) f[j].draw(r);
        t.getContext("2d").drawImage(this.bufferCanvas, 0, 0),
        this._canvas.classList.contains("cross") && this.drawCross();
        var D, I = null,
        w = null,
        M = this.charts,
        O = M.length;
        for (p = 0; p < O; p++) I = M[p],
        D = I.getGraphicArea(),
        w = I.getQuote(this.currentBarDate),
        I.drawNames(w, 0 !== this.currentBarDate && D.top < this.currentY && D.top + D.height > this.currentY && w.open > -1)
    },
    t.isShowOptionSettingsLines = function() {
        var t = e.getTerminal(),
        i = !1,
        s = !1,
        n = !1,
        o = !1;
        if (!e.Browser.IsMobile) {
            var a = t.getSwiperQuotes(),
            r = a.getSelectedPage(),
            l = r.getId(),
            h = "Quotes" !== l,
            d = this.tradePanelModule;
            d && (i = d && d.workMode === e.tradePanelConst.workMode.binary, s = d && d.showed, n = d && d.hasOrderPosition(), o = d.hasBinaryPosition())
        }
        return this.options.showOptionSettingsLine && !n && ((h || o) && i || !h && i && (s || o) && !e.investorAccount)
    },
    t._onDbClick = function(t) {
        var i = e.getMouseCoord(t);
        this.lockForCurrentObject(i.x, i.y);
        for (var s = 0; s < this._verticalLines.length; s++) if (this._verticalLines[s].isUnderCursor(i.x, i.y)) return void(this._verticalLines[s].selected = !this._verticalLines[s].selected);
        if (this.currentObject && this.currentObject instanceof e._TradeLine && !(this.currentObject instanceof e._PositionMark) && !e.investorAccount) {
            var n = this.currentObject,
            o = n.getID(),
            a = n.getOrderType(),
            r = !(a == e._TraderData.positionType.buy || a == e._TraderData.positionType.sell),
            l = r ? e.TraderData.getPendingOrderByID(o) : e.TraderData.getPositionById(o);
            if (!l) return;
            var h = e.SymbolsData.getSymbols()[l.symbolName],
            d = "Sell" == l.positionType || l.pendingOrderType == e.requestPendingOrderType.BuyLimit || l.pendingOrderType == e.requestPendingOrderType.BuyStop,
            c = n.getLineType();
            if ("low" === e.TradeLineType.optionLineHighOrLow(c) || "high" === e.TradeLineType.optionLineHighOrLow(c) || c == e.TradeLineType.openPrice && !r) return;
            return r ? e.UtipFunctions.canClosePendingOrder(l, d ? h._Ask: h._Bid, e.parseFloat(h.getStopLevel()) / h.getPrecision()) || this.currentObject.setSelected(!0) : e.UtipFunctions.canClosePosition(e.parseFloat(l.takeProfit), e.parseFloat(l.stopLoss), d ? h._Ask: h._Bid, e.parseFloat(h.getStopLevel()) / h.getPrecision()) && this.currentObject.setSelected(!0),
            this.currentObject.selected = !this.currentObject.selected,
            void(r && this.currentObject.selected === !0 && (this.selectedHorizontalLine = n))
        } ! (this.currentObject && this.currentObject instanceof e.BaseGraphicObject) || this.currentObject instanceof e.Indicator || this.currentObject instanceof e._TradeLine || this.currentObject.setSelected(!this.currentObject.selected)
    },
    t._onTouchStart = function(t) {
        if (t.preventDefault(), e._menuMasterObject.hideAll(), document.activeElement.blur(), 2 == t.targetTouches.length) {
            this.dropContextMenuTimer(),
            this.scrolling = !1;
            for (var i = 0; i < t.targetTouches.length; i++) this.touchArray.push(t.targetTouches[i])
        }
        this.isSensor = !0;
        var s = this;
        this._onMouseDown(t),
        null == this.clickTimer ? this.clickTimer = setTimeout(function() {
            s.clickTimer = null
        },
        400) : this._onDbClick(t),
        (e.Browser.IsMobile || e.Browser.IsTablet) && this.contextMenuTimers.push(setTimeout(function() {
            s._onContextMenu(t),
            s._menuIsShowed = !0
        },
        450))
    },
    t._onTouchMove = function(t) {
        if (! (this.currentObject instanceof e._TradeLine && this.clickTimer)) {
            if (2 == t.targetTouches.length && !(this.currentObject instanceof e._TradeLine)) {
                this.scrolling = !1;
                for (var i = 100,
                s = (new Date).getTime(), n = -1, o = -1, a = 7, r = 0; r < this.touchArray.length; r++) this.touchArray[r].identifier == t.targetTouches[0].identifier && (n = r),
                this.touchArray[r].identifier == t.targetTouches[1].identifier && (o = r);
                if (n >= 0 && o >= 0) {
                    var l = Math.abs(this.touchArray[n].clientX - t.targetTouches[0].clientX),
                    h = Math.abs(this.touchArray[o].clientX - t.targetTouches[1].clientX),
                    d = Math.abs(t.targetTouches[0].clientX - t.targetTouches[1].clientX),
                    c = Math.abs(this.touchArray[n].clientX - this.touchArray[o].clientX),
                    u = c - d; (s - this.lastZoomFireTime > i || 0 == this.lastZoomFireTime) && ((l >= a || h >= a) && (u < 0 ? this.zoomIn() : this.zoomOut(), this.lastZoomFireTime = s), this.touchArray[n] = t.targetTouches[0], this.touchArray[o] = t.targetTouches[1])
                }
            }
            this.dropContextMenuTimer(),
            this._onMouseMove(t),
            t.preventDefault()
        }
    },
    t._onTouchEnd = function(t) {
        2 == t.targetTouches.length && (e.saveUserSettings(), this.touchArray = new Array),
        this._menuIsShowed ? (this._menuIsShowed = !1, t.preventDefault()) : e._menuMasterObject.hideAll(),
        this.dropContextMenuTimer(),
        e.Browser.IsMobile && this._onClick(t)
    },
    t.dropContextMenuTimer = function() {
        if (this.contextMenuTimers.length > 0) for (var e = 0; e < this.contextMenuTimers.length; e++) clearTimeout(this.contextMenuTimers[e])
    },
    t._onMouseDown = function(t) {
        var i = e.getMouseCoord(t);
        if (this._mouseButtonState = t.which, this._mouseButtonState == e.MouseButtonState.middleClick && e._Terminal.getChartPanel()._onCrosshairClick(), this.lockForCurrentObject(i.x, i.y), (this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor && "default" === this.cursor) && this.currentObject && this.currentObject instanceof e.BaseGraphicObject && this.currentObject.selected) {
            if (t.ctrlKey) return this.currentObject = this.currentObject.clone(),
            this.currentObject.setSelected(!0),
            this.currentObject.centerDrag = !0,
            this.currentObject.point2Drag = !1,
            void(this.currentObject.point1Drag = !1);
            if (this.currentObject instanceof e.CustomLine) switch (this.currentObject.nearestPoint(i.x, i.y)) {
            case e.linePoint.lpStart:
                this.currentObject.point1Drag = !0;
                break;
            case e.linePoint.lpCenter:
                this.currentObject.centerDrag = !0;
                break;
            case e.linePoint.lpEnd:
                this.currentObject.point2Drag = !0
            }
            this.currentObject.used = !0
        }
        if (this._mouseButtonState == e.MouseButtonState.leftClick || this.isSensor) {
            for (var s = 0; s < this._verticalLines.length; s++) if (this._verticalLines[s].isUnderCursor(i.x, i.y) && this._verticalLines[s].selected) return;
            if (this.currentObject && this.currentObject instanceof e.BaseGraphicObject && this.currentObject.selected) return
        }
        if (this._mouseButtonState == e.MouseButtonState.rightClick && this._canvas.classList.contains("cross")) return void e._Terminal.getChartPanel()._onCrosshairClick();
        if (this.startX = this.currentX = i.x, this.startY = this.currentY = i.y, this.prevCount = 0, this._canvas.classList.contains("cross") && (this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor) && (this.crossBarDate = this.currentBarDate, this.crossX = this.currentX, this.crossY = this.currentY), "pointer" === this.cursor && (this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor)) {
            this.addingObject = !0;
            for (var s = 0; s < this.graphicAreas.length; s++) {
                var n = this.graphicAreas[s];
                n.top < i.y && n.top + n.height > i.y && (this.currentObject = new this.addingObjectClass(n, i), this.currentObject.applyDrawStyle())
            }
            e.getTerminal().saveSettings()
        } (this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor) && (i.x > this.getWidth() - e.graphicConst.GraphicWindowRight && (this._scaling = !0), "row-resize" == this._parentNode.style.cursor && i.x < this.getWidth() - e.graphicConst.GraphicWindowRight && (this.bordersChanging = !0), !this.bordersChanging && !this._scaling && i.x > e.graphicConst.GraphicWindowLeft && i.x < this.getWidth() - e.graphicConst.GraphicWindowRight && i.y > e.graphicConst.GraphicWindowTop && i.y < this.getHeight() - e.graphicConst.GraphicWindowBottom && !this._canvas.classList.contains("cross") && "pointer" !== this.cursor && (this.scrolling = !0)),
        this.realCurrentObject = this.currentObject
    },
    t._onMouseMove = function(t) {
        function i(t) {
            var i = t instanceof e._TradeLine;
            return !! i && t.selected
        } (this._mouseButtonState !== e.MouseButtonState.notClick || this.isSensor) && e._menuMasterObject.hideAll();
        var s = e.getMouseCoord(t);
        if (t.preventDefault(), this._mouseButtonState === e.MouseButtonState.notClick && !this.isSensor) {
            for (var n = !1,
            o = e.graphicConst.GraphicAreaBorder,
            a = null,
            r = null,
            l = 0; l <= this.graphicAreas.length - 2; l++) if (a = this.graphicAreas[l], r = this.graphicAreas[l + 1], a.topForBorders + a.heightForBorders - o + 10 < s.y && r.top + o > s.y) {
                n = !0,
                this._parentNode.style.cursor = "row-resize",
                this._canvas.classList.contains("cross") && this.drawCross(),
                this.graphicAreaIndexForBorderChange = l;
                break
            }
            n || (this._parentNode.style.cursor = this.cursor, this.graphicAreaIndexForBorderChange = -1, this.bordersChanging = !1)
        }
        if (this._mouseButtonState === e.MouseButtonState.leftClick && e._menuMasterObject.hideAll(), this.bordersChanging && (this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor) && (this.graphicAreaIndexForBorderChange === -1 || e.Browser.IsMobile || this.graphicAreaChangeModulus(s.y)), this._scaling && (this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor)) {
            "row-resize" !== this._parentNode.cursor && (this.lastCursor = this._parentNode.style.cursor, this._parentNode.style.cursor = "row-resize");
            var h = !0,
            d = null;
            if (s.y - this.currentY > 0) for (var l = 0; l < this.graphicAreas.length; l++) if (d = this.graphicAreas[l], d.graphicObjects[0] instanceof e.Chart && d.min - .01 < 0) {
                h = !1;
                break
            }
            h && (this.verticalScale = this.verticalScale * (1 + (s.y - this.currentY) / 50), this.verticalScale < 1 && (this.verticalScale = 1))
        }
        if (this.currentObject instanceof e._PositionMark && this.currentObject.isUnderCursor(s.x, s.y) && (this.lastCursor = this._parentNode.style.cursor, this._parentNode.style.cursor = "pointer"), this.scrolling && (this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor) && !i(this.currentObject)) {
            var c = {
                noScroll: 0,
                onTheLeft: 1,
                onTheRight: 2
            },
            u = c.noScroll;
            "col-resize" !== this._parentNode.style.cursor && (this.lastCursor = this._parentNode.style.cursor, this._parentNode.style.cursor = "col-resize");
            var g = this._position,
            p = Math.floor((s.x - this.startX) / this.options.scale),
            m = p - this.prevCount,
            _ = Math.abs(m);
            if (_ >= 1) {
                if (this.prevCount = p, m > 0) {
                    for (var l = 0; l < _; l++) g = this.getPrevDate(g);
                    u = c.onTheLeft
                } else if (m < 0) {
                    for (var l = 0; l < _; l++) g = this.getNextDate(g);
                    u = c.onTheRight
                }
                this._position = g,
                this.updateOffsetAfterMouseMove(),
                u === c.onTheLeft && this.requestDataForCharts()
            }
        }
        if ((this._mouseButtonState === e.MouseButtonState.leftClick || this.isSensor) && ("default" == this.cursor || "pointer" == this.cursor) && this.currentObject) {
            var y = !1,
            S = 0,
            f = 0;
            this.currentObject instanceof e.CustomLine && this.currentObject.selected ? (this.currentObject.centerDrag && (S = s.x - this.currentObject.centerPoint.x, f = s.y - this.currentObject.centerPoint.y, this.currentObject.pointMove(S, f, e.linePoint.lpCenter), y = !0), this.currentObject.point1Drag && (S = s.x - this.currentObject.point1.x, f = s.y - this.currentObject.point1.y, this.currentObject.pointMove(S, f, e.linePoint.lpStart), y = !0), this.currentObject.point2Drag && (S = s.x - this.currentObject.point2.x, f = s.y - this.currentObject.point2.y, this.currentObject.pointMove(S, f, e.linePoint.lpEnd), y = !0)) : !(this.currentObject instanceof e.CustomLine || this.currentObject instanceof e.BaseGraphicObject) || !this.currentObject.selected || this.currentObject instanceof e._PositionMark || (this.currentObject.pointMove(s.x, s.y, e.linePoint.lpCenter), y = !0),
            y && e.getTerminal().saveSettings()
        }
        var v = e.graphicConst.GraphicWindowLeft;
        this.currentBarDate = this._position;
        for (var C = this.getVisibleBarsCount(), l = 0; l < C && !(v < this.currentX && v + this.options.scale + 1 > this.currentX); l++) this.currentBarDate = this.getNextDate(this.currentBarDate),
        v += this.options.scale;
        v > this.getWidth() - e.graphicConst.GraphicWindowRight && 0 !== this.currentBarDate && (this.currentBarDate = 0),
        this.currentX = s.x,
        this.currentY = s.y,
        this._mouseButtonState == e.MouseButtonState.leftClick && this._canvas.classList.contains("cross") && (this.cursorGuiding = !0); (this.cursorGuiding || this._canvas.classList.contains("cross")) && this.drawCross()
    },
    t.updateDataForDraw = function() {
        this.updateVisiblePositions(),
        this.charts.forEach(function(e) {
            e.updateVisibleCandles(),
            e.updateCurrentBarX()
        })
    },
    t.updateOffsetAfterMouseMove = function() {
        var t = this.charts[0].getCurrentBarX(),
        i = this._width - e.graphicConst.GraphicWindowLeft - e.graphicConst.GraphicWindowRight,
        s = i - t,
        n = e.UtipFunctions.div(s, this.options.scale),
        o = this.getVisibleBarsCount(),
        a = Math.ceil(n / (o / 100)) / 100;
        this.refreshOffset(a)
    },
    t.getPosMarkByID = function(t) {
        for (var i = this.graphicAreas[0].graphicObjects, s = i.length, n = null, o = 0; o < s; o++) if (i[o] instanceof e._PositionMark && i[o]._positionId === t) {
            n = i[o];
            break
        }
        return n
    },
    t._onConfirmChangeTradeLine = function(t) {
        var i, s = t.data,
        n = s.getID();
        s.reqIsSent = !1;
        var o, a, r, l = s.getLineType(),
        h = s.getOrderType(),
        d = !(h == e._TraderData.positionType.buy || h == e._TraderData.positionType.sell),
        c = d ? e.TraderData.getPendingOrderByID(n) : e.TraderData.getPositionById(n);
        if (l == e.TradeLineType.takeProfit ? o = s.getValue().toString() : l == e.TradeLineType.stopLoss ? a = s.getValue().toString() : r = s.getValue().toString(), d) {
            var u;
            switch (h) {
            case e._TraderData.pendingOrderType[100]:
            case e._TraderData.pendingOrderType[102]:
                u = e._TraderData.positionType.buy,
                h = h == e._TraderData.pendingOrderType[100] ? e.requestPendingOrderType.BuyLimit: e.requestPendingOrderType.BuyStop;
                break;
            case e._TraderData.pendingOrderType[103]:
            case e._TraderData.pendingOrderType[101]:
                u = e._TraderData.positionType.sell,
                h = h == e._TraderData.pendingOrderType[103] ? e.requestPendingOrderType.SellStop: e.requestPendingOrderType.SellLimit
            }
            switch (i = {
                id: c.id,
                symbolName: c.symbolName,
                traderID: e.TraderData._TraderInfo.id,
                orderType: h,
                volume: e.parseFloat(c.volume),
                operationType: e.requestPositionType[u],
                price: r ? e.parseFloat(r) : e.parseFloat(c.openPrice),
                takeProfit: o ? o: c.takeProfit,
                stopLoss: a ? a: c.stopLoss
            },
            e.getTerminal().platformType) {
            case e.PlatformTypes.ptUTIP:
                e.requester.changePendingOrder(i);
                break;
            case e.PlatformTypes.ptMT:
                params.operationType = e.TraderData.convertOrderTypeToMTFormat(h),
                e.requester.changeMTPendingOrder(i)
            }
        } else switch (i = {
            traderID: e.TraderData._TraderInfo.id,
            positionID: c.id,
            takeProfit: o ? o: c.takeProfit,
            stopLoss: a ? a: c.stopLoss
        },
        e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.changePosition(i);
            break;
        case e.PlatformTypes.ptMT:
            e.requester.changeMTPosition(i)
        }
    },
    t._onNotConfirmChangeTradeLine = function(t) {
        var i = t.data,
        s = i.getID();
        i.reqIsSent = !1;
        var n = i.getLineType(),
        o = i.getOrderType(),
        a = !(o == e._TraderData.positionType.buy || o == e._TraderData.positionType.sell),
        r = a ? e.TraderData.getPendingOrderByID(s) : e.TraderData.getPositionById(s);
        if (n == e.TradeLineType.takeProfit) i.setTakeProfit(e.parseFloat(r.takeProfit));
        else if (n == e.TradeLineType.stopLoss) i.setStopLoss(e.parseFloat(r.stopLoss));
        else {
            i.setOpenPrice(e.parseFloat(r.openPrice));
            var l = e.getPositionMarkByPositionId(r.id + "_" + e.UtipFunctions.getPositionPostfixType(r));
            l && l.updatePrice(r.openPrice)
        }
    },
    t._onMouseUp = function(t) {
        var i = !0;
        if (this.currentObject && this.currentObject instanceof e.BaseGraphicObject) {
            if (this.currentObject.centerDrag = !1, this.currentObject instanceof e._TradeLine && this.currentObject.selected) {
                this.currentObject.used = !1;
                var s = this.currentObject.getID(),
                n = this.currentObject.getOrderType(),
                o = n == e._TraderData.positionType.buy || n == e._TraderData.positionType.sell ? e.TraderData.getPositionById(s) : e.TraderData.getPendingOrderByID(s),
                a = e.SymbolsData.getSymbols()[o.symbolName],
                r = this.currentObject.getLineType() == e.TradeLineType.takeProfit ? e.parseFloat(o.takeProfit) : this.currentObject.getLineType() == e.TradeLineType.stopLoss ? e.parseFloat(o.stopLoss) : e.parseFloat(o.openPrice),
                l = this.currentObject.getValue();
                if (l != r) {
                    i = !1;
                    var h = e.DialogConfirm({
                        Width: 220,
                        Confirm: e.Delegate(this, this._onConfirmChangeTradeLine),
                        NotConfirm: e.Delegate(this, this._onNotConfirmChangeTradeLine)
                    }),
                    d = Math.round(Math.log(a.getPrecision()) / Math.log(10)),
                    c = e.LangManager.isReversedLanguage(),
                    u = e.LangManager.getStringByKey("cWCTModifyOrderPrice") || "Modify order price to";
                    if (c) {
                        var g = h._DomNode.querySelector(".WTConfirmMessage");
                        g.style.width = "210px",
                        u += " " + l.toFixed(d) + "؟"
                    } else u += " " + l.toFixed(d) + "?";
                    this.currentObject.reqIsSent = !0,
                    h.show(u, this.currentObject)
                }
            }
            this.currentObject instanceof e.CustomLine && (this.currentObject.point1Drag = !1, this.currentObject.point2Drag = !1)
        }
        this.addingObject && (this.currentObject instanceof e.CustomLine && this.currentObject.pointsEqual(this.currentObject.point1, this.currentObject.point2) && this.currentObject.getGraphicArea().deleteGraphicObject(this.currentObject), this.cursor = this.lastCursor, this.selectedMenuItem.setChecked(!1), this._canvas.classList.contains("cross") && (e.getTerminal().getChartPanel().getCrosshairButton().setPressed(!0), this.setCrosshair(!0))),
        this.addingObject = !1,
        this.currentObject = null,
        this.bordersChanging = !1,
        (this.scrolling || this._scaling) && (this._parentNode.style.cursor = this.lastCursor),
        this._parentNode.style.cursor = this.cursor,
        this.scrolling = !1,
        this._scaling = !1,
        this.cursorGuiding = !1,
        this._mouseButtonState = e.MouseButtonState.notClick,
        0 === this.options.offset ? (this.setAutoScroll(!1), this._barAtHideArea = !0) : this.options.userTurnOffAutoScroll === !0 ? this.setAutoScroll(!1) : this._barAtHideArea === !0 && (this._barAtHideArea = !1, this.setAutoScroll(!0)),
        e.Browser.IsTablet && i && this.changeMarkerStatus(t),
        e.getTerminal().saveSettings()
    },
    t.clearGACachedBackground = function() {
        for (var e = 0,
        t = this.graphicAreas.length; e < t; e++) this.graphicAreas[e].buffer = void 0
    },
    t._onContextMenu = function(t) {
        function i(t, i, s) {
            var n = i.x,
            o = i.y;
            t instanceof e.Chart ? e.getChartMenu(s).updateAndShowMenu(s, n, o) : t instanceof e.Indicator ? e.getIndicatorSettingsMenu().updateAndShowMenu(t, n, o) : !(t instanceof e.BaseGraphicObject) || t instanceof e._TradeLine || t instanceof e._PositionMark || e.getLineSettingsMenu(s).updateAndShowMenu(t, n, o)
        }
        var s = e.Browser,
        n = s.IsMobile,
        o = s.IsTablet,
        a = this.realCurrentObject,
        r = t.targetTouches,
        l = (r || [null])[0];
        if (n && !e.investorAccount) {
            t.preventDefault(),
            t.stopPropagation();
            var h = this.getMainSymbolName(),
            d = "index" === e.SymbolsData.getSymbols()[h].getCalculationTypeName(),
            c = e.OptionsSettings.getOptionSettingsBySymbolName(h);
            d && !c || !l || (a instanceof e.Chart || a instanceof e.Indicator && a instanceof e.BaseGraphicObject && !(a instanceof e._TradeLine)) && e.getMobileMenuTapToGraphic().show(l.clientX, l.clientY)
        } else o ? i(a, {
            x: l.clientX,
            y: l.clientY
        },
        this) : n || i(a, {
            x: t.clientX,
            y: t.clientY
        },
        this)
    },
    t._onDragOver = function(e) {
        e.preventDefault()
    },
    t._onDrop = function(t) {
        function i() {
            var t = e.getTerminal().getSwiperQuotes(),
            i = t.getSelectedPage(),
            s = e.tradePanelConst,
            n = s.workMode,
            o = "Quotes" == i.getId() ? n.market: n.binary,
            r = e.valueIsEmpty(h) || o !== n.binary ? s.toolType[n.market].buySell: h,
            d = {
                workMode: o,
                toolType: r,
                symbol: e.SymbolsData.getSymbols()[a],
                binaryOption: e.OptionsSettings.byID(l),
                chart: u
            };
            this.tradePanelModule.changeData(d),
            e.updateSizeTradePanels(this, this.tradePanelModule.showed)
        }
        function s(t) {
            var s = t.tableRow,
            n = t.chart;
            if (e.valueIsEmpty(s) || "" === s) {
                i.apply(this, []),
                n.optionPosition = null;
                var o = e.getPositionMarkByPositionId(this.options._lastSelectedMark);
                o && o.setSelected(!1),
                this.options._lastSelectedMark = null,
                this.recalcDependentIndicators(n),
                this.show()
            } else {
                var a = e.getTableTrade(),
                r = a.getRowById(s);
                r ? r.setSelected(!0) : i.apply(this, []),
                this.show()
            }
            e.getTerminal().saveSettings()
        }
        t.stopPropagation(),
        t.preventDefault();
        var n = t.dataTransfer,
        o = {
            optionSettingsId: parseInt(n.getData("optionSettingsId")),
            optionSettingsType: parseInt(n.getData("optionSettingsType"))
        },
        a = t.dataTransfer.getData("text"),
        r = e.OptionsSettings.searchOptionSettings(a),
        l = e.valueIsEmpty(o.optionSettingsId) || isNaN(o.optionSettingsId) ? r ? r.getID() : null: o.optionSettingsId,
        h = e.valueIsEmpty(o.optionSettingsType) || isNaN(o.optionSettingsType) ? r ? r.getType() : null: o.optionSettingsType;
        if (e.SymbolsData.getSymbols()[a]) {
            var d = e.cloneObject(e.UserSettings.WindowsTemplates || e.getDefaultWindowsTemplate());
            e.UserSettings.WindowsTemplates || (e.UserSettings.WindowsTemplates = d);
            var c = e.getMouseCoord(t);
            this.lockForCurrentObject(c.x, c.y);
            var u = this.currentObject;
            if (! (this.currentObject instanceof e.Chart)) {
                if (! (this.currentObject instanceof e.VolumeIndicator)) return;
                u = this.currentObject.getChart()
            }
            e.valueIsEmpty(l) || e.valueIsEmpty(h) || (e.OptionsSettings.setSelectedOptionSettingsID(l), e.OptionsSettings.setSelectedOptionType(h)),
            u.setOptionSettingsId(l),
            u.setOptionSettingsType(h),
            u.setSymbolName(a),
            u.setPeriod(this.getPeriod()),
            u.resetMinMax();
            var g = e.periodNames[e.getPeriodCode(this.getPeriod())];
            if (0 == this.charts.indexOf(u)) if (e.getTerminal().showChartsAs == e.chartsMode.tabs) e.getTerminal().getSwiperCharts().getSelectedPage().setTitle('<div class="Symbol">' + a + '</div> <div class="Period">' + g + "</div>"),
            e.getTerminal().getSwiperCharts().getSelectedPage().setData(a);
            else if (e.getTerminal().showChartsAs == e.chartsMode.windows) for (var p = 0; p < e.getTerminal().chartDialogs.length; p++) if (e.getTerminal().chartDialogs[p].getDomNode().querySelector("canvas") === this._canvas) {
                e.getTerminal().chartDialogs[p].setTitle('<div class="Symbol">' + a + '</div> <div class="Period">' + g + "</div>");
                var m = e.getTerminal().getSwiperCharts().getTabButtonByKey(this.getContainerID());
                m.setText('<div class="Symbol">' + a + '</div> <div class="Period">' + g + "</div>");
                break
            }
            e.eventsQueue.push({
                type: "DROP_POSITION_TO_GRAPHIC_WINDOW",
                fn: s.bind(this, {
                    tableRow: t.dataTransfer.getData("tableRow"),
                    chart: u
                })
            })
        }
    },
    t.lockForCurrentObject = function(t, i) {
        if (this.currentObject = null, !(t < e.graphicConst.GraphicWindowLeft || t > this.getWidth() - e.graphicConst.GraphicWindowRight)) {
            for (var s = 0; s < this._verticalLines.length; s++) if (this._verticalLines[s].isUnderCursor(t, i)) return void(this.currentObject = this._verticalLines[s]);
            for (var n = !1,
            o = null,
            s = 0; s < this.graphicAreas.length; s++) if (o = this.graphicAreas[s], i > o.top && i < o.top + o.height) {
                n = !0;
                break
            }
            if (n) {
                this.currentObject = o.graphicObjects[0];
                for (var s = 1; s < o.graphicObjects.length; s++) if (o.graphicObjects[s].isUnderCursor(t, i)) {
                    this.currentObject = o.graphicObjects[s];
                    break
                }
            }
        }
    },
    t.zoomOut = function() {
        1 != this.options.scale && (this.options.scale = e.UtipFunctions.div(this.options.scale, 2), e.Browser.IsMobile || e._Terminal.getChartPanel()._reduceChartBtn.setEnabled(!0), e.UserSettings.WindowsTemplates.scale = this.options.scale, this.updateDataForDraw(), this.updateOffsetAfterMouseMove(), e.getTerminal().saveSettings(), 0 === this.options.offset ? this.setAutoScroll(!1) : this.setAutoScroll(!0), 1 != this.options.scale || e.Browser.IsMobile || e._Terminal.getChartPanel()._increaseChartBtn.setEnabled(!1))
    },
    t.zoomIn = function() {
        32 != this.options.scale && (this.options.scale *= 2, e.Browser.IsMobile || e._Terminal.getChartPanel()._increaseChartBtn.setEnabled(!0), e.UserSettings.WindowsTemplates.scale = this.options.scale, this.updateDataForDraw(), this.updateOffsetAfterMouseMove(), e.getTerminal().saveSettings(), 0 === this.options.offset ? this.setAutoScroll(!1) : this.setAutoScroll(!0), 32 != this.options.scale || e.Browser.IsMobile || e._Terminal.getChartPanel()._reduceChartBtn.setEnabled(!1))
    },
    t.setAutoScroll = function(t) {
        this.options.autoScroll = t,
        e.UserSettings.WindowsTemplates.autoScroll = t
    },
    t.refreshTradePanelData = function(t) {
        if (t) {
            this.tradePanelData = t;
            var i = e.getTerminal();
            i.saveSettings(!1)
        }
    },
    t.refreshOffset = function(t) {
        e.valueIsEmpty(t) || t < 0 || (this.options.offset = t, e.UserSettings.WindowsTemplates.offset = t, e.UserSettings.WindowsTemplates.offsetForAction = this.options.offsetForAction)
    },
    t.getSettingsForSave = function() {
        for (var t = [], i = null, s = null, n = [], o = 0; o < this._verticalLines.length; o++) {
            var a = this._verticalLines[o];
            n.push({
                parameters: a.getParameters(),
                style: a.drawStyle
            })
        }
        for (var o = 0; o < this.graphicAreas.length; o++) {
            var r = {};
            s = this.graphicAreas[o],
            r.modulus = s.modulus;
            for (var l = [], h = 0; h < s.graphicObjects.length; h++) i = s.graphicObjects[h],
            !("getSettingsForSave" in i) || i instanceof e._TradeLine || i instanceof e._PositionMark || l.push(i.getSettingsForSave());
            r.objects = l,
            r.levels = s.getLevels(),
            r.levelsStyle = s.getLevelsStyle(),
            r.showNames = s.eyeObject.active,
            t.push(r)
        }
        var d = this.getMainSymbolName();
        return {
            symbolName: d,
            graphicAreas: t,
            position: this._position,
            options: this.options,
            active: this.isActive,
            verticalLines: n,
            tradePanelData: this.tradePanelData,
            containerID: this._containerID
        }
    },
    t.setSelectedPositionMark = function(t, i) {
        function s(t, i) {
            var s = t.getPosition();
            if (!n(s)) {
                var a = s.openDate; ! o.charts[0].positionIsVisible(a) && t.isOutOfGraphicArea() && (o.setAutoScroll(!1), o.goToPosition( + e.UtipFunctions.getUTCDate(a)))
            }
        }
        var n = e.valueIsEmpty,
        o = this;
        if (!n(t)) {
            for (var a = 0,
            r = this.graphicAreas,
            l = r.length; a < l; ++a) {
                var h = r[a],
                d = h.markers;
                if (d) for (var c in d) if (d.hasOwnProperty(c)) {
                    var u = d[c];
                    c === t ? (u.setSelected(!0), i && u.updateTradePanelState(), this.options._lastSelectedMark = t, s(u)) : u.setSelected(!1)
                }
            }
            e.getTerminal().saveSettings(!1)
        }
    },
    t.loadGraphicAreaSettings = function(t, i) {
        i.forEach(function(i) {
            var s = null,
            n = null;
            if ("chart" == i.className) {
                var o = this.createChart(i.symbolName);
                o._graphicArea.modulus = t.modulus,
                o.loadSettings(i)
            } else {
                var a = e.getLineObjectNamesArray(),
                r = a.indexOf(i.className) !== -1;
                "volume" != i.className && r !== !0 && (s = new e[i.className](null), s.getDrawInExistsGraphicArea() ? n = this.graphicAreas[i.sources[0].source.graphicAreaIndex] : (n = new e.GraphicArea(this), this.addGraphicArea(n), n.modulus = t.modulus, n.setLevels(t.levels), n.setLevelsStyle(t.levelsStyle)), s.initGraphicArea(n), s.setParameters(i.parameters), this._loadedIndicators.push({
                    indicator: s,
                    settings: i
                }))
            }
        },
        this)
    },
    t.loadGraphicObjects = function(t, i) {
        var s = null,
        n = null;
        i.forEach(function(i) {
            switch (i.className) {
            case "THorizontalLine":
                s = new e.HorizontalLine(t, {
                    x: 0,
                    y: 0
                }),
                s.setParameters(i.parameters),
                s.drawStyle = i.style;
                break;
            case "TTrendLine":
                s = new e.TrendLine(t, {
                    x: 0,
                    y: 0
                }),
                s.setParameters(i.parameters),
                s.drawStyle = i.style,
                s.setStateAfterLoading();
                break;
            case "TFiboLines":
                s = new e.FiboLines(t, {
                    x: 0,
                    y: 0
                }),
                s.setParameters(i.parameters),
                s.drawStyle = i.style,
                s.drawFiboStyle = i.fiboStyle,
                s.setStateAfterLoading();
                break;
            case "MovingAverage":
                n = new e.MovingAverage(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "TAngleTrendLine":
                s = new e.AngleTrendLine(t, {
                    x: 0,
                    y: 0
                }),
                s.setParameters(i.parameters),
                s.drawStyle = i.style,
                s.setStateAfterLoading();
                break;
            case "AdaptiveMovingAverage":
                n = new e.AdaptiveMovingAverage(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "Alligator":
                n = new e.Alligator(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "BollingerBands":
                n = new e.BollingerBands(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "IchimokuKinkoHyo":
                n = new e.IchimokuKinkoHyo(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "Fractals":
                n = new e.Fractals(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "ParabolicSAR":
                n = new e.ParabolicSAR(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "Envelopes":
                n = new e.Envelopes(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "PriceChannel":
                n = new e.PriceChannel(t),
                n.setParameters(i.parameters),
                n.loadSettings(i);
                break;
            case "PivotPoints":
                n = new e.PivotPoints(t),
                n.setParameters(i.parameters),
                n.loadSettings(i)
            }
        },
        this)
    },
    t.loadSettings = function(t) {
        if (t) {
            if (this._position = t.position || this._position, this.isActive = t.active || this.isActive, this._loadedIndicators = [], t.graphicAreas) {
                this.graphicAreas[0].graphicObjects[0].loadSettings(t.graphicAreas[0].objects[0]),
                this.loadGraphicObjects(this.graphicAreas[0], t.graphicAreas[0].objects),
                t.graphicAreas[0].levels && (this.graphicAreas[0].setLevels(t.graphicAreas[0].levels), this.graphicAreas[0].setLevelsStyle(t.graphicAreas[0].levelsStyle)),
                this.graphicAreas[0].setShowNames(t.graphicAreas[0].showNames);
                for (var i = 1; i < t.graphicAreas.length; i++) this.loadGraphicAreaSettings(t.graphicAreas[i], t.graphicAreas[i].objects),
                this.loadGraphicObjects(this.graphicAreas[i], t.graphicAreas[i].objects),
                t.graphicAreas[i].levels && (this.graphicAreas[i].setLevels(t.graphicAreas[i].levels), this.graphicAreas[i].setLevelsStyle(t.graphicAreas[i].levelsStyle), this.graphicAreas[i].setShowNames(t.graphicAreas[i].showNames))
            }
            if (this._loadedIndicators.forEach(function(e) {
                e.indicator.loadSettings(e.settings)
            }), t.graphicAreas) for (var i = 0; i < t.graphicAreas.length; i++) this.graphicAreas[i].modulus = t.graphicAreas[i].modulus;
            var s = t.verticalLines || [];
            s.forEach(function(t) {
                var i = new e.VerticalLine(this.graphicAreas[0], {
                    x: 0,
                    y: 0
                });
                i.setParameters(t.parameters),
                i.drawStyle = t.style,
                i.setSelected(!1)
            },
            this)
        }
    },
    t.drawCross = function() {
        for (var t = !1,
        i = null,
        s = 13,
        n = e.graphicConst.GraphicWindowLeft,
        o = e.graphicConst.GraphicWindowRight,
        a = e.graphicConst.GraphicWindowTop,
        r = e.graphicConst.GraphicWindowBottom,
        l = this.cursorGuiding ? this.crossX: this.currentX, h = this.cursorGuiding ? this.crossY: this.currentY, d = 0; d < this.graphicAreas.length; d++) if (i = this.graphicAreas[d], this._canvas.classList.contains("cross") && !this.bordersChanging && l > n && l < this.getWidth() - o && h > i.top && h < i.top + i.heightForBorders) {
            t = !0;
            break
        }
        if (t) {
            var c = document.createElement("canvas"),
            u = c.getContext("2d");
            c.width = this._canvas.width,
            c.height = this._canvas.height;
            var g = this.options.colorScheme.crossLine || "#ffffff";
            u.lineWidth = 1,
            this.cursorGuiding && (s = 6),
            l > n + s && (u.strokeStyle = this.options.colorScheme.crossLine, u.drawLine(l - s + .5, h + .5, n + .5, h + .5)),
            l < this.getWidth() - o - s && (u.strokeStyle = this.options.colorScheme.crossLine, u.drawLine(l + s + .5, h + .5, n + this.getWidth() - o + 5.5, h + .5)),
            h > a + s && (u.strokeStyle = this.options.colorScheme.crossLine, u.drawLine(l + .5, h - s + .5, l + .5, a + .5)),
            h < a + this.getHeight() - r - s && (u.strokeStyle = this.options.colorScheme.crossLine, u.drawLine(l + .5, h + s + .5, l + .5, a + this.getHeight() - r + .5 - 11));
            var p = l - 15,
            m = this.getHeight() - r - 1;
            u.font.fontsize(7),
            u.font.fontcolor(g),
            u.font = "8pt Roboto";
            var _ = this.cursorGuiding ? e.UtipFunctions.formattedDateForChart(this.crossBarDate, this._period) : e.UtipFunctions.formattedDateForChart(this.currentBarDate, this._period),
            y = u.measureText(_).width + 4,
            S = 17;
            u.fillStyle = this.options.colorScheme.crossLine,
            u.fillRect(p - 14.5, m - .5, y + 2.5, S + 1),
            u.strokeStyle = this.options.colorScheme.crossLine,
            u.strokeRect(p - 14.5, m - .5, y + 3, S + 1),
            u.fillStyle = this.options.colorScheme.cross,
            u.textBaseline = "top",
            u.fillText(_, p - 11, m + 2);
            var f = i.getStrValueByCoord(h);
            if (p = n + this.getWidth() - o + 4, m = h - 6, y = u.measureText(f).width + 20, S = 17, u.textBaseline = "top", u.fillStyle = this.options.colorScheme.crossLine, u.fillRect(p - 1.5, m - 3.5, y + 2.5, S + 1.5), u.strokeStyle = this.options.colorScheme.crossLine, u.strokeRect(p - 1.5, m - 3.5, y + 3, S + 2), u.fillStyle = this.options.colorScheme.cross, u.fillText(f, p + 2, m - 1), this.cursorGuiding && this.currentX > n && this.currentX < this.getWidth() - o && this.currentY > i.top && this.currentY < i.top + i.height && this.currentBarDate > 0) {
                var v = 0,
                C = this.crossBarDate;
                if (C > this.currentBarDate) for (; C !== this.currentBarDate;) C = this.getPrevDate(C),
                v++;
                else for (; C <= this.currentBarDate;) C = this.getNextDate(C),
                v++;
                if (u.strokeStyle = this.options.colorScheme.cross, u.drawLine(l, h, this.currentX, this.currentY), i.graphicObjects[0] instanceof e.Chart) {
                    var b = e.SymbolsData.getSymbols()[i.graphicObjects[0].getSymbolName()]._Digits,
                    f = parseInt(Math.round(Math.abs(i.getValueByCoord(this.currentY) - i.getValueByCoord(this.crossY)) * Math.pow(10, b))) + "";
                    f = v + "/" + f + "/" + i.getStrValueByCoord(this.currentY);
                    var T = e.hexToRgb(this.options.colorScheme.cross);
                    T = e.rgbToRgba(T.r, T.g, T.b, .75),
                    u.fillStyle = T,
                    y = u.measureText(f).width + 16,
                    S = 20,
                    u.fillRect(this.currentX + 12, this.currentY - 10, y, S),
                    u.fillStyle = this.options.colorScheme.innerBackground,
                    u.fillText(f, this.currentX + 20, this.currentY - 7)
                }
            }
            this._canvas.getContext("2d").drawImage(c, 0, 0)
        }
    },
    t.clearGACachedBackgroud = function() {
        this.graphicAreas.forEach(function(e) {
            e._backgroudPicture = void 0
        })
    },
    t.setCrosshair = function(e) {
        var t = this._canvas;
        t && t.tagName && (e === !0 ? t.classList.add("cross") : t.classList.remove("cross"))
    },
    t.getCursorIsCrosshair = function() {
        return ! (!this._canvas || !this._canvas.tagName) && this._canvas.classList.contains("cross")
    },
    t._onMouseWheel = function(t) {
        var i = t.originalEvent ? t.originalEvent.ctrlKey: t.ctrlKey,
        s = 100,
        n = (new Date).getTime();
        if (e.Browser.IsMobile || (i && t.deltaY > 0 && (n - this.lastWheelFireTime > s || void 0 == this.lastWheelFireTime) && (e._Terminal.getChartPanel()._increaseChartBtn.isEnabled() && e._Terminal.getChartPanel()._onIncreaseClick(), this.lastWheelFireTime = n), i && t.deltaY < 0 && (n - this.lastWheelFireTime > s || void 0 == this.lastWheelFireTime) && (e._Terminal.getChartPanel()._reduceChartBtn.isEnabled() && e._Terminal.getChartPanel()._onReduceClick(), this.lastWheelFireTime = n)), !i && t.deltaY > 0) for (var o = e.UtipFunctions.div(this.getVisibleBarsCount(), 8), a = 1; a < o; a++) this._position = this._visiblePositions[a];
        if (!i && t.deltaY < 0) {
            for (var o = e.UtipFunctions.div(this.getVisibleBarsCount(), 8), a = 1; a < o; a++) this._position = this.getPrevDate(this._position);
            this.requestDataForCharts()
        }
        this.updateOffsetAfterMouseMove(),
        e.saveUserSettings(),
        t.preventDefault()
    },
    t._onClick = function(t) {
        var i = e.getChartMenu();
        i._IsOpen === !0 ? i.hide() : this.changeMarkerStatus(t)
    },
    t.changeMarkerStatus = function(t) {
        var i = this.graphicAreas,
        s = i.length,
        n = e.getMouseCoord(t),
        o = !1,
        a = e.getPositionMarkByPositionId(this.options._lastSelectedMark);
        if (! (a && a.selected && a.isUnderCursor(n.x, n.y))) for (var r = 0; r < s; r++) {
            var l = i[r],
            h = l.markers;
            if (l.eyeObject.isUnderCursor(n.x, n.y)) l.eyeObject.updateActive();
            else if (!e.valueIsEmpty(h)) {
                for (var d = Object.keys(h), c = d.length, u = null, g = null, p = c - 1; p > -1; --p) {
                    var m = d[p],
                    _ = h[m];
                    o || _.isUnderCursor(n.x, n.y) !== !0 || _.getMarkerId() === this.options._lastSelectedMark ? _.getMarkerId() !== this.options._lastSelectedMark ? _.setSelected(!1) : g = _: (u = _, o = !o)
                }
                if (null !== u && (null !== g && g.setSelected(!1), this.options._lastSelectedMark = u.getMarkerId(), u.setSelected(!0), l.graphicObjects[0].optionPosition = null, !e.Browser.IsMobile)) {
                    var y, S = e.getTableTrade(),
                    f = u.getPosition();
                    y = u.isOrderPosition() ? S.getRowById(f.id + "_" + f.positionType) : u.isPendingOrderPosition() ? S.getRowById(f.id + "_" + f.pendingOrderType) : S.getRowById(f.id + "_" + f.direction),
                    e.valueIsEmpty(y) || y.getId() === e.getTableTrade().getSelectedRow().getId() || y.setSelected(!0),
                    u.updateTradePanelState()
                }
            }
        }
    },
    t.removeGraphicArea = function(e) {
        var t = e.modulus,
        i = null,
        s = this.graphicAreas.indexOf(e);
        e.graphicObjects = [],
        this.graphicAreas.splice(s, 1);
        for (var n = 0; n < this.graphicAreas.length; n++) i = this.graphicAreas[n],
        i.modulus = i.modulus * (1 + t / (this.graphicAreas.length + 1 - t)) * (1 - 1 / (this.graphicAreas.length + 1))
    },
    t.graphicAreaChangeModulus = function(t) {
        var i = this.graphicAreas[this.graphicAreaIndexForBorderChange],
        s = this.graphicAreas[this.graphicAreaIndexForBorderChange + 1],
        n = e.graphicConst.GraphicAreaBorder + 80;
        if (! (t < i.top + n || t > s.top + s.height - n)) {
            var o = i.modulus + s.modulus;
            i.modulus = i.modulus * (t - 1 - i.top) / i.height,
            s.modulus = o - i.modulus,
            this.updateGAHeights()
        }
    },
    t.getContainerHeight = function() {
        return e.Browser.IsMobile ? e.getTerminal().getChartContainerHeight() : this._parentNode.clientHeight
    },
    t.updateGAHeights = function() {
        var t = this.graphicAreas,
        s = this.graphicAreas.length,
        n = e.graphicConst,
        o = this.getContainerHeight(),
        a = n.GraphicWindowBottom,
        r = this._canvas.height;
        for (i = 0; i < s; i++) {
            var l = t[i],
            h = n.GraphicWindowTop,
            d = n.GraphicAreaBorder;
            if (0 == i) l.setTop(h);
            else {
                var c = t[i - 1];
                l.setTop(c.top + c.height + d)
            }
            l.top > o - a && l.setTop(o - a),
            i == s - 1 ? l.setHeight(o - l.top) : l.setHeight(parseInt(l.modulus / s * (r - h - (s - 1) * d)))
        }
    },
    t.deleteChart = function(t) {
        var i, s = e.getTerminal();
        i = t ? t: this.realCurrentObject;
        for (var n = this.graphicAreas,
        o = 0; o < n.length; o++) {
            var a = e.activeChart.graphicAreas[o].graphicObjects[0];
            if (a instanceof e.Indicator) for (var r = a.getSources(), l = 0; l < r.length; l++) if (r[l].object === i) {
                var h = r[l].object._graphicArea;
                this.removeGraphicArea(h)
            }
        }
        var d = i.getGraphicArea();
        i.isVolumeShowed() && i.showVolume();
        var c = d.getGraphicWindows(),
        u = this.charts.indexOf(i);
        u > -1 && (e.Socket.unRegister(i), this.charts.splice(u, 1));
        var g = e.getPositionMarkByPositionId(c.options._lastSelectedMark);
        g && d === g.getGraphicArea() && g.setSelected(!1),
        d.graphicObjects.splice(d.graphicObjects.indexOf(i), 1),
        this.removeGraphicArea(d),
        this.currentObject = null;
        var p = '<div class="Symbol">' + this.graphicAreas[0].graphicObjects[0].getSymbolName() + '</div> <div class="Period">' + e.periodNames[e.getPeriodCode(this._period)] + "</div>",
        m = s.getSwiperCharts(),
        _ = m.getSelectedPage();
        if (s.showChartsAs == e.chartsMode.tabs) _.setTitle(p),
        _.setData(this.graphicAreas[0].graphicObjects[0].getSymbolName());
        else for (var y = 0; y < s.chartDialogs.length; y++) {
            var S = s.chartDialogs[y];
            if (S.getDomNode().querySelector("canvas") === this._canvas) {
                S.setTitle(p);
                var f = m.getTabButtonByKey(S.ownGraphicWindow.getContainerID());
                f.setText(p);
                break
            }
        }
        var v = this.tradePanelModule;
        if (i = c.charts[0], !v.isOurChart(i)) {
            var C = i.getOptionSettingsId(),
            b = i.getOptionSettingsType(),
            T = e.tradePanelConst,
            P = T.workMode,
            D = e.OptionsSettings.byID(C),
            I = "Quotes" == s.getSwiperQuotes().getSelectedPage().getId() || (D ? P.binary: P.market),
            w = e.valueIsEmpty(b) || I !== P.binary ? T.toolType[P.market].buySell: b,
            M = {
                workMode: I,
                toolType: w,
                symbol: e.SymbolsData.getSymbols()[this.getMainSymbolName()],
                binaryOption: D,
                chart: this.charts[0]
            };
            v.changeData(M)
        }
        this.updateGAHeights()
    },
    t.containsChart = function(e) {
        for (var t = 0; t < this.charts.length; t++) if (this.charts[t].getSymbolName() == e) return ! 0;
        return ! 1
    },
    t.DateToX = function(t, i) {
        var s = this._position,
        n = 1;
        if (s < t) for (var o = 0; s < t && (n < i || !i);) s = this._visiblePositions[o + 1],
        o++,
        n += this.options.scale;
        if (s > t) for (; s > t && n > 0;) s = this.getPrevDate(s),
        n -= this.options.scale;
        return n + e.graphicConst.GraphicWindowLeft + e.UtipFunctions.div(this.options.scale, 2)
    },
    t.XToDate = function(t) {
        for (var i = this._position,
        s = 1 + e.graphicConst.GraphicWindowLeft; s < t;) i = this.getNextDate(i),
        s += this.options.scale;
        for (; s > t;) i = this.getPrevDate(i),
        s -= this.options.scale;
        return i
    },
    t.addVerticalLine = function(e) {
        this._verticalLines.push(e)
    },
    t.addIndicator = function(e) {
        this._indicators.push(e)
    },
    t.deleteVerticalLine = function(e) {
        this._verticalLines.splice(this._verticalLines.indexOf(e), 1)
    },
    t.recalcDependentIndicators = function(e, t) {
        t = t || !1,
        this._indicators.forEach(function(i) {
            for (var s = 0; s < i.getSourceNumber(); s++) {
                var n = i.getSource(s);
                n.object == e && (t ? i.recalcOnQuote() : (i.setSource(), i.calculate()), this.recalcDependentIndicators(i, t))
            }
        },
        this)
    },
    t.recalcAllDependentIndicators = function() {
        for (var e = 0,
        t = this.charts.length; e < t; e++) this.recalcDependentIndicators(this.charts[e])
    },
    t.getIndicators = function() {
        return this._indicators
    },
    t.getIndicator = function(e) {
        return this._indicators[e]
    },
    t.getVerticalLines = function() {
        return this._verticalLines
    },
    t.deleteIndicator = function(e) {
        if (!e.getDrawInExistsGraphicArea()) {
            for (var t = e.getGraphicArea(), i = t.graphicObjects, s = i.length; 0 !== s;) t.deleteGraphicObject(i[0]),
            s--;
            this.removeGraphicArea(t)
        }
        this._indicators.splice(this._indicators.indexOf(e), 1),
        this.updateGAHeights()
    },
    t.getChartsBySymbolName = function(e) {
        for (var t = [], i = 0; i < this.charts.length; i++) this.charts[i].getSymbolName() == e && t.push(this.charts[i]);
        return t
    },
    t.deActivateMarks = function(t) {
        var i = this.graphicAreas,
        s = this.tradePanelModule;
        for (var n in i) if (i.hasOwnProperty(n)) {
            var o = i[n].markers;
            for (var a in o) o.hasOwnProperty(a) && o[a].setSelected(!1)
        }
        for (var r = this.charts,
        l = r.length,
        h = 0; h < l; ++h) r[h].clearBinaryPosition();
        if (this.options._lastSelectedMark = null, t !== !0 && !e.Browser.IsMobile) try {
            s.restoreBaseState(!0)
        } catch(e) {
            console.error("trade panel: error while updating. " + e.message)
        }
    },
    t.setTimeframe = function(t) {
        var i, s;
        6e4 === t && (i = "PC_S5", s = e.periodNames.PC_S5),
        12e4 !== t && 18e4 !== t || (i = "PC_S10", s = e.periodNames.PC_S10),
        24e4 !== t && 3e5 !== t || (i = "PC_S15", s = e.periodNames.PC_S15),
        t >= 36e4 && t <= 6e5 && (i = "PC_S30", s = e.periodNames.PC_S30),
        t >= 66e4 && t <= 12e5 && (i = "PC_M1", s = e.periodNames.PC_M1),
        t >= 126e4 && t <= 36e5 && (i = "PC_M5", s = e.periodNames.PC_M5),
        t >= 72e5 && t <= 108e5 && (i = "PC_M10", s = e.periodNames.PC_M10),
        144e5 !== t && 18e6 !== t || (i = "PC_M15", s = e.periodNames.PC_M15),
        t >= 216e5 && t <= 36e6 && (i = "PC_M30", s = e.periodNames.PC_M30),
        t >= 396e5 && t <= 72e6 && (i = "PC_H1", s = e.periodNames.PC_H1),
        t >= 756e5 && t <= 864e5 && (i = "PC_H2", s = e.periodNames.PC_H2),
        1728e5 === t && (i = "PC_H3", s = e.periodNames.PC_H3),
        2592e5 === t && (i = "PC_H4", s = e.periodNames.PC_H4),
        t >= 3456e5 && t <= 432e6 && (i = "PC_H6", s = e.periodNames.PC_H6),
        5184e5 === t && (i = "PC_H8", s = e.periodNames.PC_H8),
        t >= 6048e5 && t <= 864e6 && (i = "PC_H12", s = e.periodNames.PC_H12),
        t >= 9504e5 && t <= 1728e6 && (i = "PC_D1", s = e.periodNames.PC_D1),
        t >= 18144e5 && t <= 10368e6 && (i = "PC_W1", s = e.periodNames.PC_W1),
        t >= 1296e7 && t <= 31536e6 && (i = "PC_MN", s = e.periodNames.PC_MN);
        var n = e.getTerminal(),
        o = n.getSwiperCharts();
        if (i) {
            var a = '<div class="Symbol">' + this.getMainSymbolName() + '</div> <div class="Period">' + s + "</div>",
            r = this.getContainerID();
            if (this.setPeriod(e.allPeriods[i]), n.getChartPanel()._onChangePeriod(i), n.showChartsAs == e.chartsMode.tabs) {
                var l = o.getPageByKey(r);
                l && l.setTitle(a)
            } else if (e._Terminal.showChartsAs == e.chartsMode.windows) {
                var h = n.getDialogChartById(r);
                h && h.setTitle(a)
            }
            e.UserSettings.Terminal.LastPeriod = e.allPeriods[i],
            this.options.period = this.getPeriod(),
            e.UserSettings.WindowsTemplates.period = this.getPeriod();
            for (var d = 0; d < this.charts.length; d++) this.recalcDependentIndicators(this.charts[d])
        }
        0 === this.options.offset && (this.options.offset = this.options.offsetForAction, this.options.useOffset = !0, this.setAutoScroll(!this.userTurnOffAutoScroll)),
        this.getToEnd()
    },
    t.requestDataForCharts = function() {
        for (var e = this.shiftPositionByPeriod.bind(this), t = this._position, i = this._period, s = this.charts, n = s.length, o = 0; o < n; ++o) {
            var a = s[o],
            r = a.quotesData,
            l = r.getFirst().key;
            if (t <= l) {
                var h = Math.abs(t - e(i, t, !1)) * this.getVisibleBarsCount(),
                d = null != l ? Math.abs(l - t) : null;
                if (d < h && !r.loading) {
                    var c = l - 4 * h;
                    c < 0 ? r.getArchiveByDateExcludeTimezone(0, e(i, this.getFirstDate().key, !1), !1, !0) : r.getArchiveByDateExcludeTimezone(c, l + 1, !0, !0)
                }
            }
        }
    },
    t = null,
    e
}),
define("charts", ["listener", "bzzaFunctions", "graphicWindow", "../../settings/defaultGraphicWindowSettings"],
function(e) {
    function t(t, i) {
        function s(e, t) {
            var i = t.swiperCharts,
            s = i.getPageByKey(e),
            n = i.getTabButtons().indexOf(s._TabButton);
            i.removePage(n),
            i._TabButtons.splice(n, 1)
        }
        function n(e, t) {
            var i = a.getDialogChartById(e);
            i.hide()
        }
        var o, a = e.getTerminal(),
        r = e.Browser.IsMobile,
        l = a.showChartsAs === e.chartsMode.tabs,
        h = {};
        if (r) o = function(e, t) {};
        else if (l) {
            var d = a.getSwiperCharts(),
            c = d.getSelectedPage();
            h.swiperCharts = d,
            h.selectedPage = c,
            o = s
        } else o = n;
        t.forEach(function(e, t, s) {
            var n = e.charts,
            a = n.length,
            r = n.filter(function(e, t, s) {
                return e.getSymbolName() === i
            });
            a === r.length ? o(e.getContainerID(), h) : r.forEach(function(t, i, s) {
                e.deleteChart(t)
            })
        })
    }
    function i(e, i, s, n, o) {
        if ("changed" !== o || 1 !== parseInt(i.isUseSetting)) {
            var a = e.getGraphicWindowsBySymbolName(s).filter(function(e, t, s) {
                var o = e.tradePanelModule;
                return o && o[n](i) === !1
            });
            t(a, s)
        }
    }
    e.Charts = function() {
        this._graphicWindows = [],
        e.activeChart = null,
        this.updateGraphicWindowsPause = !0,
        e.Charts.base.constructor.apply(this, arguments)
    },
    e.initClass(e.Charts, e.Listener);
    var s = e.Charts.prototype;
    return s.graphicWindowsChangeThemeNeeded = function(t) {
        for (var i = e.getLightColorSchemes(), s = e.getDarkColorSchemes(), n = {
            result: !1,
            array: []
        },
        o = e.Charts2.getAllGraphicWindows(), a = o.length, r = 0; r < a; ++r) {
            var l = o[r],
            h = l.options.colorScheme,
            d = function(t, i, s) {
                for (var n = t.length,
                o = 0; o < n; ++o) {
                    if (e.equalsObjects(t[o], s)) return {
                        window: l,
                        theme: i[o],
                        class: "light",
                        needed: !1
                    };
                    if (e.equalsObjects(i[o], s)) return {
                        window: l,
                        theme: t[o],
                        class: "dark",
                        needed: !1
                    }
                }
                return {
                    window: l,
                    theme: null,
                    class: "custom",
                    needed: !1
                }
            }.apply(this, [i, s, h]),
            c = d.class;
            "beige_color_scheme" === t && "light" === c || "black_color_scheme" === t && "dark" === c || "custom" === c || (n.result = !0, d.needed = !0),
            delete d.class,
            n.array.push(d)
        }
        return n
    },
    s.changeGraphicsColorScheme = function(t) {
        var i = this.graphicWindowsChangeThemeNeeded(t);
        if (i.result === !0) {
            var s = new e.DialogConfirm({
                YesButtonKey: "CWCtYes",
                YesButtonText: "Yes",
                NoButtonKey: "CWCtNO",
                NoButtonText: "No",
                Width: 220,
                Top: (window.innerHeight - 256) / 2,
                Confirm: e.Delegate(this, this._onConfirmChangeColorScheme)
            }),
            n = "";
            switch (t) {
            case "beige_color_scheme":
                n = e.LangManager.getStringByKey("cMFGWChangeOnBeige") || "Change the graphic color scheme to the light?";
                break;
            case "black_color_scheme":
            default:
                n = e.LangManager.getStringByKey("cMFGWChangeOnDark") || "Change the graphic color scheme to the dark?"
            }
            s.show(n, {
                array: i.array
            })
        }
    },
    s._onConfirmChangeColorScheme = function(t) {
        for (var i = t.data,
        s = i.array,
        n = s.length,
        o = 0; o < n; ++o) {
            var a = s[o],
            r = a.window;
            a.needed === !0 && (r.options.colorScheme = a.theme, r.clearGACachedBackground())
        }
        n > 0 && (e.UserSettings.WindowsTemplates.colorScheme = e.activeChart.options.colorScheme, e.saveUserSettings())
    },
    s.addGraphicWindow = function(t, i, s, n, o, a) {
        if (e.SymbolsData.getSymbols()[n]) {
            var r = new e.GraphicWindow(arguments);
            return this._graphicWindows.push(r),
            r.createChart(n, o, a),
            r.show(),
            e.activeChart = r,
            e.Browser.IsMobile || e._Terminal.getChartPanel().showOrHideGraphicButtons(),
            e.getTerminal().configureChartContainerBackground(),
            r
        }
    },
    s.updateTradePanelTG = function() {
        for (var e = this._graphicWindows.length,
        t = 0; t < e; t++) this._graphicWindows[t].updateTradePanelTG()
    },
    s.updateTradePanelOS = function() {
        for (var e = this._graphicWindows.length,
        t = 0; t < e; t++) this._graphicWindows[t].updateTradePanelOS()
    },
    s.saveOpenedCharts = function() {
        var t = this._graphicWindows.length;
        if (t) {
            e.UserSettings.Terminal.OpenedCharts = [];
            for (var i = 0; i < t; i++) e.UserSettings.Terminal.OpenedCharts.push(this._graphicWindows[i].getSettingsForSave())
        }
    },
    s.removeClosedCharts = function() {
        var t = this._graphicWindows.length;
        e.UserSettings.Terminal.OpenedCharts = [];
        for (var i = 0; i < t; i++) e.UserSettings.Terminal.OpenedCharts.push(this._graphicWindows[i].getSettingsForSave())
    },
    s.redraw = function(t, i, s, n) {
        for (var o = this._graphicWindows,
        a = o.length,
        r = 0; r < a; r++) {
            for (var l = this._graphicWindows[r], h = l.charts, d = h.length, c = !1, u = 0; u < d; u++) {
                var g = h[u];
                if (g.getSymbolName() == t && e.getBasePeriod(l.getPeriod()) == i) {
                    c = !0;
                    break
                }
            }
            if (c) {
                for (var u = 0; u < d; u++) {
                    var g = h[u];
                    l.recalcDependentIndicators(g, s),
                    g.isNeedMoveBar !== !0 || s || (g.isNeedMoveBar = !1, l.getToEnd())
                }
                l != e.activeChart && e.getTerminal().showChartsAs != e.chartsMode.windows || l.options.autoScroll === !0 && l.options.userTurnOffAutoScroll === !1 && l.getToEnd(),
                n && l.requestDataForCharts()
            }
        }
    },
    s.updateMarksAndTradePanels = function() {
        for (var t, i = this._graphicWindows,
        s = i.length,
        n = null,
        o = null,
        a = 0; a < s; a++) {
            n = i[a],
            t = n.options._lastSelectedMark;
            for (var r = n.graphicAreas,
            l = r.length,
            h = 0; h < l; ++h) o = r[h],
            e.valueIsEmpty(t) || e.valueIsEmpty(o.markers) || e.valueIsEmpty(o.markers[t]) || o.markers[t].updateTradePanelState()
        }
    },
    s.redrawActiveChart = function(t) {
        null !== e.activeChart && e.activeChart.show()
    },
    s.getGraphicWindowByContainerID = function(e) {
        for (var t = null,
        i = 0; i < this._graphicWindows.length; i++) {
            var s = this._graphicWindows[i];
            if (s._containerID === e) {
                t = s;
                break
            }
        }
        return t
    },
    s.getAllGraphicWindows = function() {
        return this._graphicWindows
    },
    s.setActiveGraphicWindows = function(e) {
        this._graphicWindows.forEach(function(e) {
            e.isActive = !1
        }),
        e.isActive = !0,
        this.saveOpenedCharts()
    },
    s.deleteGraphicWindows = function(t, i) {
        for (var s = e.getTerminal(), n = null, o = -1, a = this._graphicWindows.length, r = null, l = 0; l < a; l++) {
            if (n = this._graphicWindows[l], n.getContainerID() === t) {
                for (var h = n.charts,
                d = h.length,
                c = 0; c < d; c++) r = h[c],
                e.Socket.unRegister(r);
                o = l;
                break
            }
            o = t
        }
        if (o != -1 && !e.Browser.IsMobile) {
            var u = this._graphicWindows[o];
            u.removeTradePanelModule()
        }
        if (this._graphicWindows.splice(o, 1), i !== !1 && this.removeClosedCharts(), 0 == this._graphicWindows.length && !e.Browser.IsMobile) {
            var g = s.getChartPanel();
            g && g.showOrHideGraphicButtons()
        }
        s.configureChartContainerBackground()
    },
    s.getChartDialogById = function(t) {
        for (var i = e.getTerminal().chartDialogs, s = i.length - 1; s >= 0; s--) if (i[s].getId() === t) return i[s];
        return null
    },
    s.getActiveChartDialogIndex = function() {
        for (var t = e.getTerminal().chartDialogs, i = t.length - 1; i >= 0; i--) if (t[i] == e.activeChartDialog) return i;
        return null
    },
    s.closeAllChartDialogs = function() {
        for (var t = e.getTerminal().chartDialogs, i = t.length - 1; i >= 0; i--) t[i].hide()
    },
    s.closeAllGraphicWindows = function() {
        for (var t, i = this.getAllGraphicWindows() || []; t = i[0];) this.deleteGraphicWindows(t.getContainerID(), !1);
        if (!e.Browser.IsMobile) {
            var s = e.getTerminal();
            if (s) {
                var n = s.getSwiperCharts();
                n && n.removeAllPage()
            }
        }
    },
    s.closeChartsByDisabledSymbol = function() {
        if (!e.Browser.IsMobile) for (var t = e.SymbolsData,
        i = t.getSymbols(), s = Object.keys(i), n = s.map(function(e) {
            return i[e]
        }), o = n.filter(function(e) {
            return ! e.allowTrade()
        }), a = o.length, r = 0; r < a; ++r) this.closeGraphicWindowsBySymbolName(o[r].getSymbolName())
    },
    s.closeGraphicWindowsBySymbolName = function(e) {
        t(this.getGraphicWindowsBySymbolName(e), e)
    },
    s.unRegisterAllCharts = function() {
        for (var t = 0; t < e.Socket.getFollowers().length;) e.Socket.getFollowers()[t] instanceof e.Chart ? e.Socket.unRegister(e.Socket.getFollowers()[t]) : t++
    },
    s.reconnectCharts = function() {
        for (var e = 0; e < this._graphicWindows.length; e++) for (var t = 0; t < this._graphicWindows[e].charts.length; t++) {
            var i = this._graphicWindows[e].charts[t];
            i.quotesData.candles || i.setPeriod(i.getGraphicArea().getGraphicWindows().getPeriod())
        }
    },
    s.isOpenedChart = function(e) {
        for (var t = null,
        i = 0; i < this._graphicWindows.length; i++) {
            var s = this._graphicWindows[i].getMainSymbolName();
            if (s === e) {
                t = this._graphicWindows[i];
                break
            }
        }
        return t
    },
    s.getFirstChartWindowBySymbolName = function(e) {
        for (var t = 0; t < this._graphicWindows.length; t++) {
            var i = this._graphicWindows[t];
            if (i.charts[0].getSymbolName() == e) return {
                chart: i.charts[0],
                graphicWindow: i
            }
        }
        return null
    },
    s.getGraphicWindowsBySymbolName = function(e) {
        return this._graphicWindows.filter(function(t) {
            return t.charts.some(function(t) {
                return t.getSymbolName() == e
            })
        })
    },
    s.getChartsBySymbolName = function(e) {
        for (var t = [], i = 0; i < this._graphicWindows.length; i++) for (var s = this._graphicWindows[i], n = 0; n < s.charts.length; n++) {
            var o = s.charts[n];
            o.getSymbolName() == e && t.push(o)
        }
        return t
    },
    s.updateAllTradeLines = function() {
        for (var e = this.getAllGraphicWindows(), t = e.length, i = 0; i < t; i++) for (var s = e[i].graphicAreas, n = s.length, o = 0; o < n; o++) s[o].checkOrdersLine(!0)
    },
    s.replaceClosedChartDialog = function(t) {
        if (!t.getVisibility()) return t.layoutForbidden = !0,
        e.getTerminal().getSwiperCharts().removeTabButton(t.getId()),
        e.getTerminal().configureChartContainerBackground(),
        !1;
        var i = this.getLastInvisibleChartDialog();
        if (e.UserSettings.ChartDialogsLayout && "" != e.UserSettings.ChartDialogsLayout && i) {
            var s = i.getDomNode().style,
            n = t.getDomNode().style;
            s.top = n.top,
            s.left = n.left,
            s.width = n.width,
            s.height = n.height,
            i.setVisibility(!0),
            i.updateContent()
        }
        return e.getTerminal().getSwiperCharts().removeTabButton(t.getId()),
        e.getTerminal().configureChartContainerBackground(),
        !!i
    },
    s.closeTabInWindowsMode = function(e) {
        e.stopPropagation(),
        e.Id && this.getChartDialogById(e.Id).hide()
    },
    s.getTabContextMenu = function(t) {
        return new e.Menu({
            CheckedType: "NoChecked",
            WithBlock: !1,
            Items: [{
                Text: "Close",
                Key: "cCDClose"
            }],
            ItemClick: e.Delegate(this, this.closeTabInWindowsMode, {
                Id: t
            })
        })
    },
    s.onTabClick = function(t) {
        if (1 != t.Sender.getPressed()) {
            var i = t.Sender;
            if ("" === e.UserSettings.ChartDialogsLayout) e.Charts2.getChartDialogById(i.getKey()).setActive();
            else {
                var s = e.activeChartDialog,
                n = s.getDomNode().style,
                o = e.Charts2.getChartDialogById(i.getKey()),
                a = o.getDomNode().style,
                r = ["top", "left", "width", "height"];
                r.forEach(function(e) {
                    if (n[e] && a[e]) {
                        var t = [n[e], a[e]];
                        n[e] = t[1],
                        a[e] = t[0]
                    }
                }),
                o.setVisibility(!0),
                o.setActive(),
                o.updateContent(),
                s.setVisibility(!1),
                s.updateContent(),
                e.Charts2.highlightSelectedTabs(),
                e.saveChartWindows(e._Terminal.chartDialogs)
            }
        }
    },
    s.isLayoutOverflowed = function() {
        if (e.UserSettings.ChartDialogsLayout && "layout01" != e.UserSettings.ChartDialogsLayout) return e.getTerminal().chartDialogs.length > e.layoutsCapacities[e.UserSettings.ChartDialogsLayout]
    },
    s.getChartDialogInFirstPosition = function() {
        for (var t = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect(), i = e.getTerminal().getSwiperCharts().getTabsBlock().clientHeight, s = t.top + i, n = e.getTerminal().chartDialogs, o = n.length, a = 0; a < o; a++) if (parseInt(n[a].getDomNode().style.top) == s && parseInt(n[a].getDomNode().style.left) == t.left) return n[a];
        return null
    },
    s.getLastInvisibleChartDialog = function() {
        for (var t = e.getTerminal().chartDialogs, i = t.length - 1; i >= 0; i--) if (t[i].getVisibility() === !1) return t[i];
        return null
    },
    s.highlightSelectedTabs = function() {
        if (e.UserSettings.ChartDialogsLayout && "layout01" != e.UserSettings.ChartDialogsLayout) for (var t = e.getTerminal().chartDialogs, i = t.length, s = 0; s < i; s++) {
            var n = e.getTerminal().getSwiperCharts().getTabButtonByKey(t[s].getId());
            n && (1 == t[s].getVisibility() ? n.setPressed(!0) : n.setPressed(!1));
        }
    },
    s.deselectAllTabs = function() {
        for (var t = e.getTerminal().getSwiperChartsButtons(), i = t.length, s = 0; s < i; s++) t[s].setPressed(!1)
    },
    s.connectTabButtonForChartDialog = function(t) {
        t.Click = e.Delegate(t, this.onTabClick),
        t.DblClick = e.Delegate(e.getTerminal(), e.getTerminal().dialogsToTabs, {
            layoutForbidden: !0
        }),
        t.setContextMenu(this.getTabContextMenu(t.getKey()));
        var i = e.htmlToDOM('<div class="TabCross"></div>');
        i.addEventListener("click",
        function(t) {
            t.Id = this.getKey(),
            e.Charts2.closeTabInWindowsMode(t)
        }.bind(t), !1),
        i.addEventListener("dblclick",
        function(e) {
            e.stopPropagation()
        }.bind(this)),
        t.getDomNode().appendChild(i)
    },
    s.addTabButtonForChartDialog = function(t) {
        var i = e.getTerminal().getSwiperCharts().getTabsBlock(),
        s = new e.Button({
            ParentNode: i,
            Text: '<div class="Symbol">' + t.getMainSymbolName() + '</div> <div class="Period">' + t.getMainPeriod() + "</div>",
            Key: t.getContainerID()
        });
        e.getTerminal().getSwiperCharts().addTabButton(s),
        this.connectTabButtonForChartDialog(s)
    },
    s.generateTabsForChartDialogs = function() {
        for (var t = this.getAllGraphicWindows(), i = t.length, s = e.getTerminal().getSwiperCharts().getTabsBlock(), n = 0; n < i; n++) {
            var o = new e.Button({
                ParentNode: s,
                Text: '<div class="Symbol">' + t[n].getMainSymbolName() + '</div> <div class="Period">' + t[n].getMainPeriod() + "</div>",
                Key: t[n].getContainerID()
            });
            e.getTerminal().getSwiperCharts().addTabButton(o)
        }
    },
    s.connectTabsToChartDialogs = function() {
        for (var t = e.getTerminal().getSwiperChartsButtons(), i = 0; i < t.length; i++) this.connectTabButtonForChartDialog(t[i]);
        this.highlightSelectedTabs()
    },
    s.binaryOptionChanged = function(e) {
        i(this, e, e.symbolName, "s_binaryOptionChanged", "changed")
    },
    s.binaryOptionDeleted = function(e) {
        for (var t = this,
        s = this._graphicWindows,
        n = [], o = s.length, a = 0; a < o; ++a) for (var r = s[a].charts, l = r.length, h = 0; h < l; ++h) {
            var d = r[h].getSymbolName();
            n.indexOf(d) === -1 && n.push(d)
        }
        n.forEach(function(s, n, o) {
            i(t, e, s, "changeBinaryOption", "deleted")
        })
    },
    s.offBlockTradePanelsAfterOpenPosition = function(e) {
        this._graphicWindows.forEach(function(t, i, s) {
            var n = t.tradePanelModule;
            if (n) {
                var o = n.requestData;
                if (o.requestToOpenPositionIsSent && o.type === e) {
                    var a = n.getPosition();
                    o.requestToOpenPositionIsSent = !1,
                    o.type = null,
                    n.requestData = o,
                    a && (n.restoreBaseState(), n.loadPosition(a))
                }
            }
        })
    },
    s.offBlockTradePanelsAfterSocketMessage = function() {
        e.Browser.IsMobile ? e._tradePanel && e._tradePanel.block(!1) : this._graphicWindows.forEach(function(e, t, i) {
            var s = e.tradePanelModule;
            s && s.block(!1)
        })
    },
    s.drawGraphicWindows = function() {
        if (this.updateGraphicWindowsPause !== !0 && e.activeChart && e.getTerminal()) if (e.getTerminal().showChartsAs === e.chartsMode.tabs || e.Browser.IsMobile) e.activeChart.init(),
        e.activeChart.draw();
        else for (var t = e.getTerminal().chartDialogs, i = t.length - 1; i >= 0; i--) t[i].getVisibility() === !0 && (t[i].ownGraphicWindow.init(), t[i].ownGraphicWindow.draw())
    },
    s = null,
    e.Charts2 = new e.Charts,
    e
}),
define("dialogChart", ["dialog", "base", "charts"],
function(e) {
    e.DialogChart = function(t) {
        this._Data = null,
        this._Id = "",
        this._SymbolName = "",
        this._Title = "",
        this._Settings = {},
        this._zIndex = 3,
        this._Visibility = !0,
        this._optionSettingsId = t.OptionSettingsId,
        this._optionSettingsType = t.OptionSettingsType,
        this._defineEvents(["Closed", "HeaderDblClick"]),
        e.DialogChart.base.constructor.apply(this, arguments)
    },
    e.initClass(e.DialogChart, e.Dialog);
    var t = e.DialogChart.prototype;
    return t._render = function() {
        this._ImageList = e.MainImageList,
        this._ImageListRow = 0,
        this._ImageListCol = 15,
        this._Sizedble = !0,
        this._WithBlock = !1,
        e.DialogChart.base._render.apply(this, arguments),
        this._topNode = this._topNode || this._DomNode.querySelector(".WTDialogTopBlock"),
        this._Visibility ? this._DomNode.style.zIndex = this._zIndex: this._DomNode.style.zIndex = this._zIndex - 1,
        e.addEvent(this._topNode, "dblclick", this._onHeaderDblClick.bind(this)),
        this.VerticalResizeDialog = e.Delegate(this, this._onVerticalResizeDialog),
        this.HorizontalResizeDialog = e.Delegate(this, this._onHorizontalResizeDialog),
        this.DialogMove = e.Delegate(this, this.dropChartsLayout),
        this.ManipulationStop = e.Delegate(this, this._onManipulationStop),
        this.addCSSClass("DialogChart")
    },
    t.getOptionSettingsId = function() {
        return this._optionSettingsId
    },
    t.setOptionSettingsId = function(e) { (e || 0 == e) && (this._optionSettingsId = e)
    },
    t.getOptionSettingsType = function() {
        return this._optionSettingsType
    },
    t.setOptionSettingsType = function(e) { (e || 0 == e) && (this._optionSettingsType = e)
    },
    t.show = function() {
        e.DialogChart.base.show.apply(this, arguments),
        this.setContent('<canvas id="' + this._Id + '"></canvas>');
        var t;
        t = null !== this._Settings ? this._Settings.options: e.cloneObject(e.UserSettings.WindowsTemplates || e.getDefaultWindowsTemplate()),
        t.offsetForAction = t.offsetForAction ? t.offsetForAction: t.offset,
        this.ownGraphicWindow = e.Charts2.addGraphicWindow(this._Id, this.getContentNode(), t, this._SymbolName, this._optionSettingsId, this._optionSettingsType),
        null != this._Settings && this.ownGraphicWindow.loadSettings(this._Settings)
    },
    t.hide = function() {
        this._hideDialog()
    },
    t._onVerticalResizeDialog = function(t) {
        var i = t.heightIncrement,
        s = this._DomNode,
        n = this._DomNode.getElementsByClassName("WTDialogContent")[0];
        Math.min(s.offsetHeight, n.offsetHeight) + i <= 0 || (s.style.height = s.offsetHeight + i - 8 + "px", n.style.height = parseInt(s.style.height) - 22 + "px");
        var o = this.ownGraphicWindow;
        e.updateSizeTradePanels(o, o.tradePanelModule.showed),
        this.dropChartsLayout()
    },
    t._onHorizontalResizeDialog = function(t) {
        0 !== this.ownGraphicWindow.options.offset && this.ownGraphicWindow.getToEnd();
        var i = this.ownGraphicWindow;
        e.updateSizeTradePanels(i, i.tradePanelModule.showed),
        this.dropChartsLayout()
    },
    t.updateContent = function() {
        var e = this._DomNode.getElementsByClassName("WTDialogContent")[0];
        e.style.height = parseInt(this._DomNode.style.height) - 22 + "px"
    },
    t._onManipulationStop = function(t) {
        e.getTerminal().saveSettings()
    },
    t.getId = function() {
        return this._Id
    },
    t.getSymbolName = function() {
        return this._SymbolName
    },
    t.setActive = function() {
        if (e.activeChart !== this.ownGraphicWindow || e.activeChartDialog !== this || parseInt(this._DomNode.style.zIndex) !== this._zIndex + 1) {
            var t = e.activeChart;
            e.activeChart = this.ownGraphicWindow;
            var i = e.activeChart.tradePanelModule,
            s = !!i && i.showed;
            if (e.getTerminal().getChartPanel().getTradePanelButton().setPressed(s), e.activeChartDialog = this, this.setVisibility(!0), e.Charts2.setActiveGraphicWindows(this.ownGraphicWindow), this.ownGraphicWindow.show(), parseInt(this._DomNode.style.zIndex) < this._zIndex + 1 && (this._DomNode.style.zIndex = this._zIndex + 1, this.addCSSClass("DialogChartColorSelected"), e.getTerminal().getSwiperChartsButtons().length > 0 && !e.UserSettings.ChartDialogsLayout)) {
                e.Charts2.deselectAllTabs();
                var n = e.getTerminal().getSwiperCharts().getTabButtonByKey(this.getId());
                n && n.setPressed(!0)
            }
            for (var o = e.getTerminal().chartDialogs.length, a = 0; a < o; a++) {
                var r = e.getTerminal().chartDialogs[a];
                r !== this && (parseInt(r._DomNode.style.zIndex) > this._zIndex ? r._DomNode.style.zIndex = parseInt(r._DomNode.style.zIndex) - 1 : r._Visibility && (r._DomNode.style.zIndex = this._zIndex), r.removeCSSClass("DialogChartColorSelected"))
            }
            t && t.setCrosshair(!1);
            var l, h = e.activeChart.options._lastSelectedMark,
            d = e.getPositionMarkByPositionId(h),
            c = e.getTableTrade();
            if (!e.valueIsEmpty(d)) {
                var u = d.getPosition();
                l = d.isOrderPosition() ? c.getRowById(u.id + "_" + u.positionType) : d.isPendingOrderPosition() ? c.getRowById(u.id + "_" + u.pendingOrderType) : c.getRowById(u.id + "_" + u.direction),
                e.valueIsEmpty(l) || l.getId() === e.getTableTrade().getSelectedRow().getId() || l.setSelected(!0)
            }
            e.getTerminal().getChartPanel().updateCrosshairAndButton(!1)
        }
    },
    t.dropChartsLayout = function() {
        if (e.UserSettings.ChartDialogsLayout && "layout01" != e.UserSettings.ChartDialogsLayout) {
            e.UserSettings.ChartDialogsLayout = "";
            for (var t = e.getTerminal().chartDialogs.length, i = 0; i < t; i++) {
                var s = e.getTerminal().chartDialogs[i];
                s != e.activeChartDialog && (s._DomNode.style.zIndex = this._zIndex),
                s.setVisibility(!0)
            }
            e.Charts2.deselectAllTabs(),
            e.getTerminal().getSwiperCharts().getTabButtonByKey(e.activeChartDialog.getId()).setPressed(!0)
        }
    },
    t.setVisibility = function(t) {
        1 == t ? this != e.activeChartDialog && (this._DomNode.style.zIndex = this._zIndex) : this._DomNode.style.zIndex = this._zIndex - 1,
        this._Visibility = t
    },
    t.getVisibility = function() {
        return this._Visibility
    },
    t._onClick = function(t) {
        e.DialogChart.base._onClick.apply(this, arguments)
    },
    t._onMouseDown = function(t) {
        this.setActive(),
        e.DialogChart.base._onMouseDown.apply(this, arguments)
    },
    t._onHeaderDblClick = function(e) {
        this.HeaderDblClick.fire({
            event: e,
            sender: this
        })
    },
    t.getSettingsForSave = function() {
        var e = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect();
        return {
            Id: this._Id,
            Top: parseInt(this._DomNode.style.top) - e.top,
            Left: parseInt(this._DomNode.style.left) - e.left,
            Width: parseInt(this._DomNode.style.width),
            Height: parseInt(this._DomNode.style.height),
            Visibility: this._Visibility
        }
    },
    t = null,
    e
}),
define("swiper", ["button"],
function(e) {
    e.Swiper = function(t) {
        this._Pages = [],
        this._TabMode = "Compact",
        this._ScrollableTabs = !1,
        this._SelectedPage = 0,
        this._Edited = !1,
        this._Template = e._Templates.Swiper,
        this._TabButtons = [],
        this._PreSwiperContentText = ".WTPreSwiperContent",
        this._SwiperContentText = ".WTSwiperContent",
        this._movies = {
            right: 0,
            left: 1
        },
        this._moved = this._movies.left,
        this._busy = !1,
        this._Animation = e.SwiperAnimationConst.None,
        this._NeedSmooth = !1,
        this._FireStack = [],
        this._contextMenuTimer = null,
        this._defineEvents(["ChangeSelectedPage", "ChangeSize", "ClosePage", "AddPage", "TabDblClick"]),
        e.Swiper.base.constructor.apply(this, arguments),
        this.setHeight(this._Height)
    },
    e.initClass(e.Swiper, e.BaseControl);
    var t = e.Swiper.prototype;
    t._render = function() {
        e.Swiper.base._render.apply(this, arguments),
        this.createPreContentNode(),
        this.addCSSClass(this._TabMode),
        this._tabsBlock = this._DomNode.querySelector(".WTSwiperTabsBlock"),
        this._NeedSmooth = this.isSmoothly(),
        this.isSmoothly() && this._Pages.length > 1 ? this._initMovingSwiper() : this.isFadeInOut() || (this._Animation = e.SwiperAnimationConst.None);
        for (var t = 0; t < this._Pages.length; t++) {
            var i = this._Pages[t];
            i.Parent = this,
            i.TabContainer = this._tabsBlock,
            i.Edited = this._Edited,
            this._Pages[t] = new e.SwipePage(i)
        }
        this.setSelectedPage(this._SelectedPage, !0),
        this._tabsScrollPosition = 0,
        "Normal" == this._TabMode && this._ScrollableTabs && (this._createButtons(), this.checkIsScrollButtonsNeeded())
    },
    t.isSmoothly = function() {
        return this._Animation == e.SwiperAnimationConst.Smoothly
    },
    t.isFadeInOut = function() {
        return this._Animation == e.SwiperAnimationConst.FadeInOut
    },
    t._initMovingSwiper = function() {
        if (this.isSmoothly() === !0) {
            var e = this._ContentNode,
            t = document.createElement("div");
            e.style.height = "calc(100% - 32px)",
            t.classList.add("SwiperSmoothlyContent"),
            t.classList.add("Animate"),
            t.style.height = "100%",
            e.appendChild(t),
            this._ContentNode = t
        }
    },
    t.recalcSmoothlySwiperWidth = function(t) {
        if (this.isSmoothly()) {
            var i = this._ContentNode,
            s = i.parentNode,
            n = this._Pages.length > 1 ? 2 : 1,
            o = n * s.offsetWidth;
            e.getTerminal().getSwiperQuotes() === this && e.UserSettings.Terminal.Splitter1c2BoxWidth && (o = n * (window.innerWidth - e.UserSettings.Terminal.Splitter1c2BoxWidth - 40)),
            i.style.width = o + "px";
            for (var a = i.children,
            r = a.length,
            l = 0; l < r;) a[l].style.width = i.offsetWidth / n - 2 + "px",
            l++;
            t || this.setSelectedPage(this._SelectedPage, !0)
        }
    },
    t.recalcFadeSwiperHeight = function() {
        if (this.isFadeInOut()) {
            var e = this._ContentNode,
            t = e.offsetHeight;
            t > 0 && !parseInt(e.style.height) && (e.style.height = t + "px")
        }
    },
    t.move = function(e, t, i, s) {
        function n(e) {
            var t = e.firstChild;
            t && e.removeChild(t)
        }
        if (this._busy !== !0) {
            var o = this._ContentNode;
            if (e === t) return n(o),
            void i(t < 1);
            this.recalcSmoothlySwiperWidth(!0),
            this._busy = !0;
            var a = this,
            r = e < t,
            l = a._moved,
            h = a._movies,
            d = o.offsetWidth,
            c = a.getPages().length > 1 ? 2 : 1;
            o.classList.remove("Animate"),
            i(!r),
            r && l === h.right ? (l = h.left, o.style.transform = "") : r || l !== h.left || (l = h.right, o.style.transform = "translateX(" + -(d / c - 2) + "px)"),
            o && setTimeout(function() {
                o.classList.add("Animate"),
                o.style.transform = l === h.left ? "translateX(" + -(d / c - 2) + "px)": "",
                setTimeout(function() {
                    o.classList.remove("Animate"),
                    s(!r),
                    o.style.transform = "",
                    o.children.length > 1 && (o.children[0].style.left = ""),
                    l = a._moved = h.left,
                    a._busy = !1
                },
                250)
            },
            0)
        }
    },
    t.fade = function(e, t, i) {
        function s() {
            var e = o._FireStack;
            e.length > 0 && (e[0].fire(o), e.splice(0, 1))
        }
        function n() {
            s(),
            i(!1, !0),
            e && e(),
            t(!1),
            r = a.firstChild,
            r && (r.classList.add("FadeAnimate"), l ? setTimeout(function() {
                r.style.opacity = "1",
                o._busy = !1
            },
            50) : (r.classList.add("FadeAnimate"), r.style.opacity = "1", o._busy = !1))
        }
        if (this._busy !== !0) {
            var o = this,
            a = this._ContentNode,
            r = a.firstChild,
            l = !1;
            o.recalcFadeSwiperHeight(),
            o._busy = !0,
            r ? (r.classList.add("FadeAnimate"), r.style.opacity = "0", l = !0, setTimeout(n, 70)) : (o.ChangeSelectedPage.fire(this), n())
        }
    },
    t.busy = function() {
        return this._busy
    },
    t.getSwiperButtonNodes = function() {
        return this._tabsBlock.children
    },
    t.getPageById = function(e) {
        for (var t = 0; t < this._Pages.length; t++) {
            var i = this._Pages[t];
            if (i.getId() === e) return i
        }
        return null
    },
    t.getPageByKey = function(e) {
        for (var t = null,
        i = this._Pages,
        s = i.length,
        n = 0; n < s; ++n) if (t = i[n], t.getKey() === e) return t;
        return null
    },
    t._createButtons = function() {
        var t = this;
        this._scrollButtonsBlock = this._DomNode.querySelector(".WTSwiperScrollArrows"),
        this._leftScrollBtn = new e.Button({
            ParentNode: this._scrollButtonsBlock,
            ImageList: e.MenuIconSVGList,
            ImageListRow: 5,
            ImageListCol: 1,
            Class: "WTSwiperScrollArrowLeft",
            Click: e.Delegate(t, t.scrollLeft)
        }),
        this._rightScrollBtn = new e.Button({
            ParentNode: this._scrollButtonsBlock,
            ImageList: e.MenuIconSVGList,
            ImageListRow: 6,
            ImageListCol: 1,
            Class: "WTSwiperScrollArrowRight",
            Click: e.Delegate(t, t.scrollRight)
        }),
        this._leftScrollBtn._onColorThemeChanged = this._rightScrollBtn._onColorThemeChanged = this._colorThemeChangedOverride
    },
    t._colorThemeChangedOverride = function(t) {
        this._ImageList && this.setImageList(e.MenuIconSVGList)
    },
    t.checkIsScrollButtonsNeeded = function() {
        if (this._scrollButtonsBlock) {
            var e, t, i, s = 0,
            n = this._tabsBlock.childNodes.length,
            o = 40;
            if (0 !== n) {
                for (var a = 0; a < this._tabsBlock.childNodes.length; a++) if ("none" != this._tabsBlock.childNodes[a].style.display) {
                    e = this._tabsBlock.childNodes[a].clientWidth + 2;
                    break
                }
                t = (this._tabsBlock.clientWidth - s - o) / e,
                n--,
                i = n >= t
            } else i = !1;
            i ? (this._tabsBlock.style.marginRight = "50px", this._scrollButtonsBlock.style.display = "", 0 == this._tabsScrollPosition && this._leftScrollBtn.setEnabled(!1)) : (this._scrollButtonsBlock.style.display = "none", this._tabsScrollPosition > 0 && (this._tabsBlock.style.marginRight = ""))
        }
    },
    t.fixPage = function(e) {
        void 0 !== e && this.setSelectedPage(e);
        var t, i = this.getPages();
        for (t = 0; t < i.length; t++) {
            var s = t == this._SelectedPage;
            i[t]._TabButton.setEnabled(s),
            s && i[t]._TabButton.setPressed(!0)
        }
    },
    t.unlockPage = function(e) {
        var t, i = this.getPages();
        if (void 0 == e) for (t = 0; t < i.length; t++) i[t]._TabButton.setEnabled(!0);
        else t = this._Pages[parseInt(e)] ? parseInt(e) : this._Pages.indexOf(e) > -1 ? this._Pages.indexOf(e) : this._SelectedPage,
        i[t]._TabButton.setEnabled(!0)
    },
    t.setSelectedPage = function(e, t, i) {
        var s = this._Pages[this._SelectedPage],
        n = this._Pages[parseInt(e)] ? parseInt(e) : this._Pages.indexOf(e) > -1 ? this._Pages.indexOf(e) : this._SelectedPage;
        if (n !== this._SelectedPage || 1 == t) {
            this._SelectedPage = n;
            var o, a = this.getPages();
            for (o = 0; o < a.length; o++) a[o].setIsSelected(o == n, i ? this._Pages[this._SelectedPage] : s);
            var r = this.isSmoothly();
            r || !r && !this.isFadeInOut() ? this.ChangeSelectedPage.fire(this) : this._FireStack.push(this.ChangeSelectedPage)
        }
    },
    t.getSelectedPage = function() {
        return this._Pages[this._SelectedPage]
    },
    t.getSelectedPageIndex = function() {
        return this._SelectedPage
    },
    t.getPages = function(e) {
        return this._Pages[e] ? this._Pages[e] : this._Pages
    },
    t.getPagesLength = function() {
        return this._Pages.length
    },
    t.setEdited = function(e) {
        this._Edited = !!e;
        for (var t = 0; t < this._Pages.length; t++) this._Pages[t].setEdited(this._Edited)
    },
    t.addPage = function(t, i) {
        i = void 0 == i || i;
        var s, n = t;
        n.Parent = this,
        n.TabContainer = this._tabsBlock,
        n.Edited = this._Edited,
        s = new e.SwipePage(n),
        this._Pages.push(s),
        this._NeedSmooth !== !0 || this.isSmoothly() || (this._Animation = e.SwiperAnimationConst.Smoothly, this._NeedSmooth = !1, this._initMovingSwiper(), this.recalcSmoothlySwiperWidth()),
        i && this.setSelectedPage(s, !0),
        this.AddPage.fire(t),
        this.checkIsScrollButtonsNeeded()
    },
    t.addTabButton = function(e) {
        this._TabButtons.push(e)
    },
    t.getTabButtons = function() {
        return this._TabButtons
    },
    t.getTabButtonByKey = function(e) {
        for (var t = this._TabButtons.length,
        i = 0; i < t; i++) if (this._TabButtons[i].getKey() == e) return this._TabButtons[i];
        return null
    },
    t.getTabsBlock = function() {
        return this._tabsBlock
    },
    t.removePage = function(t, i, s, n) {
        i = void 0 == i || i;
        var o = t instanceof e.SwipePage ? t: this.getPages(t),
        a = this._Pages.indexOf(o);
        if (o && a > -1) {
            if (o.removeFromDom(n), o.detachClickHandlers(n), this._Pages.splice(a, 1), s || 0 !== this._Pages.length && this.setSelectedPage(a ? a - 1 : 0, !0), !this._Pages.length) for (; this.getContentNode().firstChild;) this.getContentNode().removeChild(this.getContentNode().firstChild);
            i && this.ClosePage.fire(o)
        }
        this.adjustTabsScrollPosition(),
        this.checkIsScrollButtonsNeeded(),
        e.getTerminal().redrawOpenedMenuForNewChartSwiperBtn()
    },
    t.removeAllPage = function() {
        for (; this._Pages[0];) this.removePage(this._Pages[0], !1)
    },
    t.removeTabs = function() {
        for (; this._tabsBlock.firstChild;) this._tabsBlock.removeChild(this._tabsBlock.firstChild);
        this._TabButtons = []
    },
    t.removeTabButton = function(e) {
        var t = this.getTabButtonByKey(e);
        if (t) {
            var i = this._TabButtons.indexOf(t);
            t.removeFromDom(),
            this._TabButtons.splice(i, 1)
        }
    },
    t.getContentNode = function() {
        return this._ContentNode || (this._ContentNode = this._DomNode.querySelector(this._SwiperContentText)),
        this._ContentNode
    },
    t.createPreContentNode = function() {
        this._PreContentNode = this._DomNode.querySelector(this._PreSwiperContentText)
    },
    t.getPreContentNode = function() {
        return this._PreContentNode || this.createPreContentNode(),
        this._PreContentNode
    },
    t.setHeight = function(t) {
        e.Swiper.base.setHeight.apply(this, arguments);
        var i, s = this.getContentNode();
        switch (this._TabMode) {
        case "Normal":
            i = 32;
            break;
        case "Compact":
            i = 18;
            break;
        default:
            i = s ? s.offsetHeight: 0
        }
        s && (s.style.height = this._Height - i + "px"),
        this.ChangeSize.fire({
            Sender: this,
            Prop: "Height",
            Value: this._Height
        })
    },
    t.setWidth = function(t) {
        e.Swiper.base.setWidth.apply(this, arguments),
        this.ChangeSize.fire({
            Sender: this,
            Prop: "Width",
            Value: t
        })
    },
    t.calculateSummaryTabsWidth = function() {
        for (var e = 0,
        t = 0; t < this._tabsBlock.childNodes.length; t++)"none" != this._tabsBlock.childNodes[t].style.display && (e += this._tabsBlock.childNodes[t].clientWidth + 2);
        return e
    },
    t.scrollRight = function() {
        this._tabsScrollPosition == this._tabsBlock.childNodes.length - 1 || this._tabsBlock.clientWidth > this.calculateSummaryTabsWidth() || (this._tabsBlock.childNodes[this._tabsScrollPosition].style.display = "none", this._tabsBlock.childNodes[this._tabsScrollPosition].classList.remove("First"), this._tabsScrollPosition += 1, this._tabsBlock.childNodes[this._tabsScrollPosition].classList.add("First"), this._leftScrollBtn.setEnabled(!0), this._tabsBlock.clientWidth > this.calculateSummaryTabsWidth() && this._rightScrollBtn.setEnabled(!1))
    },
    t.scrollLeft = function() {
        0 != this._tabsScrollPosition && (this._tabsBlock.childNodes[this._tabsScrollPosition - 1].style.display = "", this._tabsBlock.childNodes[this._tabsScrollPosition].classList.remove("First"), this._tabsScrollPosition -= 1, this._tabsBlock.childNodes[this._tabsScrollPosition].classList.add("First"), this._rightScrollBtn.setEnabled(!0), 0 == this._tabsScrollPosition && this._leftScrollBtn.setEnabled(!1))
    },
    t.adjustTabsScrollPosition = function() {
        for (var e = this._tabsBlock.childNodes.length - 1; e >= 0; e--) if ("none" == this._tabsBlock.childNodes[e].style.display) {
            this._tabsBlock.childNodes[e].style.display = "",
            this._tabsScrollPosition -= 1;
            break
        }
    },
    t.restoreHidedTabs = function() {
        for (var e = 0; e < this._tabsBlock.childNodes.length; e++)"none" == this._tabsBlock.childNodes[e].style.display && (this._tabsBlock.childNodes[e].style.display = "");
        this._tabsScrollPosition = 0
    },
    t.getTypeAnimation = function() {
        return this._Animation
    },
    t = null,
    e.SwipePage = function(t) {
        this._Content = null,
        this._PreContent = null,
        this._Title = "",
        this._TabContainer = null,
        this._Parent = null,
        this._IsSelected = !1,
        this._Edited = !1,
        this._ContextMenu = null,
        this._TabImage = null,
        this._TabImagePressed = null,
        this._TabImgWidth = null,
        this._TabImgHeight = null,
        this._FontIcon = null,
        this._Data = null,
        this._CheckIfTabExists = null,
        this._ContainerID = null,
        this._defineEvents(["TabDblClick"]),
        e.SwipePage.base.constructor.apply(this, arguments)
    },
    e.initClass(e.SwipePage, e.BaseControl);
    var i = e.SwipePage.prototype;
    return i.setVisible = function(e) {
        this._TabButton.setVisible(e)
    },
    i.getData = function() {
        return this._Data
    },
    i.setData = function(e) {
        this._Data = e
    },
    i.setContextMenu = function(t) {
        this._ContextMenu = t;
        var i = this._Parent.getContentNode();
        i && (e.addEvent(i, "contextmenu", this._binds.contextmenu), e.addEvent(i, "touchstart", this._binds.touchstart), e.addEvent(i, "touchmove", this._binds.touchmove), e.addEvent(i, "touchend", this._binds.touchend))
    },
    i._render = function() {
        this._Title = this._Key ? e.LangManager.getStringByKey(this._Key) || this._Title: this._Title,
        this._binds = {
            contextmenu: this._onContextMenu.bind(this),
            touchstart: this._onTouchStart.bind(this),
            touchmove: this._onTouchMove.bind(this),
            touchend: this._onTouchEnd.bind(this)
        },
        1 == this._CheckIfTabExists ? this.linkTabButtonIfExists(this._ContainerID) || this.createTabButton() : this.createTabButton()
    },
    i.createTabButton = function() {
        this._TabButton = new e.Button({
            ParentNode: this._TabContainer,
            Text: this._Title,
            Key: this._Key,
            ImageUrl: this._TabImage,
            PressedImageUrl: this._TabImagePressed,
            ImgWidth: this._TabImgWidth,
            ImgHeight: this._TabImgHeight,
            FontIcon: this._FontIcon,
            Click: e.Delegate(this, this._onTabClick),
            DblClick: e.Delegate(this, this._onTabDblClick)
        }),
        this._Parent.addTabButton(this._TabButton),
        this.setIsSelected(this._IsSelected),
        this.setEdited(this._Edited),
        this.setContextMenu(this._ContextMenu)
    },
    i.linkTabButtonIfExists = function(t) {
        for (var i = this._Parent.getTabButtons(), s = 0; s < i.length; s++) if (i[s].getKey() == t) return this._TabButton = i[s],
        delete this._TabButton.Click,
        delete this._TabButton.DblClick,
        this._TabButton.Click = e.Delegate(this, this._onTabClick),
        this._TabButton.DblClick = e.Delegate(this, this._onTabDblClick),
        !0;
        return ! 1
    },
    i._onContextMenu = function(e) {
        if (this._ContextMenu && !this._ContextMenu.getIsOpen() && this._IsSelected) {
            var t = e.clientX || e.targetTouches[0].clientX,
            i = e.clientY || e.targetTouches[0].clientY;
            this._ContextMenu.show(t, i)
        }
    },
    i._onTouchStart = function(e) {
        var t = this;
        this._contextMenuTimer = setTimeout(function() {
            t._onContextMenu(e),
            t._menuIsShowed = !0
        },
        450)
    },
    i._onTouchMove = function() {
        clearTimeout(this._contextMenuTimer)
    },
    i._onTouchEnd = function(e) {
        this._menuIsShowed && (this._menuIsShowed = !1, e.preventDefault()),
        clearTimeout(this._contextMenuTimer)
    },
    i.removeFromDom = function(e) {
        1 != e && this._TabContainer.removeChild(this._TabButton._DomNode)
    },
    i.detachClickHandlers = function(e) {
        if (1 == e) {
            this._TabButton.Click.removeAll(),
            this._TabButton.DblClick.removeAll(),
            delete this._TabButton._ContextMenu;
            var t = this._TabButton.getDomNode().querySelector(".TabCross");
            this._TabButton.getDomNode().removeChild(t)
        }
    },
    i.setEdited = function(t) {
        if (this._Edited = !!t, this._TabButton) if (this._Edited) {
            this._TabButton.setContextMenu(this.getEditedMenu());
            var i = e.htmlToDOM('<div class="TabCross"></div>');
            i.addEventListener("click",
            function(t) {
                t.stopPropagation();
                var i = this._Parent.getTabButtons().indexOf(this._TabButton);
                this._Parent.removePage(i),
                this._Parent._TabButtons.splice(i, 1);
                var s = e.getTerminal();
                s.checkNewChartBtnAvailable()
            }.bind(this)),
            i.addEventListener("dblclick",
            function(e) {
                e.stopPropagation()
            }.bind(this)),
            this._TabButton.getDomNode().appendChild(i)
        } else this._TabButton.setContextMenu(null)
    },
    i.getEditedMenu = function(t) {
        return this._editedMenu || (this._editedMenu = new e.Menu({
            CheckedType: "NoChecked",
            WithBlock: !1,
            Items: [{
                Text: "Close",
                Key: "cCDClose"
            }],
            ItemClick: e.Delegate(this, this._close)
        })),
        this._editedMenu
    },
    i._close = function() {
        var e = this._Parent.getTabButtons().indexOf(this._TabButton);
        this._Parent.removePage(e),
        this._Parent._TabButtons.splice(e, 1)
    },
    i._onTabClick = function(t) {
        e.Browser.IsTablet || e._menuMasterObject.hideAll(),
        this._IsSelected || this._Parent.busy() || this.setIsSelected(!0)
    },
    i._onTabDblClick = function(e) {
        this._Parent.TabDblClick.fire({
            event: e,
            sender: this._Parent
        })
    },
    i._quickFadeContent = function() {
        if (this._Parent.getTypeAnimation() === e.SwiperAnimationConst.FadeInOut) {
            var t = this._Content;
            t && (t.classList.remove("FadeAnimate"), t.style.opacity = "0")
        }
    },
    i._addContent = function(t) {
        function i(t, i, s) {
            if (t && i) if (t instanceof e.BaseControl) t.addToNode(i);
            else if (t.tagName) s === !0 ? i.insertBefore(t, i.children[0]) : i.appendChild(t);
            else {
                for (var n = i.children; n.length;) i.removeChild(n[0]);
                i.innerHTML = t
            }
        }
        var s = this._Parent,
        n = s.getPreContentNode(),
        o = s.getContentNode(),
        a = this._PreContent,
        r = this._Content;
        if (i.apply(this, [r, o, t]), i.apply(this, [a, n, t]), s.isSmoothly()) {
            var l = s.getPages().length > 1 ? 2 : 1,
            h = o.offsetWidth / l - 2 + "px";
            r.style.width = h,
            a && (a.style.width = h)
        }
    },
    i._removeContent = function(e, t) {
        function i(e, t, i) {
            e && (e.children.length > 1 || i === !0) && (t === !0 ? e.removeChild(e.children[1]) : e.firstChild && e.removeChild(e.firstChild))
        }
        var s = this._Parent,
        n = s.getContentNode(),
        o = s.getPreContentNode();
        i.apply(this, [n, e, t]),
        i.apply(this, [o, e, t])
    },
    i.showContent = function() {
        var t = e.SwiperAnimationConst,
        i = this._Parent;
        switch (i.getTypeAnimation()) {
        case t.Smoothly:
            var s = i.getPages(),
            n = s.indexOf(this._previousSelectedPage),
            o = s.indexOf(this);
            i.move(n, o, this._addContent.bind(this), this._removeContent.bind(this));
            break;
        case t.FadeInOut:
            i.fade(this._quickFadeContent.bind(this), this._addContent.bind(this), this._removeContent.bind(this));
            break;
        case t.None:
        default:
            this._removeContent(!1, !0),
            this._addContent(!1)
        }
    },
    i.setIsSelected = function(e, t) {
        this._previousSelectedPage = t || this._Parent.getSelectedPage(),
        this._IsSelected = !!e,
        this._TabButton.setPressed(this._IsSelected),
        this._IsSelected && (this.showContent(), this._Parent && this._Parent.setSelectedPage(this)),
        parent._FireStack = []
    },
    i.setPreContent = function(e) {
        this._PreContent = e
    },
    i.setContent = function(e) {
        this._Content = e,
        this.setIsSelected(this._IsSelected)
    },
    i.setTitle = function(e) {
        this._Title = e,
        this._TabButton.setText(e)
    },
    i.getKey = function() {
        return this._Key
    },
    i.getTitle = function() {
        return this._Title
    },
    i.getContent = function() {
        return this._Content
    },
    i = null,
    e.SwiperAnimationConst = {
        None: 0,
        Smoothly: 1,
        FadeInOut: 2
    },
    e
}),
define("swiperTrade", ["swiper"],
function(e) {
    e.SwiperTrade = function(t) {
        e.SwiperTrade.base.constructor.apply(this, arguments),
        this.setHeight(this._Height),
        e.TraderData.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.SwiperTrade, e.Swiper);
    var t = e.SwiperTrade.prototype;
    return t._render = function() {
        this._Template = e._Templates.SwiperTrade,
        e.SwiperTrade.base._render.apply(this, arguments),
        this._buttonsBlock = this._DomNode.querySelector(".WTSwiperButtonsPlacement"),
        this._openRealAccount = new e.Button({
            ParentNode: this._buttonsBlock,
            Text: window.UtipConfig.BrokersSettings.LiveAccountCaption[e.LangManager.getLang()],
            Class: "OpenLive",
            Height: 30,
            ImageList: e.IconSVGList,
            ImageListRow: 10,
            ImageListCol: 0,
            MouseDown: e.Delegate(this, this._onButtonMouseDown),
            MouseUp: e.Delegate(this, this._onButtonMouseUp),
            Click: e.Delegate(this, this.onOpenLiveAccountBtnClick)
        }),
        this._depositMoney = new e.Button({
            ParentNode: this._buttonsBlock,
            Text: window.UtipConfig.BrokersSettings.DepositMoneyCaption[e.LangManager.getLang()],
            Height: 30,
            ImgWidth: "20px",
            ImgHeight: "22px",
            ImageUrl: "res/img/add_money.png",
            MouseDown: e.Delegate(this, this._onButtonMouseDown),
            MouseUp: e.Delegate(this, this._onButtonMouseUp),
            Click: e.Delegate(this, this.onDepositMoneyBtnClick)
        }),
        this._buySellBtn = new e.Button({
            ParentNode: this._buttonsBlock,
            Text: "Buy / Sell",
            Key: "CBTNNeworder",
            Height: 30,
            ImageList: e.IconSVGList,
            ImageListRow: 11,
            ImageListCol: 0,
            ImgHeight: "22px",
            Enabled: !1,
            Class: "Disabled",
            MouseDown: e.Delegate(this, this._onButtonMouseDown),
            MouseUp: e.Delegate(this, this._onButtonMouseUp),
            Click: e.Delegate(this, this._onBuySellBtnClick),
            MouseOut: e.Delegate(this, this._onButtonMouseOut)
        }),
        this._pendingOrderBtn = new e.Button({
            ParentNode: this._buttonsBlock,
            Text: "Pending order",
            Key: "cMFPendingOrder",
            Height: 30,
            ImageList: e.IconSVGList,
            ImageListRow: 12,
            ImageListCol: 0,
            ImgHeight: "22px",
            Enabled: !1,
            Class: "Disabled",
            MouseDown: e.Delegate(this, this._onButtonMouseDown),
            MouseUp: e.Delegate(this, this._onButtonMouseUp),
            Click: e.Delegate(this, this._onPendingOrderBtnClick),
            MouseOut: e.Delegate(this, this._onButtonMouseOut)
        }),
        this._reportBtn = new e.Button({
            ParentNode: this._buttonsBlock,
            Text: "Report",
            Key: "cMFReport",
            Height: 30,
            ImageList: e.IconSVGList,
            ImageListRow: 13,
            ImageListCol: 0,
            ImgHeight: "22px",
            Enabled: !1,
            MouseDown: e.Delegate(this, this._onButtonMouseDown),
            MouseUp: e.Delegate(this, this._onButtonMouseUp),
            Click: e.Delegate(this, this._onReportBtnClick),
            MouseOut: e.Delegate(this, this._onButtonMouseOut)
        }),
        this._buySellBtn.investorModeDependency = !0,
        this._pendingOrderBtn.investorModeDependency = !0,
        this._pendingOrderBtn.investorModeDependency = !0,
        this._buySellBtn.setVisible(!1),
        this._pendingOrderBtn.setVisible(!1),
        this._reportBtn.setEnabled(!1),
        this._openRealAccount.setVisible(!1),
        this._depositMoney.setVisible(!1)
    },
    t.tuneTradeButtons = function() {
        this.isTradeButtonsWidthValid() ? this.growTradeButtons() : this.shrinkTradeButtons()
    },
    t.shrinkTradeButtons = function() {
        for (var e = this._buttonsBlock.childNodes,
        t = e.length,
        i = t - 1; i >= 0 && !this.isTradeButtonsWidthValid(); i--) e[i].querySelector(".WTButtonText").style.display = "none"
    },
    t.growTradeButtons = function() {
        for (var e = this._buttonsBlock.childNodes,
        t = e.length,
        i = 0; i < t; i++) if (this.isTradeButtonsWidthValid() && (e[i].querySelector(".WTButtonText").style.display = "inline-block"), !this.isTradeButtonsWidthValid()) {
            e[i].querySelector(".WTButtonText").style.display = "none";
            break
        }
    },
    t.isTradeButtonsWidthValid = function() {
        var t = e.getTerminal().getTradeSplitter().getCollapseBtnNode();
        return this._tabsBlock.clientWidth - this._tabsBlock.childNodes[0].clientWidth - t.clientWidth - parseInt(e.getComputedStyle(t, "margin-left")) - 5 > this._buttonsBlock.clientWidth
    },
    t._onButtonBlock = function() {
        e.SymbolsData.isShowSymbols() ? (this._buySellBtn.setEnabled(!0), this._pendingOrderBtn.setEnabled(!0)) : (this._buySellBtn.setEnabled(!1), this._pendingOrderBtn.setEnabled(!1))
    },
    t.setForexButtonsVisibility = function(e) {
        1 == e ? (this._buySellBtn.setVisible(!0), this._pendingOrderBtn.setVisible(!0)) : (this._buySellBtn.setVisible(!1), this._pendingOrderBtn.setVisible(!1)),
        this.tuneTradeButtons()
    },
    t._onChangeLang = function() {
        this._openRealAccount.setText(window.UtipConfig.BrokersSettings.LiveAccountCaption[e.LangManager.getLang()]),
        this._depositMoney.setText(window.UtipConfig.BrokersSettings.DepositMoneyCaption[e.LangManager.getLang()]),
        this.tuneTradeButtons()
    },
    t.getButtonsBlock = function() {
        return this._buttonsBlock
    },
    t._onBuySellBtnClick = function() {
        var t = e.getDialogNewOrder();
        if (e.activeChart) {
            var i = e.activeChart.getMainSymbolName();
            t.setCurrentQuote(i)
        }
        t.show()
    },
    t._onPendingOrderBtnClick = function() {
        var t = e.getDialogPendingOrder();
        if (e.activeChart) {
            var i = e.activeChart.getMainSymbolName();
            t.setCurrentQuote(i)
        }
        t.show()
    },
    t._onReportBtnClick = function() {
        e.getDialogReport().show()
    },
    t.onOpenLiveAccountBtnClick = function() {
        if (e.Config.TerminalSettings && e.Config.TerminalSettings.IntegratedWebOfficeEnabled) e.WebOfficeController.setWebOfficePage("register"),
        e.getTerminal().getHeaderPanel().onMyProfileBtnClick();
        else {
            var t = "http://www.bzza.com";
            e.Config.BrokersSettings.CompanySite && (t = e.Config.BrokersSettings.CompanySite),
            e.Config.BrokersSettings.LiveAccountLink && (t = e.Config.BrokersSettings.LiveAccountLink),
            t.indexOf("http") == -1 && (t = "http://" + t),
            e.Browser.IsTablet ? window.open(t, "_system") : window.open(t)
        }
    },
    t.onDepositMoneyBtnClick = function() {
        var t = "about:blank";
        e.Config.BrokersSettings.DepositMoneyLink && (t = e.Config.BrokersSettings.DepositMoneyLink, t.indexOf("http") == -1 && (t = "http://" + t)),
        window.open(t)
    },
    t.getReportButton = function() {
        return this._reportBtn
    },
    t._onButtonMouseDown = function(e) {
        e.Sender.setPressed(!0)
    },
    t._onButtonMouseUp = function(e) {
        e.Sender.setPressed(!1)
    },
    t._onButtonMouseOut = function(e) {
        e.Sender.setPressed(!1)
    },
    t.setHeight = function(t) {
        e.Swiper.base.setHeight.apply(this, arguments);
        var i = 40,
        s = this.getContentNode();
        s && (s.style.height = this._Height - i + "px"),
        this.ChangeSize.fire({
            Sender: this,
            Prop: "Height",
            Value: this._Height
        })
    },
    t._onGetGroupInfo = function() {
        this._openRealAccount.setVisible(e.TraderData.traderIsDemo()),
        this._depositMoney.setVisible(!1),
        this.tuneTradeButtons()
    },
    t.setDepositMoneyBtnVisible = function(e) {
        this._depositMoney.setVisible(e),
        this.tuneTradeButtons()
    },
    t = null,
    e
}),
define("webOffice", ["base"],
function(e) {
    e.WebOffice = function() {
        this.iframe = null,
        this.protectScreen = null,
        this.WebOfficeBaseLink = "",
        this.WebOfficeCurrentLink = "",
        this.accounts = []
    };
    var t = e.WebOffice.prototype;
    return t.embedWebOfficeWindow = function() {
        null == this.iframe && (this.embedProtectScreen(), showPreloaderCircle(), this.iframe = document.createElement("iframe"), this.iframe.className = "Embed", this.iframe.name = "WebOffice", this.fixWindow(), this.iframe.src = this.WebOfficeCurrentLink, e.addEvent(this.iframe, "load", this.iframeLoaded.bind(this)), document.getElementsByClassName("WTSplitterContent2")[0].appendChild(this.iframe), this.opened = !0)
    },
    t.embedProtectScreen = function() {
        null == this.protectScreen && (this.protectScreen = document.createElement("div"), this.protectScreen.className = "ProtectScreen", document.getElementsByClassName("WTSplitterContent2")[0].appendChild(this.protectScreen))
    },
    t.fixWindow = function() {
        if (null != this.iframe) {
            var e = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect();
            this.iframe.style.top = e.top + 2 + "px",
            this.iframe.style.left = e.left + "px",
            this.iframe.style.width = e.width + 41 + "px",
            this.iframe.style.height = e.height - 2 + "px",
            this.protectScreen.style.top = e.top + 2 + "px",
            this.protectScreen.style.left = e.left + "px",
            this.protectScreen.style.width = e.width + 41 + "px",
            this.protectScreen.style.height = e.height - 2 + "px"
        }
    },
    t.iframeLoaded = function(e) {
        hidePreloader()
    },
    t.showWebOffice = function() {
        null != this.protectScreen && null != this.iframe || this.embedWebOfficeWindow(),
        this.protectScreen.style.display = "",
        this.iframe.style.display = "",
        document.getElementById("container").style.zIndex = "5",
        this.opened = !0
    },
    t.hideWebOffice = function() {
        null != this.iframe && null != this.protectScreen && (this.protectScreen.style.display = "none", this.iframe.style.display = "none", document.getElementById("container").style.zIndex = ""),
        this.opened = !1
    },
    t.showIFrame = function() {
        null != this.iframe && 1 == this.opened && (this.iframe.style.display = "")
    },
    t.hideIFrame = function() {
        null != this.iframe && 1 == this.opened && (this.iframe.style.display = "none")
    },
    t.sendHashCredentials = function(t, i, s) {
        var n = UtipConfig.BrokersSettings.WebOfficeAPIKey,
        o = this.getRandParam(),
        a = md5(n + o),
        r = md5(t + md5(i));
        this.woLogin = t,
        e.requester.getWebOfficeAuthToken(a, o, t, r, s)
    },
    t.restoreWebOfficeConnection = function(t, i, s) {
        var n = UtipConfig.BrokersSettings.WebOfficeAPIKey,
        o = Math.floor(99e6 * Math.random()) + 1e6,
        a = md5(n + o);
        this.woLogin = t,
        e.requester.getWebOfficeAuthToken(a, o, t, i, s)
    },
    t.authorizeWebOffice = function(e) {
        this.accounts = e.values.accounts,
        this.authToken = e.values.auth_token,
        this.WebOfficeBaseLink = UtipConfig.BrokersSettings.WebOfficeLink + "/wt_handler.php?token=" + this.authToken + "&page=",
        this.setWebOfficePage("accounts")
    },
    t.setWebOfficePage = function(e) {
        this.WebOfficeCurrentLink = this.WebOfficeBaseLink + e,
        this.iframe && (this.iframe.src = this.WebOfficeCurrentLink)
    },
    t.saveWebOfficeAccount = function(e, t) {
        var i = {
            login: e,
            password: t
        };
        localStorage.setItem("WebOfficeAccount", JSON.stringify(i))
    },
    t.clearWebOfficeAccount = function() {
        null != localStorage.getItem("WebOfficeAccount") && localStorage.removeItem("WebOfficeAccount")
    },
    t.tryLoadStoredAccount = function() {
        var t = localStorage.getItem("WebOfficeAccount");
        if (null != t) {
            t = JSON.parse(t);
            var i = UtipConfig.BrokersSettings.WebOfficeAPIKey,
            s = this.getRandParam(),
            n = md5(i + s);
            return this.woLogin = t.login,
            e.requester.getWebOfficeAuthToken(n, s, this.woLogin, t.password, !0),
            !0
        }
        return ! 1
    },
    t.sendLastAccount = function() {
        var t = UtipConfig.BrokersSettings.WebOfficeAPIKey,
        i = this.getRandParam(),
        s = md5(t + i),
        n = localStorage.getItem("WebOfficeAccount") ? JSON.parse(localStorage.getItem("WebOfficeAccount")).login: null,
        o = this.woLogin || n,
        a = sessionStorage.getItem("Login"),
        r = sessionStorage.getItem("ServerName"),
        l = e.TraderData.getTraderGroup().id;
        e.requester.sendLastAccount(s, i, o, a, r, l)
    },
    t.sendWebOfficeRegistration = function(t, i, s, n, o, a, r) {
        var l = UtipConfig.BrokersSettings.WebOfficeAPIKey,
        h = this.getRandParam(),
        d = md5(l + h),
        c = t;
        e.requester.sendWebOfficeRegistration(d, h, t, c, n, o, i, s, a, r)
    },
    t.passwordRecovery = function(t) {
        var i = UtipConfig.BrokersSettings.WebOfficeAPIKey,
        s = this.getRandParam(),
        n = md5(i + s);
        e.requester.webOfficePasswordRecovery(n, s, t)
    },
    t.getRandParam = function() {
        return Math.floor(99e6 * Math.random()) + 1e6
    },
    e
}),
define("dialogNewOrder", ["dialog", "checkBoxGroup", "inputSelectNumber", "inputNumber", "symbolsData", "tradeFunctions"],
function(e) {
    e.DialogNewOrder = function(t) {
        e.DialogNewOrder.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.Socket.register(this),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogNewOrder, e.Dialog);
    var t = e.DialogNewOrder.prototype;
    return t._onGetQuote = function(e) {
        e && this._currentSymbol && this._currentSymbol._SymbolName == e._SymbolName && this.setCurrentQuote(this._currentSymbol)
    },
    t._onClosed = function() {
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        this.removeFromDom(),
        delete e._dialogNewOrder
    },
    t.setCurrentQuote = function(t) {
        if ("" === this._statusNode.innerHTML) {
            var i = this._currentSymbol;
            if ("string" == typeof t) {
                var s = e.SymbolsData.getSymbols()[t];
                this._currentSymbol = s._TradeForbidden === !1 ? s: this._currentSymbol
            } else this._currentSymbol = t._TradeForbidden === !1 ? t: this._currentSymbol;
            "index" === this._currentSymbol.getCalculationTypeName() && (this._currentSymbol = i),
            this._descriptionNode.innerHTML = this._currentSymbol._Description,
            this._currentBidNode.innerHTML = e.numberFormat(this._currentSymbol._Bid, this._currentSymbol._Digits, ".", ""),
            this._currentAskNode.innerHTML = e.numberFormat(this._currentSymbol._Ask, this._currentSymbol._Digits, ".", ""),
            this._statusNode.innerHTML = "",
            this._symbolSelect.setSelectedOption(this._symbols.indexOf(this._currentSymbol._SymbolName)),
            this._refreshMarginSize(),
            this._refreshPipSize(),
            this._refreshButtons()
        }
    },
    t.enableControls = function(t) {
        var i = this._volumeCombo.getDomNode(),
        s = this._DomNode.querySelector(".DFooterControls");
        i && s && (t === !0 ? (e.removeCSSClass(i, "Disabled"), e.removeCSSClass(s, "Disabled")) : (e.addCSSClass(i, "Disabled"), e.addCSSClass(s, "Disabled")))
    },
    t._onSymbolSelectChanged = function() {
        this._currentSymbol = e.SymbolsData.getSymbols()[this._symbolSelect.getValue()],
        this._volumeCombo.setSelectedOption(0),
        this.setCurrentQuote(this._currentSymbol),
        this.enableControls(!0),
        this._onStopsGroupCheckedChanged()
    },
    t._onVolumeSelectChanged = function() {
        this._refreshMarginSize(),
        this._refreshPipSize(),
        this._refreshButtons()
    },
    t._onVolumeSelectChange = function(e) {
        this._refreshButtons()
    },
    t._onChangeLang = function() {
        e.DialogNewOrder.base._onChangeLang.apply(this, arguments),
        this._pipSizeLblNode.innerHTML = (e.LangManager.getStringByKey("cNMROnePip") || "1 point") + ":",
        this._marginSizeLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormMarginByPosition") || "Margin") + ":"
    },
    t.calculateStopsLimits = function(e) {
        e ? (this._takeProfitNumEdit.setMaxValue(999999), this._stopLossNumEdit.setMaxValue(999999)) : (this._takeProfitNumEdit.setMaxValue(1 / 0), this._stopLossNumEdit.setMaxValue(1 / 0))
    },
    t._refreshMarginSize = function() {
        var t = e.parseFloat(this._volumeCombo.getValue()),
        i = this._currentSymbol,
        s = e.tradeFunctions.marginCalculate(i, e.TraderData, e._TraderData.positionType.buy, t);
        this._marginSizeValNode.innerHTML = e.numberFormat(s, 2, ".", "")
    },
    t._refreshPipSize = function() {
        var t = e.parseFloat(this._volumeCombo.getValue()),
        i = this._currentSymbol,
        s = e.tradeFunctions.onePipsCalculate(i, e.TraderData, e._TraderData.positionType.sell, t);
        this._pipSizeValNode.innerHTML = e.numberFormat(s, 2, ".", "")
    },
    t._refreshButtons = function() {
        var t = !0,
        i = !0,
        s = this._takeProfitNumEdit.getValue(),
        n = this._stopLossNumEdit.getValue(),
        o = this._currentSymbol._StopLevel / Math.pow(10, this._currentSymbol._Digits),
        a = !0;
        if (e.getTerminal().platformType == e.PlatformTypes.ptUTIP) {
            var r = e.tradeFunctions.maxVolumeOnType(e.TraderData, this._currentSymbol, e._TraderData.positionType.buy, {
                volume: e.parseFloat(this._volumeCombo.getValue()) || 0
            }),
            l = e.tradeFunctions.maxVolumeOnType(e.TraderData, this._currentSymbol, e._TraderData.positionType.sell, {
                volume: e.parseFloat(this._volumeCombo.getValue()) || 0
            });
            r < e.parseFloat(this._volumeCombo.getValue()) && (t = !1, this._BuyButton.setEnabled(t), a = !1),
            l < e.parseFloat(this._volumeCombo.getValue()) && (i = !1, this._SellButton.setEnabled(i), a = !1)
        }
        if (0 == e.parseFloat(this._volumeCombo.getValue() || 0)) return this._SellButton.setEnabled(!1),
        void this._BuyButton.setEnabled(!1);
        if (a) {
            var h = e.Browser.IsMobile ? "By_price": this._StopsGroup.getCheckedItem().getId();
            switch (h) {
            case "By_pips":
                s /= Math.pow(10, this._currentSymbol._Digits),
                n /= Math.pow(10, this._currentSymbol._Digits),
                (s <= o && 0 != s || n <= o && 0 != n) && (t = !1, i = !1);
                break;
            case "By_price":
                t = (!n || n < e.parseFloat(e.numberFormat(this._currentSymbol._Bid - o, this._currentSymbol._Digits, "."))) && (!s || s > e.parseFloat(e.numberFormat(this._currentSymbol._Bid + o, this._currentSymbol._Digits, "."))),
                i = (!n || n > e.parseFloat(e.numberFormat(this._currentSymbol._Ask + o, this._currentSymbol._Digits, "."))) && (!s || s < e.parseFloat(e.numberFormat(this._currentSymbol._Ask - o, this._currentSymbol._Digits, "."))),
                (n > 21e3 || s > 21e3) && (t = !1, i = !1);
                break;
            case "None":
            }
            e.UtipFunctions.isAllowTrade(e.UtipFunctions.setServerFormatDate(e.SymbolsData._LastChangedTime), this._currentSymbol) || (t = !1, i = !1)
        }
        this._SellButton.setEnabled(i),
        this._BuyButton.setEnabled(t)
    },
    t._onStopsGroupCheckedChanged = function() {
        this._takeProfitNumEdit.getDomNode().blur(),
        this._stopLossNumEdit.getDomNode().blur();
        var e, t = this._StopsGroup.getCheckedItem().getId();
        switch (t) {
        case "By_pips":
            this.calculateStopsLimits(!0),
            e = this._currentSymbol._GPipsCount * this._currentSymbol._StopLevel,
            this._takeProfitNumEdit.setValue(e),
            this._takeProfitNumEdit.setStep(1),
            this._takeProfitNumEdit.setDecimals(0),
            this._stopLossNumEdit.setValue(e),
            this._stopLossNumEdit.setStep(1),
            this._stopLossNumEdit.setDecimals(0);
            break;
        case "By_price":
            this.calculateStopsLimits(!1),
            this._defaultPrice = this._currentSymbol._Bid - this._currentSymbol._GPipsCount * (this._currentSymbol._StopLevel * this._currentSymbol.getFormattedPrecision()),
            this._takeProfitNumEdit.setValue(0),
            this._takeProfitNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
            this._takeProfitNumEdit.setDecimals(this._currentSymbol._Digits),
            this._stopLossNumEdit.setValue(0),
            this._stopLossNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
            this._stopLossNumEdit.setDecimals(this._currentSymbol._Digits);
            break;
        case "None":
        default:
            this.calculateStopsLimits(!1),
            this._takeProfitNumEdit.setValue(""),
            this._stopLossNumEdit.setValue("")
        }
        this._refreshButtons()
    },
    t._onNumEditFocus = function() {
        "None" == this._StopsGroup.getCheckedItem().getId() && this._StopsGroup.setCheckedItem("By_pips")
    },
    t.beforeTPChange = function(t) {
        var i = this._takeProfitNumEdit.getValue(); ("" == i || 0 == e.parseFloat(i) || isNaN(i)) && (this.setDefaultTP(t.direction), e.Browser.IsMobile ? "down" === t.direction ? this._takeProfitNumEdit.up() : this._takeProfitNumEdit.down() : "down" === t.direction ? this._takeProfitNumEdit._increase() : this._takeProfitNumEdit._decrease())
    },
    t.beforeSLChange = function(t) {
        var i = this._stopLossNumEdit.getValue(); ("" == i || 0 == e.parseFloat(i) || isNaN(i)) && (this.setDefaultSL(t.direction), e.Browser.IsMobile ? "down" === t.direction ? this._stopLossNumEdit.up() : this._stopLossNumEdit.down() : "down" === t.direction ? this._stopLossNumEdit._increase() : this._stopLossNumEdit._decrease())
    },
    t.getFirstTimePrice = function(t, i) {
        var s = this._currentSymbol._StopLevel > 0 ? this._currentSymbol._StopLevel: 1,
        n = this._currentSymbol._GPipsCount * s,
        o = 0;
        if (this._Swiper) {
            var a = this._Swiper.getSelectedPage().getId(),
            r = this["_" + a];
            o = r.PriceNE.getValue()
        } else o = this._currentSymbol._Bid,
        void 0 != i && ("TakeProfit" === i && "down" === t || "StopLoss" === i && "up" === t) && (o = this._currentSymbol._Ask);
        var l;
        return "up" === t ? l = e.parseFloat(o) + n / Math.pow(10, this._currentSymbol._Digits) : "down" == t && (l = e.parseFloat(o) - n / Math.pow(10, this._currentSymbol._Digits)),
        l
    },
    t.setDefaultTP = function(t) {
        0 == e.parseFloat(this._takeProfitNumEdit.getValue()) && null != t && (this._takeProfitNumEdit.setValue(this.getFirstTimePrice(t, "TakeProfit")), this._takeProfitNumEdit.setStep(this._currentSymbol.getFormattedPrecision()), this._takeProfitNumEdit.setDecimals(this._currentSymbol._Digits), this._Swiper && this.checkDifference(), this._refreshButtons())
    },
    t.setDefaultSL = function(t) {
        0 == e.parseFloat(this._stopLossNumEdit.getValue()) && null != t && (this._stopLossNumEdit.setValue(this.getFirstTimePrice(t, "StopLoss")), this._stopLossNumEdit.setStep(this._currentSymbol.getFormattedPrecision()), this._stopLossNumEdit.setDecimals(this._currentSymbol._Digits), this._Swiper && this.checkDifference(), this._refreshButtons())
    },
    t._render = function() {
        this._Width = 410,
        this._WithBlock = !0,
        this._ImageList = e.MainImageList,
        this._ImageListRow = this._ImageListRow || 0,
        this._ImageListCol = this._ImageListCol || 16,
        this._Title = this._Title || "New market order",
        this._Key = this._Key || "cMFNewMarketOrder",
        this._Content = e.htmlToDOM(e._Templates.DialogNewOrderContent);
        var t = this._Content.querySelector(".DFooterControls");
        this._stopGroupChekedChangeDelegate = e.Delegate(this, this._onStopsGroupCheckedChanged),
        this._StopsGroup = new e.CheckBoxGroup({
            ParentNode: t,
            Label: "Stops:",
            Key: "cNMOFconfines",
            CheckedChanged: this._stopGroupChekedChangeDelegate,
            Items: [{
                Label: "None",
                Key: "CWCtNO",
                Id: "None",
                LabelPosition: "Right"
            },
            {
                Label: "By pips",
                Key: "cNMOFInPips",
                Id: "By_pips",
                LabelPosition: "Right"
            },
            {
                Label: "By price",
                Key: "cNMOFInMoney",
                Id: "By_price",
                LabelPosition: "Right"
            }]
        }),
        this._takeProfitNumEdit = new e.InputNumber({
            ParentNode: t,
            Width: 100,
            Id: "TakeProfitNumEdit",
            Label: "Take Profit",
            Key: "cTOTakeProfit",
            Focus: e.Delegate(this, this._onNumEditFocus),
            BeforeChange: e.Delegate(this, this.beforeTPChange),
            ChangedValue: e.Delegate(this, this._refreshButtons),
            ChangeValue: e.Delegate(this, this._refreshButtons)
        }),
        this._stopLossNumEdit = new e.InputNumber({
            ParentNode: t,
            Width: 100,
            Id: "StopLossNumEdit",
            Label: "Stop Loss",
            Key: "cTOStopLoss",
            Focus: e.Delegate(this, this._onNumEditFocus),
            BeforeChange: e.Delegate(this, this.beforeSLChange),
            ChangedValue: e.Delegate(this, this._refreshButtons),
            ChangeValue: e.Delegate(this, this._refreshButtons)
        }),
        e.DialogNewOrder.base._render.apply(this, arguments),
        this.addCSSClass("dialogNewOrder"),
        this._renderSettsContent(),
        this._SellButton && this._BuyButton && (this._SellButton._getImgNode().style.backgroundSize = "9px 9px", this._BuyButton._getImgNode().style.backgroundSize = "9px 9px")
    },
    t._createSymbolSelect = function(t) {
        return this._symbols = this._symbols || e.SymbolsData.getSelectedSymbolExceptIndexes(),
        this._symbols = 0 == this._symbols.length ? e.SymbolsData.getSymbolsExceptIndexes() : this._symbols,
        t = t || {},
        t.Options = this._symbols,
        t.Label = "Symbol:",
        t.Key = "cQASSymbol",
        t.Edit = !1,
        t.LabelPosition = t.LabelPosition || "Top",
        t.ChangedValue = t.ChangedValue || e.Delegate(this, this._onSymbolSelectChanged),
        new e.InputSelect(t)
    },
    t._createVolumeCombo = function(t) {
        return t = t || {},
        t.Label = "Volume:",
        t.Key = "cWCTTradePositionsFormVolume",
        t.LabelPosition = t.LabelPosition || "Top",
        t.ChangedValue = t.ChangedValue || e.Delegate(this, this._onVolumeSelectChanged),
        t.DropDown = e.Delegate(this, this._onVolumeDropDown),
        t.ChangeValue = e.Delegate(this, this._onVolumeSelectChange),
        t.OnlyNumbers = !0,
        new e.InputSelectNumber(t)
    },
    t._onVolumeDropDown = function() {
        if (this._currentSymbol) {
            var t = e.UtipFunctions,
            i = this._volumeCombo,
            s = this._currentSymbol,
            n = i.getValue(),
            o = i.indexOfText(n);
            i.setDecimals(t.getDecimalCount(s)),
            i.setOptions(t.getVolumesList(s)),
            i.setSelectedOption(o !== -1 ? o: 0)
        }
    },
    t._renderSettsContent = function() {
        var t = this._Content.querySelector(".DOrderSettsContainer");
        this._symbolSelect = this._createSymbolSelect({
            ParentNode: t,
            Width: 170
        }),
        this._volumeCombo = this._createVolumeCombo({
            ParentNode: t,
            Width: 170
        }),
        this._detailsNode = e.htmlToDOM(e._Templates.DialogNewOrderDetails),
        t.appendChild(this._detailsNode);
        var i = this._detailsNode.querySelector(".NewOrderCurrentQuote");
        switch (this._currentBidNode = i.querySelector(".Bid"), this._quoteSeparate = i.querySelector(".Separate"), this._currentAskNode = i.querySelector(".Ask"), this._statusNode = i.querySelector(".Status"), this._statusNode.innerHTML = "", this._descriptionNode = this._detailsNode.querySelector(".ExtendedSymbolName"), this._pipSizeLblNode = this._detailsNode.querySelector(".PipSizeLbl"), e.LangManager.isReversedLanguage() ? this._pipSizeLblNode.innerHTML = ':<bdo dir="rtl">' + e.LangManager.getStringByKey("cNMROnePip") + "</bdo>": this._pipSizeLblNode.innerHTML = (e.LangManager.getStringByKey("cNMROnePip") || "1 point") + ":", this._pipSizeValNode = this._detailsNode.querySelector(".PipSizeVal"), this._marginSizeLblNode = this._detailsNode.querySelector(".MarginSizeLbl"), e.LangManager.isReversedLanguage() ? this._marginSizeLblNode.innerHTML = ":" + e.LangManager.getStringByKey("cWCTTradePositionsFormMarginByPosition") : this._marginSizeLblNode.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormMarginByPosition") || "Margin") + ":", this._marginSizeValNode = this._detailsNode.querySelector(".MarginSizeVal"), e.LangManager.isReversedLanguage() && (e.swapDOMNodes(this._pipSizeLblNode, this._pipSizeValNode), e.swapDOMNodes(this._marginSizeLblNode, this._marginSizeValNode)), e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            this._pipSizeLblNode.style.display = "",
            this._pipSizeValNode.style.display = "",
            this._marginSizeLblNode.style.display = "",
            this._marginSizeValNode.style.display = "";
            break;
        case e.PlatformTypes.ptMT:
            this._pipSizeLblNode.style.display = "none",
            this._pipSizeValNode.style.display = "none",
            this._marginSizeLblNode.style.display = "none",
            this._marginSizeValNode.style.display = "none"
        }
        this._SellButton = new e.Button({
            ParentNode: t,
            Class: "DButton BigButton RedButton Sell",
            Text: "Sell",
            Key: "cMDSell",
            Width: 164,
            Height: 45,
            Click: e.Delegate(this, this._onSellBtnClick)
        }),
        this._BuyButton = new e.Button({
            ParentNode: t,
            Class: "DButton BigButton GreenButton Buy",
            Text: "Buy",
            Key: "cMDBuy",
            Width: 164,
            Height: 45,
            Click: e.Delegate(this, this._onBuyBtnClick)
        }),
        this._onSymbolSelectChanged(),
        this._symbolSelect.ChangedValue.fire({
            event: null,
            sender: this._symbolSelect
        })
    },
    t.getTakeProfitAndStopLoss = function(t) {
        var i = 0,
        s = 0,
        n = this._StopsGroup ? this._StopsGroup.getCheckedItem().getId() : "By_price",
        o = 0;
        if (this instanceof e.DialogPendingOrder) {
            var a = this._Swiper.getSelectedPage().getId(),
            r = this["_" + a];
            o = e.parseFloat(r.PriceNE.getValue())
        } else o = t === e._TraderData.positionType.buy ? this._currentSymbol._Bid: this._currentSymbol._Ask;
        var l = 1 / this._currentSymbol.getPrecision(),
        h = 0,
        d = 0;
        switch (n) {
        case "By_pips":
            if (h = this._takeProfitNumEdit.getValue() || 0, d = this._stopLossNumEdit.getValue() || 0, t === e._TraderData.positionType.buy) {
                var c = (21e3 - this._currentSymbol._Bid) / l,
                u = this._currentSymbol._Bid / l;
                i = h <= 0 ? 0 : h > c ? 21e3: o + this._takeProfitNumEdit.getValue() / this._currentSymbol.getPrecision(),
                s = d <= 0 ? 0 : d >= u ? 0 : o - this._stopLossNumEdit.getValue() / this._currentSymbol.getPrecision()
            } else if (t === e._TraderData.positionType.sell) {
                var c = (21e3 - this._currentSymbol._Ask) / l,
                u = this._currentSymbol._Ask / l;
                i = h <= 0 ? 0 : h >= u ? 0 : o - this._takeProfitNumEdit.getValue() / this._currentSymbol.getPrecision(),
                s = d <= 0 ? 0 : d > c ? 21e3: o + this._stopLossNumEdit.getValue() / this._currentSymbol.getPrecision()
            }
            break;
        case "By_price":
            i = this._takeProfitNumEdit.getValue() || 0,
            s = this._stopLossNumEdit.getValue() || 0
        }
        return {
            takeProfit: i,
            stopLoss: s,
            takeProfitByPips: h,
            stopLossByPips: d
        }
    },
    t.openPosition = function(t) {
        var i = this.getTakeProfitAndStopLoss(t),
        s = {
            symbolName: this._currentSymbol._SymbolName,
            traderID: e.TraderData._TraderInfo.id,
            operationType: e.requestPositionType[t],
            volume: e.parseFloat(this._volumeCombo.getValue()),
            price: t == e._TraderData.positionType.buy ? this._currentSymbol._Ask: this._currentSymbol._Bid,
            takeProfit: i.takeProfit,
            stopLoss: i.stopLoss,
            takeProfitByPips: i.takeProfitByPips || 0,
            stopLossByPips: i.stopLossByPips || 0
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.openPosition(s);
            break;
        case e.PlatformTypes.ptMT:
            s.operationType = e.TraderData.convertOrderTypeToMTFormat(s.operationType),
            e.requester.openMTPosition(s)
        }
        this.showQueryStatus(e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent"),
        this.lock()
    },
    t.show = function() {
        this._volumeCombo.setOptions(e.UtipFunctions.getVolumesList(e.SymbolsData.getSymbols()[this._symbolSelect.getValue()])),
        this._volumeCombo.setDecimals(e.UtipFunctions.getDecimalCount(this._currentSymbol)),
        this._volumeCombo.setSelectedOption(0),
        e.DialogNewOrder.base.show.apply(this, arguments),
        this._refreshButtons(),
        this.setCurrentQuote(this._currentSymbol)
    },
    t.lock = function() {
        this.setEnabled(!1),
        this._BuyButton.setEnabled(!1),
        this._SellButton.setEnabled(!1)
    },
    t.unLock = function() {
        this.setEnabled(!0),
        this._BuyButton.setEnabled(!0),
        this._SellButton.setEnabled(!0)
    },
    t.checkIsSymbolSelected = function(t) {
        var i = e.SymbolsData.getSelectedSymbols();
        return i.indexOf(t) !== -1
    },
    t._onBuyBtnClick = function() {
        return this._currentSymbol && this.checkIsSymbolSelected(this._currentSymbol._SymbolName) ? (this._closeBtn.setEnabled(!1), void this.openPosition(e._TraderData.positionType.buy)) : void e.showErrorDialog(e.LangManager.getStringByKey("cWCTSymbolIsDisabled") || "This symbol is not available")
    },
    t._onSellBtnClick = function() {
        return this._currentSymbol && this.checkIsSymbolSelected(this._currentSymbol._SymbolName) ? (this._closeBtn.setEnabled(!1), void this.openPosition(e._TraderData.positionType.sell)) : void e.showErrorDialog(e.LangManager.getStringByKey("cWCTSymbolIsDisabled") || "This symbol is not available")
    },
    t.showQueryStatus = function(t) {
        t ? (e.Browser.IsMobile || (this._currentAskNode.innerHTML = "", this._currentBidNode.innerHTML = "", this._quoteSeparate.innerHTML = ""), this._statusNode.innerHTML = t) : (e.Browser.IsMobile || (this._currentBidNode.innerHTML = e.numberFormat(this._currentSymbol._Bid, this._currentSymbol._Digits, ".", ""), this._currentAskNode.innerHTML = e.numberFormat(this._currentSymbol._Ask, this._currentSymbol._Digits, ".", ""), this._quoteSeparate.innerHTML = "/"), this._statusNode.innerHTML = "")
    },
    t.updateSymbolList = function() {
        var t = this._symbolSelect,
        i = t.getValue(),
        s = e.SymbolsData.getSymbols()[i];
        return this._symbols = e.SymbolsData.getSelectedSymbolExceptIndexes(),
        s && s.canUse() ? void t.setOptions(this._symbols) : 0 === this._symbols.length ? void this.enableControls(!1) : (t.setOptions(this._symbols), t.setSelectedOption(0), void t.ChangedValue.fire({
            event: null,
            sender: t
        }))
    },
    t._onSocketMessage = function(t) {
        if (t) {
            var i = t.msgType;
            switch (i) {
            case "positions":
            case "allMT4OpenOrders":
                this._closeBtn.setEnabled(!0),
                this.enabled() || this.hide();
                break;
            case "openPosition":
            case "openMT4Position":
                "SUCCESS" != t.msgResult.toUpperCase() && (this._closeBtn.setEnabled(!0), this.unLock(), this.showQueryStatus(""));
                break;
            case "traderGroup":
                var s = this._volumeCombo;
                s.setOptions(e.UtipFunctions.getVolumesList(this._currentSymbol)),
                s.indexOfText(s.getValue()) == -1 && s.setSelectedOption(0);
                break;
            case "symbols":
            case "mt4Symbols":
            case "deletedSymbol":
                this.updateSymbolList(t.symbolName),
                t.symbolName === this._symbolSelect.getValue() && this.enableControls(!1)
            }
        }
    },
    t = null,
    e.getDialogNewOrder = function() {
        return e._dialogNewOrder || (e._dialogNewOrder = new e.DialogNewOrder),
        e._dialogNewOrder
    },
    e
}),
define("dialogPendingOrder", ["dialogNewOrder", "swiper", "container"],
function(e) {
    e.DialogPendingOrder = function(t) {
        this._ModifyMode = this._ModifyMode || !1,
        e.DialogPendingOrder.base.constructor.apply(this, arguments),
        e.Socket.register(this)
    },
    e.initClass(e.DialogPendingOrder, e.DialogNewOrder);
    var t = e.DialogPendingOrder.prototype;
    t._onChangeLang = function() {
        e.DialogNewOrder.base._onChangeLang.apply(this, arguments)
    },
    t._getPageTitle = function(e) {
        var t = {
            Title: "",
            Key: ""
        };
        switch (e) {
        case "BuyLimit":
            t = {
                Title: "Buy Limit",
                Key: "cBuyLimit"
            };
            break;
        case "SellLimit":
            t = {
                Title: "Sell Limit",
                Key: "cSellLimit"
            };
            break;
        case "BuyStop":
            t = {
                Title: "Buy Stop",
                Key: "cBuyStop"
            };
            break;
        case "SellStop":
            t = {
                Title: "Sell Stop",
                Key: "cSellStop"
            }
        }
        return t
    },
    t._render = function() {
        this._ImageListRow = 4,
        this._ImageListCol = 4,
        this._Title = "New pending order",
        this._Key = "cMFNewPendingOrder",
        e.DialogPendingOrder.base._render.apply(this, arguments),
        this.setWidth(432),
        this.addCSSClass("dialogPendingOrder"),
        this.removeCSSClass("dialogNewOrder"),
        this._Content.className = "DialogPendingOrderContent",
        this._StopsGroup.CheckedChanged.remove(this, this._stopGroupChekedChangeDelegate),
        this._stopGroupChekedChangeDelegate = e.Delegate(this, this._onStopsGroupCheckedChanged1),
        this._StopsGroup.CheckedChanged.add(this._stopGroupChekedChangeDelegate),
        this._volumeCombo.DropDown.fire(this._volumeCombo)
    },
    t._onStopsGroupCheckedChanged1 = function() {
        var e, t = this._StopsGroup.getCheckedItem().getId();
        switch (t) {
        case "By_pips":
            this.calculateStopsLimits(!0),
            e = this._currentSymbol._GPipsCount * this._currentSymbol._StopLevel,
            this._takeProfitNumEdit.setValue(e),
            this._takeProfitNumEdit.setStep(1),
            this._takeProfitNumEdit.setDecimals(0),
            this._stopLossNumEdit.setValue(e),
            this._stopLossNumEdit.setStep(1),
            this._stopLossNumEdit.setDecimals(0);
            break;
        case "By_price":
            this.calculateStopsLimits(!1),
            this._takeProfitNumEdit.setValue(0),
            this._takeProfitNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
            this._takeProfitNumEdit.setDecimals(this._currentSymbol._Digits),
            this._stopLossNumEdit.setValue(0),
            this._stopLossNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
            this._stopLossNumEdit.setDecimals(this._currentSymbol._Digits);
            break;
        case "None":
        default:
            this.calculateStopsLimits(!1),
            this._takeProfitNumEdit.setValue(""),
            this._stopLossNumEdit.setValue(""),
            this._refreshPutButton()
        }
        this.checkDifference()
    },
    t.getFirstTakeProfitValue = function(e) {
        var t, i = this._Swiper.getSelectedPage().getId(),
        s = this["_" + i].PriceNE.getValue(),
        n = this._currentSymbol,
        o = parseInt(n.getStopLevel());
        return o = o > 0 ? o: 1,
        t = n.getGPipsCount() * (o * n.getFormattedPrecision()),
        "up" == e.changeDirection ? s + t: s - t
    },
    t.getFirstStopLossValue = function(e) {
        var t, i = this._Swiper.getSelectedPage().getId(),
        s = this["_" + i].PriceNE.getValue(),
        n = this._currentSymbol,
        o = parseInt(n.getStopLevel());
        return o = o > 0 ? o: 1,
        t = n.getGPipsCount() * (o * n.getFormattedPrecision()),
        "up" == e.changeDirection ? s + t: s - t
    },
    t._conditionsChange = function(e) {
        this.checkDifference()
    },
    t.checkIsSymbolSelected = function(t) {
        var i = e.SymbolsData.getSelectedSymbols();
        return i.indexOf(t) !== -1
    },
    t._onPutButtonClick = function() {
        var t = this._currentSymbol,
        i = "",
        s = !t;
        if (s || (i = t.getSymbolName(), s = !this.checkIsSymbolSelected(i) && !this._ModifyMode), s) return void e.showErrorDialog(e.LangManager.getStringByKey("cWCTSymbolIsDisabled") || "This symbol is not available");
        var n, o, a = this._Swiper.getSelectedPage().getId(),
        r = this["_" + a];
        switch (a) {
        case "BuyLimit":
            n = e._TraderData.positionType.buy,
            o = e.requestPendingOrderType.BuyLimit;
            break;
        case "BuyStop":
            n = e._TraderData.positionType.buy,
            o = e.requestPendingOrderType.BuyStop;
            break;
        case "SellStop":
            n = e._TraderData.positionType.sell,
            o = e.requestPendingOrderType.SellStop;
            break;
        case "SellLimit":
            n = e._TraderData.positionType.sell,
            o = e.requestPendingOrderType.SellLimit
        }
        var l = this.getTakeProfitAndStopLoss(n),
        h = {
            symbolName: i,
            traderID: e.TraderData._TraderInfo.id,
            orderType: o,
            volume: e.parseFloat(this._volumeCombo.getValue()),
            operationType: e.requestPositionType[n],
            price: e.parseFloat(r.PriceNE.getValue()),
            takeProfit: l.takeProfit,
            stopLoss: l.stopLoss
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            this._Order ? (h.id = this._Order.id, e.requester.changePendingOrder(h)) : e.requester.openPendingOrder(h),
            this._closeBtn.setEnabled(!1);
            break;
        case e.PlatformTypes.ptMT:
            h.operationType = e.TraderData.convertOrderTypeToMTFormat(o),
            this._Order ? (h.id = this._Order.id, e.requester.changeMTPendingOrder(h)) : e.requester.openMTPendingOrder(h),
            this._closeBtn.setEnabled(!1)
        }
        this.setEnabled(!1)
    },
    t._createPutButton = function() {
        this._PutButton = new e.Button({
            Text: "Place",
            Key: "cNPFPut",
            Class: "DButton BigButton GreenButton",
            Width: 178,
            Height: 50,
            Click: e.Delegate(this, this._onPutButtonClick)
        })
    },
    t._renderSettsContent = function() {
        this._pageNames = ["BuyLimit", "SellLimit", "BuyStop", "SellStop"];
        var t, i, s, n = [];
        for (this._symbolSelect = this._createSymbolSelect({
            LabelPosition: "Left",
            Width: 120
        }), this._descriptionNode = e.htmlToDOM('<div class="ExtendedSymbolName"></div>'), this._volumeCombo = this._createVolumeCombo({
            LabelPosition: "Left",
            Class: "DPOVolume",
            Width: 120
        }), this._createPutButton(), t = 0; t < this._pageNames.length; t++) i = this._pageNames[t],
        s = this._getPageTitle(i),
        n.push({
            Title: s.Title,
            Key: s.Key,
            Id: i,
            Content: this._getPageContent(i)
        });
        this._Swiper = new e.Swiper({
            ParentNode: this._Content.querySelector(".DOrderSettsContainer"),
            TabMode: "Normal",
            Class: "DPOSettsContent",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            Pages: n,
            Animation: e.SwiperAnimationConst.None
        }),
        this._stopLossNumEdit.ChangedValue.add(e.Delegate(this, this._refreshPutButton)),
        this._takeProfitNumEdit.ChangedValue.add(e.Delegate(this, this._refreshPutButton))
    },
    t._onStopsGroupCheckedChanged = function() {
        e.DialogPendingOrder.base._onStopsGroupCheckedChanged.apply(this, arguments),
        this._refreshPutButton(),
        this.checkDifference()
    },
    t._refreshPutButton = function() {
        if (this._Swiper) {
            if (this.allowCheck) {
                var t, i = this._Swiper.getSelectedPage().getId(),
                s = this["_" + i],
                n = s.PriceNE.getValue(),
                o = this._currentSymbol._StopLevel / this._currentSymbol.getPrecision(),
                a = this._takeProfitNumEdit.getValue(),
                r = this._stopLossNumEdit.getValue(),
                l = this._StopsGroup.getCheckedItem().getId(),
                h = !1;
                if (n > 0 && e.parseFloat(this._volumeCombo.getValue()) > 0) if ("By_pips" == l) h = (!r || r > this._currentSymbol._StopLevel) && (!a || a > this._currentSymbol._StopLevel);
                else switch (i) {
                case "BuyLimit":
                case "BuyStop":
                    t = "BuyLimit" == i ? 1 : -1,
                    h = n * t < this._currentSymbol._Ask * t - o && (!r || o + r < n) && (!a || a - o > n);
                    break;
                case "SellStop":
                case "SellLimit":
                    t = "SellStop" == i ? 1 : -1,
                    h = n * t < this._currentSymbol._Bid * t - o && (!r || r - o > n) && (!a || a + o < n);
                    break;
                default:
                    h = !1
                }
            }
            e.UtipFunctions.isAllowTrade(e.UtipFunctions.setServerFormatDate(e.SymbolsData._LastChangedTime), this._currentSymbol) || (h = !1),
            this._PutButton.isEnabled() !== (h && this.allowCheck) && this._PutButton.setEnabled(h && this.allowCheck)
        }
    },
    t._onSwiperChangeSelectedPage = function(e) {
        var t = e.getSelectedPage()._Content,
        i = t.querySelector(".Top");
        t.querySelector(".Center");
        this._symbolSelect.addToNode(i),
        i.appendChild(this._descriptionNode),
        this._volumeCombo.addToNode(t.querySelector(".volumeComboNode")),
        this._PutButton.addToNode(t.querySelector(".Bottom")),
        this._currentSymbol || this._symbolSelect.setSelectedOption(0),
        this._onSymbolSelectChanged(!0)
    },
    t._onSymbolSelectChanged = function(t) {
        this._currentSymbol = e.SymbolsData.getSymbols()[this._symbolSelect.getValue()],
        this.enableControls(!0),
        this.setCurrentQuote(this._currentSymbol);
        var i, s, n, o, a, r;
        for (i = 0; i < this._pageNames.length; i++) {
            switch (s = this["_" + this._pageNames[i]], a = 1 / this._currentSymbol.getPrecision(), r = parseInt(this._currentSymbol._StopLevel) > 0 ? parseInt(this._currentSymbol._StopLevel) : 1, o = this._currentSymbol._GPipsCount * (r * a), this._pageNames[i]) {
            case "BuyLimit":
                n = this._currentSymbol._Ask - o;
                break;
            case "SellStop":
                n = this._currentSymbol._Bid - o;
                break;
            case "SellLimit":
                n = this._currentSymbol._Bid + o;
                break;
            case "BuyStop":
                n = this._currentSymbol._Ask + o
            }
            s.PriceNE.setDecimals(this._currentSymbol._Digits),
            s.PriceNE.setValue(n),
            s.PriceNE.setStep(a),
            this._refreshMyPrice({
                pageName: this._pageNames[i]
            })
        }
        t !== !0 && this._volumeCombo.setSelectedOption(0),
        this._onStopsGroupCheckedChanged1()
    },
    t._refreshMyPrice = function(t) {
        var i = this["_" + t.pageName];
        i.currentMyPriceNode.innerHTML = e.numberFormat(i.PriceNE.getValue(), this._currentSymbol._Digits, ",", ""),
        this.checkDifference(),
        this._refreshPutButton()
    },
    t._getPageContent = function(t) {
        var i = e.htmlToDOM('<div class="PendingOrderSetts"><div class="Top"></div><div class="Center"></div><div class="Bottom"></div></div>'),
        s = i.querySelector(".Top"),
        n = i.querySelector(".Center"),
        o = (i.querySelector(".Bottom"), {});
        return o.pageName = t,
        o.currentSymbolPriceNode = e.htmlToDOM('<div class="SymbolPrice"></div>'),
        o.currentMyPriceNode = e.htmlToDOM('<div class="MyPrice"></div>'),
        o.PendingOrderImg = new e.Container({
            Class: "PendingOrderImg " + t,
            Items: [o.currentSymbolPriceNode, o.currentMyPriceNode],
            ParentNode: s
        }),
        o.volumeComboNode = new e.Container({
            Class: "volumeComboNode",
            ParentNode: n
        }),
        o.PriceNE = new e.InputNumber({
            Width: 120,
            Label: "Price",
            Key: "cMDPrice",
            MaxValue: 999999,
            ChangedValue: e.Delegate(this, this._refreshMyPrice, {
                pageName: t
            }),
            ChangeValue: e.Delegate(this, this._refreshMyPrice, {
                pageName: t
            }),
            ParentNode: n
        }),
        this["_" + t] = o,
        i
    },
    t._onGetQuote = function(t) {
        if (t && this._currentSymbol && this._currentSymbol._SymbolName == t._SymbolName && (this.setCurrentQuote(this._currentSymbol), this._refreshPutButton(), this._Order)) {
            var i = this._Order,
            s = i.pendingOrderType == e.requestPendingOrderType.BuyLimit || i.pendingOrderType == e.requestPendingOrderType.BuyStop,
            n = s ? t._Ask: t._Bid,
            o = t.getPrecision(),
            a = e.parseFloat(t.getStopLevel()) / o;
            e.UtipFunctions.canClosePendingOrder(i, n, a) ? this._Content.classList.remove("Disabled") : this._Content.classList.add("Disabled")
        }
    },
    t.enableControls = function(t) {
        var i = this._DomNode.querySelector(".Center"),
        s = this._DomNode.querySelector(".DFooterControls");
        i && s && (t === !0 ? (e.removeCSSClass(i, "Disabled"), e.removeCSSClass(s, "Disabled")) : (e.addCSSClass(i, "Disabled"), e.addCSSClass(s, "Disabled")))
    },
    t._refreshButtons = function() {
        this._refreshPutButton()
    },
    t._onVolumeSelectChanged = function() {
        this._refreshPutButton(),
        this.checkDifference()
    },
    t._onVolumeSelectChange = function() {
        this.checkDifference(),
        this._refreshPutButton()
    },
    t.setCurrentQuote = function(t) {
        this._currentSymbol = "string" == typeof t ? e.SymbolsData.getSymbols()[t] : t,
        this._descriptionNode.innerHTML = this._currentSymbol._Description,
        this._symbolSelect.setSelectedOption(this._symbols.indexOf(this._currentSymbol._SymbolName));
        for (var i = 0; i < this._pageNames.length; i++) this.setPageCurrentQuote(t, this._pageNames[i])
    },
    t.setPageCurrentQuote = function(t, i) {
        var s, n = this["_" + i];
        switch (i) {
        case "BuyLimit":
        case "BuyStop":
            s = this._currentSymbol._Ask;
            break;
        case "SellLimit":
        case "SellStop":
            s = this._currentSymbol._Bid
        }
        n.currentSymbolPriceNode.innerHTML = e.numberFormat(s, this._currentSymbol._Digits, ",", "")
    },
    t._onSocketMessage = function(t) {
        if (t) {
            var i = t.msgType;
            switch (i) {
            case "openPendingOrder":
            case "changePendingOrder":
            case "changeMT4PendingOrder":
            case "openMT4PendingOrder":
                if ("SUCCESS" == t.msgResult.toUpperCase()) {
                    if (this.setEnabled(!1), this.hide(), e.Browser.IsMobile) {
                        var s = e.getTerminal().mainSwiper,
                        n = e.MobileTerminalPage;
                        s.getSelectedPageIndex() === n.QuotesPage && s.setSelectedPage(n.TradePage)
                    }
                } else this.setEnabled(!0);
                this._closeBtn.setEnabled(!0);
                break;
            case "traderGroup":
                var o = this._volumeCombo;
                o.setOptions(e.UtipFunctions.getVolumesList(this._currentSymbol, 5)),
                o.indexOfText(o.getValue()) == -1 && o.setSelectedOption(0);
                break;
            case "symbols":
            case "mt4Symbols":
            case "deletedSymbol":
                var a = t.symbolName;
                if (this.updateSymbolList(a), a === this._symbolSelect.getValue() && this.enableControls(!1), 0 === this._symbols.length) {
                    var r = this._Swiper.getDomNode().querySelector(".WTSwiperTabsBlock");
                    e.addCSSClass(r, "Disabled")
                }
            }
        }
    },
    t._onVolumeDropDown = function() {
        if (this._currentSymbol) {
            var t = e.UtipFunctions,
            i = this._volumeCombo,
            s = this._currentSymbol,
            n = i.getValue(),
            o = i.indexOfText(n);
            i.setDecimals(t.getDecimalCount(s));
            var a = this._ModifyMode;
            i.setOptions(t.getVolumesList(s, 5)),
            a || i.setSelectedOption(o !== -1 ? o: 0)
        }
    },
    t.show = function(t) {
        this.allowCheck = !0,
        this._onSymbolSelectChanged(!1),
        e.DialogPendingOrder.base.show.apply(this, arguments),
        this._refreshPutButton();
        var i = this._volumeCombo.getValue(),
        s = this._volumeCombo.indexOfText(i);
        this._volumeCombo.setOptions(e.UtipFunctions.getVolumesList(this._currentSymbol, 5)),
        this._volumeCombo.setSelectedOption(s !== -1 ? s: 0)
    },
    t._onClosed = function() {
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this),
        this.removeFromDom(),
        e._dialogMasterObject.unRegister(this),
        delete e._dialogPendingOrder
    },
    t.checkDifference = function() {
        var t = 0;
        if (null != this._Order) {
            var i, s, n = this._Swiper.getSelectedPage().getId(),
            o = this["_" + n];
            switch (n) {
            case "BuyLimit":
                i = e._TraderData.positionType.buy,
                s = e.requestPendingOrderType.BuyLimit;
                break;
            case "BuyStop":
                i = e._TraderData.positionType.buy,
                s = e.requestPendingOrderType.BuyStop;
                break;
            case "SellStop":
                i = e._TraderData.positionType.sell,
                s = e.requestPendingOrderType.SellStop;
                break;
            case "SellLimit":
                i = e._TraderData.positionType.sell,
                s = e.requestPendingOrderType.SellLimit
            }
            var a = this.getTakeProfitAndStopLoss(i);
            String(a.takeProfit) == this._Order.takeProfit && String(a.stopLoss) == this._Order.stopLoss || t++,
            e.parseFloat(this._volumeCombo.getValue()) != this._Order.volume && t++,
            e.parseFloat(o.PriceNE.getValue()) != this._Order.openPrice && t++
        }
        t > 0 ? this.allowCheck = !0 : (this instanceof e.DialogModifyPendingOrder || e.MobileDialogModifyPendingOrder && this instanceof e.MobileDialogModifyPendingOrder) && (this.allowCheck = !1),
        this._refreshPutButton()
    },
    t = null,
    e.getDialogPendingOrder = function() {
        return e._dialogPendingOrder || (e._dialogPendingOrder = new e.DialogPendingOrder),
        e._dialogPendingOrder
    },
    e.DialogModifyPendingOrder = function(t) {
        this._ModifyMode = !0,
        this._FixPageIdx = 0,
        this._Order = null,
        e.DialogModifyPendingOrder.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogModifyPendingOrder, e.DialogPendingOrder);
    var i = e.DialogModifyPendingOrder.prototype;
    return i._render = function() {
        this._ImageListRow = 4,
        this._ImageListCol = 4,
        this._Title = "Pending order modify",
        this._Key = "CWNOEditPendingOrder",
        e.DialogPendingOrder.base._render.apply(this, arguments),
        this.setWidth(432),
        this.addCSSClass("dialogPendingOrder"),
        this._Content.className = "DialogPendingOrderContent",
        this._symbolSelect.setEnabled(!1),
        this._Swiper.fixPage(this._FixPageIdx),
        this._conditionsChangeDelegate = e.Delegate(this, this._conditionsChange),
        this._takeProfitNumEdit.ChangedValue.add(this._conditionsChangeDelegate),
        this._stopLossNumEdit.ChangedValue.add(this._conditionsChangeDelegate),
        this._takeProfitNumEdit.ChangeValue.add(this._conditionsChangeDelegate),
        this._stopLossNumEdit.ChangeValue.add(this._conditionsChangeDelegate)
    },
    i._createPutButton = function() {
        this._PutButton = new e.Button({
            Text: "Modify order",
            Key: "cPPCEditOrder",
            Class: "DButton BigButton",
            Width: 178,
            Height: 50,
            Enabled: !1,
            Click: e.Delegate(this, this._onPutButtonClick)
        })
    },
    i.show = function(t) {
        this.allowCheck = !1,
        this._Order = t;
        var i, s = e.SymbolsData.getSymbols()[t.symbolName];
        switch (t.pendingOrderType) {
        case "100":
            i = 0;
            break;
        case "101":
            i = 1;
            break;
        case "102":
            i = 2;
            break;
        case "103":
            i = 3
        }
        if (void 0 !== i && (this._FixPageIdx = i), this._Swiper.fixPage(this._FixPageIdx), this.setCurrentQuote(e.SymbolsData.getSymbols()[t.symbolName]), this._volumeCombo.setValue(e.numberFormat(1 * t.volume, 2, ".", "")), this["_" + this._pageNames[this._FixPageIdx]].PriceNE.setDecimals(s._Digits), this["_" + this._pageNames[this._FixPageIdx]].PriceNE.setValue(e.numberFormat(1 * t.openPrice, s._Digits, ",", "")), this["_" + this._pageNames[this._FixPageIdx]].PriceNE.setStep(1 / s.getPrecision()), this._refreshMyPrice({
            pageName: this._pageNames[this._FixPageIdx]
        }), 1 * t.takeProfit || 1 * t.stopLoss) {
            var n = e.numberFormat(1 * t.takeProfit, s._Digits, ".", ""),
            o = e.numberFormat(1 * t.stopLoss, s._Digits, ".", "");
            this._StopsGroup.setCheckedItem("By_price"),
            this._takeProfitNumEdit.setValue(n),
            this._stopLossNumEdit.setValue(o)
        }
        e.DialogPendingOrder.base.show.apply(this, arguments),
        this._volumeCombo.setValue(e.numberFormat(t.volume, 2, ".", "")),
        this.checkDifference()
    },
    i._onClosed = function() {
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this),
        this.removeFromDom(),
        e._dialogMasterObject.unRegister(this),
        delete e._dialogModifyPendingOrder
    },
    i = null,
    e.getDialogModifyPendingOrder = function() {
        return e._dialogModifyPendingOrder || (e._dialogModifyPendingOrder = new e.DialogModifyPendingOrder),
        e._dialogModifyPendingOrder
    },
    e
}),
define("dialogSelectRange", ["dialog"],
function(e) {
    e.DialogSelectRange = function(t) {
        e.DialogSelectRange.base.constructor.apply(this, arguments),
        e.LangManager.register(this)
    },
    e.initClass(e.DialogSelectRange, e.Dialog);
    var t = e.DialogSelectRange.prototype;
    return t._render = function() {
        this._Height = 330,
        this._Width = 450,
        this._WithBlock = !0,
        this._Title = "Choice of dates",
        this._Key = "cPDFcaption",
        this._Content = e.htmlToDOM(e._Templates.SelectRangeContent),
        this._Content.appendChild(e.htmlToDOM('<div class="DFooterControls Center"></div>'));
        var t = this._Content.querySelectorAll(".DLeftControls")[0],
        i = this._Content.querySelectorAll(".DRightControls")[0],
        s = this._Content.querySelector(".DFooterControls");
        this._calendarLabelStart = t.querySelector(".CalendarLabel"),
        this._calendarPlacementStart = t.querySelector(".CalendarPlacement"),
        this._calendarLabelEnd = i.querySelector(".CalendarLabel"),
        this._calendarPlacementEnd = i.querySelector(".CalendarPlacement"),
        this.writeLabels(),
        this._okBtn = new e.Button({
            ParentNode: s,
            Class: "DGreenButton",
            Width: 110,
            Text: "OK",
            Click: e.Delegate(this, this._onOKBtnClick)
        }),
        e.DialogSelectRange.base._render.apply(this, arguments),
        this.addCSSClass("dialogSelectRange")
    },
    t.show = function() {
        e.DialogSelectRange.base.show.apply(this, arguments),
        this.createAndAttachLangPackage(),
        this.calendarStart || this.calendarEnd || (this.calendarStart = new RichCalendar, this.calendarStart.date = e.UtipFunctions.getUTCDate(e.SymbolsData.getLastChangedTime()), this.calendarStart.language = e.LangManager.getLang(), this.calendarStart.auto_close = !1, this.calendarStart.user_onchange_handler = this.cal_on_changeStart.bind(this), this.calendarStart.user_onclose_handler = function() {},
        this.calendarEnd = new RichCalendar, this.calendarEnd.date = e.UtipFunctions.getUTCDate(e.SymbolsData.getLastChangedTime()), this.calendarEnd.language = e.LangManager.getLang(), this.calendarEnd.auto_close = !1, this.calendarEnd.user_onchange_handler = this.cal_on_changeEnd.bind(this), this.calendarEnd.user_onclose_handler = function() {}),
        this.calendarStart.show(0, 0, this._calendarPlacementStart, "child"),
        this.calendarEnd.show(0, 0, this._calendarPlacementEnd, "child")
    },
    t.cal_on_changeStart = function(e, t) {
        "day" == t && e.show_date()
    },
    t.cal_on_changeEnd = function(e, t) {
        "day" == t && e.show_date()
    },
    t._onOKBtnClick = function(t) {
        this.rangeString = (e.LangManager.getStringByKey("cMFFrom") || "From") + ": ",
        this.rangeString += this.calendarStart.get_formatted_date() + " ",
        this.rangeString += (e.LangManager.getStringByKey("cMFTo") || "To") + ": ",
        this.rangeString += this.calendarEnd.get_formatted_date(),
        this.hide(t, !0)
    },
    t.createAndAttachLangPackage = function() {
        var t = e.LangManager.getLang();
        if (e.LangManager.isReversedLanguage()) return void this.createAndAttachEnglishLangPackage(t);
        if (!RichCalendar.rc_lang_data[t]) {
            var i = [];
            i.today = e.LangManager.getStringByKey("cPDTCurrent") || "Today",
            i.time = e.LangManager.getStringByKey("cJRNLTime") || "Time",
            i.dayNamesShort = [e.LangManager.getStringByKey("cDOWShortSunday") || "Sun", e.LangManager.getStringByKey("cDOWShortMonday") || "Mon", e.LangManager.getStringByKey("cDOWShortTuesday") || "Tue", e.LangManager.getStringByKey("cDOWShortWednesday") || "Wed", e.LangManager.getStringByKey("cDOWShortThursday") || "Thu", e.LangManager.getStringByKey("cDOWShortFriday") || "Fri", e.LangManager.getStringByKey("cDOWShortSaturday") || "Sat"],
            i.dayNames = [e.LangManager.getStringByKey("cDOWLongSunday") || "Sunday", e.LangManager.getStringByKey("cDOWLongMonday") || "Monday", e.LangManager.getStringByKey("cDOWLongTuesday") || "Tuesday", e.LangManager.getStringByKey("cDOWLongWednesday") || "Wednesday", e.LangManager.getStringByKey("cDOWLongThursday") || "Thursday", e.LangManager.getStringByKey("cDOWLongFriday") || "Friday", e.LangManager.getStringByKey("cDOWLongSaturday") || "Saturday"],
            i.monthNamesShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            i.monthNames = [e.LangManager.getStringByKey("cMonthJanuary") || "January", e.LangManager.getStringByKey("cMonthFebruary") || "February", e.LangManager.getStringByKey("cMonthMarch") || "March", e.LangManager.getStringByKey("cMonthApril") || "April", e.LangManager.getStringByKey("cMonthMay") || "May", e.LangManager.getStringByKey("cMonthJune") || "June", e.LangManager.getStringByKey("cMonthJuly") || "July", e.LangManager.getStringByKey("cMonthAugust") || "August", e.LangManager.getStringByKey("cMonthSeptember") || "September", e.LangManager.getStringByKey("cMonthOctober") || "October", e.LangManager.getStringByKey("cMonthNovember") || "November", e.LangManager.getStringByKey("cMonthDecember") || "December"],
            i.footerDateFormat = "%D, %F %j %Y",
            i.dateFormat = "%d.%m.%Y",
            i.footerDefaultText = e.LangManager.getStringByKey("cMFSelectDate") || "Select date",
            i.clear = "Clear Date",
            i.prev_year = e.LangManager.getStringByKey("cMFPreviousYear") || "Previous year",
            i.prev_month = e.LangManager.getStringByKey("cMFPreviousMonth") || "Previous month",
            i.next_month = e.LangManager.getStringByKey("cMFNextMonth") || "Next month",
            i.next_year = e.LangManager.getStringByKey("cMFNextYear") || "Next year",
            i.close = e.LangManager.getStringByKey("cCDClose") || "Close",
            i.weekend = "0,6",
            i.make_first = (e.LangManager.getStringByKey("cMFStartWith") || "Start with") + " %s",
            RichCalendar.rc_lang_data[t] = i
        }
    },
    t.createAndAttachEnglishLangPackage = function(e) {
        if (!RichCalendar.rc_lang_data[e]) {
            var t = [];
            t.today = "Today",
            t.time = "Time",
            t.dayNamesShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            t.dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            t.monthNamesShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            t.monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            t.footerDateFormat = "%D, %F %j %Y",
            t.dateFormat = "%d.%m.%Y",
            t.footerDefaultText = "Select date",
            t.clear = "Clear Date",
            t.prev_year = "Previous year",
            t.prev_month = "Previous month",
            t.next_month = "Next month",
            t.next_year = "Next year",
            t.close = "Close",
            t.weekend = "0,6",
            t.make_first = "Start with %s",
            RichCalendar.rc_lang_data[e] = t
        }
    },
    t.writeLabels = function() {
        this._calendarLabelStart.innerHTML = (e.LangManager.getStringByKey("cPDFStart") || "Start") + ":",
        this._calendarLabelEnd.innerHTML = (e.LangManager.getStringByKey("cPDFEnd") || "End of Period") + ":"
    },
    t._onChangeLang = function() {
        this.createAndAttachLangPackage(),
        this.writeLabels(),
        this.calendarStart.language = e.LangManager.getLang(),
        this.calendarEnd.language = e.LangManager.getLang(),
        e.DialogSelectRange.base._onChangeLang.apply(this, arguments)
    },
    t.hide = function(t, i) {
        i || (this.rangeString = null),
        e.DialogSelectRange.base.hide.apply(this, arguments),
        this.calendarStart && this.calendarEnd && (this.calendarStart.hide(), this.calendarEnd.hide()),
        this.clearDOMNode(),
        this.dispose()
    },
    t.clearDOMNode = function() {
        for (var e = document.getElementsByClassName("rc_iframe_body"), t = 0; t < e.length; t++) document.body.removeChild(e[t])
    },
    t.dispose = function() {
        e._dialogMasterObject.unRegister(this),
        e.LangManager.unRegister(this),
        delete e._dialogSelectRange
    },
    t = null,
    e.getDialogSelectRange = function(t) {
        return e._dialogSelectRange || (e._dialogSelectRange = new e.DialogSelectRange(t)),
        e._dialogSelectRange
    },
    e
}),
define("dialogReport", ["dialog", "swiper", "divTable", "inputSelect", "socket", "dialogSelectRange"],
function(e) {
    e.DialogReport = function(t) {
        this._Account = null,
        e.DialogReport.base.constructor.apply(this, arguments),
        e.Socket.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.DialogReport, e.Dialog);
    var t = e.DialogReport.prototype;
    return e.DialogReport.typesOfClosure = {
        OpenedOrderPrice: "120",
        OpenedMarketPrice: "121",
        ErrorDeposit: "122",
        ErrorDeviation: "124",
        ErrorOpenPriceHigherTP: "130",
        ErrorOpenPriceLowerTP: "127",
        ErrorOpenPriceHigherSL: "128",
        ErrorOpenPriceLowerSL: "129",
        Error_TP_or_SL: "126"
    },
    e.DialogReport.closeReasons = {
        ClosedByClient: "210",
        ClosedByStopOut: "211",
        ClosedDate: "212",
        ClosedByPendingOrder: "213",
        ClosedByTP: "214",
        ClosedBySL: "215",
        ClosedByBalanceMarginCall: "216",
        CloseByStopLossAfterTheGap: "217",
        CloseByTakeProfitAfterTheGap: "218"
    },
    e.DialogReport.perionds = {
        Today: 0,
        LastWeek: 1,
        LastMonth: 2,
        Last3Months: 3,
        AllOperations: 4
    },
    t._render = function() {
        e.UserSettings.DialogReportSize || (e.UserSettings.DialogReportSize = {}),
        this._Width = e.UserSettings.DialogReportSize.Width || 1185,
        this._minWidth = 630,
        this._minHeight = 140,
        this._WithBlock = !1,
        this._Server = null,
        this._ConnectAccount = e.TraderData.getTraderInfo().id,
        this._Title = "Report",
        this._Key = "cMFReport",
        this._ImageList = e.MainImageList,
        this._ImageListRow = 5,
        this._ImageListCol = 5,
        this._Sizedble = !0,
        this._Class = "DialogReport",
        this._HeightIncrement = 0,
        this._Content = e.htmlToDOM(e._Templates.DialogReportContent),
        this._ShowBonuses = "1" == e.TraderData._TraderInfo.showbonuses;
        var t = this._Content.querySelector(".DFooterControls"),
        i = this._Content.querySelector(".DTabControlContainer");
        this._periodSelect = new e.InputSelect({
            ParentNode: t,
            Width: 220,
            Label: "Period:",
            Key: "clblPeriod",
            Class: "Left",
            Edit: !1,
            Options: [{
                Text: "Today",
                Key: "cPDTCurrent",
                Id: "Today"
            },
            {
                Text: "Last week",
                Key: "cPDTWeek",
                Id: "Last_week"
            },
            {
                Text: "Last month",
                Key: "cPDTmonth",
                Id: "Last_month"
            },
            {
                Text: "Last 3 months",
                Key: "cPDT3month",
                Id: "Last_3_months"
            },
            {
                Text: "All operations",
                Key: "cPDTAll",
                Id: "All_operations"
            },
            {
                Text: "Choose",
                Key: "cPDTEnter",
                Id: "Choose"
            }],
            ChangedValue: e.Delegate(this, this._onChangedValue)
        }),
        this._periodSelect.setSelectedOption(e.DialogReport.perionds.AllOperations),
        this._downloadBtn = new e.Button({
            ParentNode: t,
            Class: "DButton NoButton",
            Width: 110,
            height: 30,
            Text: "Show",
            Key: "cCFShow",
            Click: e.Delegate(this, this._onDownloadBtnClick)
        });
        var s = this.getOptionDealsTable(),
        n = this.getDealsTable(),
        o = this.getGeneralReportTable(),
        a = this.getDepositTable(),
        r = this.getExecutedOrdersTable(),
        l = a._DomNode,
        h = o._DomNode,
        d = s._DomNode,
        c = n._DomNode,
        u = r._DomNode,
        g = e.htmlToDOM(e._Templates.ExecutedOrdersContent),
        p = e.htmlToDOM(e._Templates.DepositContent),
        m = e.htmlToDOM(e._Templates.GeneralReportContent),
        _ = e.htmlToDOM(e._Templates.OptionDealsContent),
        y = e.htmlToDOM(e._Templates.DealsContent),
        S = p.querySelector(".DepositTableContent");
        S.appendChild(l);
        var f = m.querySelector(".GeneralReportTableContent");
        f.appendChild(h);
        var v = y.querySelector(".DealsTableContent");
        v.appendChild(c);
        var C = _.querySelector(".OptionDealsTableContent");
        C.appendChild(d);
        var b = g.querySelector(".ExecutedOrdersTableContent");
        b.appendChild(u),
        this._Swiper = new e.Swiper({
            ParentNode: i,
            Height: 431,
            TabMode: "Normal",
            Pages: [{
                Title: "General report",
                Key: "cOFGeneralReport",
                Id: "general_report",
                Content: m
            },
            {
                Title: "Trade operations",
                Key: "cOFTradeOperation",
                Id: "deals",
                Content: y
            },
            {
                Title: "Options",
                Key: "cOFOptions",
                Id: "options_deals",
                Content: _
            },
            {
                Title: "Deposit",
                Key: "cOFDeposit",
                Id: "deposit",
                Content: p
            },
            {
                Title: e.getTerminal().platformType === e.PlatformTypes.ptMT ? "Canceled orders": "Executed orders",
                Key: e.getTerminal().platformType === e.PlatformTypes.ptMT ? "cOFCanceled": "cOFExcuted",
                Id: "executed_orders",
                Content: g
            }],
            ChangeSelectedPage: e.Delegate(this, this._onChangedValue),
            Animation: e.SwiperAnimationConst.Smoothly
        }),
        this._Swiper.getPages()[0].setContextMenu(this._generalReportTable._ContextMenu),
        this._Swiper.getPages()[1].setContextMenu(this._dealsTable._ContextMenu),
        this._Swiper.getPages()[2].setContextMenu(this._optionDealsTable._ContextMenu),
        this._Swiper.getPages()[3].setContextMenu(this._depositTable._ContextMenu),
        this._Swiper.getPages()[4].setContextMenu(this._executedOrdersTable._ContextMenu),
        this.VerticalResizeDialog = e.Delegate(this, this._onVerticalResizeDialog),
        this.HorizontalResizeDialog = e.Delegate(this, this._onHorizontalResizeDialog),
        e.DialogReport.base._render.apply(this, arguments)
    },
    t._onChangeLang = function() {
        this.refreshData(null)
    },
    t._onHorizontalResizeDialog = function(t) {
        var i = this._Swiper.getSelectedPage(),
        s = i.getId();
        switch (s) {
        case "general_report":
            this._generalReportTable.updateColsWidth();
            break;
        case "options_deals":
            this._optionDealsTable.updateColsWidth();
            break;
        case "deals":
            this._dealsTable.updateColsWidth();
            break;
        case "deposit":
            this._depositTable.updateColsWidth();
            break;
        case "executed_orders":
            this._executedOrdersTable.updateColsWidth()
        }
        e.UserSettings.DialogReportSize.Width = this._Width,
        e.saveUserSettings(),
        this._Swiper.recalcSmoothlySwiperWidth()
    },
    t._onVerticalResizeDialog = function(t) {
        var i = t.heightIncrement,
        s = this._DomNode.getElementsByClassName("WTSwiper")[0],
        n = this._DomNode.getElementsByClassName("WTSwiperContent")[0],
        o = this._Swiper.getSelectedPage(),
        a = o.getId();
        switch (a) {
        case "options_deals":
            var r = this._DomNode.getElementsByClassName("OptionDealsTableContent")[0];
            Math.min(s.offsetHeight, n.offsetHeight, r.offsetHeight) + i <= 0 || (s.style.height = s.offsetHeight + i + "px", r.style.height = r.offsetHeight + i + "px", this._optionDealsTable.updateColsWidth()),
            this._NewTableHeight = r.offsetHeight;
            break;
        case "deals":
            var l = this._DomNode.getElementsByClassName("DealsTableContent")[0];
            Math.min(s.offsetHeight, n.offsetHeight, l.offsetHeight) + i <= 0 || (s.style.height = s.offsetHeight + i + "px", l.style.height = l.offsetHeight + i + "px", this._dealsTable.updateColsWidth()),
            this._NewTableHeight = l.offsetHeight;
            break;
        case "general_report":
            var h = this._DomNode.getElementsByClassName("GeneralReportTableContent")[0];
            Math.min(s.offsetHeight, n.offsetHeight, h.offsetHeight) + i <= 0 || (s.style.height = s.offsetHeight + i + "px", h.style.height = h.offsetHeight + i + "px", this._generalReportTable.updateColsWidth()),
            this._NewTableHeight = h.offsetHeight;
            break;
        case "deposit":
            var d = this._DomNode.getElementsByClassName("DepositTableContent")[0];
            Math.min(s.offsetHeight, n.offsetHeight, d.offsetHeight) + i <= 0 || (s.style.height = s.offsetHeight + i + "px", d.style.height = d.offsetHeight + i + "px", this._depositTable.updateColsWidth()),
            this._NewTableHeight = d.offsetHeight;
            break;
        case "executed_orders":
            var c = this._DomNode.getElementsByClassName("ExecutedOrdersTableContent")[0];
            Math.min(s.offsetHeight, n.offsetHeight, c.offsetHeight) + i <= 0 || (s.style.height = s.offsetHeight + i + "px", c.style.height = c.offsetHeight + i + "px", this._executedOrdersTable.updateColsWidth()),
            this._NewTableHeight = c.offsetHeight
        }
        e.UserSettings.DialogReportSize.Height = this._NewTableHeight,
        e.saveUserSettings()
    },
    t._onChangedValue = function(t) {
        if (t instanceof e.Swiper) var i = t.getSelectedPage();
        else {
            var s = t.sender.getSelectedOption();
            if (s == t.sender.getOptions().length - 1) {
                var n = e.getDialogSelectRange({
                    Closed: e.Delegate(this, this._applySelectedRange)
                });
                return void n.show()
            }
            var i = this._Swiper.getSelectedPage()
        }
        var o = i.getId();
        switch (o) {
        case "general_report":
            this.updateTableHeight(this._generalReportTable),
            this._Account != e.TraderData.getTraderInfo().id && null != this._Account || this._Server != e.Auth._Server.Name && null != this._Server && this._Account == e.TraderData.getTraderInfo().id && null != this._Account ? this.deleteOldData(o) : this.fillGeneralReportGrid(this.getDatesFromCombobox());
            break;
        case "deals":
            this.updateTableHeight(this._dealsTable),
            this._Account != e.TraderData.getTraderInfo().id && null != this._Account || this._Server != e.Auth._Server.Name && null != this._Server && this._Account == e.TraderData.getTraderInfo().id && null != this._Account ? this.deleteOldData(o) : this.fillDealsGrid();
            break;
        case "options_deals":
            this.updateTableHeight(this._optionDealsTable),
            this._Account != e.TraderData.getTraderInfo().id && null != this._Account || this._Server != e.Auth._Server.Name && null != this._Server && this._Account == e.TraderData.getTraderInfo().id && null != this._Account ? this.deleteOldData(o) : this.fillOptionDealsGrid();
            break;
        case "deposit":
            this.updateTableHeight(this._depositTable),
            this._Account != e.TraderData.getTraderInfo().id && null != this._Account || this._Server != e.Auth._Server.Name && null != this._Server && this._Account == e.TraderData.getTraderInfo().id && null != this._Account ? this.deleteOldData(o) : this.fillDepositGrid();
            break;
        case "executed_orders":
            this.updateTableHeight(this._executedOrdersTable),
            this._Account != e.TraderData.getTraderInfo().id && null != this._Account || this._Server != e.Auth._Server.Name && null != this._Server && this._Account == e.TraderData.getTraderInfo().id && null != this._Account ? this.deleteOldData(o) : this.fillExecutedOrderGrid()
        }
        if (this._DomNode) {
            var a = (this._DomNode.getElementsByClassName("WTSwiperContent")[0], this._DomNode.getElementsByClassName("ReportTableContent")[0]);
            a && this._NewTableHeight && (a.style.height = this._NewTableHeight + "px")
        }
        this.setCurrentTable(o)
    },
    t.setDialogHeight = function() {
        var t = e.UserSettings.DialogReportSize.Height || 372,
        i = t - this._DomNode.getElementsByClassName("GeneralReportTableContent")[0].offsetHeight,
        s = {
            heightIncrement: i
        };
        this._onVerticalResizeDialog(s)
    },
    t.show = function() {
        for (var t = !1,
        i = 0; i < e.Socket._Followers.length; i++) if (e.Socket._Followers[i] instanceof e.DialogReport) {
            t = !0;
            break
        }
        t || e.Socket.register(this);
        var s = this._Swiper.getPageById("options_deals");
        e.getTerminal().useOptions ? s.setVisible(!0) : s.setVisible(!1),
        e.getTerminal().useOnlyOptions ? (this._Swiper._tabsBlock.childNodes[1].style.display = "none", this._Swiper._tabsBlock.childNodes[4].style.display = "none") : (this._Swiper._tabsBlock.childNodes[1].style.display = "inline-block", this._Swiper._tabsBlock.childNodes[4].style.display = "inline-block"),
        e.getTerminal().useOnlyOptions ? this._generalReportTable._ContextMenu.getItems()[0].setVisible(!1) : this._generalReportTable._ContextMenu.getItems()[0].setVisible(!0),
        e.DialogReport.base.show.apply(this, arguments),
        this._Swiper.recalcSmoothlySwiperWidth(),
        this.currentTable.resizeHeader();
        var n = this._Swiper.getSelectedPage(),
        o = n.getId();
        this.setDialogHeight(),
        (this._Account != e.TraderData.getTraderInfo().id && null != this._Account || this._Server != e.Auth._Server.Name && null != this._Server && this._Account == e.TraderData.getTraderInfo().id && null != this._Account) && this.deleteOldData(o)
    },
    t.deleteOldData = function(e) {
        switch (e) {
        case "general_report":
            if (this._generalReportTable) {
                this._generalReportTable.resetTable(this._generalReportTable);
                var t = [];
                this.addGeneralReportTotalRow(t),
                this._generalReportTable.fillTable(t)
            }
            break;
        case "deals":
            if (this._dealsTable) {
                this._dealsTable.resetTable(this._dealsTable);
                var t = [];
                this.addTotalDealsRow(t),
                this._dealsTable.fillTable(t)
            }
            break;
        case "options_deals":
            if (this._optionDealsTable) {
                this._optionDealsTable.resetTable(this._optionDealsTable);
                var t = [];
                this.addTotalOptionDealsRow(t),
                this._optionDealsTable.fillTable(t)
            }
            break;
        case "deposit":
            if (this._depositTable) {
                this._depositTable.resetTable(this._depositTable);
                var t = [];
                this.addTotalDepositRow(t),
                this._depositTable.fillTable(t)
            }
            break;
        case "executed_orders":
            if (this._executedOrdersTable) {
                this._executedOrdersTable.resetTable(this._executedOrdersTable);
                var t = [];
                this._executedOrdersTable.fillTable(t)
            }
        }
    },
    t.setCurrentTable = function(e) {
        switch (e) {
        case "general_report":
            this.currentTable = this._generalReportTable;
            break;
        case "deals":
            this.currentTable = this._dealsTable;
            break;
        case "options_deals":
            this.currentTable = this._optionDealsTable;
            break;
        case "deposit":
            this.currentTable = this._depositTable;
            break;
        case "executed_orders":
            this.currentTable = this._executedOrdersTable
        }
    },
    t.updateTableHeight = function(e) {
        if (e.getDomNode()) {
            var t = this._NewTableHeight || 372,
            i = e.getDomNode().parentNode.parentNode.parentNode;
            i.className.indexOf("tableContent") != -1 && (i.style.height = t + "px")
        }
    },
    t._onDownloadBtnClick = function() {
        var t = this.getDatesFromCombobox();
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.getDeals(t.startDate, t.finishDate),
            e.requester.getDeposits(),
            e.requester.getOptionDeals(t.startDate, t.finishDate),
            e.requester.getExecutedOrders();
            break;
        case e.PlatformTypes.ptMT:
            e.requester.getMTDeals(t.startDate, t.finishDate),
            e.requester.getMTDeposits(t.startDate, t.finishDate),
            e.requester.getMTExecutedOrders(t.startDate, t.finishDate)
        }
        this.lock()
    },
    t._onSocketMessage = function(e) {
        if (e) {
            var t = e.msgType;
            if ("success" == e.msgResult.toLowerCase()) switch (t) {
            case "deposits":
            case "executedOrders":
            case "deals":
            case "mt4Deals":
            case "mt4Deposits":
            case "mt4ExecutedOrders":
            case "optionDeals":
                this.refreshData(t)
            } else this.unLock()
        }
    },
    t.unLock = function() {
        this.setEnabled(!0)
    },
    t.lock = function() {
        this.setEnabled(!1)
    },
    t.refreshData = function(t) {
        this._Server = e.Auth._Server.Name,
        this._Account = e.TraderData.getTraderInfo().id,
        this.fillGeneralReportGrid(this.getDatesFromCombobox()),
        this.fillDealsGrid(),
        this.fillDepositGrid(),
        this.fillOptionDealsGrid(),
        this.fillDepositGrid(),
        this.fillExecutedOrderGrid(),
        this.unLock()
    },
    t.getDatesFromCombobox = function() {
        if (this._periodSelect.getSelectedOption() == this._periodSelect.getOptions().length - 1) {
            var t = (new Date).getTimezoneOffset() / 60 * 1e3 * 60 * 60;
            return i = +this.dateRange.startDate - t,
            s = +this.dateRange.finishDate - t,
            {
                startDate: i,
                finishDate: s
            }
        }
        var i = 0,
        s = e.SymbolsData.getLastChangedTime();
        s += 6e4;
        var n = e.UtipFunctions.getUTCDate(e.SymbolsData.getLastChangedTime()),
        o = this._periodSelect.getSelectedOption();
        switch (o) {
        case e.DialogReport.perionds.Today:
            n.setHours(0),
            n.setMinutes(0),
            n.setSeconds(0),
            i = Date.parse(n.toString());
            break;
        case e.DialogReport.perionds.LastWeek:
            i = Date.parse(n.toString()) - 6048e5;
            break;
        case e.DialogReport.perionds.LastMonth:
            n.setMonth(n.getMonth() - 1),
            i = Date.parse(n.toString());
            break;
        case e.DialogReport.perionds.Last3Months:
            n.setMonth(n.getMonth() - 3),
            i = Date.parse(n.toString());
            break;
        case e.DialogReport.perionds.AllOperations:
            i = 0
        }
        return delete n,
        {
            startDate: i,
            finishDate: s
        }
    },
    t._applySelectedRange = function(e) {
        e.rangeString && this._periodSelect.setValue(e.rangeString),
        e.calendarStart.date.setHours(0, 0, 0, 0),
        e.calendarEnd.date.setHours(23, 59, 59, 59),
        this.dateRange = {
            startDate: e.calendarStart.date,
            finishDate: e.calendarEnd.date
        }
    },
    t.getTextTypeOfClosure = function(t) {
        switch (t) {
        case e.DialogReport.typesOfClosure.OpenedOrderPrice:
            return e.LangManager.getStringByKey("cOS_OpenedByOrderPrice") || "Executed at order price";
        case e.DialogReport.typesOfClosure.OpenedMarketPrice:
            return e.LangManager.getStringByKey("cOS_OpenedByMarketPrice") || "Executed at market price";
        case e.DialogReport.typesOfClosure.ErrorDeposit:
            return e.LangManager.getStringByKey("cOS_ErrorDeposit") || "Not enough money";
        case e.DialogReport.typesOfClosure.ErrorDeviation:
            return e.LangManager.getStringByKey("cOS_ErrorDeviation") || "Invalid deviation";
        case e.DialogReport.typesOfClosure.ErrorOpenPriceHigherTP:
            return e.LangManager.getStringByKey("cOS_ErrorOpenPriceHigherTP") || "Open price higher TP";
        case e.DialogReport.typesOfClosure.ErrorOpenPriceLowerTP:
            return e.LangManager.getStringByKey("cOS_ErrorOpenPriceLowerTP") || "Open price lower TP";
        case e.DialogReport.typesOfClosure.ErrorOpenPriceHigherSL:
            return e.LangManager.getStringByKey("cOS_ErrorOpenPriceHigherSL") || "Open price higher SL";
        case e.DialogReport.typesOfClosure.ErrorOpenPriceLowerSL:
            return e.LangManager.getStringByKey("cOS_ErrorOpenPriceLowerSL") || "Open price lower SL";
        case e.DialogReport.typesOfClosure.Error_TP_or_SL:
            return e.LangManager.getStringByKey("cOS_Error_TP_or_SL") || "Error TP or SL";
        default:
            return "unknown error"
        }
    },
    t.getCloseReasonText = function(t) {
        switch (t) {
        case e.DialogReport.closeReasons.ClosedByBalanceMarginCall:
            return e.LangManager.getStringByKey("cOS_BalanceMarginCall") || "Personal money margin call";
        case e.DialogReport.closeReasons.ClosedByClient:
            return e.LangManager.getStringByKey("cOS_ClosedByClient") || "Closed by user";
        case e.DialogReport.closeReasons.ClosedByPendingOrder:
            return e.LangManager.getStringByKey("cOS_ClosedByPendingOrder") || "Closed by pending order";
        case e.DialogReport.closeReasons.ClosedBySL:
            return "Stop loss";
        case e.DialogReport.closeReasons.ClosedByStopOut:
            return "Stop out";
        case e.DialogReport.closeReasons.ClosedByTP:
            return "Take profit";
        case e.DialogReport.closeReasons.ClosedDate:
            return e.LangManager.getStringByKey("cOS_ClosedDate") || "Executed at the expiration of the contract";
        case e.DialogReport.closeReasons.CloseByStopLossAfterTheGap:
            return e.LangManager.getStringByKey("cOS_CloseByStopLossAfterTheGap") || "SL at the market price after the Gap";
        case e.DialogReport.closeReasons.CloseByTakeProfitAfterTheGap:
            return e.LangManager.getStringByKey("cOS_CloseByTakeProfitAfterTheGap") || "TP at the market price after the Gap";
        default:
            return "unknown reason"
        }
    },
    t.getDealNumberContent = function(t, i) {
        var s, n = e.htmlToDOM('<div style="float: left; margin-right: 2px;"></div>'),
        o = e.round(i, 2);
        return o > 0 ? (e.MenuIconSVGList.toBackground(n, 17, 0), s = e.Container({
            Items: [n, t]
        })) : o < 0 ? (e.MenuIconSVGList.toBackground(n, 25, 0), s = e.Container({
            Items: [n, t]
        })) : (e.MenuIconSVGList.toBackground(n, 0, 6), s = e.Container({
            Items: [n, t]
        })),
        s
    },
    t.getProfitMenu = function(t) {
        var i, s, n;
        if ("GeneralReportTable" == t._TableType ? n = e.UserSettings.GeneralReportTable.Profit: "DealsTable" == t._TableType && (n = e.UserSettings.DealsTable.Profit), null != n) {
            var o = n;
            i = "as_points" == o,
            s = "as_money" == o
        } else i = !1,
        s = !0;
        if (!t._profitMenu) {
            var a = [];
            a.push({
                Text: "as points",
                Key: "cWCTTradePositionsFormPips",
                Id: "as_points",
                Checked: i
            }),
            a.push({
                Text: "as money",
                Key: "cWCTTradePositionsFormCurrency",
                Id: "as_money",
                Checked: s
            }),
            t._profitMenu = new e.Menu({
                CheckedType: "Unique",
                MenuSource: t,
                Items: a,
                ItemCheckedChanged: e.Delegate(this, this._onProfitMenuItemClick)
            })
        }
        return t._profitMenu
    },
    t._onProfitMenuItemClick = function(t) {
        var i = t.Item.getId();
        i && (this.showProfitAs(this.currentTable, i), e._menuMasterObject.hideAll(), e.saveUserSettings())
    },
    t.showProfitAs = function(t, i) {
        switch (i) {
        case "as_points":
            for (var s in t._Rows) if ("total" != s) {
                var n = t._Rows[s].getValue("Symbol");
                if (null == e.SymbolsData.getSymbols()[n]) continue;
                var o, a = t._Rows[s].getValue("Type"),
                r = parseInt(e.SymbolsData.getSymbols()[n]._Digits),
                l = e.parseFloat(t._Rows[s].getValue("Close_price")),
                h = e.parseFloat(t._Rows[s].getValue("Open_price"));
                "Buy" == a ? o = Math.round((l - h) * Math.pow(10, r)) : "Sell" == a && (o = Math.round((h - l) * Math.pow(10, r))),
                t._Rows[s].setValue("Profit", o)
            }
            "GeneralReportTable" == t._TableType ? e.UserSettings.GeneralReportTable.Profit = "as_points": "DealsTable" == t._TableType && (e.UserSettings.DealsTable.Profit = "as_points");
            break;
        case "as_money":
            var d = 0;
            for (var s in t._Rows) if ("total" != s) {
                var a = t._Rows[s].getValue("Type");
                if ("Buy" == a || "Sell" == a) {
                    var c = e.TraderData._Deals[d] ? parseFloat(e.TraderData._Deals[d].profit).toFixed(2) : "";
                    t._Rows[s].setValue("Profit", e.numberFormatWithNoRound(c, ",")),
                    d++
                }
            }
            "GeneralReportTable" == t._TableType ? e.UserSettings.GeneralReportTable.Profit = "as_money": "DealsTable" == t._TableType && (e.UserSettings.DealsTable.Profit = "as_money")
        }
    },
    t._onItemClick = function(t) {
        t.preventDefault();
        var i = t.Item.getId();
        if (i) {
            switch (i) {
            case "Auto_arrange":
                var s = !t.Item.getChecked();
                t.Item.setChecked(s),
                t.Item._ParentMenu._MenuSource.setAutoArrange(s),
                e.saveUserSettings()
            }
            t.Item._ParentMenu.hide()
        }
    },
    t.getExecutedOrdersTableColumns = function(e) {
        var t = this.getExecutedOrdersTableVisibleColumns();
        return {
            Number: {
                Title: "Number",
                Key: "cWCTOperationNumberOperation",
                Id: "Number",
                IsVisible: t.indexOf("Number") > -1,
                Index: 0
            },
            Symbol: {
                Title: "Symbol",
                Key: "cQASSymbol",
                Id: "Symbol",
                IsVisible: t.indexOf("Symbol") > -1,
                Index: 1
            },
            Type: {
                Title: "Type",
                Key: "cWCTOperationOperationType",
                Id: "Type",
                IsVisible: t.indexOf("Type") > -1,
                Index: 2
            },
            Volume: {
                Title: "Volume",
                Key: "cWCTTradePositionsFormVolume",
                Id: "Volume",
                IsVisible: t.indexOf("Volume") > -1,
                Index: 3
            },
            Open_date: {
                Title: "Open date",
                Key: "cWCTOperationOpenDate",
                Id: "Open_date",
                IsVisible: t.indexOf("Open_date") > -1,
                Index: 4
            },
            Close_date: {
                Title: "Close date",
                Key: "cWCTOperationCloseDate",
                Id: "Close_date",
                IsVisible: t.indexOf("Close_date") > -1,
                Index: 5
            },
            Price: {
                Title: "Price",
                Key: "cWCTTradePositionsFormOpenPrice",
                Id: "Price",
                IsVisible: t.indexOf("Price") > -1,
                Index: 6
            },
            TakeProfit: {
                Title: "Take Profit",
                Key: "cTakeProfitReports",
                Id: "TakeProfit",
                IsVisible: t.indexOf("TakeProfit") > -1,
                Index: 7
            },
            StopLoss: {
                Title: "Stop Loss",
                Key: "cStopLossReports",
                Id: "StopLoss",
                IsVisible: t.indexOf("StopLoss") > -1,
                Index: 8
            },
            Type_of_closure: {
                Title: "Type of closure",
                Key: "cWCTOperationCloseType",
                Id: "Type_of_closure",
                IsVisible: t.indexOf("StopLoss") > -1,
                Index: 9
            }
        }
    },
    t.fillExecutedOrderGrid = function() {
        var t, i, s, n = e.TraderData._ExecutedOrders,
        o = [],
        a = this.getDatesFromCombobox();
        if (n.length > 0) {
            for (t = 0; t < n.length; t++) i = n[t],
            s = parseInt(i.closeDate),
            s >= a.startDate && s <= a.finishDate && o.push({
                templateIndex: 0,
                rowId: i.id,
                DateForSort: parseInt(i.closeDate),
                cellValues: {
                    Number: i.id,
                    Symbol: i.symbolName,
                    Type: e.getTerminal().platformType == e.PlatformTypes.ptUTIP ? e.UtipFunctions.getPendingOrderTypeContent(i.kind) : e.UtipFunctions.getPendingOrderTypeContent(e.TraderData.convertMTPendingOrderType(i.kind)),
                    Volume: e.numberFormat(1 * i.volume, 2, ".", " "),
                    Open_date: e.UtipFunctions.getUTCDate(parseInt(i.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                    Close_date: e.UtipFunctions.getUTCDate(parseInt(i.closeDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                    Price: e.UtipFunctions.historyNumberFormat(i.openPrice, i.symbolName),
                    TakeProfit: 1 * i.takeProfit ? e.numberFormatWithNoRound(i.takeProfit, ".") : "",
                    StopLoss: 1 * i.stopLoss ? e.numberFormatWithNoRound(i.stopLoss, ".") : "",
                    Type_of_closure: e.getTerminal().platformType == e.PlatformTypes.ptUTIP ? this.getTextTypeOfClosure(i.status) : i.status
                }
            });
            o.sort(function(e, t) {
                var i = new Date(e.DateForSort),
                s = new Date(t.DateForSort),
                n = 0;
                return i < s ? n = -1 : i > s && (n = 1),
                delete i,
                delete s,
                n
            })
        }
        this._executedOrdersTable.fillTable(o)
    },
    t.getExecutedOrdersTableVisibleColumns = function() {
        var t = [];
        return t = e.UserSettings.ExecutedOrdersTable.VisiblesColumns.length > 0 ? e.UserSettings.ExecutedOrdersTable.VisiblesColumns: ["Number", "Symbol", "Type", "Volume", "Open_date", "Close_date", "Price", "TakeProfit", "StopLoss", "Type_of_closure"]
    },
    t.getExecutedOrdersTable = function() {
        return this._executedOrdersTable || (null == e.UserSettings.ExecutedOrdersTable && (e.UserSettings.ExecutedOrdersTable = {},
        e.UserSettings.ExecutedOrdersTable.VisiblesColumns = [], e.UserSettings.ExecutedOrdersTable.ColumnSizes = [], e.UserSettings.ExecutedOrdersTable.AutoArrage = !0), this._executedOrdersTable = new e.DivTable({
            Template: e._Templates.ExecutedOrdersTable,
            RowTemplates: [e._Templates.ExecutedOrdersTableRow],
            HeaderTemplate: e._Templates.ExecutedOrdersTableHeader,
            HeaderColumns: this.getExecutedOrdersTableColumns(),
            IsSizingEnabled: !0,
            AutoSizes: [.7, .7, .8, .6, 1.2, 1.2, .7, 1, 1, 2.1],
            IsAutoSize: null == e.UserSettings.ExecutedOrdersTable.AutoArrage || e.UserSettings.ExecutedOrdersTable.AutoArrage,
            TableType: "ExecutedOrders",
            Sizes: e.UserSettings.ExecutedOrdersTable.ColumnSizes,
            CustomScrollEnabled: !0
        }), this._executedOrdersTable.VisibleColumnsChange = e.Delegate(this,
        function() {
            e.UserSettings.ExecutedOrdersTable.VisiblesColumns = this._executedOrdersTable.getVisibleColumns(),
            e._menuMasterObject.hideAll()
        },
        this), this._executedOrdersTable.AutoSizeChange = e.Delegate(this,
        function() {
            e.UserSettings.ExecutedOrdersTable.AutoArrage = this._executedOrdersTable._IsAutoSize
        },
        this), this._executedOrdersTable._ContextMenu = new e.Menu({
            CheckedType: "NoChecked",
            MenuSource: this._executedOrdersTable,
            ItemClick: e.Delegate(this, this._onItemClick),
            Items: [{
                Text: "Columns",
                Id: "Columns",
                Key: "cPPCColumns",
                Menu: this._executedOrdersTable.getColumnsMenu()
            },
            {
                Text: "Auto arrange",
                Id: "Auto_arrange",
                Key: "CoAutoSize",
                Checked: this._executedOrdersTable._IsAutoSize
            }]
        })),
        this._executedOrdersTable
    },
    t.getDepositTableColumns = function(e) {
        var t = this.getDepositTableVisibleColumns();
        return {
            Date: {
                Title: "Date",
                Key: "cEDDate",
                Id: "Date",
                IsVisible: t.indexOf("Date") > -1,
                Index: 0
            },
            Sum: {
                Title: "Sum",
                Key: "cWCTOperationDepositMoney",
                Id: "Sum",
                IsVisible: t.indexOf("Sum") > -1,
                Index: 1
            },
            Comment: {
                Title: "Comment",
                Key: "cWCTOperationDepositComment",
                Id: "Comment",
                IsVisible: t.indexOf("Comment") > -1,
                Index: 2
            }
        }
    },
    t.fillDepositGrid = function() {
        var t, i, s, n = e.TraderData._Deposits,
        o = [],
        a = this.getDatesFromCombobox(),
        r = 0;
        if (n.length > 0) {
            for (t = 0; t < n.length; t++) i = n[t],
            s = parseInt(i.operationDate),
            s >= a.startDate && s <= a.finishDate && (o.push({
                templateIndex: 0,
                rowId: i.depositID,
                DateForSort: parseInt(i.operationDate),
                cellValues: {
                    Date: e.UtipFunctions.getUTCDate(parseInt(i.operationDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                    Sum: e.numberFormat(i.equity, 2, ".", ""),
                    Comment: i.comment
                }
            }), r += e.parseFloat(i.equity));
            o.sort(function(e, t) {
                var i = new Date(e.DateForSort),
                s = new Date(t.DateForSort),
                n = 0;
                return i < s ? n = -1 : i > s && (n = 1),
                delete i,
                delete s,
                n
            })
        }
        this.addTotalDepositRow(o),
        this._depositTable.fillTable(o)
    },
    t.getDepositTableVisibleColumns = function() {
        var t = [];
        return t = e.UserSettings.DepositTable.VisiblesColumns.length > 0 ? e.UserSettings.DepositTable.VisiblesColumns: ["Date", "Sum", "Comment"]
    },
    t.addTotalDepositRow = function(t) {
        for (var i = 0,
        s = 0,
        n = 0; n < t.length; n++) {
            var o = e.round(e.parseFloat(t[n].cellValues.Sum));
            o > 0 ? i += o: s += o
        }
        var a = (e.LangManager.getStringByKey("cWCTOperationDepositInputMoney") || "Deposit") + ": " + e.numberFormat(i, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTOperationDepositOutputMoney") || "Withdraw") + ": " + e.numberFormat(s, 2, ".", "");
        t.push({
            templateIndex: 1,
            rowId: "total",
            colSpan: {
                Total: ["Date", "Sum", "Comment"]
            },
            cellValues: {
                Total: a
            }
        })
    },
    t.getDepositTable = function() {
        return this._depositTable || (null == e.UserSettings.DepositTable && (e.UserSettings.DepositTable = {},
        e.UserSettings.DepositTable.VisiblesColumns = [], e.UserSettings.DepositTable.ColumnSizes = [], e.UserSettings.DepositTable.AutoArrage = !0), this._depositTable = new e.DivTable({
            Template: e._Templates.DepositTable,
            RowTemplates: [e._Templates.DepositTableRow, e._Templates.DepositTableTotalRow],
            HeaderTemplate: e._Templates.DepositTableHeader,
            HeaderColumns: this.getDepositTableColumns(),
            IsSizingEnabled: !0,
            AutoSizes: [.7, .7, 2.6],
            IsAutoSize: null == e.UserSettings.DepositTable.AutoArrage || e.UserSettings.DepositTable.AutoArrage,
            TableType: "Deposit",
            Sizes: e.UserSettings.DepositTable.ColumnSizes,
            CustomScrollEnabled: !0
        }), this._depositTable.VisibleColumnsChange = e.Delegate(this,
        function() {
            e.UserSettings.DepositTable.VisiblesColumns = this._depositTable.getVisibleColumns(),
            e._menuMasterObject.hideAll()
        },
        this), this._depositTable.AutoSizeChange = e.Delegate(this,
        function() {
            e.UserSettings.DepositTable.AutoArrage = this._depositTable._IsAutoSize
        },
        this), this._depositTable._ContextMenu = new e.Menu({
            CheckedType: "NoChecked",
            MenuSource: this._depositTable,
            ItemClick: e.Delegate(this, this._onItemClick),
            Items: [{
                Text: "Auto arrange",
                Id: "Auto_arrange",
                Key: "CoAutoSize",
                Checked: this._depositTable._IsAutoSize
            }]
        })),
        this._depositTable
    },
    t.getGeneralReportTableColumns = function() {
        var e = this.getGeneralReportTableVisibleColumns(),
        t = {};
        return t.Number = {
            Title: "Number",
            Key: "cWCTOperationNumberOperation",
            Id: "Number",
            IsVisible: e.indexOf("Number") > -1,
            Index: 0
        },
        t.Open_date = {
            Title: "Open date",
            Key: "cWCTOperationOpenDate",
            Id: "Open_date",
            IsVisible: e.indexOf("Open_date") > -1,
            Index: 1
        },
        t.Type = {
            Title: "Type",
            Key: "cWCTOperationOperationType",
            Id: "Type",
            IsVisible: e.indexOf("Type") > -1,
            Index: 2
        },
        t.Symbol = {
            Title: "Symbol",
            Key: "cQASSymbol",
            Id: "Symbol",
            IsVisible: e.indexOf("Symbol") > -1,
            Index: 3
        },
        t.Volume = {
            Title: "Volume",
            Key: "cWCTTradePositionsFormVolume",
            Id: "Volume",
            IsVisible: e.indexOf("Volume") > -1,
            Index: 4
        },
        t.Close_date = {
            Title: "Close date",
            Key: "cWCTOperationCloseDate",
            Id: "Close_date",
            IsVisible: e.indexOf("Close_date") > -1,
            Index: 5
        },
        t.Open_price = {
            Title: "Open price",
            Key: "cWCTOperationOpenPrice",
            IsVisible: e.indexOf("Open_price") > -1,
            Id: "Open_price",
            Index: 6
        },
        t.Close_price = {
            Title: "Close price",
            Key: "cWCTOperationClosePrice",
            IsVisible: e.indexOf("Close_price") > -1,
            Id: "Close_price",
            Index: 7
        },
        t.TakeProfit = {
            Title: "TP",
            Key: "cTakeProfitReports",
            Id: "TakeProfit",
            IsVisible: e.indexOf("TakeProfit") > -1,
            Index: 8
        },
        t.StopLoss = {
            Title: "SL",
            Key: "cStopLossReports",
            Id: "StopLoss",
            IsVisible: e.indexOf("StopLoss") > -1,
            Index: 9
        },
        t.Swap = {
            Title: "Swap",
            Key: "cWCTTradePositionsFormSvop",
            Id: "Swap",
            IsVisible: e.indexOf("Swap") > -1,
            Index: 10
        },
        t.Commission = {
            Title: "Commission",
            Key: "cWCTTradePositionsFormCommission",
            Id: "Commission",
            IsVisible: e.indexOf("Commission") > -1,
            Index: 11
        },
        t.Profit = {
            Title: "Profit",
            Key: "cWCTTradePositionsFormProfitByPosition",
            Id: "Profit",
            IsVisible: e.indexOf("Profit") > -1,
            Index: 12
        },
        t.SpentBonus = {
            Title: "Bonus",
            Key: "cWCTBonus",
            Id: "SpentBonus",
            IsVisible: e.indexOf("SpentBonus") > -1,
            Index: 13
        },
        t.Balance = {
            Title: "Balance",
            Key: "cWCTBalance",
            Id: "Balance",
            IsVisible: e.indexOf("Balance") > -1,
            Index: 14
        },
        t.Comment = {
            Title: "Comment",
            Key: "cWCTOperationDepositComment",
            Id: "Comment",
            IsVisible: e.indexOf("Comment") > -1,
            Index: 15
        },
        t
    },
    t.fillGeneralReportGrid = function(t) {
        var i, s, n, o = e.TraderData._Deals,
        a = [],
        r = t;
        if (o.length > 0) for (i = 0; i < o.length; i++) s = o[i],
        n = parseInt(s.closeDate),
        n >= r.startDate && n <= r.finishDate && a.push({
            templateIndex: 0,
            rowId: s.id,
            DateForSort: parseInt(s.closeDate),
            cellValues: {
                Number: this.getDealNumberContent(s.id, s.profit),
                Open_date: e.UtipFunctions.getUTCDate(parseInt(s.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                Type: s.operationType,
                Symbol: s.symbolName,
                Volume: e.numberFormat(1 * s.volume, 2, ".", " "),
                Close_date: e.UtipFunctions.getUTCDate(parseInt(s.closeDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                Open_price: e.UtipFunctions.historyNumberFormat(s.openPrice, s.symbolName),
                Close_price: e.UtipFunctions.historyNumberFormat(s.closePrice, s.symbolName),
                TakeProfit: e.parseFloat(s.takeProfit) ? e.UtipFunctions.historyNumberFormat(e.parseFloat(s.takeProfit), s.symbolName) : "",
                StopLoss: e.parseFloat(s.stopLoss) ? e.UtipFunctions.historyNumberFormat(e.parseFloat(s.stopLoss), s.symbolName) : "",
                Swap: e.parseFloat(s.swap) ? e.UtipFunctions.historyNumberFormat(e.parseFloat(s.swap), s.symbolName) : "",
                Commission: e.numberFormat(e.parseFloat(s.commission), 2, ".", " ") ? e.numberFormat(e.parseFloat(s.commission), 2, ".", " ") : "",
                Profit: e.numberFormat(e.parseFloat(s.profit), 2, ".", " "),
                SpentBonus: e.numberFormat(e.parseFloat(s.spendbonus), 2, ".", " "),
                Balance: e.numberFormat(parseFloat(s.balance), 2, ".", " "),
                Comment: this.getCloseReasonText(s.typeOfClosure)
            }
        });
        var l, h = e.TraderData.getOptionDeals();
        if (h.length > 0) for (i = 0; i < h.length; i++) l = h[i],
        n = parseInt(l.closeDate),
        n >= r.startDate && n <= r.finishDate && a.push({
            templateIndex: 0,
            rowId: l.id + "_option",
            DateForSort: parseInt(l.closeDate),
            cellValues: {
                Number: this.getDealNumberContent(l.id, l.profit),
                Open_date: e.UtipFunctions.getUTCDate(parseInt(l.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                Type: e.UtipFunctions.getOptionTypeContent(l.direction, l.optionType),
                Symbol: l.symbolName,
                Volume: parseInt(l.investmentSum) + " " + e.TraderData.getGroup().depositCurrency,
                Close_date: e.UtipFunctions.getUTCDate(parseInt(l.closeDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                Open_price: e.UtipFunctions.historyNumberFormat(l.openPrice, l.symbolName),
                Close_price: e.UtipFunctions.historyNumberFormat(l.closePrice, l.symbolName),
                Profit: e.numberFormat(1 * l.profit, 2, ".", " "),
                SpentBonus: e.numberFormat(e.parseFloat(l.spendbonus), 2, ".", " "),
                Balance: e.numberFormat(e.parseFloat(l.balance), 2, ".", " "),
                Comment: "0" != l.isEarlyClosing ? e.LangManager.getStringByKey("cWCTOptionDealClosedEarly") || "Closed early": ""
            }
        });
        var d, c, u = e.TraderData._Deposits;
        this._generalReportTable._VisiblesColumns;
        if (u.length > 0) for (i = 0; i < u.length; i++) if (d = u[i], c = new Date(parseInt(d.operationDate)), c >= r.startDate && c <= r.finishDate) {
            var g;
            switch (d.status) {
            case "0":
                g = e.LangManager.getStringByKey("cDOFStatusIO") || "Deposit/Withdrawal";
                break;
            case "2":
                g = e.LangManager.getStringByKey("cWCTBonus") || "Bonus";
                break;
            default:
                g = e.LangManager.getStringByKey("cDOFStatusIO") || "Deposit/Withdrawal"
            }
            a.push({
                templateIndex: 2,
                rowId: d.depositID,
                colSpan: {
                    DepositVolume: ["Volume", "Close_date", "Open_price", "Close_price", "TakeProfit", "StopLoss", "Swap", "Commission", "Profit", "Balance"]
                },
                DateForSort: parseInt(d.operationDate),
                cellValues: {
                    Id: "deposit" + i,
                    Number: d.depositID,
                    Open_date: e.UtipFunctions.getUTCDate(parseInt(d.operationDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                    Type: "Deposit",
                    DepositVolume: g + ": " + e.numberFormat(d.equity, 2, ".", ""),
                    Volume: e.numberFormat(d.equity, 2, ".", ""),
                    Comment: d.comment
                }
            })
        }
        a.sort(function(e, t) {
            var i = ("" === e.Close_date ? e.Open_date: e.Close_date, "" === t.Close_date ? t.Open_date: t.Close_date, new Date(e.DateForSort)),
            s = new Date(t.DateForSort),
            n = 0;
            return i < s ? n = -1 : i > s && (n = 1),
            delete i,
            delete s,
            n
        }),
        null == e.UserSettings.GeneralReportTable.Profit && (e.UserSettings.GeneralReportTable.Profit = "as_money"),
        this.showProfitAs(this._generalReportTable, e.UserSettings.GeneralReportTable.Profit),
        this.addGeneralReportTotalRow(a),
        this._generalReportTable.fillTable(a)
    },
    t.getGeneralReportTableVisibleColumns = function() {
        var t = [];
        return t = e.UserSettings.GeneralReportTable.VisiblesColumns.length > 0 ? e.UserSettings.GeneralReportTable.VisiblesColumns: ["Number", "Symbol", "Type", "Volume", "Open_date", "Close_date", "Open_price", "Close_price", "TakeProfit", "StopLoss", "Swap", "SpentBonus", "Profit", "Comment", "DepositVolume"],
        e.getTerminal().platformType == e.PlatformTypes.ptMT && (t.indexOf("Balance") > -1 ? t.splice(t.indexOf("Balance"), 1) : ""),
        "0" == e.TraderData.getTraderInfo().showbonuses && (t.indexOf("SpentBonus") > -1 ? t.splice(t.indexOf("SpentBonus"), 1) : ""),
        t
    },
    t.addGeneralReportTotalRow = function(t) {
        for (var i = 0,
        s = 0,
        n = 0,
        o = 0,
        a = 0; a < t.length; a++) if ("Deposit" !== t[a].cellValues.Type) n += e.parseFloat(t[a].cellValues.Profit) || 0,
        o += e.parseFloat(t[a].cellValues.SpentBonus) || 0;
        else {
            var r = e.parseFloat(t[a].cellValues.Volume);
            r > 0 ? i += r: s += r
        }
        if ("0" == e.TraderData.getTraderInfo().showbonuses) var l = (e.LangManager.getStringByKey("cWCTBalance") || "Balance") + ": " + e.numberFormat(e.TraderData.getBalance(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ": " + e.numberFormat(n, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTOperationDepositInputMoney") || "Deposit") + ": " + e.numberFormat(i, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTOperationDepositOutputMoney") || "Withdraw") + ": " + e.numberFormat(s * -1, 2, ".", "");
        else var l = (e.LangManager.getStringByKey("cWCTBalance") || "Balance") + ": " + e.numberFormat(e.TraderData.getBalance(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTBonusBalance") || "Bonuses") + ": " + e.numberFormat(e.TraderData.getSumBonus(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ": " + e.numberFormat(n, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTBonus") || "Bonus") + ": " + e.numberFormat(o, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTOperationDepositInputMoney") || "Deposit") + ": " + e.numberFormat(i, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTOperationDepositOutputMoney") || "Withdraw") + ": " + e.numberFormat(s * -1, 2, ".", "");
        t.push({
            templateIndex: 1,
            rowId: "total",
            colSpan: {
                Total: ["Number", "Symbol", "Type", "Volume", "Open_date", "Close_date", "Open_price", "Close_price", "TakeProfit", "StopLoss", "Swap", "Commission", "Profit", "SpentBonus", "Balance", "Comment"]
            },
            cellValues: {
                Total: l
            }
        })
    },
    t.getGeneralReportTable = function() {
        return this._generalReportTable || (null == e.UserSettings.GeneralReportTable && (e.UserSettings.GeneralReportTable = {},
        e.UserSettings.GeneralReportTable.VisiblesColumns = [], e.UserSettings.GeneralReportTable.ColumnSizes = [], e.UserSettings.GeneralReportTable.AutoArrage = !0), this._generalReportTable = new e.DivTable({
            Template: e._Templates.GeneralReportTable,
            RowTemplates: [e._Templates.GeneralReportTableRow, e._Templates.GeneralReportTableTotalRow, e._Templates.GeneralReportDepositRow],
            HeaderTemplate: e._Templates.GeneralReportTableHeader,
            HeaderColumns: this.getGeneralReportTableColumns(),
            IsSizingEnabled: !0,
            AutoSizes: [1.2, 1.5, 1.3, 1.1, 1, 1.5, 1.6, 1.4, 1, 1, 1, 1, 1, 1, 1, 2.8],
            IsAutoSize: null == e.UserSettings.GeneralReportTable.AutoArrage || e.UserSettings.GeneralReportTable.AutoArrage,
            TableType: "GeneralReport",
            Sizes: e.UserSettings.GeneralReportTable.ColumnSizes,
            CustomScrollEnabled: !0
        }), this._generalReportTable.VisibleColumnsChange = e.Delegate(this,
        function() {
            e.UserSettings.GeneralReportTable.VisiblesColumns = this._generalReportTable.getVisibleColumns(),
            e._menuMasterObject.hideAll()
        },
        this), this._generalReportTable.AutoSizeChange = e.Delegate(this,
        function() {
            e.UserSettings.GeneralReportTable.AutoArrage = this._generalReportTable._IsAutoSize
        },
        this), this._generalReportTable._ContextMenu = new e.Menu({
            CheckedType: "NoChecked",
            MenuSource: this._generalReportTable,
            ItemClick: e.Delegate(this, this._onItemClick),
            Items: [{
                Text: "Profit",
                Id: "Profit",
                Key: "cWCTTradePositionsFormProfitByPosition",
                Menu: this.getProfitMenu(this._generalReportTable)
            },
            {
                Text: "Columns",
                Id: "Columns",
                Key: "cPPCColumns",
                Menu: this._generalReportTable.getColumnsMenu(e.getTerminal().platformType == e.PlatformTypes.ptMT ? ["Balance"] : "")
            },
            {
                Text: "Auto arrange",
                Id: "Auto_arrange",
                Key: "CoAutoSize",
                Checked: this._generalReportTable._IsAutoSize
            }]
        })),
        this._generalReportTable
    },
    t.getDealsTableColumns = function() {
        var e = this.getDealsVisibleColumns(),
        t = {};
        return t.Number = {
            Title: "Number",
            Key: "cOPGNumber",
            IsVisible: e.indexOf("Number") > -1,
            Id: "Number",
            Index: 0
        },
        t.Symbol = {
            Title: "Symbol",
            Key: "cQASSymbol",
            Id: "Symbol",
            IsVisible: e.indexOf("Symbol") > -1,
            Index: 1
        },
        t.Type = {
            Title: "Type",
            Key: "cWCTOperationOperationType",
            Id: "Type",
            IsVisible: e.indexOf("Type") > -1,
            Index: 2
        },
        t.Volume = {
            Title: "Volume",
            Key: "cWCTTradePositionsFormVolume",
            Id: "Volume",
            IsVisible: e.indexOf("Volume") > -1,
            Index: 3
        },
        t.Open_date = {
            Title: "Open date",
            Key: "cWCTOperationOpenDate",
            Id: "Open_date",
            IsVisible: e.indexOf("Open_date") > -1,
            Index: 4
        },
        t.Close_date = {
            Title: "Close date",
            Key: "cWCTOperationCloseDate",
            Id: "Close_date",
            IsVisible: e.indexOf("Close_date") > -1,
            Index: 5
        },
        t.Open_price = {
            Title: "Open price",
            Key: "cWCTOperationOpenPrice",
            IsVisible: e.indexOf("Open_price") > -1,
            Id: "Open_price",
            Index: 6
        },
        t.Close_price = {
            Title: "Close price",
            Key: "cWCTOperationClosePrice",
            IsVisible: e.indexOf("Close_price") > -1,
            Id: "Close_price",
            Index: 7
        },
        t.TakeProfit = {
            Title: "TP",
            Key: "cTakeProfitReports",
            Id: "TakeProfit",
            IsVisible: e.indexOf("TakeProfit") > -1,
            Index: 8
        },
        t.StopLoss = {
            Title: "SL",
            Key: "cStopLossReports",
            Id: "StopLoss",
            IsVisible: e.indexOf("StopLoss") > -1,
            Index: 9
        },
        t.Swap = {
            Title: "Swap",
            Key: "cWCTTradePositionsFormSvop",
            Id: "Swap",
            IsVisible: e.indexOf("Swap") > -1,
            Index: 10
        },
        t.Commission = {
            Title: "Commission",
            Key: "cWCTTradePositionsFormCommission",
            Id: "Commission",
            IsVisible: e.indexOf("Commission") > -1,
            Index: 11
        },
        t.Profit = {
            Title: "Profit",
            Key: "cWCTTradePositionsFormProfitByPosition",
            Id: "Profit",
            IsVisible: e.indexOf("Profit") > -1,
            Index: 12
        },
        t.SpentBonus = {
            Title: "Bonus",
            Key: "cWCTBonus",
            Id: "SpentBonus",
            IsVisible: e.indexOf("SpentBonus") > -1,
            Index: 13
        },
        t.Balance = {
            Title: "Balance",
            Key: "cWCTBalance",
            Id: "Balance",
            IsVisible: e.indexOf("Balance") > -1,
            Index: 14
        },
        t.Type_of_closure = {
            Title: "Type of closure",
            Key: "cWCTOperationCloseType",
            Id: "Type_of_closure",
            IsVisible: e.indexOf("Type_of_closure") > -1,
            Index: 15
        },
        t
    },
    t.fillDealsGrid = function() {
        var t, i, s, n = e.TraderData._Deals,
        o = [],
        a = this.getDatesFromCombobox(),
        r = 0;
        if (n.length > 0) for (t = 0; t < n.length; t++) i = n[t],
        s = parseInt(i.closeDate),
        s >= a.startDate && s <= a.finishDate && (o.push({
            templateIndex: 0,
            rowId: i.id,
            DateForSort: parseInt(i.closeDate),
            cellValues: {
                Number: this.getDealNumberContent(i.id, i.profit),
                Symbol: i.symbolName,
                Type: i.operationType,
                Volume: e.numberFormat(1 * i.volume, 2, ".", " "),
                Open_date: e.UtipFunctions.getUTCDate(parseInt(i.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                Close_date: e.UtipFunctions.getUTCDate(parseInt(i.closeDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                Open_price: e.UtipFunctions.historyNumberFormat(i.openPrice, i.symbolName),
                Close_price: e.UtipFunctions.historyNumberFormat(i.closePrice, i.symbolName),
                TakeProfit: e.parseFloat(i.takeProfit) ? e.UtipFunctions.historyNumberFormat(e.parseFloat(i.takeProfit), i.symbolName) : "",
                StopLoss: e.parseFloat(i.stopLoss) ? e.UtipFunctions.historyNumberFormat(e.parseFloat(i.stopLoss), i.symbolName) : "",
                Swap: e.parseFloat(i.swap) ? e.UtipFunctions.historyNumberFormat(e.parseFloat(i.swap), i.symbolName) : "",
                Commission: e.numberFormat(e.parseFloat(i.commission), 2, ".", " ") ? e.numberFormat(e.parseFloat(i.commission), 2, ".", " ") : "",
                Profit: e.numberFormat(e.parseFloat(i.profit), 2, ".", " "),
                SpentBonus: e.numberFormat(e.parseFloat(i.spendbonus), 2, ".", " "),
                Balance: e.numberFormat(parseFloat(i.balance), 2, ".", " "),
                Type_of_closure: this.getCloseReasonText(i.typeOfClosure)
            }
        }), r += e.parseFloat(i.profit)),
        o.sort(function(e, t) {
            var i = new Date(e.DateForSort),
            s = new Date(t.DateForSort);
            return i < s ? -1 : i > s ? 1 : 0
        });
        this.addTotalDealsRow(o, r),
        this._dealsTable.fillTable(o)
    },
    t.addTotalDealsRow = function(t, i) {
        if ("0" == e.TraderData.getTraderInfo().showbonuses) var s = (e.LangManager.getStringByKey("cWCTBalance") || "Balance") + ": " + e.numberFormat(e.TraderData.getBalance(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ": " + e.numberFormat(i, 2, ".", "");
        else {
            for (var n = 0,
            o = 0; o < t.length; o++)"Deposit" !== t[o].cellValues.Type && (n += e.parseFloat(t[o].cellValues.SpentBonus) || 0);
            var s = (e.LangManager.getStringByKey("cWCTBalance") || "Balance") + ": " + e.numberFormat(e.TraderData.getBalance(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTBonusBalance") || "Bonuses") + ": " + e.numberFormat(e.TraderData.getSumBonus(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ": " + e.numberFormat(i, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTBonus") || "Bonus") + ": " + e.numberFormat(n, 2, ".", "")
        }
        t.push({
            templateIndex: 1,
            rowId: "total",
            colSpan: {
                Total: ["Number", "Symbol", "Type", "Volume", "Open_date", "Close_date", "Open_price", "Close_price", "TakeProfit", "StopLoss", "Swap", "Commission", "Profit", "SpentBonus", "Balance", "Type_of_closure"]
            },
            cellValues: {
                Total: s
            }
        })
    },
    t.getDealsVisibleColumns = function() {
        var t = [];
        return t = e.UserSettings.DealsTable.VisiblesColumns.length > 0 ? e.UserSettings.DealsTable.VisiblesColumns: ["Number", "Symbol", "Type", "Volume", "Open_date", "Close_date", "Open_price", "Close_price", "TakeProfit", "StopLoss", "Swap", "Profit", "SpentBonus", "Balance", "Type_of_closure"],
        e.getTerminal().platformType == e.PlatformTypes.ptMT && (t.indexOf("Balance") > -1 ? t.splice(t.indexOf("Balance"), 1) : ""),
        "0" == e.TraderData.getTraderInfo().showbonuses && (t.indexOf("SpentBonus") > -1 ? t.splice(t.indexOf("SpentBonus"), 1) : ""),
        t
    },
    t.getDealsTable = function() {
        if (!this._dealsTable) {
            null == e.UserSettings.DealsTable && (e.UserSettings.DealsTable = {},
            e.UserSettings.DealsTable.VisiblesColumns = [], e.UserSettings.DealsTable.ColumnSizes = [], e.UserSettings.DealsTable.AutoArrage = !0);
            var t = [];
            switch (e.getTerminal().platformType) {
            case e.PlatformTypes.ptMT:
                t = [1.4, 1, .7, .9, 1.5, 1.5, 1.5, 1.5, 1, 1, 1, 1, 1, 1.5, 1, 3];
                break;
            case e.PlatformTypes.ptUTIP:
                t = [1.4, 1, .7, .9, 1.5, 1.5, 1.5, 1.5, 1, 1, 1, 1, 1, 1.5, 1.5, 2.5]
            }
            return this._dealsTable = new e.DivTable({
                Template: e._Templates.DealsTable,
                RowTemplates: [e._Templates.DealsTableRow, e._Templates.DealsTableTotalRow],
                HeaderTemplate: e._Templates.DealsTableHeader,
                HeaderColumns: this.getDealsTableColumns(),
                IsSizingEnabled: !0,
                AutoSizes: t,
                IsAutoSize: null == e.UserSettings.DealsTable.AutoArrage || e.UserSettings.DealsTable.AutoArrage,
                TableType: "Deals",
                Sizes: e.UserSettings.DealsTable.ColumnSizes,
                CustomScrollEnabled: !0
            }),
            this._dealsTable.VisibleColumnsChange = e.Delegate(this,
            function() {
                e.UserSettings.DealsTable.VisiblesColumns = this._dealsTable.getVisibleColumns(),
                e._menuMasterObject.hideAll()
            },
            this),
            this._dealsTable.AutoSizeChange = e.Delegate(this,
            function() {
                e.UserSettings.DealsTable.AutoArrage = this._dealsTable._IsAutoSize
            },
            this),
            this._dealsTable._ContextMenu = new e.Menu({
                CheckedType: "NoChecked",
                MenuSource: this._dealsTable,
                ItemClick: e.Delegate(this, this._onItemClick),
                Items: [{
                    Text: "Profit",
                    Id: "Profit",
                    Key: "cWCTTradePositionsFormProfitByPosition",
                    Menu: this.getProfitMenu(this._dealsTable)
                },
                {
                    Text: "Columns",
                    Id: "Columns",
                    Key: "cPPCColumns",
                    Menu: this._dealsTable.getColumnsMenu(e.getTerminal().platformType == e.PlatformTypes.ptMT ? ["Balance"] : "")
                },
                {
                    Text: "Auto arrange",
                    Id: "Auto_arrange",
                    Key: "CoAutoSize",
                    Checked: this._dealsTable._IsAutoSize
                }]
            }),
            this._dealsTable
        }
    },
    t.fillOptionDealsGrid = function() {
        var t, i, s, n = e.TraderData.getOptionDeals(),
        o = [],
        a = this.getDatesFromCombobox(),
        r = 0;
        if (n.length > 0) for (t = 0; t < n.length; t++) i = n[t],
        s = parseInt(i.closeDate),
        s >= a.startDate && s <= a.finishDate && (o.push({
            templateIndex: 0,
            rowId: i.id,
            DateForSort: parseInt(i.closeDate),
            cellValues: {
                Number: i.id,
                Name: i.settingName,
                SymbolName: i.symbolName,
                Type: e.UtipFunctions.getOptionTypeContent(i.direction, i.optionType),
                Sum: parseInt(i.investmentSum),
                Date: e.UtipFunctions.getUTCDate(parseInt(i.openDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                CloseDate: e.UtipFunctions.getUTCDate(parseInt(i.closeDate)).toLocaleFormat("%d.%m.%Y %H:%M"),
                OpenPrice: e.UtipFunctions.historyNumberFormat(e.parseFloat(i.openPrice), i.symbolName),
                ClosePrice: e.UtipFunctions.historyNumberFormat(e.parseFloat(i.closePrice), i.symbolName),
                Payout: e.numberFormat(i.payout, 2, ".", " "),
                Profit: e.numberFormat(i.profit, 2, ".", " "),
                SpentBonus: e.numberFormat(e.parseFloat(i.spendbonus), 2, ".", " "),
                Balance: e.numberFormat(i.balance, 2, ".", " "),
                Comment: i.isEarlyClosing ? e.LangManager.getStringByKey("cWCTOptionDealClosedEarly") || "Closed early": ""
            }
        }), r += e.parseFloat(i.profit)),
        o.sort(function(e, t) {
            return e.DateForSort < t.DateForSort ? -1 : e.DateForSort > t.DateForSort ? 1 : 0
        });
        this.addTotalOptionDealsRow(o, r),
        this._optionDealsTable.fillTable(o)
    },
    t.addTotalOptionDealsRow = function(t, i) {
        if ("0" == e.TraderData.getTraderInfo().showbonuses) var s = (e.LangManager.getStringByKey("cWCTBalance") || "Balance") + ": " + e.numberFormat(e.TraderData.getBalance(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ": " + e.numberFormat(i, 2, ".", "");
        else {
            for (var n = 0,
            o = 0; o < t.length; o++)"Deposit" !== t[o].cellValues.Type && (n += e.parseFloat(t[o].cellValues.SpentBonus) || 0);
            var s = (e.LangManager.getStringByKey("cWCTBalance") || "Balance") + ": " + e.numberFormat(e.TraderData.getBalance(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTBonusBalance") || "Bonuses") + ": " + e.numberFormat(e.TraderData.getSumBonus(), 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit") + ": " + e.numberFormat(i, 2, ".", "") + "&nbsp&nbsp&nbsp&nbsp" + (e.LangManager.getStringByKey("cWCTBonus") || "Bonus") + ": " + e.numberFormat(n, 2, ".", "")
        }
        t.push({
            templateIndex: 1,
            rowId: "total",
            colSpan: {
                Total: ["Number", "Name", "SymbolName", "Type", "Sum", "Date", "CloseDate", "OpenPrice", "ClosePrice", "Payout", "Profit", "SpentBonus", "Balance"]
            },
            cellValues: {
                Total: s
            }
        })
    },
    t.getOptionDealsVisibleColumns = function() {
        var t = [];
        return t = e.UserSettings.OptionDealsTable.VisiblesColumns.length > 0 ? e.UserSettings.OptionDealsTable.VisiblesColumns: ["Number", "Name", "SymbolName", "Type", "Sum", "Date", "CloseDate", "OpenPrice", "ClosePrice", "Profit", "SpentBonus", "Balance"],
        "0" == e.TraderData.getTraderInfo().showbonuses && (t.indexOf("SpentBonus") > -1 ? t.splice(t.indexOf("SpentBonus"), 1) : ""),
        t
    },
    t.getOptionDealsTableColumns = function() {
        var e = this.getOptionDealsVisibleColumns(),
        t = {};
        return t.Number = {
            Title: "Number",
            Key: "cOPGNumber",
            IsVisible: e.indexOf("Number") > -1,
            Id: "Number",
            Index: 0
        },
        t.Name = {
            Title: "Option",
            Key: "cWCTOption",
            IsVisible: e.indexOf("Name") > -1,
            Id: "Name",
            Index: 1
        },
        t.SymbolName = {
            Title: "Symbol",
            Key: "cQASSymbol",
            IsVisible: e.indexOf("SymbolName") > -1,
            Id: "SymbolName",
            Index: 2
        },
        t.Type = {
            Title: "Type",
            Key: "cOPGType",
            IsVisible: e.indexOf("Type") > -1,
            Id: "Type",
            Index: 3
        },
        t.Sum = {
            Title: "Sum",
            Key: "cOPGSum",
            IsVisible: e.indexOf("Sum") > -1,
            Id: "Sum",
            Index: 4
        },
        t.Date = {
            Title: "Open date",
            Key: "cWCTOperationOpenDate",
            IsVisible: e.indexOf("Date") > -1,
            Id: "Date",
            Index: 5
        },
        t.CloseDate = {
            Title: "Close date",
            Key: "cWCTOperationCloseDate",
            IsVisible: e.indexOf("CloseDate") > -1,
            Id: "CloseDate",
            Index: 6
        },
        t.OpenPrice = {
            Title: "Open price",
            Key: "cWCTOperationOpenPrice",
            IsVisible: e.indexOf("OpenPrice") > -1,
            Id: "OpenPrice",
            Index: 7
        },
        t.ClosePrice = {
            Title: "Close price",
            Key: "cWCTOperationClosePrice",
            IsVisible: e.indexOf("ClosePrice") > -1,
            Id: "ClosePrice",
            Index: 8
        },
        t.Payout = {
            Title: "Payout",
            Key: "cOPGPayout",
            IsVisible: e.indexOf("Payout") > -1,
            Id: "Payout",
            Index: 9
        },
        t.Profit = {
            Title: "Profit",
            Key: "cWCTTradePositionsFormProfitByPosition",
            IsVisible: e.indexOf("Profit") > -1,
            Id: "Profit",
            Index: 10
        },
        t.SpentBonus = {
            Title: "Bonus",
            Key: "cWCTBonus",
            IsVisible: e.indexOf("SpentBonus") > -1,
            Id: "SpentBonus",
            Index: 11
        },
        t.Balance = {
            Title: "Balance",
            Key: "cWCTBalance",
            IsVisible: e.indexOf("Balance") > -1,
            Id: "Balance",
            Index: 12
        },
        t
    },
    t.hide = function() {
        e.DialogReport.base.hide.apply(this, arguments),
        this.dispose()
    },
    t.dispose = function() {
        e.Socket.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        delete e._dialogReport
    },
    t.getOptionDealsTable = function() {
        if (!this._optionDealsTable) return null == e.UserSettings.OptionDealsTable && (e.UserSettings.OptionDealsTable = {},
        e.UserSettings.OptionDealsTable.VisiblesColumns = [], e.UserSettings.OptionDealsTable.ColumnSizes = [], e.UserSettings.OptionDealsTable.AutoArrage = !0),
        this._optionDealsTable = new e.DivTable({
            Template: e._Templates.OptionDealsTable,
            RowTemplates: [e._Templates.OptionDealsTableRow, e._Templates.OptionDealsTableTotalRow],
            HeaderTemplate: e._Templates.OptionDealsTableHeader,
            HeaderColumns: this.getOptionDealsTableColumns(),
            IsSizingEnabled: !0,
            AutoSizes: [1, 1, 1, 1.2, .8, 1.3, 1.3, 1.7, 1.7, 1, 1, 1, 1],
            IsAutoSize: null == e.UserSettings.OptionDealsTable.AutoArrage || e.UserSettings.OptionDealsTable.AutoArrage,
            TableType: "OptionDeals",
            Sizes: e.UserSettings.OptionDealsTable.ColumnSizes,
            CustomScrollEnabled: !0
        }),
        this._optionDealsTable.VisibleColumnsChange = e.Delegate(this,
        function() {
            e.UserSettings.OptionDealsTable.VisiblesColumns = this._optionDealsTable.getVisibleColumns(),
            e._menuMasterObject.hideAll()
        },
        this),
        this._optionDealsTable.AutoSizeChange = e.Delegate(this,
        function() {
            e.UserSettings.OptionDealsTable.AutoArrage = this._optionDealsTable._IsAutoSize
        },
        this),
        this._optionDealsTable._ContextMenu = new e.Menu({
            CheckedType: "NoChecked",
            MenuSource: this._optionDealsTable,
            ItemClick: e.Delegate(this, this._onItemClick),
            Items: [{
                Text: "Columns",
                Id: "Columns",
                Key: "cPPCColumns",
                Menu: this._optionDealsTable.getColumnsMenu()
            },
            {
                Text: "Auto arrange",
                Id: "Auto_arrange",
                Key: "CoAutoSize",
                Checked: this._optionDealsTable._IsAutoSize
            }]
        }),
        this._optionDealsTable
    },
    t = null,
    e.getDialogReport = function() {
        if (!e._dialogReport || e._dialogReport._ConnectAccount != e.TraderData.getTraderInfo().id && null != e._dialogReport._ConnectAccount) {
            if (e._dialogReport) var t = e._dialogReport;
            e._dialogReport = new e.DialogReport({
                Account: t ? t._Account: null
            })
        }
        return e._dialogReport
    },
    e
}),
define("menuTimeFrame", ["menu"],
function(e) {
    e.TimeFrameMenu = function(t) {
        e.TimeFrameMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.TimeFrameMenu, e.Menu);
    var t = e.TimeFrameMenu.prototype;
    return t._render = function() {
        var t = this._Class.indexOf("MenuPanelSettings") != -1 ? "MenuPanelSettings": "timeFrameSub";
        this._CheckedType = "Multi",
        this.ItemClick = e.Delegate(this, this._onTimeFrameItemClick),
        this._Items = [{
            Text: e.periodNames.PC_S5,
            Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_S5)]
        },
        {
            Text: e.periodNames.PC_M1,
            Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_M1)]
        },
        {
            Text: e.periodNames.PC_M15,
            Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_M15)]
        },
        {
            Text: e.periodNames.PC_H1,
            Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H1)]
        },
        {
            Text: e.periodNames.PC_H4,
            Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H4)]
        },
        {
            Text: e.periodNames.PC_D1,
            Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_D1)]
        },
        {
            Text: "Seconds",
            Key: "cPSeconds",
            Menu: new e.Menu({
                CheckedType: "Checked",
                ItemClick: e.Delegate(this, this._onTimeFrameItemClick),
                Items: [{
                    Text: e.periodNames.PC_S5,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_S5)]
                },
                {
                    Text: e.periodNames.PC_S10,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_S10)]
                },
                {
                    Text: e.periodNames.PC_S15,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_S15)]
                },
                {
                    Text: e.periodNames.PC_S30,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_S30)]
                }],
                Class: t
            }),
            Separator: !0
        },
        {
            Text: "Minutes",
            Key: "cPMinutes",
            Menu: new e.Menu({
                CheckedType: "Checked",
                ItemClick: e.Delegate(this, this._onTimeFrameItemClick),
                Items: [{
                    Text: e.periodNames.PC_M1,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_M1)]
                },
                {
                    Text: e.periodNames.PC_M5,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_M5)]
                },
                {
                    Text: e.periodNames.PC_M10,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_M10)]
                },
                {
                    Text: e.periodNames.PC_M15,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_M15)]
                },
                {
                    Text: e.periodNames.PC_M30,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_M30)]
                }],
                Class: t
            })
        },
        {
            Text: "Hours",
            Key: "cPHours",
            Menu: new e.Menu({
                CheckedType: "Checked",
                ItemClick: e.Delegate(this, this._onTimeFrameItemClick),
                Items: [{
                    Text: e.periodNames.PC_H1,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H1)]
                },
                {
                    Text: e.periodNames.PC_H2,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H2)]
                },
                {
                    Text: e.periodNames.PC_H3,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H3)]
                },
                {
                    Text: e.periodNames.PC_H4,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H4)]
                },
                {
                    Text: e.periodNames.PC_H6,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H6)]
                },
                {
                    Text: e.periodNames.PC_H8,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H8)]
                },
                {
                    Text: e.periodNames.PC_H12,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_H12)]
                }],
                Class: t
            })
        },
        {
            Text: "Days",
            Key: "cPDays",
            Menu: new e.Menu({
                CheckedType: "Checked",
                ItemClick: e.Delegate(this, this._onTimeFrameItemClick),
                Items: [{
                    Text: e.periodNames.PC_D1,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_D1)]
                },
                {
                    Text: e.periodNames.PC_W1,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_W1)]
                },
                {
                    Text: e.periodNames.PC_MN,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_MN)]
                },
                {
                    Text: e.periodNames.PC_Q1,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_Q1)]
                },
                {
                    Text: e.periodNames.PC_Y1,
                    Data: e.allPeriods[e.getPeriodCodeByName(e.periodNames.PC_Y1)]
                }],
                Class: t
            })
        }],
        e.TimeFrameMenu.base._render.apply(this, arguments),
        e.addCSSClass(this.getDomNode(), "timeFrameMenu")
    },
    t.reRender = function() {
        this.unregisterItems(),
        e.TimeFrameMenu.base.reRender.apply(this, arguments)
    },
    t.saveLastPeriod = function(t) {
        e.UserSettings.Terminal.LastPeriod = t
    },
    t.show = function(t, i) {
        this.uncheckAll();
        for (var s = 0; s < this._Items.length; s++) if (null !== this._Items[s].getMenu()) {
            var n = this._Items[s].getMenu().getItemByData(e.activeChart.options.period);
            null != n && n.setChecked(!0)
        } else this._Items[s]._Data == e.activeChart.options.period && this._Items[s].setChecked(!0);
        e.getTerminal().getChartPanel() ? e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i) : e.TimeFrameMenu.base.show.apply(this, arguments)
    },
    t._onTimeFrameItemClick = function(t) {
        var i = e.getPeriodCodeByName(t.Item._Text);
        if (i) {
            var s = e.activeChart,
            n = '<div class="Symbol">' + s.getMainSymbolName() + '</div> <div class="Period">' + t.Item._Text + "</div>";
            if (s.setPeriod(e.allPeriods[i]), e._Terminal.getChartPanel()._onChangePeriod(t.Item._Text), e._Terminal.showChartsAs == e.chartsMode.tabs) {
                var o = e._Terminal._SwiperCharts.getSelectedPage();
                o.setTitle(n)
            } else e._Terminal.showChartsAs == e.chartsMode.windows && e.activeChartDialog.setTitle(n);
            e.UserSettings.Terminal.LastPeriod = e.allPeriods[i],
            e.activeChart.options.period = e.activeChart.getPeriod(),
            e.UserSettings.WindowsTemplates.period = s.getPeriod(),
            e._menuMasterObject.hideAll();
            for (var a = 0; a < s.charts.length; a++) s.recalcDependentIndicators(s.charts[a]);
            s.getToEnd()
        }
        e.saveUserSettings()
    },
    t = null,
    e.getTimeFrameMenu = function(t) {
        return e._timeFrameMenu && delete e._timeFrameMenu,
        e._timeFrameMenu = new e.TimeFrameMenu(t),
        e._timeFrameMenu
    },
    e
}),
define("menuOffset", ["menu"],
function(e) {
    e.OffsetMenu = function(t) {
        e.OffsetMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.OffsetMenu, e.Menu);
    var t = e.OffsetMenu.prototype;
    return t._render = function() {
        this._CheckedType = "Checked",
        this.ItemClick = e.Delegate(this, this._onOffsetItemClick),
        this._Items = [{
            Text: "No",
            Key: "CWCtNO",
            Id: "noOffset"
        },
        {
            Text: "5%",
            Id: "five"
        },
        {
            Text: "15%",
            Id: "fifteen"
        },
        {
            Text: "30%",
            Id: "thirty"
        }],
        e.OffsetMenu.base._render.apply(this, arguments)
    },
    t._onOffsetItemClick = function(t) {
        var i = t.Item.getId(),
        s = !e.activeChart.options.userTurnOffAutoScroll;
        switch (i) {
        case "noOffset":
            e.activeChart.options.useOffset = !0,
            e.activeChart.options.offsetForAction = 0,
            e.activeChart.refreshOffset(0),
            e.activeChart.setAutoScroll(s);
            break;
        case "five":
            e.activeChart.options.useOffset = !0,
            e.activeChart.options.offsetForAction = .05,
            e.activeChart.refreshOffset(.05),
            e.activeChart.setAutoScroll(s);
            break;
        case "fifteen":
            e.activeChart.options.useOffset = !0,
            e.activeChart.options.offsetForAction = .15,
            e.activeChart.refreshOffset(.15),
            e.activeChart.setAutoScroll(s);
            break;
        case "thirty":
            e.activeChart.options.useOffset = !0,
            e.activeChart.options.offsetForAction = .3,
            e.activeChart.refreshOffset(.3),
            e.activeChart.setAutoScroll(s)
        }
        e.UserSettings.WindowsTemplates.useOffset = e.activeChart.options.useOffset,
        e.saveUserSettings(),
        e.activeChart.getToEnd(),
        e._menuMasterObject.hideAll()
    },
    t.hide = function(t) {
        e.OffsetMenu.base.hide.apply(this, arguments)
    },
    t.show = function(t, i) {
        if (e.activeChart.options.useOffset) switch (e.activeChart.options.offsetForAction) {
        case.05:
            this.getItem(1).setChecked(!0);
            break;
        case.15:
            this.getItem(2).setChecked(!0);
            break;
        case.3:
            this.getItem(3).setChecked(!0);
            break;
        default:
            this.getItem(0).setChecked(!0)
        } else this.getItem(0).setChecked(!0);
        e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i)
    },
    t = null,
    e.getOffsetMenu = function(t) {
        return e._offsetMenu || (e._offsetMenu = new e.OffsetMenu(t)),
        e._offsetMenu
    },
    e
}),
define("dialogColorScheme", ["dialog", "inputSelect"],
function(e) {
    var t = {
        windowSettings: 0,
        chartSettings: 1,
        optionSettings: 2,
        orderSettings: 3,
        viewSettings: 4
    };
    e.DialogColorScheme = function(t) {
        e.DialogColorScheme.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogColorScheme, e.Dialog);
    var i = e.DialogColorScheme.prototype;
    return i._onClosed = function() {
        e._dialogMasterObject.unRegister(this),
        this.removeFromDom(),
        delete e._dialogColorScheme
    },
    i._render = function() {
        this._Title = "Color scheme",
        this._Key = "cMFGWSettings",
        this._Width = 555,
        this._ImageList = e.MainImageList,
        this._ImageListRow = 5,
        this._ImageListCol = 12,
        this._Content = e.htmlToDOM(e._Templates.DialogColorSchemeContent);
        var t = this._Content.querySelector(".DTopControls"),
        i = this._Content.querySelector(".DCenterControls"),
        s = i.querySelector(".DLeftControls");
        this.rightContent = i.querySelector(".DRightControls");
        var n = this._Content.querySelector(".DFooterControls");
        this._schemeSelect = new e.InputSelect({
            ParentNode: t,
            Width: this._Width - 53,
            Edit: !1,
            Options: this.getAvailableColorSchemes(),
            ChangedValue: e.Delegate(this, this._schemeSelectOnChangedValue)
        });
        var o = 1;
        this._windowSettings = new e.Container({
            Width: 305,
            Height: 340,
            Class: "ColorSchemeSets",
            CreateLabel: !1,
            Key: "cCSFWindowSettings",
            Id: "WindowSettings",
            LabelText: "Window settings",
            LabelPrefix: o+++". "
        }),
        this.appendWindowSettingsColorPickers(),
        this._chartSettings = new e.Container({
            Width: 305,
            Height: 340,
            Class: "ColorSchemeSets",
            CreateLabel: !1,
            Key: "cMFChartSettings",
            Id: "ChartSettings",
            LabelText: "Chart settings",
            LabelPrefix: o+++". "
        }),
        this.appendChartSettingsColorPickers(),
        e.getTerminal().useOptions && (this._optionSettings = new e.Container({
            Width: 305,
            Height: 340,
            Class: "ColorSchemeSets",
            CreateLabel: !1,
            Key: "cCSFOptionSettings",
            Id: "OptionSettings",
            LabelText: "Option settings",
            LabelPrefix: o+++". "
        }), this.appendOptionsSettingsColorPickers()),
        this._orderSettings = new e.Container({
            Width: 305,
            Height: 340,
            Class: "ColorSchemeSets",
            CreateLabel: !1,
            Key: "cCSFOrderSettings",
            Id: "OrderSettings",
            LabelText: "Order settings",
            LabelPrefix: o+++". "
        }),
        this.appendOrderSettingsColorPickers(),
        this._viewSettings = new e.Container({
            Width: 305,
            Height: 340,
            Class: "ColorSchemeSets",
            CreateLabel: !1,
            Key: "cCSFViewSettings",
            Id: "ViewSettings",
            LabelText: "View settings",
            LabelPrefix: o+++". "
        }),
        this.appendViewSettingsColorPickers(),
        this._saveBtn = new e.Button({
            ParentNode: n,
            Class: "DButton",
            Width: 120,
            Text: "Save",
            Key: "cMFSave",
            Click: e.Delegate(this, this._saveSettings)
        }),
        this.createSetsSelector(s),
        e.DialogColorScheme.base._render.apply(this, arguments),
        this.addCSSClass("dialogColorScheme")
    },
    i.appendWindowSettingsColorPickers = function() {
        var t = document.createElement("div");
        t.className = "InputsContainer",
        this._windowSettings.setItems([t]),
        this._externalBackgroundPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "External background",
            Key: "cCSFOutBackground",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._internalBackgroundPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Internal background",
            Key: "cCSFInBackground",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._gridBackgroundPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Grid",
            Key: "cMFShowGrid",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._optionsBackgroundPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Options",
            Key: "cLSFParam",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        })
    },
    i.appendChartSettingsColorPickers = function() {
        var t = document.createElement("div");
        t.className = "InputsContainer",
        this._chartSettings.setItems([t]),
        this._bullCandlePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Bull candle",
            Key: "cCSFBeef",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._bearCandlePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Bear candle",
            Key: "cCSFBear",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._barUpPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Chart bar up",
            Key: "cMFGBarUp",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._barDownPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Chart bar down",
            Key: "cMFGBarDown",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._chartLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Chart line",
            Key: "cMFLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._textOfPriceLevelPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Text of price level",
            Key: "cMFTextOfPriceLevel",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        })
    },
    i.appendOrderSettingsColorPickers = function() {
        var t = document.createElement("div");
        t.className = "InputsContainer",
        this._orderSettings.setItems([t]),
        e.getTerminal().useOnlyOptions || (this._marketOrderBuyPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Market order buy",
            Key: "cCSFMarketBuy",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._pendingOrderBuyPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Pending order buy",
            Key: "cCSFPendingBuy",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._takeProfitBuyPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Take profit buy",
            Key: "cTOTakeProfitBuy",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._stopLossBuyPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Stop loss buy",
            Key: "cTOStopLossBuy",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), t.appendChild(e.getHorisontalSeparator()), this._marketOrderSellPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Market order sell",
            Key: "cCSFMarketSell",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._pendingOrderSellPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Pending order Sell",
            Key: "cCSFPendingSell",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._takeProfitSellPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Take profit Sell",
            Key: "cTOTakeProfitSell",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._stopLossSellPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Stop loss Sell",
            Key: "cTOStopLossSell",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }))
    },
    i.appendViewSettingsColorPickers = function() {
        var t = document.createElement("div");
        t.className = "InputsContainer",
        this._viewSettings.setItems([t]),
        this._textPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Text",
            Key: "cLPText",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._crossPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Crosshair",
            Key: "cCSFCross",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._crossLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Crosshair line",
            Key: "cCSFCrossLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        e.getTerminal().useOnlyOptions || (this._volumePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Volume",
            Key: "cTOVolume",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._positionVolumePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Volume",
            Key: "cClPFVolume",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        })),
        t.appendChild(e.getHorisontalSeparator()),
        this._askLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Ask line",
            Key: "cCSFAskLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._bidLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Bid line",
            Key: "cCSFBidLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._priceTextPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Price text",
            Key: "cCSFColorCurrprice",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        })
    },
    i.appendOptionsSettingsColorPickers = function() {
        var t = document.createElement("div");
        t.className = "InputsContainer",
        this._optionSettings.setItems([t]),
        this._stopLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Stop line",
            Key: "cCSStopLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._expiryLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Expiry line",
            Key: "cCSExpiryLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._openDateLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Open Date Line",
            Key: "cOSGOpenDateLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._highOptionPositionPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "High line",
            Key: "cCSHighLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        this._lowOptionPositionPicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: "Low line",
            Key: "cCSLowLine",
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }),
        wt.getTerminal().useNewOptions === !0 && (this._topOneTouchOptionLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: (e.LangManager.getStringByKey("cCSTopOptionLine") || "Top line") + " " + e.OptionTypeNames[2],
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._bottomOneTouchOptionLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: (e.LangManager.getStringByKey("cCSBottomOptionLine") || "Bottom line") + " " + e.OptionTypeNames[2],
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._topRangeOptionLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: (e.LangManager.getStringByKey("cCSTopOptionLine") || "Top line") + " " + e.OptionTypeNames[3],
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }), this._bottomRangeOptionLinePicker = new e.Input({
            ParentNode: t,
            Template: e._Templates.ColorSelect,
            Label: (e.LangManager.getStringByKey("cCSBottomOptionLine") || "Bottom line") + " " + e.OptionTypeNames[3],
            ReadOnly: !0,
            ChangedValue: e.Delegate(this, this._colorOnChangedValue)
        }))
    },
    i.createSetsSelector = function(i) {
        this.selectorsContainer = document.createElement("div"),
        this.selectorsContainer.className = "SelectorsContainer",
        i.appendChild(this.selectorsContainer);
        var s = document.createElement("div");
        s.innerHTML = e.LangManager.getStringByKey("cCSFWindowSettings") || "Window settings",
        this.selectorsContainer.appendChild(s);
        var n = document.createElement("div");
        if (n.innerHTML = e.LangManager.getStringByKey("cMFChartSettings") || "Chart settings", this.selectorsContainer.appendChild(n), e.getTerminal().useOptions) {
            var o = document.createElement("div");
            o.innerHTML = e.LangManager.getStringByKey("cCSFOptionSettings") || "Option settings",
            this.selectorsContainer.appendChild(o)
        }
        var a = document.createElement("div");
        a.innerHTML = e.LangManager.getStringByKey("cCSFOrderSettings") || "Order settings",
        this.selectorsContainer.appendChild(a);
        var r = document.createElement("div");
        r.innerHTML = e.LangManager.getStringByKey("cCSFViewSettings") || "View settings",
        this.selectorsContainer.appendChild(r);
        var l = this;
        s.onclick = function() {
            l.changeColorPickersSet(t.windowSettings)
        },
        n.onclick = function() {
            l.changeColorPickersSet(t.chartSettings)
        },
        a.onclick = function() {
            l.changeColorPickersSet(t.orderSettings)
        },
        r.onclick = function() {
            l.changeColorPickersSet(t.viewSettings)
        },
        e.getTerminal().useOptions && (o.onclick = function() {
            l.changeColorPickersSet(t.optionSettings)
        })
    },
    i.changeColorPickersSet = function(i) {
        if (this.currentColorPickersSet !== i) {
            for (var s = 0; s < this.selectorsContainer.childNodes.length; s++) s != i ? e.removeCSSClass(this.selectorsContainer.childNodes[s], "Selected") : e.addCSSClass(this.selectorsContainer.childNodes[s], "Selected");
            for (this._currentColorScheme = e.activeChart.options.colorScheme, this.currentColorPickersSet = i; this.rightContent.firstChild;) this.rightContent.removeChild(this.rightContent.firstChild);
            switch (i) {
            case t.windowSettings:
                this._windowSettings.addToNode(this.rightContent);
                break;
            case t.chartSettings:
                this._chartSettings.addToNode(this.rightContent);
                break;
            case t.optionSettings:
                this._optionSettings.addToNode(this.rightContent);
                break;
            case t.orderSettings:
                this._orderSettings.addToNode(this.rightContent);
                break;
            case t.viewSettings:
                this._viewSettings.addToNode(this.rightContent)
            }
            jscolor.bind(),
            this._setSettings(this._currentColorScheme)
        }
    },
    i._colorOnChangedValue = function(t) {
        "#" + t.sender._fieldNode.color;
        this._schemeSelect.setSelectedOption(this._schemeSelect.getOptions().length - 1);
        var i = this._createColorSchemeObject();
        e.activeChart.options.colorScheme = i,
        e.activeChart.clearGACachedBackground()
    },
    i.getAvailableColorSchemes = function() {
        for (var t = [], i = e.getColorSchemesNames(), s = 0; s < i.length; s++) t.push({
            Text: i[s],
            Id: i[s]
        });
        return t
    },
    i.show = function() {
        e.DialogColorScheme.base.show.apply(this, arguments),
        this._initialColorScheme = e.shallowCopy(e.activeChart.options.colorScheme),
        this.changeColorPickersSet(t.windowSettings),
        this._schemeSelect.setSelectedOption(this._schemeSelect.getOptions().length - 1)
    },
    i._schemeSelectOnChangedValue = function(t) {
        var i = e.getDefaultColorSchemes()[t.sender._SelectedOption],
        s = e.getColorSchemesNames()[t.sender._SelectedOption];
        if ("Custom" != s) this._setSettings(i),
        this._currentColorScheme = i,
        e.activeChart.options.colorScheme = i,
        e.activeChart.clearGACachedBackground();
        else {
            var n = this._createColorSchemeObject();
            e.activeChart.options.colorScheme = n,
            e.activeChart.clearGACachedBackground()
        }
    },
    i._setSettings = function(i) {
        switch (this.currentColorPickersSet) {
        case t.windowSettings:
            this._externalBackgroundPicker._fieldNode.color.fromString(i.outerBackground),
            this._internalBackgroundPicker._fieldNode.color.fromString(i.innerBackground),
            this._gridBackgroundPicker._fieldNode.color.fromString(i.grid),
            this._optionsBackgroundPicker._fieldNode.color.fromString(i.names);
            break;
        case t.chartSettings:
            this._bullCandlePicker._fieldNode.color.fromString(i.bullCandle),
            this._bearCandlePicker._fieldNode.color.fromString(i.bearCandle),
            this._barUpPicker._fieldNode.color.fromString(i.barUp),
            this._barDownPicker._fieldNode.color.fromString(i.barDown),
            this._chartLinePicker._fieldNode.color.fromString(i.line),
            this._textOfPriceLevelPicker._fieldNode.color.fromString(i.textOfPriceLevel);
            break;
        case t.orderSettings:
            e.getTerminal().useOnlyOptions || (this._marketOrderBuyPicker._fieldNode.color.fromString(i.positionLineBuy), this._marketOrderSellPicker._fieldNode.color.fromString(i.positionLineSell), this._pendingOrderBuyPicker._fieldNode.color.fromString(i.pendingOrderLineBuy), this._pendingOrderSellPicker._fieldNode.color.fromString(i.pendingOrderLineSell), this._takeProfitBuyPicker._fieldNode.color.fromString(i.takeProfitLineBuy), this._takeProfitSellPicker._fieldNode.color.fromString(i.takeProfitLineSell), this._stopLossBuyPicker._fieldNode.color.fromString(i.stopLossLineBuy), this._stopLossSellPicker._fieldNode.color.fromString(i.stopLossLineSell));
            break;
        case t.viewSettings:
            this._textPicker._fieldNode.color.fromString(i.text),
            this._crossPicker._fieldNode.color.fromString(i.cross),
            this._crossLinePicker._fieldNode.color.fromString(i.crossLine),
            this._priceTextPicker._fieldNode.color.fromString(i.currentPriceText),
            this._askLinePicker._fieldNode.color.fromString(i.askLine),
            this._bidLinePicker._fieldNode.color.fromString(i.bidLine),
            e.getTerminal().useOnlyOptions || (this._volumePicker._fieldNode.color.fromString(i.volume), this._positionVolumePicker._fieldNode.color.fromString(i.positionVolume));
            break;
        case t.optionSettings:
            e.getTerminal().useOptions && (this._stopLinePicker._fieldNode.color.fromString(i.stopLine || "#808080"), this._expiryLinePicker._fieldNode.color.fromString(i.expiryLine || "#ff6600"), this._openDateLinePicker._fieldNode.color.fromString(i.openDateLine || "#555555"), this._highOptionPositionPicker._fieldNode.color.fromString(i.highOptionPositionLine || "#008000"), this._lowOptionPositionPicker._fieldNode.color.fromString(i.lowOptionPositionLine || "#ff0000"), e.getTerminal().useNewOptions === !0 && (this._topOneTouchOptionLinePicker._fieldNode.color.fromString(i.topOneTouchOptionLine || "#008000"), this._bottomOneTouchOptionLinePicker._fieldNode.color.fromString(i.bottomOneTouchOptionLine || "#ff0000"), this._topRangeOptionLinePicker._fieldNode.color.fromString(i.topRangeOptionLine || "#008000"), this._bottomRangeOptionLinePicker._fieldNode.color.fromString(i.bottomRangeOptionLine || "#ff0000")))
        }
    },
    i._createColorSchemeObject = function() {
        var i = this._currentColorScheme;
        switch (this.currentColorPickersSet) {
        case t.windowSettings:
            i.outerBackground = "#" + this._externalBackgroundPicker._fieldNode.color,
            i.innerBackground = "#" + this._internalBackgroundPicker._fieldNode.color,
            i.grid = "#" + this._gridBackgroundPicker._fieldNode.color,
            i.names = "#" + this._optionsBackgroundPicker._fieldNode.color;
            break;
        case t.chartSettings:
            i.bullCandle = "#" + this._bullCandlePicker._fieldNode.color,
            i.bearCandle = "#" + this._bearCandlePicker._fieldNode.color,
            i.barUp = "#" + this._barUpPicker._fieldNode.color,
            i.barDown = "#" + this._barDownPicker._fieldNode.color,
            i.line = "#" + this._chartLinePicker._fieldNode.color,
            i.textOfPriceLevel = "#" + this._textOfPriceLevelPicker._fieldNode.color;
            break;
        case t.orderSettings:
            e.getTerminal().useOnlyOptions || (i.positionLineBuy = "#" + this._marketOrderBuyPicker._fieldNode.color, i.positionLineSell = "#" + this._marketOrderSellPicker._fieldNode.color, i.pendingOrderLineBuy = "#" + this._pendingOrderBuyPicker._fieldNode.color, i.pendingOrderLineSell = "#" + this._pendingOrderSellPicker._fieldNode.color, i.takeProfitLineBuy = "#" + this._takeProfitBuyPicker._fieldNode.color, i.takeProfitLineSell = "#" + this._takeProfitSellPicker._fieldNode.color, i.stopLossLineBuy = "#" + this._stopLossBuyPicker._fieldNode.color, i.stopLossLineSell = "#" + this._stopLossSellPicker._fieldNode.color);
            break;
        case t.viewSettings:
            i.text = "#" + this._textPicker._fieldNode.color,
            i.cross = "#" + this._crossPicker._fieldNode.color,
            i.crossLine = "#" + this._crossLinePicker._fieldNode.color,
            i.askLine = "#" + this._askLinePicker._fieldNode.color,
            i.bidLine = "#" + this._bidLinePicker._fieldNode.color,
            i.currentPriceText = "#" + this._priceTextPicker._fieldNode.color,
            e.getTerminal().useOnlyOptions || (i.volume = "#" + this._volumePicker._fieldNode.color, i.positionVolume = "#" + this._positionVolumePicker._fieldNode.color);
            break;
        case t.optionSettings:
            e.getTerminal().useOptions && (i.stopLine = "#" + this._stopLinePicker._fieldNode.color, i.expiryLine = "#" + this._expiryLinePicker._fieldNode.color, i.openDateLine = "#" + this._openDateLinePicker._fieldNode.color, i.highOptionPositionLine = "#" + this._highOptionPositionPicker._fieldNode.color, i.lowOptionPositionLine = "#" + this._lowOptionPositionPicker._fieldNode.color, e.getTerminal().useNewOptions === !0 && (i.topOneTouchOptionLine = "#" + this._topOneTouchOptionLinePicker._fieldNode.color, i.bottomOneTouchOptionLine = "#" + this._bottomOneTouchOptionLinePicker._fieldNode.color, i.topRangeOptionLine = "#" + this._topRangeOptionLinePicker._fieldNode.color, i.bottomRangeOptionLine = "#" + this._bottomRangeOptionLinePicker._fieldNode.color))
        }
        return i
    },
    i._saveSettings = function() {
        var t = this._createColorSchemeObject();
        e.activeChart.options.colorScheme = t,
        e.UserSettings.WindowsTemplates.colorScheme = t,
        e.saveUserSettings(),
        this.hide(!0)
    },
    i.hide = function(t) {
        1 != t && (e.activeChart.options.colorScheme = this._initialColorScheme, e.activeChart.clearGACachedBackground()),
        e.DialogColorScheme.base.hide.apply(this, arguments)
    },
    i = null,
    e.getDialogColorScheme = function() {
        return e._dialogColorScheme || (e._dialogColorScheme = new e.DialogColorScheme),
        e._dialogColorScheme
    },
    e
}),
define("menuChartSettings", ["menu", "dialogColorScheme"],
function(e) {
    e.ChartSettingsMenu = function(t) {
        t = t || {},
        this._offsetMenu = null,
        this._timeFrameMenu = null,
        this._scaleMenu = null,
        this._styleMenu = null,
        this._colorSchemeMenu = null,
        this._Class = t.Class || "",
        this.createMenu(),
        e.ChartSettingsMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.ChartSettingsMenu, e.Menu);
    var t = e.ChartSettingsMenu.prototype;
    return t.initColorSchemeMenu = function() {
        this._colorSchemeMenu = null;
        var t = this._Class.indexOf("MenuPanelSettings") != -1 ? "MenuPanelSettings": "";
        return this._colorSchemeMenu = new e.Menu({
            CheckedType: "checked",
            BeforeOpen: e.Delegate(this, this._onColorSchemeMenuOpen),
            ItemClick: e.Delegate(this, this._onColorSchemeItemClick),
            Class: t,
            MenuSource: this,
            Items: [{
                Text: "Default Dark",
                Id: "DefaultDark"
            },
            {
                Text: "Default Light",
                Id: "DefaultLight"
            },
            {
                Text: "Coffee Dark",
                Id: "CoffeeDark"
            },
            {
                Text: "Coffee Light",
                Id: "CoffeeLight"
            },
            {
                Text: "Contrast Dark",
                Id: "ContrastDark"
            },
            {
                Text: "Contrast Light",
                Id: "ContrastLight"
            },
            {
                Text: "Ice Dark",
                Id: "IceDark"
            },
            {
                Text: "Ice Light",
                Id: "IceLight"
            },
            {
                Separator: !0,
                Text: "Custom",
                Id: "Custom"
            }]
        }),
        this._colorSchemeMenu.reRender = function() {},
        this._colorSchemeMenu
    },
    t.createMenu = function() {
        this._styleMenu = new e.ChartStyleMenu,
        this._offsetMenu = new e.OffsetMenu,
        this._timeFrameMenu = new e.TimeFrameMenu,
        this._scaleMenu = new e.Menu({
            CheckedType: "NoChecked",
            BeforeOpen: e.Delegate(this, this._onScaleMenuOpen),
            ItemClick: e.Delegate(this, this._onScaleItemClick),
            MenuSource: this,
            Items: [{
                Text: "Zoom In",
                Id: "zoom_in",
                Key: "cMFZoomIn",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 8,
                ImageListCol: 0
            },
            {
                Text: "Zoom Out",
                Id: "zoom_out",
                Key: "cMFZoomOut",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 7,
                ImageListCol: 0
            }]
        }),
        this.initColorSchemeMenu()
    },
    t._onColorSchemeItemClick = function(t) {
        var i = t.Item.getId();
        if ("Custom" === i) return void e.getDialogColorScheme().show();
        var s = e.getColorSchemesNames().indexOf(i),
        n = e.getDefaultColorSchemes()[s];
        e.activeChart.options.colorScheme = n,
        e.activeChart.clearGACachedBackground(),
        e.UserSettings.WindowsTemplates.colorScheme = n,
        e.saveUserSettings()
    },
    t._onColorSchemeMenuOpen = function() {
        for (var t, i = e.activeChart.options.colorScheme,
        s = e.getDefaultColorSchemes(), n = e.getColorSchemesNames().indexOf("Custom"), o = 0; o < s.length; o++) JSON.stringify(s[o]) == JSON.stringify(i) && (t = o);
        void 0 !== t ? this._colorSchemeMenu.getItem(t).setChecked(!0) : this._colorSchemeMenu.getItem(n).setChecked(!0)
    },
    t._onScaleItemClick = function(e) {
        var t = e.Item.getId();
        switch (t) {
        case "zoom_in":
            this._onZoomInClick();
            break;
        case "zoom_out":
            this._onZoomOutClick()
        }
    },
    t._onScaleMenuOpen = function() {
        this._scaleMenu.getItemById("zoom_in").setEnabled(32 != e.activeChart.options.scale),
        this._scaleMenu.getItemById("zoom_out").setEnabled(1 != e.activeChart.options.scale)
    },
    t._onZoomInClick = function() {
        e.activeChart.zoomIn(),
        e._menuMasterObject.hideAll()
    },
    t._onZoomOutClick = function() {
        e.activeChart.zoomOut(),
        e._menuMasterObject.hideAll()
    },
    t.getItemsFullSet = function() {
        this.menuItems = [{
            Text: "Shift",
            Key: "cMFOffset",
            Id: "shift",
            Menu: this._offsetMenu
        },
        {
            Text: "Style",
            Key: "cMFStyle",
            Id: "style",
            DisableChecked: !0,
            Menu: this._styleMenu
        },
        {
            Text: "Grid",
            Key: "cMFShowGrid",
            Id: "grid"
        },
        {
            Text: "Current price",
            Id: "current_price",
            Key: "cWCTTradePositionsFormCurrentPrice"
        },
        {
            Text: "Show ask",
            Id: "show_ask",
            Key: "cMFShowAsk"
        },
        {
            Text: "Show option line",
            Id: "show_option_line",
            Key: "cMFShowOptionSettingsLines"
        },
        {
            Text: "Auto scroll",
            Id: "auto_scroll",
            Key: "cMFAutoScroll"
        },
        {
            Text: "Period",
            Id: "period",
            Key: "cICPeriod",
            DisableChecked: !0,
            Menu: this._timeFrameMenu
        },
        {
            Text: "Scale",
            Id: "scale",
            Key: "cLPScale",
            DisableChecked: !0,
            Menu: this._scaleMenu
        },
        {
            Text: "Color Scheme",
            Id: "color_scheme",
            Key: "cMFGWSettings",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 23,
            ImageListCol: 0,
            DisableChecked: !0,
            Menu: this._colorSchemeMenu
        }];
        var t = {
            Text: "Auto timeframe",
            Id: "auto_timeframe",
            Key: "cMFAutoTimeframe"
        };
        return e.getTerminal().useOptions === !0 && this.menuItems.splice(7, 0, t),
        this.menuItems
    },
    t.getItemsChartPanelSet = function() {
        this.chartPanelMenuItems = [{
            Text: "Grid",
            Key: "cMFShowGrid",
            Id: "grid"
        },
        {
            Text: "Current price",
            Id: "current_price",
            Key: "cWCTTradePositionsFormCurrentPrice"
        },
        {
            Text: "Show ask",
            Id: "show_ask",
            Key: "cMFShowAsk"
        },
        {
            Text: "Show option line",
            Id: "show_option_line",
            Key: "cMFShowOptionSettingsLines"
        },
        {
            Text: "Auto scroll",
            Id: "auto_scroll",
            Key: "cMFAutoScroll"
        },
        {
            Text: "Offset",
            Id: "Offset",
            Key: "cMFOffset",
            Menu: e.getOffsetMenu({
                Class: "MenuPanelSettings"
            })
        },
        {
            Text: "Color Scheme",
            Id: "color_scheme",
            Key: "cMFGWSettings",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 23,
            ImageListCol: 0,
            DisableChecked: !0,
            Menu: this._colorSchemeMenu
        }];
        var t = {
            Text: "Auto timeframe",
            Id: "auto_timeframe",
            Key: "cMFAutoTimeframe"
        };
        return e.getTerminal().useOptions === !0 && this.chartPanelMenuItems.splice(5, 0, t),
        this.chartPanelMenuItems
    },
    t._render = function() {
        this._CheckedType = "Multi",
        this.ItemClick = e.Delegate(this, this._onSettingsItemClick),
        this._Items = this.getItemsFullSet(),
        e.ChartSettingsMenu.base._render.apply(this, arguments)
    },
    t._onSettingsItemClick = function(t) {
        var i = t.Item.getId();
        switch (i) {
        case "grid":
            e.activeChart.options.showGrid = !e.activeChart.options.showGrid,
            e.UserSettings.WindowsTemplates.showGrid = e.activeChart.options.showGrid,
            e.activeChart.clearGACachedBackground(),
            t.Item.setChecked(e.activeChart.options.showGrid);
            break;
        case "current_price":
            e.activeChart.options.showCurrentPrice = !e.activeChart.options.showCurrentPrice,
            e.UserSettings.WindowsTemplates.showCurrentPrice = e.activeChart.options.showCurrentPrice,
            t.Item.setChecked(e.activeChart.options.showCurrentPrice);
            break;
        case "show_ask":
            e.activeChart.options.showAskLine = !e.activeChart.options.showAskLine,
            e.UserSettings.WindowsTemplates.showAskLine = e.activeChart.options.showAskLine,
            t.Item.setChecked(e.activeChart.options.showAskLine);
            break;
        case "show_option_line":
            e.activeChart.options.showOptionSettingsLine = !e.activeChart.options.showOptionSettingsLine,
            e.UserSettings.WindowsTemplates.showOptionSettingsLine = e.activeChart.options.showOptionSettingsLine,
            t.Item.setChecked(e.activeChart.options.showOptionSettingsLine);
            break;
        case "auto_scroll":
            var s = e.activeChart;
            s.options.userTurnOffAutoScroll = s.options.autoScroll === !0 || s.options.userTurnOffAutoScroll === !1,
            0 !== s.options.offset ? s.setAutoScroll(!s.options.autoScroll) : s.setAutoScroll(!1),
            s.updateOffsetAfterMouseMove();
            break;
        case "auto_timeframe":
            e.activeChart.options.autoTimeframe = !e.activeChart.options.autoTimeframe,
            e.UserSettings.WindowsTemplates.autoTimeframe = e.activeChart.options.autoTimeframe,
            t.Item.setChecked(e.activeChart.options.autoTimeframe);
            break;
        case "color_scheme":
            var n = e.getDialogColorScheme();
            n.show()
        }
        "period" != i && "shift" != i && "scale" != i && "style" != i && e._menuMasterObject.hideAll(),
        e.saveUserSettings()
    },
    t.show = function(t, i) {
        this.clear(),
        this.getMenuSource() instanceof e.Button && this.getMenuSource().getParentNode().className.indexOf("WTChartPanel") != -1 || this.getMenuSource() instanceof e.menuAdditionalPanel ? this.setItems(this.getItemsChartPanelSet()) : this.setItems(this.getItemsFullSet()),
        this.updateMenuItems();
        var s = this.getItemById("show_option_line"),
        n = e.getTerminal().useOptions;
        if (n ? s.setVisible(!0) : s.setVisible(!1), this.getItemById("grid").setChecked(e.activeChart.options.showGrid), this.getItemById("current_price").setChecked(e.activeChart.options.showCurrentPrice), this.getItemById("show_ask").setChecked(e.activeChart.options.showAskLine), n && this.getItemById("auto_timeframe").setChecked(e.activeChart.options.autoTimeframe), e.activeChart.options.autoScroll === !1 && e.activeChart.options.userTurnOffAutoScroll === !1 && 0 !== e.activeChart.options.offset && (e.activeChart.options.userTurnOffAutoScroll = !0), e.activeChart.options.userTurnOffAutoScroll === !0) var o = !1;
        else var o = 0 === e.activeChart.options.offset || e.activeChart.options.autoScroll;
        this.getItemById("auto_scroll").setChecked(o),
        e.getTerminal().useOnlyOptions ? this.getItemById("show_ask").setVisible(!1) : this.getItemById("show_ask").setVisible(!0),
        e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i);
        var a = e.activeChart.realCurrentObject ? e.activeChart.realCurrentObject._symbolName: e.activeChart.charts[0]._symbolName,
        r = e.OptionsSettings.getOptionSettingsBySymbolName(a);
        null == r || r.isShowClassicOption === !1 && r.isShowExpressOption === !1 ? s.setEnabled(!1) : (this.getItemById("show_option_line").setChecked(e.activeChart.options.showOptionSettingsLine), s.setEnabled(!0))
    },
    t = null,
    e.getChartSettingsMenu = function(t) {
        return e._chartSettingsMenu && delete e._chartSettingsMenu,
        e._chartSettingsMenu = new e.ChartSettingsMenu(t),
        e._chartSettingsMenu
    },
    e
}),
define("menuLines", ["menu"],
function(e) {
    e.LinesMenu = function(t) {
        e.LinesMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.LinesMenu, e.Menu);
    var t = e.LinesMenu.prototype;
    return t._render = function() {
        this._CheckedType = "Checked",
        this.ItemClick = e.Delegate(this, this._onLinesItemClick),
        this._Items = [{
            Text: "Vertical line",
            Key: "cLPVerticalLine",
            ImageList: e.IconSVGList,
            ImageListRow: 25,
            ImageListCol: 0,
            Id: "vertical_line",
            Data: e.VerticalLine,
            Class: "VerticalLine"
        },
        {
            Text: "Horizontal line",
            Key: "cLPHorizontalLine",
            ImageList: e.IconSVGList,
            ImageListRow: 26,
            ImageListCol: 0,
            Id: "horizontal_line",
            Data: e.HorizontalLine,
            Class: "HorizontalLine"
        },
        {
            Text: "Trend line",
            Key: "cLPTrendLine",
            ImageList: e.IconSVGList,
            ImageListRow: 27,
            ImageListCol: 0,
            Id: "trend_line",
            Data: e.TrendLine,
            Class: "TrendLine"
        },
        {
            Text: "Fibonacci lines",
            Key: "cLPFiboLines",
            ImageList: e.IconSVGList,
            ImageListRow: 28,
            ImageListCol: 0,
            Id: "fibonacci_line",
            Data: e.FiboLines,
            Class: "FiboLine"
        },
        {
            Text: "Trend by angle",
            Key: "cLPAngleTrendLine",
            ImageList: e.IconSVGList,
            ImageListRow: 29,
            ImageListCol: 0,
            Id: "trend_by_line",
            Data: e.AngleTrendLine,
            Class: "AngleTrendLine"
        }],
        e.LinesMenu.base._render.apply(this, arguments)
    },
    t.getStandartLinesMenuItems = function() {
        return [{
            Text: "Vertical line",
            Key: "cLPVerticalLine",
            ImageList: e.IconSVGList,
            ImageListRow: 25,
            ImageListCol: 0,
            Id: "vertical_line",
            Data: e.VerticalLine,
            Class: "VerticalLine"
        },
        {
            Text: "Horizontal line",
            Key: "cLPHorizontalLine",
            ImageList: e.IconSVGList,
            ImageListRow: 26,
            ImageListCol: 0,
            Id: "horizontal_line",
            Data: e.HorizontalLine,
            Class: "HorizontalLine"
        },
        {
            Text: "Trend line",
            Key: "cLPTrendLine",
            ImageList: e.IconSVGList,
            ImageListRow: 27,
            ImageListCol: 0,
            Id: "trend_line",
            Data: e.TrendLine,
            Class: "TrendLine"
        },
        {
            Text: "Fibonacci lines",
            Key: "cLPFiboLines",
            ImageList: e.IconSVGList,
            ImageListRow: 28,
            ImageListCol: 0,
            Id: "fibonacci_line",
            Data: e.FiboLines,
            Class: "FiboLine"
        },
        {
            Text: "Trend by angle",
            Key: "cLPAngleTrendLine",
            ImageList: e.IconSVGList,
            ImageListRow: 29,
            ImageListCol: 0,
            Id: "trend_by_line",
            Data: e.AngleTrendLine,
            Class: "AngleTrendLine"
        }]
    },
    t._onLinesItemClick = function(t) {
        var i = t.Item;
        if (e.activeChart) {
            var s = e.activeChart;
            i.getChecked() ? ("pointer" == s.cursor ? s.selectedMenuItem.setChecked(!1) : (s.lastCursor = s.cursor, s.cursor = "pointer"), s.addingObjectClass = i.getData(), s.selectedMenuItem = i, e.getTerminal().getChartPanel().getCrosshairButton().setPressed(!1)) : s._canvas.classList.contains("cross") && (e.getTerminal().getChartPanel().getCrosshairButton().setPressed(!0), s.setCrosshair(!0))
        }
        e._menuMasterObject.hideAll(),
        e.saveUserSettings()
    },
    t.show = function(t, i) {
        e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i)
    },
    t = null,
    e.getLinesMenu = function(t) {
        return e._linesMenu && delete e._linesMenu,
        e._linesMenu = new e.LinesMenu(t),
        e._linesMenu
    },
    e
}),
define("indicators/indicatorValuesClasses", ["avlTree"],
function(e) {
    e.CustomIndicatorValue = function(e) {
        this._source = {},
        this._parameters = [],
        this.setParameters(e)
    };
    var t = e.CustomIndicatorValue.prototype;
    t.setParameters = function(e) {
        this._source = e[0];
        for (var t = 1; t < e.length; t++) this._parameters.push(e[t])
    },
    t.getSource = function() {
        return this._source
    },
    t.setSource = function(e) {
        this._source = e
    },
    t.getParameter = function(e) {
        return this._parameters[e]
    },
    t.getParameters = function() {
        return this._parameters
    },
    t = null,
    e.SimpleIndicatorValue = function(t) {
        e.SimpleIndicatorValue.base.constructor.apply(this, arguments),
        this.getValue = function(t) {
            var i = {
                isExists: !1,
                value: -1
            };
            return t > -1 ? {
                isExists: !0,
                value: this.getSource().get(t).value[e.signalStringType[this.getParameter(0)]]
            }: i
        }
    },
    e.initClass(e.SimpleIndicatorValue, e.CustomIndicatorValue),
    e.HL2IndicatorValue = function(t) {
        e.HL2IndicatorValue.base.constructor.apply(this, arguments),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: -1
            };
            if (e === -1) return t;
            var i = this.getSource().get(e);
            return {
                isExists: !0,
                value: (i.value.high + i.value.low) / 2
            }
        }
    },
    e.initClass(e.HL2IndicatorValue, e.CustomIndicatorValue),
    e.OC2IndicatorValue = function(t) {
        e.OC2IndicatorValue.base.constructor.apply(this, arguments),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: -1
            };
            if (e === -1) return t;
            var i = this.getSource().get(e);
            return {
                isExists: !0,
                value: (i.value.open + i.value.close) / 2
            }
        }
    },
    e.initClass(e.OC2IndicatorValue, e.CustomIndicatorValue),
    e.HLC3IndicatorValue = function(t) {
        e.HLC3IndicatorValue.base.constructor.apply(this, arguments),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: -1
            };
            if (e === -1) return t;
            var i = this.getSource().get(e);
            return {
                isExists: !0,
                value: (i.value.high + i.value.low + i.value.close) / 3
            }
        }
    },
    e.initClass(e.HLC3IndicatorValue, e.CustomIndicatorValue),
    e.OHLC4IndicatorValue = function(t) {
        e.OHLC4IndicatorValue.base.constructor.apply(this, arguments),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: -1
            };
            if (e === -1) return t;
            var i = this.getSource().get(e);
            return {
                isExists: !0,
                value: (i.value.high + i.value.low + i.value.close + i.value.open) / 4
            }
        }
    },
    e.initClass(e.OHLC4IndicatorValue, e.CustomIndicatorValue),
    e.InterfacedValue = function(t) {
        this._interface = {},
        this._cache = new e.AVLTree,
        e.InterfacedValue.base.constructor.apply(this, arguments),
        this.setParameters = function(e) {
            this._interface = e[0],
            this.setSource(this._interface.getSource());
            for (var t = 1; t < e.length; t++) this._parameters.push(e[t]);
            this._cache.removeNodes()
        },
        this.setParameters(t),
        this.getCache = function() {
            return this._cache
        },
        this.getInterface = function() {
            return this._interface
        }
    },
    e.initClass(e.InterfacedValue, e.CustomIndicatorValue),
    e.SumNValue = function(t) {
        this._weighted = !1,
        e.SumNValue.base.constructor.apply(this, arguments),
        this.setParameters = function(t) {
            e.SumNValue.base.setParameters.apply(this, arguments),
            this._weighted = !(t.length - 1 < 2) && t[2]
        },
        this.getValue = function(e) {
            var t = this.getParameter(0),
            i = {
                isExists: !1,
                value: 0
            };
            t < 1 && (t = 1);
            for (var s = t; s > 0; s--) {
                if (e == -1) return i;
                var n = this._interface.getValue(e);
                if (!n.isExists) return i;
                this._weighted ? i.value += n.value * s: i.value += n.value;
                var o = this._source.getSource().predecessor(e);
                e = o ? o.key: -1
            }
            return i.isExists = !0,
            i
        }
    },
    e.initClass(e.SumNValue, e.InterfacedValue),
    e.SMAValue = function(t) {
        this._sumN = new e.SumNValue(t),
        this._period = 0,
        e.SMAValue.base.constructor.apply(this, arguments),
        this.setParameters = function(e) {
            this._sumN.setParameters(e),
            this._period = e[1]
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e != -1) {
                var i = this.getCache().get(e);
                if (null != i) return t.value = i.value,
                t.isExists = !0,
                t;
                var s = this._sumN.getValue(e);
                if (!s.isExists) return t;
                t.value = s.value / this._period,
                e != this.getSource().max().key && this.getCache().put(e, t.value),
                t.isExists = !0
            }
            return t
        }
    },
    e.initClass(e.SMAValue, e.InterfacedValue),
    e.EMAValue = function(t) {
        e.EMAValue.base.constructor.apply(this, arguments),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e == -1) return t;
            var i = this.getCache().get(e);
            if (null != i) return t.value = i.value,
            t.isExists = !0,
            t;
            var s = this._source.predecessor(e),
            n = null,
            o = s ? s.key: -1,
            a = this.getInterface().getValue(o);
            if (null != s && a.isExists) {
                n = this.getInterface().getValue(e);
                var r = this.getValue(s.key),
                l = this.getParameter(0);
                n.isExists && r.isExists && (t.value = 2 / (l + 1) * n.value + (1 - 2 / (l + 1)) * r.value, t.isExists = !0, e != this.getSource().max().key && this.getCache().put(this.getSource().get(e).key, t.value))
            } else n = this.getInterface().getValue(e),
            n.isExists && (t.value = n.value, t.isExists = !0);
            return t
        }
    },
    e.initClass(e.EMAValue, e.InterfacedValue),
    e.SMMAValue = function(t) {
        this._period = 0,
        this.SMAValues = new e.SMAValue(t),
        e.SMMAValue.base.constructor.apply(this, arguments),
        this.setParameters = function(e) {
            this._period = e[1]
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e == -1) return t;
            var i = this.getCache().get(e);
            if (null != i) return t.value = i.value,
            t.isExists = !0,
            t;
            if (null == this.getCache().min() || this.getCache().min().key > this.getSource().get(e).key) {
                var s = this.SMAValues.getValue(e);
                s.isExists && (t.value = s.value, this.getCache().put(this.getSource().get(e).key, t.value), t.isExists = !0)
            } else {
                var n = this._source.predecessor(e),
                o = this.getValue(n.key),
                a = this.getInterface().getValue(e);
                o.isExists && a.isExists && (t.value = (o.value * (this._period - 1) + a.value) / this._period, null != this.getSource().successor(e) && this.getCache().put(this.getSource().get(e).key, t.value), t.isExists = !0)
            }
            return t
        }
    },
    e.initClass(e.SMMAValue, e.InterfacedValue),
    e.LWMAValue = function(t) {
        e.LWMAValue.base.constructor.apply(this, arguments),
        this._sumN = new e.SumNValue(t),
        this._period = 0,
        this.setParameters = function(e) {
            this._period = e[1],
            this._sumN.setParameters([this.getInterface(), this._period, !0])
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e == -1) return t;
            var i = this._sumN.getValue(e),
            s = 0;
            if (i.isExists) {
                s = 0;
                for (var n = 1; n <= this._period; n++) s += n;
                t.value = i.value / s,
                t.isExists = !0
            }
            return t
        }
    },
    e.initClass(e.LWMAValue, e.InterfacedValue),
    e.NPMaxMinValue = function(t) {
        e.NPMaxMinValue.base.constructor.apply(this, arguments),
        this._max = !1,
        this._nPeriod = 0,
        this.setParameters = function(e) {
            this._nPeriod = e[1],
            this._max = 3 != e.length || e[2]
        },
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            t.value = this._max ? -(1 / 0) : 1 / 0;
            for (var i = 1; i <= this._nPeriod; i++) {
                if (e == -1) return t;
                var s = this._interface.getValue(e);
                s.isExists && (this._max ? s.value > t.value && (t.value = s.value) : s.value < t.value && (t.value = s.value));
                var n = this.getSource().predecessor(e);
                e = n ? n.key: -1
            }
            return t.isExists = !0,
            t
        },
        this.setParameters(t)
    },
    e.initClass(e.NPMaxMinValue, e.InterfacedValue),
    e.StochasticKValue = function(t) {
        this._maxHigh = null,
        this._minLow = null,
        this._high = null,
        this._low = null,
        this._period = 0,
        this._williams = !1,
        e.StochasticKValue.base.constructor.apply(this, arguments),
        this.setParameters = function(t) {
            this._period = t[1],
            this._low = new e.SimpleIndicatorValue([this.getSource(), e.signalTypes.stLow]),
            this._high = new e.SimpleIndicatorValue([this.getSource(), e.signalTypes.stHigh]),
            this._minLow = new e.NPMaxMinValue([this._low, this._period, !1]),
            this._maxHigh = new e.NPMaxMinValue([this._high, this._period]),
            this._williams = 3 === t.length && t[2]
        },
        this.setParameters(t)
    },
    e.initClass(e.StochasticKValue, e.InterfacedValue);
    var i = e.StochasticKValue.prototype;
    i.getValue = function(e) {
        var t = {
            isExists: !1,
            value: 0
        };
        if (e === -1) return t;
        var i = this.getCache().get(e);
        if (null != i) return t.value = i.value,
        t.isExists = !0,
        t;
        var s = this.getInterface().getValue(e),
        n = this._maxHigh.getValue(e),
        o = this._minLow.getValue(e);
        if (s.isExists && n.isExists && o.isExists) if (n.value - o.value != 0) this._williams ? t.value = (n.value - s.value) / (n.value - o.value) * 100 : t.value = (s.value - o.value) / (n.value - o.value) * 100,
        e != this.getSource().max().key && this.getCache().put(e, Math.round(1e4 * t.value / 1e4)),
        t.isExists = !0;
        else {
            var a = this.getSource().predecessor(e);
            a && (i = this.getCache().get(a.key), i && (t.value = i.value, e != this.getSource().max().key && this.getCache().put(e, t.value), t.isExists = !0))
        }
        return t
    },
    i = null,
    e.MACDValue = function(t) {
        e.MACDValue.base.constructor.apply(this, arguments),
        this.setParameters = function(t) {
            this.fastEMAValues = new e.EMAValue([t[0], t[1]]),
            this.slowEMAValues = new e.EMAValue([t[0], t[2]])
        },
        this.setParameters(t)
    },
    e.initClass(e.MACDValue, e.InterfacedValue);
    var s = e.MACDValue.prototype;
    s.getValue = function(e) {
        var t = {
            isExists: !1,
            value: 0
        };
        if (e === -1) return t;
        var i = this.getCache().get(e);
        if (null != i) return t.value = i.value,
        t.isExists = !0,
        t;
        var s = this.fastEMAValues.getValue(e),
        n = this.slowEMAValues.getValue(e);
        return s.isExists && n.isExists && (t.value = s.value - n.value, t.isExists = !0, e != this.getSource().max().key && this.getCache().put(e, t.value)),
        t
    },
    s = null,
    e.AMAValue = function(t) {
        this.periodNow = 0,
        this.stopKey = -1,
        e.AMAValue.base.constructor.apply(this, arguments),
        this.setParameters = function(e) {
            this.period = e[1],
            this.slowPeriod = e[2],
            this.fastPeriod = e[3],
            this.fastSmoothingConstant = 2 / (this.fastPeriod + 1),
            this.slowSmoothingConstant = 2 / (this.slowPeriod + 1)
        },
        this.setParameters(t)
    },
    e.initClass(e.AMAValue, e.InterfacedValue);
    var n = e.AMAValue.prototype;
    n.getValue = function(e) {
        var t = {
            isExists: !1,
            value: 0
        };
        if (e === -1 || null === e) return t;
        var i = this.getCache().get(e);
        if (null != i) return t.value = i.value,
        t.isExists = !0,
        t;
        var s = this.calculateEfficiencyRatio(e),
        n = s * (this.fastSmoothingConstant - this.slowSmoothingConstant) + this.slowSmoothingConstant,
        o = !1,
        a = this.getInterface().getValue(e),
        r = 0;
        if (a.isExists) {
            if (this.periodNow == this.period + 1 || e == this.stopKey) {
                var l = this.setFirstPrevAMA(e);
                r = l.value,
                o = l.isExists
            } else {
                var h = this.getSource().predecessor(e);
                h ? (l = this.getValue(h.key), r = l.value, o = l.isExists) : o = !1
            }
            o && (t = this.getAMA(r, n, a, e))
        }
        return t
    },
    n.getAMA = function(e, t, i, s) {
        var n = {
            isExists: !1,
            value: -1
        };
        return n.value = e + Math.pow(t, 2) * (i.value - e),
        null != this.getSource().successor(s) && this.getCache().put(s, n.value),
        n.isExists = !0,
        n
    },
    n.setFirstPrevAMA = function(e) {
        var t = {
            isExists: !1,
            value: -1
        },
        i = this.getInterface().getValue(this.getSource().predecessor(e).key);
        return i.isExists && (this.stopKey = e, t.isExists = !0, t.value = i.value),
        t
    },
    n.calculateEfficiencyRatio = function(e) {
        for (var t = e,
        i = 1; i <= this.period; i++) {
            var s = this.getSource().predecessor(t);
            null != s && (t = s.key)
        }
        for (var n = this.getInterface().getValue(e), o = this.getInterface().getValue(t), a = Math.abs(n.value - o.value), r = 0, l = e, i = 1; i <= this.period; i++) {
            n = this.getInterface().getValue(l);
            var h = this.getSource().predecessor(l);
            null != h ? o = this.getInterface().getValue(h.key) : o.isExists = !1,
            l != -1 && null != h && n.isExists && o.isExists && (r += Math.abs(n.value - o.value), l = this.getSource().predecessor(l).key)
        }
        return 0 == r ? 0 : a / r
    },
    n = null,
    e.TrueRangeValue = function(t) {
        e.TrueRangeValue.base.constructor.apply(this, arguments),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e === -1) return t;
            var i = this.getSource().predecessor(e);
            if (null === i) return t;
            var s = this.getSource().get(e);
            t.value = s.value.high - s.value.low;
            var n = this.getInterface().getValue(i.key),
            o = Math.abs(s.value.high - n.value);
            return t.value < o && (t.value = o),
            o = Math.abs(s.value.low - n.value),
            t.value < o && (t.value = o),
            t.isExists = !0,
            t
        }
    },
    e.initClass(e.TrueRangeValue, e.InterfacedValue),
    e.SDIValue = function(t) {
        e.SDIValue.base.constructor.apply(this, arguments),
        this._plus = !0,
        this.setParameters = function(t) {
            2 == t.length && (this._plus = t[1]),
            this._trueRange = new e.TrueRangeValue([this.getInterface()])
        },
        this.setParameters(t)
    },
    e.initClass(e.SDIValue, e.InterfacedValue);
    var o = e.SDIValue.prototype;
    return o.getValue = function(e) {
        var t = {
            isExists: !1,
            value: 0
        };
        if (e === -1) return t;
        if (n = this.getSource().predecessor(e), null === n) return t;
        var i = n.key,
        s = this.getSource().get(e),
        n = this.getSource().get(i),
        o = s.value.high - n.value.high;
        o < 0 && (o = 0);
        var a = n.value.low - s.value.low;
        a < 0 && (a = 0),
        o > a && (a = 0),
        a > o && (o = 0),
        a == o && (a = 0, o = 0);
        var r = this._trueRange.getValue(e);
        return 0 != r.value ? this._plus ? t.value = o / r.value: t.value = a / r.value: t.value = 0,
        t.isExists = !0,
        t
    },
    o = null,
    e.DXValue = function(t) {
        e.DXValue.base.constructor.apply(this, arguments),
        this.setParameters = function(e) {
            this._plusDI = e[1],
            this._minusDI = e[2]
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            },
            i = this._plusDI.getValue(e),
            s = this._minusDI.getValue(e);
            return i.isExists && s.isExists && (i.value + s.value == 0 ? t.value = 0 : t.value = Math.abs((i.value - s.value) / (i.value + s.value)), t.isExists = !0),
            t
        }
    },
    e.initClass(e.DXValue, e.CustomIndicatorValue),
    e.AOValue = function(t) {
        e.AOValue.base.constructor.apply(this, arguments),
        this.setParameters = function(t) {
            this._sma5 = new e.SMAValue([this.getInterface(), 5]),
            this._sma34 = new e.SMAValue([this.getInterface(), 34])
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e === -1) return t;
            var i = this.getCache().get(e);
            if (null != i) return t.value = i.value,
            t.isExists = !0,
            t;
            var s = this._sma5.getValue(e),
            n = this._sma34.getValue(e);
            return n.isExists && s.isExists && (t.value = s.value - n.value, e != this.getSource().max().key && this.getCache().put(e, t.value), t.isExists = !0),
            t
        }
    },
    e.initClass(e.AOValue, e.InterfacedValue),
    e.PowerValue = function(t) {
        e.PowerValue.base.constructor.apply(this, arguments),
        this.setParameters = function(t) {
            this._ema = new e.EMAValue(t),
            3 == t.length ? this._power = t[2] : this._power = "low"
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e === -1) return t;
            var i = this._ema.getValue(e);
            return i.isExists && (t.value = this.getSource().get(e).value[this._power] - i.value, t.isExists = !0),
            t
        }
    },
    e.initClass(e.PowerValue, e.InterfacedValue),
    e.SDSumNValue = function(t) {
        e.SDSumNValue.base.constructor.apply(this, arguments),
        this.setParameters = function(e) {
            this._period = e[2],
            this._ma = e[1],
            4 == e.length ? this._sqr = e[3] : this._sqr = !0
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            },
            i = this._ma.getValue(e);
            if (!i.isExists) return t;
            for (var s = 0,
            n = null,
            o = 1; o <= this._period; o++) {
                if (n = this.getInterface().getValue(e), e === -1 || !n.isExists) return t;
                s += this._sqr ? Math.pow(n.value - i.value, 2) : Math.abs(n.value - i.value);
                var a = this.getSource().predecessor(e);
                e = null == a ? -1 : a.key
            }
            return t.value = s,
            t.isExists = !0,
            t
        }
    },
    e.initClass(e.SDSumNValue, e.InterfacedValue),
    e.DeMaxMinValue = function(t) {
        e.DeMaxMinValue.base.constructor.apply(this, arguments),
        this._max = !0,
        this.setParameters = function(e) {
            2 == e.length ? this._max = e[1] : this._max = !0
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e === -1) return t;
            var i = this.getSource().predecessor(e);
            if (null === i) return t;
            var s = this.getSource().get(e),
            n = this.getSource().get(i.key);
            return this._max ? s.value.high > n.value.high ? t.value = s.value.high - n.value.high: t.value = 0 : s.value.low < n.value.low ? t.value = n.value.low - s.value.low: t.value = 0,
            t.isExists = !0,
            t
        }
    },
    e.initClass(e.DeMaxMinValue, e.CustomIndicatorValue),
    e.StdDevValue = function(t) {
        e.StdDevValue.base.constructor.apply(this, arguments),
        this.setParameters = function(t) {
            this._period = t[2],
            this._sdSumNValue = new e.SDSumNValue(t)
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e === -1) return t;
            var i = this._sdSumNValue.getValue(e);
            return i.isExists && (t.value = Math.sqrt(i.value / this._period), t.isExists = !0),
            t
        }
    },
    e.initClass(e.StdDevValue, e.InterfacedValue),
    e.MoneyFlowValue = function(t) {
        e.MoneyFlowValue.base.constructor.apply(this, arguments),
        this.setParameters = function(e) {
            this._period = e[1],
            this._positive = 3 != e.length || e[2]
        },
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e === -1) return t;
            for (var i = 0,
            s = e,
            n = null,
            o = 1; o <= this._period; o++) {
                if (n = this.getSource().predecessor(s), null == n) return t;
                var a = this.getInterface().getValue(s),
                r = this.getInterface().getValue(n.key);
                a.isExists && r.isExists && (this._positive && a.value > r.value || !this._positive && a.value < r.value) && (i += a.value * this.getSource().get(s).value.volume),
                s = n.key
            }
            return t.value = i,
            t.isExists = !0,
            t
        }
    },
    e.initClass(e.MoneyFlowValue, e.InterfacedValue),
    e.ADValue = function(t) {
        this._cache = new e.AVLTree,
        e.ADValue.base.constructor.apply(this, arguments),
        this.setParameters(t),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            };
            if (e === -1) return t;
            var i = this._cache.get(e);
            if (null != i) return t.value = i.value,
            t.isExists = !0,
            t;
            var s = this.getSource().get(e).value;
            s.high - s.low !== 0 ? t.value = (s.close - s.low - (s.high - s.close)) * s.volume / (s.high - s.low) : t.value = 0;
            var n = this.getSource().predecessor(e);
            if (null !== n) {
                var o = this.getValue(n.key);
                o.isExists && (t.value += o.value)
            }
            return null !== this.getSource().max() && e !== this.getSource().max().key && this._cache.put(e, t.value),
            t.isExists = !0,
            t
        }
    },
    e.initClass(e.ADValue, e.CustomIndicatorValue),
    e.RVIValue = function(t) {
        e.RVIValue.base.constructor.apply(this, arguments),
        this.getValue = function(e) {
            var t = {
                isExists: !1,
                value: 0
            },
            i = this.getSource().get(e).value,
            s = i.high - i.low;
            return 0 != s && (t.value = (i.close - i.open) / s),
            t.isExists = !0,
            t
        }
    },
    e.initClass(e.RVIValue, e.CustomIndicatorValue),
    e
}),
define("indicators/baseIndicator", ["graphicObject", "indicators/indicatorValuesClasses"],
function(e) {
    e.signalDrawStyle = {
        sdsOneColor: 0,
        sdsUpDown: 1,
        sdsMFI: 2
    },
    e.movingAverageTypes = {
        matSMA: 0,
        matEMA: 1,
        matSMMA: 2,
        matLWMA: 3
    },
    e.signalTypes = {
        stDate: 0,
        stOpen: 1,
        stHigh: 2,
        stLow: 3,
        stClose: 4,
        stVolume: 5,
        stHL2: 6,
        stOC2: 7,
        stHLC3: 8,
        stOHLC4: 9
    },
    e.signalStringType = ["date", "open", "high", "low", "close", "volume"],
    e.Signal = function() {
        this._points = new e.AVLTree,
        this._styles = [],
        this._caption = "",
        this._drawStyle = e.signalDrawStyle.sdsOneColor
    };
    var t = e.Signal.prototype;
    t.setCaption = function(e) {
        this._caption = e
    },
    t.getCaption = function() {
        return this._caption
    },
    t.addStyle = function(e) {
        this._styles.push(e)
    },
    t.getStyle = function(e) {
        return this._styles[e]
    },
    t.getStyles = function() {
        return this._styles
    },
    t.getDrawStyle = function() {
        return this._drawStyle
    },
    t.pointsClear = function() {
        this._points.removeNodes()
    },
    t.addValue = function(e, t) {
        this._points.put(e, t)
    },
    t.getPoints = function() {
        return this._points
    },
    t.setDrawStyle = function(e) {
        this._drawStyle = e
    },
    t.setStyles = function(e) {
        this._styles = e
    },
    t = null,
    e.Indicator = function(e) {
        this.initGraphicArea(e),
        this._indicatorName = "",
        this._shortIndicatorName = "",
        this._parameters = [],
        this._movingAverageUsing = !1,
        this._signals = [],
        this._sourceNumber = 0,
        this._drawInNewGraphicArea = !1,
        this._drawInExistsGraphicArea = !1,
        this._chartSourceOnly = !1,
        this._sources = [],
        this._data = null,
        this._nearRadius = 10,
        this._farRadius = 7,
        this._defaultDigits = -1,
        this._drawZero = !0,
        this._integerLevels = !1,
        this._useWholeChart = !1
    },
    e.initClass(e.Indicator, e.BaseGraphicObject);
    var i = e.Indicator.prototype;
    i.fixMaxMin = function() {},
    i.setChartSourceOnly = function(e) {
        this._chartSourceOnly = e
    },
    i.getChartSourceOnly = function() {
        return this._chartSourceOnly
    },
    i.getUseWholeChart = function() {
        return this._useWholeChart
    },
    i.setUseWholeChart = function(e) {
        this._useWholeChart = e
    },
    i.setDrawInNewGraphicArea = function(e) {
        this._drawInNewGraphicArea = e
    },
    i.setDrawInExistsGraphicArea = function(e) {
        this._drawInExistsGraphicArea = e
    },
    i.getDrawInExistsGraphicArea = function() {
        return this._drawInExistsGraphicArea
    },
    i.setSourceNumber = function(e) {
        this._sourceNumber = e
    },
    i.getSourceNumber = function() {
        return this._sourceNumber
    },
    i.setName = function(e) {
        this._indicatorName = e
    },
    i.setShortName = function(e) {
        this._shortIndicatorName = e
    },
    i.setDrawZero = function(e) {
        this._drawZero = e
    },
    i.addParameter = function(e) {
        this._parameters.push(e)
    },
    i.getParameter = function(e) {
        return this._parameters[e]
    },
    i.setMAUsing = function(e) {
        this._movingAverageUsing = e
    },
    i.getMAUsing = function() {
        return this._movingAverageUsing
    },
    i.addSignal = function(e) {
        this._signals.push(e)
    },
    i.getSource = function(e) {
        return this._sources[e]
    },
    i.addSource = function(e) {
        return this._sources.push(e)
    },
    i.getSources = function() {
        return this._sources
    },
    i.getData = function() {
        return this._data
    },
    i.setData = function(e) {
        this._data = e
    },
    i.shiftedDate = function(e, t) {
        var i = this.getData(),
        s = this.getGraphicWindows(),
        n = null;
        if (t > 0) for (var o = 0; o < t; o++) e != -1 && (n = i.successor(e)),
        e = n ? n.key: s.getNextDate(e);
        else {
            var a = Math.abs(t);
            for (o = 0; o < a; o++) e != -1 && (n = i.predecessor(e)),
            e = n ? i.get(e).key: s.getPrevDate(date)
        }
        return e
    },
    i.initMovingAverage = function(t) {
        var i = this._parameters.length - 1;
        switch (this._parameters[i].value) {
        case e.movingAverageTypes.matSMA:
            return new e.SMAValue(t);
        case e.movingAverageTypes.matEMA:
            return new e.EMAValue(t);
        case e.movingAverageTypes.matSMMA:
            return new e.SMMAValue(t);
        case e.movingAverageTypes.matLWMA:
            return new e.LWMAValue(t)
        }
    },
    i.drawLine = function(t, i, s) {
        var n = this.getGraphicWindows(),
        o = this.getGraphicArea(),
        a = o.topForBorders,
        r = n.options,
        l = r.scale,
        h = this._signals[i],
        d = h.getPoints(),
        c = n.getPosition(),
        u = e.graphicConst.GraphicWindowLeft + 1 - l + e.UtipFunctions.div(l, 2),
        g = 0,
        p = [];
        c = n.getPrevDate(c);
        for (var m = -1,
        _ = -1,
        y = n.getVisiblePositions(), S = n.getVisibleBarsCount(), f = 0; f < S; f++) if (u += l, c = y[f], _ = d.get(c), null != _) {
            if (0 == p.length) {
                var v = d.predecessor(_.key);
                v && (p.push(n.DateToX(v.key) + .5), p.push(o.getYCoord(v.value) + .5))
            }
            m = _.key,
            g = o.getYCoord(_.value),
            g == a && g++,
            g == a + o.heightForBorders && (g -= 2),
            p.push(u + .5),
            p.push(g + .5)
        }
        if (m != -1) {
            var C = d.successor(m);
            if (m = C ? C.key: -1, m != -1) {
                var b = d.get(m);
                p.push(n.DateToX(b.key) + .5),
                p.push(o.getYCoord(b.value) + .5)
            }
        } else if (null != d.min() && d.length > 1) {
            C = d.successor(c);
            var T = d.predecessor(p);
            null != C && null != T && (p.push(n.DateToX(T.key) + .5), p.push(o.getYCoord(T.value) + .5), p.push(n.DateToX(C.key) + .5), p.push(o.getYCoord(C.value) + .5))
        }
        if (p.length > 0) {
            var P = h.getStyle(0).lineStyle,
            D = P.lineWidth,
            I = P.lineStyle;
            t.lineWidth = D > l ? l: D,
            t.strokeStyle = P.lineColor,
            "setLineDash" in t && null != I && t.setLineDash(e.UtipFunctions.calcLineStyle(I)),
            t.moveTo(p[0], p[1]),
            t.beginPath(),
            s ? t.curve(p, 0, 1, !1) : t.curve(p, 0, 20, !1),
            t.moveTo(p[p.length - 2], p[p.length - 1]),
            t.closePath(),
            t.stroke()
        }
    },
    i.isUnderCursor = function(e, t) {
        for (var i = !1,
        s = this._graphicWindows.XToDate(e), n = [], o = null, a = null, r = this._signals, l = r.length, h = this.getGraphicArea(), d = this.getGraphicWindows(), c = 0, u = 0, g = 0, p = 0, m = 0; m < l; m++) {
            n = r[m].getPoints();
            var _ = n.min(),
            y = n.max();
            if (null != _) {
                if (_.key == y.key) o = _,
                a = null;
                else {
                    if (o = n.get(s), null == o) {
                        if (n.put(s, {}), s == _.key || s == y.key) {
                            n.delete(s);
                            continue
                        }
                        o = n.predecessor(s),
                        n.delete(s)
                    }
                    if (null === o) continue;
                    a = n.successor(o.key)
                }
                if (null == a) {
                    if (c = e, g = h.getYCoord(o.value), Math.abs(g - t) < this._nearRadius) return i = !0
                } else {
                    c = d.DateToX(o.key),
                    g = h.getYCoord(o.value),
                    u = d.DateToX(a.key),
                    p = h.getYCoord(a.value);
                    var S = (e - c) * (p - g) - (t - g) * (u - c),
                    f = Math.sqrt(Math.pow(u - c, 2) + Math.pow(p - g, 2));
                    if (Math.abs(S) < this._farRadius * f * r[m].getStyle(0).lineStyle.lineWidth) return ! 0
                }
            }
        }
        return i
    },
    i.clearSources = function() {
        this._sources = []
    },
    i.getSignals = function() {
        return this._signals
    },
    i.getSignal = function(e) {
        return this._signals[e]
    },
    i.setDefaultDigits = function(e) {
        this._defaultDigits = e
    },
    i.setIntegerLevels = function(e) {
        this._integerLevels = e
    },
    i.drawBorders = function(t) {
        t.save();
        for (var i = this.getGraphicWindows(), s = i.getPosition(), n = s, o = i.getVisibleBarsCount(), a = -(1 / 0), r = 1 / 0, l = 0, h = i.options, d = h.colorScheme, c = this.getGraphicArea(), u = i.getWidth(), g = e.graphicConst, p = g.GraphicWindowRight, m = g.GraphicWindowLeft, _ = this.getSignals().length, y = 0; y < _; y++) {
            var S = this.getSignal(y).getPoints();
            s = n;
            for (var f = 1; f <= o; f++) {
                var v = S.get(s);
                if (v) {
                    var C = v.value;
                    l = C instanceof Object ? C.value: C,
                    l > a && (a = l),
                    l < r && (r = l)
                }
                s = i.getNextDate(s)
            }
        }
        if (c.min = r, c.max = a, r != 1 / 0) {
            a - r > 0 ? (c.max = a + .1 * (a - r), c.min = r - .1 * (a - r)) : (c.max = a + .1 * Math.abs(a), c.min = r - .1 * Math.abs(r)),
            this.fixMaxMin();
            var b = this._integerLevels ? 0 : this.getDigits(),
            T = m,
            P = T + u - p,
            D = c.top,
            I = c.max,
            w = c.min;
            if (l = "", l = 0 == I ? "0": e.numberFormat(I, b, ".", ""), t.fillStyle = d.text, t.font = "10px sans-serif", t.textBaseline = "top", t.fillText(l, P + 7, D), l = 0 == w ? "0": e.numberFormat(w, b, ".", ""), t.textBaseline = "bottom", t.fillText(l, P + 7, c.heightForBorders + D), this._drawZero && w * I < 0) {
                var M = c.getYCoord(0);
                t.strokeStyle = d.border,
                t.lineWidth = .3,
                t.drawDashedLine(m, M + .5, u - p + 5, M + .5, [3, 3]),
                t.fillStyle = d.text,
                t.textBaseline = "top",
                t.fillText("0", u - p + 12, M - 5),
                t.textBaseline = "bottom"
            }
        } else t.fillStyle = d.innerBackground,
        t.fillRect(m + 1, c.topForBorders + 1, u - p, c.heightForBorders);
        this.drawNames(t),
        t.restore()
    },
    i.drawNames = function(t) {
        var i = this._signals,
        s = this._parameters,
        n = this.getGraphicArea(),
        o = this.getDigits(),
        a = this.getGraphicWindows().options,
        r = a.colorScheme;
        if (a.showNames) {
            t.font = "10px sans-serif",
            t.fillStyle = r.names;
            var l = this._shortIndicatorName;
            if (s.length > 0) {
                l += " (";
                var h = s.length - 1;
                for (this._movingAverageUsing && h--, c = 0; c <= h; c++) l += s[c].value + ",";
                l = l.substr(0, l.length - 1),
                l += ")"
            }
            n.min != 1 / 0 && (l += "  Max: " + e.numberFormat(n.max, o, ".", ""), l += "  Min: " + e.numberFormat(n.min, o, ".", ""));
            for (var d = "",
            c = 0; c < i.length; c++) {
                var u = i[c],
                g = u.getCaption(),
                p = e.LangManager.getStringByKey(g) || g,
                m = u.getPoints();
                d += "  C(" + p + "): ",
                d += m.min() ? e.numberFormat(m.max().value, o, ".", "") : "N/A"
            }
            if (1 == i.length) {
                var _ = d.indexOf("(");
                d = d.replace(d.substr(_, d.indexOf(")") - _ + 1), "")
            }
            e.Browser.IsMobile || (l += d);
            var y = e.graphicConst.GraphicWindowLeft,
            S = n.top;
            t.fillText(l, y + 10, S + 18),
            e.Browser.IsMobile && (d = d.replace("  ", ""), t.fillText(d, y + 10, S + 28)),
            t.stroke()
        }
    },
    i.getDigits = function() {
        var t = this._defaultDigits;
        if (t >= 0) return t;
        var i = this.getSource(0).object;
        return i instanceof e.Chart ? i.getDigits() : void 0
    },
    i.getGraphicObjectIndex = function(e) {
        for (var t = this._sources[e].object, i = this.getGraphicWindows().graphicAreas, s = i.length, n = 0; n < s; n++) for (var o = i[n], a = o.graphicObjects, r = a.length, l = 0; l < r; l++) if (t == a[l]) return {
            graphicAreaIndex: n,
            graphicObjectIndex: l
        }
    },
    i.getSourcesParameters = function() {
        for (var e = [], t = this._sources, i = t.length, s = 0; s < i; s++) e.push({
            source: this.getGraphicObjectIndex(s),
            signalType: t[s].signalType
        });
        return e
    },
    i.getSignalsParameters = function() {
        for (var e, t, i, s, n = [], o = this._signals, a = o.length, r = 0; r < a; r++) {
            e = o[r],
            i = e.getStyles(),
            s = i.length;
            for (var l = 0; l < s; l++) t = e.getStyle(l).lineStyle,
            n.push({
                signalIndex: r,
                styleIndex: l,
                lineColor: t.lineColor,
                lineStyle: t.lineStyle,
                lineWidth: t.lineWidth
            })
        }
        return n
    },
    i.getSettingsForSave = function() {
        return {
            className: this.className,
            parameters: this.getParameters(),
            sources: this.getSourcesParameters(),
            signals: this.getSignalsParameters()
        }
    },
    i.loadSettings = function(e) {
        for (var t, i, s = this._signals,
        n = e.sources,
        o = n.length,
        a = e.signals,
        r = a.length,
        l = this.getGraphicWindows(), h = 0; h < r; h++) {
            i = a[h];
            var d = s[i.signalIndex],
            c = d.getStyle(i.styleIndex);
            c.lineStyle.lineColor = i.lineColor,
            c.lineStyle.lineStyle = i.lineStyle,
            c.lineStyle.lineWidth = i.lineWidth
        }
        for (h = 0; h < o; h++) {
            t = n[h];
            var u = l.graphicAreas[t.source.graphicAreaIndex],
            g = u.graphicObjects[t.source.graphicObjectIndex];
            this.addSource({
                signalType: n[h].signalType,
                object: g
            })
        }
        l.addIndicator(this)
    },
    i.drawHistogram = function(t, i) {
        function s() {
            var i = 0;
            i = y > S ? y - 1 : y + (y < S ? 1 : 0),
            t.drawDashedLine(p + .5, i + .5, p + .5, S + .5, e.UtipFunctions.calcLineStyle(v.lineStyle))
        }
        function n() {
            var t = !1;
            p += c,
            h = l.getNextDate(h);
            var i = u.getPoints().get(h);
            return null != i && (u.getDrawStyle() == e.signalDrawStyle.sdsMFI ? (S = g.getYCoord(i.value.value), f = i.value.style) : S = g.getYCoord(i.value), t = !0),
            t
        }
        function o() {
            for (var e = 1; e <= _; e++) n() && s()
        }
        function a() {
            for (var e = 1; e <= _; e++) n() && (v = C.changeStyle(t, 0, S < m ? 0 : 1), s(), m = S)
        }
        function r() {
            for (var e = 1; e <= _; e++) n() && (v = C.changeStyle(t, 0, f), s())
        }
        var l = this.getGraphicWindows(),
        h = l.getPosition(),
        d = l.options,
        c = d.scale,
        u = this._signals[i],
        g = this.getGraphicArea(),
        p = e.graphicConst.GraphicWindowLeft + 1 - c + e.UtipFunctions.div(c, 2);
        h = l.getPrevDate(h);
        var m = 1 / 0,
        _ = l.getVisibleBarsCount(),
        y = g.getYCoord(0),
        S = 0,
        f = 0,
        v = this.changeStyle(t, 0, 0),
        C = this;
        switch (u.getDrawStyle()) {
        case e.signalDrawStyle.sdsOneColor:
            o(t, _);
            break;
        case e.signalDrawStyle.sdsUpDown:
            a(t, _);
            break;
        case e.signalDrawStyle.sdsMFI:
            r()
        }
    },
    i.changeStyle = function(e, t, i) {
        var s = this._signals[t].getStyles()[i].lineStyle;
        return e.fillStyle = s.lineColor,
        e.strokeStyle = s.lineColor,
        e.lineWidth = s.lineWidth,
        s
    },
    i.getStyleCount = function() {
        var e = 0;
        return this._signals.forEach(function(t) {
            e += t.getStyles().length
        }),
        e
    },
    i.setIndicatorValue = function() {
        var t = this.getSource(0).signalType;
        switch (t) {
        case e.signalTypes.stClose:
        case e.signalTypes.stOpen:
        case e.signalTypes.stHigh:
        case e.signalTypes.stLow:
            this.indicatorValue = new e.SimpleIndicatorValue([this.getData(), t]);
            break;
        case e.signalTypes.stHL2:
            this.indicatorValue = new e.HL2IndicatorValue([this.getData()]);
            break;
        case e.signalTypes.stOC2:
            this.indicatorValue = new e.OC2IndicatorValue([this.getData()]);
            break;
        case e.signalTypes.stHLC3:
            this.indicatorValue = new e.HLC3IndicatorValue([this.getData()]);
            break;
        case e.signalTypes.stOHLC4:
            this.indicatorValue = new e.OHLC4IndicatorValue([this.getData()])
        }
    },
    i.setSource = function() {
        this.getSource(0).signalType;
        this.getSource(0).object instanceof e.Chart && this.setData(this.getSource(0).object.quotesData.candles)
    },
    i.dataCount = function() {
        return this.getSource(0).object.quotesData.getCount()
    },
    i = null,
    e.HistogramIndicator = function(t) {
        e.HistogramIndicator.base.constructor.apply(this, arguments)
    },
    e.initClass(e.HistogramIndicator, e.Indicator);
    var s = e.HistogramIndicator.prototype;
    s.fixMaxMin = function() {
        var e = this.getGraphicArea();
        e.max < 0 && (e.max = 0),
        e.min > 0 && (e.min = 0)
    },
    s.draw = function(e) {
        var t = this.initImage(e);
        this.drawHistogram(t, 0),
        this.endImage(e, t)
    },
    s.isUnderCursor = function(t, i) {
        for (var s = !1,
        n = this._graphicWindows.XToDate(t), o = null, a = this._signals, r = this.getGraphicArea(), l = 0, h = 0, d = 0, c = 0, u = null, g = null, p = 0; p < this._signals.length; p++) if (g = a[p], o = g.getPoints(), null != o.min() && (l = this.getGraphicWindows().DateToX(n), d = r.getYCoord(0), c = r.getYCoord(o.get(n).value), g.drawStyle == e.signalDrawStyle.sdsUpDown && g.getStyle(d > c ? 0 : 1), d > c && (h = d, d = c, c = h), d < i && i < c && Math.abs(t - l) < 3 * u.lineWidth)) {
            s = !0;
            break
        }
        return s
    },
    s = null,
    e.DottedIndicator = function(t) {
        e.DottedIndicator.base.constructor.apply(this, arguments)
    },
    e.initClass(e.DottedIndicator, e.Indicator);
    var n = e.DottedIndicator.prototype;
    return n.draw = function(e) {
        var t = this.initImage(e);
        this.drawPoints(e, 0),
        this.endImage(e, t)
    },
    n.isUnderCursor = function(e, t) {
        for (var i = this.getGraphicWindows(), s = this.getGraphicArea(), n = this._signals, o = n.length, a = i.XToDate(e), r = 0; r < o; r++) {
            var l = n[r],
            h = l.getStyle(0).lineStyle,
            d = l.getPoints(),
            c = d.get(a);
            if (null !== c) {
                var u = i.DateToX(a),
                g = s.getYCoord(c.value);
                if (Math.abs(e - u) < 3 * h.lineWidth && Math.abs(t - g) < 3 * h.lineWidth) return ! 0
            }
        }
        return ! 1
    },
    n.drawPoints = function(t, i) {
        var s = this.getGraphicWindows(),
        n = s.getPosition(),
        o = s.options,
        a = o.scale,
        r = this.getSignal(i),
        l = e.graphicConst.GraphicWindowLeft + 1 - a + e.UtipFunctions.div(a, 2),
        h = this.getGraphicArea();
        n = s.getPrevDate(n);
        for (var d = r.getStyle(0).lineStyle, c = s.getVisibleBarsCount(), u = d.lineWidth, g = h.top, p = 0; p <= c; p++) {
            l += a,
            n = s._visiblePositions[p];
            var m = r.getPoints().get(n);
            if (null !== m) {
                var _ = h.getYCoord(m.value);
                _ - u > g && _ + u < g + h.height && (t.beginPath(), t.fillStyle = d.lineColor, t.arc(l - u, _ - u, u, 0, 2 * Math.PI, !1), t.closePath(), t.fill())
            }
        }
    },
    n = null,
    e
}),
define("indicators/trendIndicators", ["indicators/baseIndicator"],
function(e) {
    function t(t, i, s) {
        i.lineWidth = .4;
        var n = t.getGraphicWindows();
        i.strokeStyle = n.options.colorScheme.grid,
        i.drawDashedLine(e.graphicConst.GraphicWindowLeft, s, n.getWidth() - e.graphicConst.GraphicWindowRight + 10, s, e.UtipFunctions.calcLineStyle("dotted")),
        i.font = "10px sans-serif",
        i.textBaseline = "bottom",
        i.textAlign = "left",
        i.strokeStyle = n.options.colorScheme.text,
        i.fillStyle = n.options.colorScheme.text,
        i.lineWidth = 1,
        i.fillText(e.parseFloat(t.getGraphicArea().getValueByCoord(s).toFixed(0)), n.getWidth() - e.graphicConst.GraphicWindowRight + 15, s)
    }
    e.MovingAverage = function(t) {
        this.className = "MovingAverage",
        this._signal = {},
        this._shift = 0,
        this._movingAverageValue = {},
        e.MovingAverage.base.constructor.apply(this, arguments),
        this.setName("Moving Average"),
        this.setShortName("MA"),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this.addParameter({
            value: 0,
            type: "float",
            caption: "cICShift"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matEMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0),
        this._signal = new e.Signal,
        this.addSignal(this._signal),
        this._signal.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.MovingAverage, e.Indicator);
    var i = e.MovingAverage.prototype;
    i.calculate = function() {
        var e = this.getParameter(0).value;
        this._signal.pointsClear(),
        this._shift = this.getParameter(1).value,
        this.setIndicatorValue(),
        this._movingAverageValue = this.initMovingAverage([this.indicatorValue, e]);
        for (var t = this.getData().min(); null != t;) {
            var i = this._movingAverageValue.getValue(t.key);
            i.isExists && this._signal.addValue(this.shiftedDate(t.key, this._shift), i.value),
            t = this.getData().successor(t.key)
        }
    },
    i.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._movingAverageValue.getValue(e);
            t.isExists && this._signal.addValue(this.shiftedDate(e, this._shift), t.value)
        }
    },
    i.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.endImage(e, t)
    },
    i = null,
    e.AdaptiveMovingAverage = function(t) {
        this._signal = {},
        this._shift = 0,
        e.AdaptiveMovingAverage.base.constructor.apply(this, arguments),
        this.className = "AdaptiveMovingAverage",
        this.setName("Adaptive Moving Average"),
        this.setShortName("AMA"),
        this.addParameter({
            value: 9,
            type: "float",
            caption: "cICPeriod"
        }),
        this.addParameter({
            value: 0,
            type: "float",
            caption: "cICShift"
        }),
        this.addParameter({
            value: 30,
            type: "float",
            caption: "cIPeriodForSlowMarket"
        }),
        this.addParameter({
            value: 2,
            type: "float",
            caption: "cIPeriodForFastMarket"
        }),
        this.setMAUsing(!1),
        this._signal = new e.Signal,
        this.addSignal(this._signal),
        this._signal.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.AdaptiveMovingAverage, e.Indicator);
    var s = e.AdaptiveMovingAverage.prototype;
    s.calculate = function() {
        var t = this.getParameter(0).value;
        this._shift = this.getParameter(1).value;
        var i = this.getParameter(2).value,
        s = this.getParameter(3).value;
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._ama = new e.AMAValue([this.indicatorValue, t, i, s]);
        for (var n = -1,
        o = this.getData().min(); null != o;) {
            if (this._ama.periodNow = n, n > t) {
                var a = this._ama.getValue(o.key);
                a.isExists && (this._signal.addValue(this.shiftedDate(o.key, this._shift), a.value), n < t + 3 && n++)
            } else n++;
            o = this.getData().successor(o.key)
        }
    },
    s.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._ama.getValue(e);
            t.isExists && this._signal.addValue(this.shiftedDate(e, this._shift), t.value)
        }
    },
    s.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.endImage(e, t)
    },
    s = null,
    e.Alligator = function(t) {
        e.Alligator.base.constructor.apply(this, arguments),
        this.className = "Alligator",
        this.setName("Alligator"),
        this.setShortName("Allig."),
        this.addParameter({
            value: 13,
            type: "float",
            caption: "cICPeriodJaw"
        }),
        this.addParameter({
            value: 8,
            type: "float",
            caption: "cICPeriodTeeth"
        }),
        this.addParameter({
            value: 5,
            type: "float",
            caption: "cICPeriodLips"
        }),
        this.addParameter({
            value: 8,
            type: "float",
            caption: "cICShiftJaw"
        }),
        this.addParameter({
            value: 5,
            type: "float",
            caption: "cICShiftTeeth"
        }),
        this.addParameter({
            value: 3,
            type: "float",
            caption: "cICShiftLips"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0);
        var i = new e.Signal;
        this.addSignal(i),
        i.addStyle({
            caption: "cICJaw",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#0000FF",
                lineStyle: "solid"
            }
        }),
        this._jaw = i,
        i = new e.Signal,
        this.addSignal(i),
        i.addStyle({
            caption: "cICTeeth",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._teeth = i,
        i = new e.Signal,
        this.addSignal(i),
        i.addStyle({
            caption: "cICLips",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#00FF00",
                lineStyle: "solid"
            }
        }),
        this._lips = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.Alligator, e.Indicator);
    var n = e.Alligator.prototype;
    n.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.drawLine(t, 1, !0),
        this.drawLine(t, 2, !0),
        this.endImage(e, t)
    },
    n.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    n.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._jawMA.getValue(e);
            t.isExists && this._jaw.addValue(this.shiftedDate(e, this._jawShift), t.value),
            t = this._teethMA.getValue(e),
            t.isExists && this._teeth.addValue(this.shiftedDate(e, this._teethShift), t.value),
            t = this._lipsMA.getValue(e),
            t.isExists && this._lips.addValue(this.shiftedDate(e, this._lipsShift), t.value)
        }
    },
    n.calculate = function() {
        var e = this.getParameter(0).value,
        t = this.getParameter(1).value,
        i = this.getParameter(2).value;
        this._jawShift = this.getParameter(3).value,
        this._teethShift = this.getParameter(4).value,
        this._lipsShift = this.getParameter(5).value,
        this._jaw.pointsClear(),
        this._teeth.pointsClear(),
        this._lips.pointsClear(),
        this.setIndicatorValue(),
        this._jawMA = this.initMovingAverage([this.indicatorValue, e]),
        this._teethMA = this.initMovingAverage([this.indicatorValue, t]),
        this._lipsMA = this.initMovingAverage([this.indicatorValue, i]);
        for (var s = this.getData().min(); null != s;) {
            var n = this._jawMA.getValue(s.key);
            n.isExists && this._jaw.addValue(this.shiftedDate(s.key, this._jawShift), n.value),
            n = this._teethMA.getValue(s.key),
            n.isExists && this._teeth.addValue(this.shiftedDate(s.key, this._teethShift), n.value),
            n = this._lipsMA.getValue(s.key),
            n.isExists && this._lips.addValue(this.shiftedDate(s.key, this._lipsShift), n.value),
            s = this.getData().successor(s.key)
        }
    },
    n = null,
    e.AverageDirectionalMovementIndex = function(t) {
        e.AverageDirectionalMovementIndex.base.constructor.apply(this, arguments),
        this.className = "AverageDirectionalMovementIndex",
        this.setName("Average Directional Movement Index"),
        this.setShortName("ADX"),
        this.setDefaultDigits(4),
        this.setDrawZero(!1),
        this.setIntegerLevels(!0),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        });
        var i = new e.Signal;
        this.addSignal(i),
        i.setCaption("cICPDI"),
        i.addStyle({
            caption: "cICPDI",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#00FF00",
                lineStyle: "dotted"
            }
        }),
        this._plusDISignal = i,
        i = new e.Signal,
        i.setCaption("cICMDI"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICMDI",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#F5DEB3",
                lineStyle: "dotted"
            }
        }),
        this._minusDISignal = i,
        i = new e.Signal,
        i.setCaption("cICADX"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICADX",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#a6caf0",
                lineStyle: "solid"
            }
        }),
        this._adxSignal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.AverageDirectionalMovementIndex, e.Indicator);
    var o = e.AverageDirectionalMovementIndex.prototype;
    o.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.drawLine(t, 1, !0),
        this.drawLine(t, 2, !0),
        this.endImage(e, t)
    },
    o.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    o.calculate = function() {
        this._period = this.getParameter(0).value,
        this._plusDISignal.pointsClear(),
        this._minusDISignal.pointsClear(),
        this._adxSignal.pointsClear(),
        this.setIndicatorValue(),
        this._plusSDI = new e.SDIValue([this.indicatorValue]),
        this._minusSDI = new e.SDIValue([this.indicatorValue, !1]),
        this._plusDI = new e.EMAValue([this._plusSDI, this._period]),
        this._minusDI = new e.EMAValue([this._minusSDI, this._period]),
        this._dx = new e.DXValue([this.getData(), this._plusDI, this._minusDI]),
        this._adx = new e.EMAValue([this._dx, this._period]);
        for (var t = this.getData().min(); t;) {
            var i = this._plusDI.getValue(t.key),
            s = this._minusDI.getValue(t.key),
            n = this._adx.getValue(t.key);
            i.isExists && this._plusDISignal.addValue(t.key, 100 * i.value),
            s.isExists && this._minusDISignal.addValue(t.key, 100 * s.value),
            n.isExists && this._adxSignal.addValue(t.key, 100 * n.value),
            t = this.getData().successor(t.key)
        }
    },
    o.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._plusDI.getValue(e),
            i = this._minusDI.getValue(e),
            s = this._adx.getValue(e);
            t.isExists && this._plusDISignal.addValue(e, 100 * t.value),
            i.isExists && this._minusDISignal.addValue(e, 100 * i.value),
            s.isExists && this._adxSignal.addValue(e, 100 * s.value)
        }
    },
    o.drawBorders = function(i) {
        e.AverageDirectionalMovementIndex.base.drawBorders.apply(this, [i]);
        var s = this.getGraphicWindows();
        if (s.options.showGrid) {
            var n = this.getGraphicArea().topForBorders + e.UtipFunctions.div(this.getGraphicArea().heightForBorders, 2) + .5;
            t(this, i, n),
            n = this.getGraphicArea().topForBorders + e.UtipFunctions.div(this.getGraphicArea().heightForBorders, 4) + .5,
            t(this, i, n),
            n = this.getGraphicArea().topForBorders + 3 * e.UtipFunctions.div(this.getGraphicArea().heightForBorders, 4) + .5,
            t(this, i, n)
        }
    },
    o.fixMaxMin = function() {
        this.getGraphicArea().min < 0 && (this.getGraphicArea().min = 0)
    },
    o = null,
    e.ParabolicSAR = function(t) {
        e.ParabolicSAR.base.constructor.apply(this, arguments),
        this.className = "ParabolicSAR",
        this.setName("Parabolic SAR"),
        this.setShortName("SAR"),
        this.addParameter({
            value: .02,
            type: "float",
            caption: "cICStep"
        }),
        this.addParameter({
            value: .2,
            type: "float",
            caption: "cICMax"
        });
        var i = new e.Signal;
        this.addSignal(i),
        i.setCaption("cICValue"),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.ParabolicSAR, e.DottedIndicator);
    var a = e.ParabolicSAR.prototype;
    a.calculate = function() {
        if (this._signal.pointsClear(), null != this.getData().min()) {
            this._step = this.getParameter(0).value,
            this._max = this.getParameter(1).value,
            this._lastAcc = this._step,
            this._lastDown = !0,
            this._highLow = "high",
            this._previous = 0;
            var t = this.getSource(0).object.getSymbolName(),
            i = e.SymbolsData.getSymbols()[t].getDigits();
            this._power = Math.pow(10, i),
            this._currentNode = this.getData().min();
            var s = this._currentNode.value[this._highLow];
            for (this._signal.addValue(this._currentNode.key, s); this.calculateNext(););
        }
    },
    a.isValidSAR = function(e, t, i) {
        return 1 == i ? e <= t: e >= t
    },
    a.calculateNext = function() {
        var e = !1;
        if (null !== this._currentNode) {
            var t = this.getData().successor(this._currentNode.key);
            if (null !== t) {
                this._shiftPrevious = this._previous,
                this._shiftLastAcc = this._lastAcc,
                this._shiftLastDown = this._lastDown;
                var i = this._signal.getPoints().max(),
                s = this._currentNode.value[this._highLow],
                n = i.value + this._lastAcc * (s - i.value);
                if (this._currentNode = this.getData().successor(this._currentNode.key), s = this._currentNode.value[this._highLow], this.isValidSAR(s, n, this._lastDown)) n = Math.floor(n * this._power) / this._power,
                this._signal.addValue(this._currentNode.key, n),
                this._lastAcc < this._max ? this._lastAcc += this._step: this._lastAcc = this._max,
                this._previous++;
                else {
                    this._highLow = this._lastDown ? "low": "high",
                    n = this._currentNode.value[this._highLow];
                    for (var o = 0; o <= this._previous; o++) t = this.getData().predecessor(t.key),
                    s = t.value[this._highLow],
                    this.isValidSAR(s, n, this._lastDown) && (n = s);
                    this._signal.addValue(this._currentNode.key, n),
                    this._lastDown = !this._lastDown,
                    this._lastAcc = this._step,
                    this._previous = 0
                }
                e = !0
            }
        }
        return e
    },
    a.recalcOnQuote = function() {
        if (this.getData()) {
            if (null == this._signal.getPoints().min()) return void this.calculate();
            var e = this._signal.getPoints().max();
            for (this._currentNode = this.getData().get(e.key), this._previous = this._shiftPrevious, this._lastAcc = this._shiftLastAcc, this._lastDown = this._shiftLastDown, this._currentNode.key != this.getData().min().key && (this._signal.getPoints().delete(e.key), this._currentNode = this.getData().predecessor(this._currentNode.key)), this._highLow = this._lastDown ? "high": "low"; this.calculateNext(););
        }
    },
    a.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    a = null,
    e.Envelopes = function(t) {
        e.Envelopes.base.constructor.apply(this, arguments),
        this.className = "Envelopes",
        this.setName("Envelopes"),
        this.setShortName("Envs."),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this.addParameter({
            value: 0,
            type: "float",
            caption: "cICShift"
        }),
        this.addParameter({
            value: .1,
            type: "float",
            caption: "cWCTPendingOrderFormDeviation"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0);
        var i = new e.Signal;
        this.addSignal(i),
        i.setCaption("cICUpperEnvelope"),
        i.addStyle({
            caption: "cICUpperEnvelope",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#0000ff",
                lineStyle: "solid"
            }
        }),
        this._upperBand = i,
        i = new e.Signal,
        this.addSignal(i),
        i.setCaption("cICLowerEnvelope"),
        i.addStyle({
            caption: "cICLowerEnvelope",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._lowerBand = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.Envelopes, e.Indicator);
    var r = e.Envelopes.prototype;
    r.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.drawLine(t, 1, !0),
        this.endImage(e, t)
    },
    r.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    r.calculate = function() {
        var e = this.getParameter(0).value;
        this._shift = this.getParameter(1).value,
        this._deviation = this.getParameter(2).value / 100,
        this._upperBand.pointsClear(),
        this._lowerBand.pointsClear(),
        this.setIndicatorValue(),
        this._movingAverageValue = this.initMovingAverage([this.indicatorValue, e]);
        for (var t = this.getData().min(); t;) {
            var i = this._movingAverageValue.getValue(t.key);
            i.isExists && (this._upperBand.addValue(this.shiftedDate(t.key, this._shift), i.value * (1 + this._deviation)), this._lowerBand.addValue(this.shiftedDate(t.key, this._shift), i.value * (1 - this._deviation))),
            t = this.getData().successor(t.key)
        }
    },
    r.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._movingAverageValue.getValue(e);
            t.isExists && (this._upperBand.addValue(this.shiftedDate(e, this._shift), t.value * (1 + this._deviation)), this._lowerBand.addValue(this.shiftedDate(e, this._shift), t.value * (1 - this._deviation)))
        }
    },
    r = null,
    e.PriceChannel = function(t) {
        e.PriceChannel.base.constructor.apply(this, arguments),
        this.className = "PriceChannel",
        this.setName("Price Channel"),
        this.setShortName("PC"),
        this.addParameter({
            value: 3,
            type: "float",
            caption: "cICPeriod"
        });
        var i = new e.Signal;
        this.addSignal(i),
        i.setCaption("cICPriceChannelUp"),
        i.addStyle({
            caption: "cICPriceChannelUp",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._upper = i,
        i = new e.Signal,
        this.addSignal(i),
        i.setCaption("cICPriceChannelDown"),
        i.addStyle({
            caption: "cICPriceChannelDown",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._lower = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.PriceChannel, e.Indicator);
    var l = e.PriceChannel.prototype;
    l.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    l.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.drawLine(t, 1, !1),
        this.endImage(e, t)
    },
    l.calculate = function() {
        this._upper.pointsClear(),
        this._lower.pointsClear();
        var t = this.getParameter(0).value;
        this._lowValue = new e.SimpleIndicatorValue([this.getData(), e.signalTypes.stLow]),
        this._highValue = new e.SimpleIndicatorValue([this.getData(), e.signalTypes.stHigh]),
        this._hhValue = new e.NPMaxMinValue([this._highValue, t]),
        this._llValue = new e.NPMaxMinValue([this._lowValue, t, !1]);
        for (var i = this.getData().min(); i;) {
            var s = this._hhValue.getValue(i.key),
            n = this._llValue.getValue(i.key);
            s.isExists && this._upper.addValue(i.key, s.value),
            n.isExists && this._lower.addValue(i.key, n.value),
            i = this.getData().successor(i.key)
        }
    },
    l.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._hhValue.getValue(e),
            i = this._llValue.getValue(e);
            t.isExists && this._upper.addValue(e, t.value),
            i.isExists && this._lower.addValue(e, i.value)
        }
    },
    l = null,
    e.RangeActionVerificationIndex = function(t) {
        e.RangeActionVerificationIndex.base.constructor.apply(this, arguments),
        this.className = "RangeActionVerificationIndex",
        this.setName("Range Action Verification Index"),
        this.setShortName("RAVI"),
        this.setDefaultDigits(4),
        this.addParameter({
            value: 7,
            type: "float",
            caption: "cICShortPeriod"
        }),
        this.addParameter({
            value: 65,
            type: "float",
            caption: "cICLongPeriod"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0);
        var i = new e.Signal;
        this.addSignal(i),
        i.setCaption("cICValue"),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.RangeActionVerificationIndex, e.Indicator);
    var h = e.RangeActionVerificationIndex.prototype;
    return h.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    h.calculate = function() {
        var e = this.getParameter(0).value,
        t = this.getParameter(1).value;
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._shortMovingAverageValue = this.initMovingAverage([this.indicatorValue, e]),
        this._longMovingAverageValue = this.initMovingAverage([this.indicatorValue, t]);
        for (var i = this.getData().min(); i;) {
            var s = this._shortMovingAverageValue.getValue(i.key),
            n = this._longMovingAverageValue.getValue(i.key);
            s.isExists && n.isExists && this._signal.addValue(i.key, (s.value - n.value) / n.value * 100),
            i = this.getData().successor(i.key)
        }
    },
    h.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._shortMovingAverageValue.getValue(e),
            i = this._longMovingAverageValue.getValue(e);
            t.isExists && i.isExists && this._signal.addValue(e, (t.value - i.value) / i.value * 100)
        }
    },
    h = null,
    e
}),
define("indicators/oscillatorsIndicators", ["indicators/baseIndicator"],
function(e) {
    function t(t, i, s, n) {
        i.lineWidth = .4;
        var o = t.getGraphicWindows();
        i.strokeStyle = o.options.colorScheme.grid,
        i.drawDashedLine(e.graphicConst.GraphicWindowLeft, s, o.getWidth() - e.graphicConst.GraphicWindowRight + 10, s, e.UtipFunctions.calcLineStyle("dotted")),
        i.font = "10px sans-serif",
        i.textBaseline = "bottom",
        i.textAlign = "left",
        i.strokeStyle = o.options.colorScheme.text,
        i.fillStyle = o.options.colorScheme.text,
        i.lineWidth = 1,
        i.fillText(n, o.getWidth() - e.graphicConst.GraphicWindowRight + 15, s)
    }
    e.RelativeStrengthIndex = function(t) {
        this.className = "RelativeStrengthIndex",
        this._signal = {},
        this.period = 0,
        e.RelativeStrengthIndex.base.constructor.apply(this, arguments),
        this.setName("Relative Strength Index"),
        this.setShortName("RSI"),
        this.setDefaultDigits(4),
        this.setIntegerLevels(!0),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this._signal = new e.Signal,
        this._signal.setCaption("cICValue"),
        this.addSignal(this._signal),
        this._signal.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#0000ff",
                lineStyle: "solid"
            }
        }),
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.RelativeStrengthIndex, e.Indicator);
    var i = e.RelativeStrengthIndex.prototype;
    i.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.endImage(e, t)
    },
    i.fixMaxMin = function() {
        this.getGraphicArea().min = 0,
        this.getGraphicArea().max = 100
    },
    i.binarySearch = function(e, t) {
        for (var i, s, n = 0,
        o = e.length - 1; n <= o;) if (i = (n + o) / 2 | 0, s = e[i][0], s < t) n = i + 1;
        else {
            if (! (s > t)) return i;
            o = i - 1
        }
        return - 1
    },
    i.calculate = function() {
        this.period = this.getParameter(0).value,
        this._signal.pointsClear();
        this.getSource(0).signalType;
        this.setIndicatorValue();
        for (var t = this.getData().min(), i = []; null != t;) {
            for (var s = 0,
            n = 0,
            o = null,
            a = e.cloneObject(t), r = 1; r <= this.period; r++) {
                var l = this.binarySearch(i, a.key);
                if (o = l > -1 ? i[l - 1] : this.getData().predecessor(a.key), !o) break;
                l > -1 && (o = o[1]);
                var h = this.indicatorValue.getValue(o.key),
                d = this.indicatorValue.getValue(a.key);
                h.isExists && d.isExists && (d.value - h.value > 0 ? s += d.value - h.value: n = n - d.value + h.value),
                a = o
            }
            o && (0 == n ? this._signal.addValue(t.key, 100) : this._signal.addValue(t.key, 100 - 100 / (1 + s / n))),
            i.push([t.key, t]),
            t = this.getData().successor(t.key)
        }
    },
    i.recalcOnQuote = function() {
        var t = 0,
        i = 0,
        s = null;
        if (this.getData()) {
            for (var n = e.cloneObject(this.getData().max()), o = n.key, a = 1; a <= this.period && (s = this.getData().predecessor(n.key), s); a++) {
                var r = this.indicatorValue.getValue(s.key),
                l = this.indicatorValue.getValue(n.key);
                r.isExists && l.isExists && (l.value - r.value > 0 ? t += l.value - r.value: i = i - l.value + r.value),
                n = s
            }
            s && (0 == i ? this._signal.addValue(o, 100) : this._signal.addValue(o, 100 - 100 / (1 + t / i)))
        }
    },
    i = null,
    e.StochasticOscillator = function(t) {
        this.className = "StochasticOscillator",
        this._stochasticK = null,
        this._stochasticD = null,
        this._smoothingSMA = null,
        e.StochasticOscillator.base.constructor.apply(this, arguments),
        this.setName("Stochastic Oscillator"),
        this.setShortName("St. Osc."),
        this.setDefaultDigits(4),
        this.setIntegerLevels(!0),
        this.addParameter({
            value: 5,
            type: "float",
            caption: "cICPeriodK"
        }),
        this.addParameter({
            value: 3,
            type: "float",
            caption: "cICSlowing"
        }),
        this.addParameter({
            value: 3,
            type: "float",
            caption: "cICPeriodD"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0);
        var i = new e.Signal;
        this._kSignal = i.getPoints(),
        i.setCaption("cICK"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICK",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#000080",
                lineStyle: "solid"
            }
        }),
        i = new e.Signal,
        this._dSignal = i.getPoints(),
        i.setCaption("cICD"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICD",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.StochasticOscillator, e.Indicator);
    var s = e.StochasticOscillator.prototype;
    s.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._smoothingSMA.getValue(e),
            i = this._stochasticD.getValue(e);
            t.isExists && this._kSignal.put(e, t.value),
            i.isExists && this._dSignal.put(e, i.value)
        }
    },
    s.calculate = function() {
        var t = this.getParameter(0).value,
        i = this.getParameter(1).value,
        s = this.getParameter(2).value;
        this._kSignal.removeNodes(),
        this._dSignal.removeNodes(),
        this.setIndicatorValue(),
        this._stochasticK = new e.StochasticKValue([this.indicatorValue, t]),
        this._smoothingSMA = new e.SMAValue([this._stochasticK, i]),
        this._stochasticD = this.initMovingAverage([this._smoothingSMA, s]);
        for (var n = this.getData().min(); n;) {
            var o = this._smoothingSMA.getValue(n.key),
            a = this._stochasticD.getValue(n.key);
            o.isExists && this._kSignal.put(n.key, o.value),
            a.isExists && this._dSignal.put(n.key, a.value),
            n = this.getData().successor(n.key)
        }
    },
    s.fixMaxMin = function() {
        this.getGraphicArea().min = 0,
        this.getGraphicArea().max = 100
    },
    s.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.drawLine(t, 1, !0),
        this.endImage(e, t)
    },
    s = null,
    e.MACD = function(t) {
        this.className = "MACD",
        e.MACD.base.constructor.apply(this, arguments),
        this._macd = null,
        this._sma = null,
        this.setName("MACD"),
        this.setShortName("MACD"),
        this.setDefaultDigits(6),
        this.addParameter({
            value: 12,
            type: "float",
            caption: "cICFastEMA"
        }),
        this.addParameter({
            value: 26,
            type: "float",
            caption: "cICSlowEMA"
        }),
        this.addParameter({
            value: 9,
            type: "float",
            caption: "cICMACDSMA"
        });
        var i = new e.Signal;
        i.setCaption("cICMACD"),
        i.addStyle({
            caption: "cICMACD",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#808080",
                lineStyle: "solid"
            },
            drawStyle: e.signalDrawStyle.sdsOneColor
        }),
        this._macdSignal = i.getPoints(),
        this.addSignal(i),
        i = new e.Signal,
        i.setCaption("cICSMA"),
        i.addStyle({
            caption: "cICSMA",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._smaSignal = i.getPoints(),
        this.addSignal(i),
        this.divergence = !1,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.MACD, e.HistogramIndicator);
    var n = e.MACD.prototype;
    n.draw = function(e) {
        var t = this.initImage(e);
        this.drawHistogram(t, 0),
        this.divergence || this.drawLine(t, 1, !0),
        this.endImage(e, t)
    },
    n.calculate = function() {
        var t = this.getParameter(0).value,
        i = this.getParameter(1).value,
        s = this.getParameter(2).value;
        this._macdSignal.removeNodes(),
        this.divergence || this._smaSignal.removeNodes(),
        this.setIndicatorValue(),
        this._macd = new e.MACDValue([this.indicatorValue, t, i]),
        this._sma = new e.SMAValue([this._macd, s]);
        var n = this.getData().min(),
        o = null,
        a = null;
        if (this.divergence) for (; n;) o = this._macd.getValue(n.key),
        a = this._sma.getValue(n.key),
        o.isExists && (a.isExists ? this._macdSignal.put(n.key, o.value - a.value) : this._macdSignal.put(n.key, o.value)),
        n = this.getData().successor(n.key);
        else for (; n;) o = this._macd.getValue(n.key),
        a = this._sma.getValue(n.key),
        o.isExists && this._macdSignal.put(n.key, o.value),
        a.isExists && this._smaSignal.put(n.key, a.value),
        n = this.getData().successor(n.key)
    },
    n.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = null,
            i = null;
            this.divergence ? (t = this._macd.getValue(e), i = this._sma.getValue(e), t.isExists && (i.isExists ? this._macdSignal.put(e, t.value - i.value) : this._macdSignal.put(e, t.value))) : (t = this._macd.getValue(e), i = this._sma.getValue(e), t.isExists && this._macdSignal.put(e, t.value), i.isExists && this._smaSignal.put(e, i.value))
        }
    },
    n.setDivergence = function(e) {
        this.divergence = e,
        e && (this.setName("Moving Average of Oscillator"), this.setShortName("OsMA"), this.setDefaultDigits(7), this.getSignal(0).setCaption("cICValue"), this.getSignal(0).caption = "cICValue", this.getSignals().splice(1, 1))
    },
    n = null,
    e.AcceleratorOscillator = function(t) {
        this.className = "AcceleratorOscillator",
        e.AcceleratorOscillator.base.constructor.apply(this, arguments),
        this._macd = null,
        this._sma = null,
        this.setName("Accelerator Oscillator"),
        this.setShortName("AC"),
        this.setDefaultDigits(6);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        i.setDrawStyle(e.signalDrawStyle.sdsUpDown),
        i.addStyle({
            caption: "cICValueUp",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        i.addStyle({
            caption: "cICValueDown",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.addSignal(i),
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.AcceleratorOscillator, e.HistogramIndicator);
    var o = e.AcceleratorOscillator.prototype;
    o.calculate = function() {
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._aoValue = new e.AOValue([this.indicatorValue]),
        this._sma5Value = new e.SMAValue([this._aoValue, 5]);
        for (var t = this.getData().min(); t;) {
            var i = this._aoValue.getValue(t.key),
            s = this._sma5Value.getValue(t.key);
            i.isExists && s.isExists && this._signal.addValue(t.key, i.value - s.value),
            t = this.getData().successor(t.key)
        }
    },
    o.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._aoValue.getValue(e),
            i = this._sma5Value.getValue(e);
            t.isExists && i.isExists && this._signal.addValue(e, t.value - i.value)
        }
    },
    o = null,
    e.AwesomeOscillator = function(t) {
        this.className = "AwesomeOscillator",
        e.AcceleratorOscillator.base.constructor.apply(this, arguments),
        this._aoValue = null,
        this.setName("Awesome Oscillator"),
        this.setShortName("AO"),
        this.setDefaultDigits(6);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        i.setDrawStyle(e.signalDrawStyle.sdsUpDown),
        i.addStyle({
            caption: "cICValueUp",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        i.addStyle({
            caption: "cICValueDown",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.addSignal(i),
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.AwesomeOscillator, e.HistogramIndicator);
    var a = e.AwesomeOscillator.prototype;
    a.calculate = function() {
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._aoValue = new e.AOValue([this.indicatorValue]);
        for (var t = this.getData().min(); t;) {
            var i = this._aoValue.getValue(t.key);
            i.isExists && this._signal.addValue(t.key, i.value),
            t = this.getData().successor(t.key)
        }
    },
    a.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._aoValue.getValue(e);
            t.isExists && this._signal.addValue(e, t.value)
        }
    },
    a = null,
    e.BullsPower = function(t) {
        this.className = "BullsPower",
        e.BullsPower.base.constructor.apply(this, arguments),
        this.setPower("high"),
        this.addParameter({
            value: 13,
            type: "float",
            caption: "cICPeriod"
        }),
        this.setDefaultDigits(5);
        var i = new e.Signal;
        this._dSignal = i.getPoints(),
        i.setCaption("cICD"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICD",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#C0C0C0",
                lineStyle: "solid"
            }
        }),
        i.setDrawStyle(e.signalDrawStyle.sdsOneColor),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.BullsPower, e.HistogramIndicator);
    var r = e.BullsPower.prototype;
    r.setPower = function(e) {
        this._power = e,
        "high" == e ? (this.setName("Bulls Power"), this.setShortName("Bulls")) : (this.setName("Bears Power"), this.setShortName("Bears"))
    },
    r.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    r.calculate = function() {
        var t = this.getParameter(0).value;
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._powerValues = new e.PowerValue([this.indicatorValue, t, this._power]);
        for (var i = this.getData().min(); i;) {
            var s = this._powerValues.getValue(i.key);
            s.isExists && this._signal.addValue(i.key, s.value),
            i = this.getData().successor(i.key)
        }
    },
    r.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._powerValues.getValue(e);
            t.isExists && this._signal.addValue(e, t.value)
        }
    },
    r = null,
    e.BearsPower = function(t) {
        e.BearsPower.base.constructor.apply(this, arguments),
        this.className = "BearsPower",
        this.setPower("low")
    },
    e.initClass(e.BearsPower, e.BullsPower),
    e.CommodityChannelIndex = function(t) {
        e.CommodityChannelIndex.base.constructor.apply(this, arguments),
        this.setName("Commodity Channel Index"),
        this.className = "CommodityChannelIndex",
        this.setShortName("CCI"),
        this.addParameter({
            value: 13,
            type: "float",
            caption: "cICPeriod"
        }),
        this.setDefaultDigits(4);
        var i = new e.Signal;
        this._dSignal = i.getPoints(),
        i.setCaption("cICD"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICD",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#20b2aa",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.CommodityChannelIndex, e.Indicator);
    var l = e.CommodityChannelIndex.prototype;
    l.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    l.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    l.calculate = function() {
        this._period = this.getParameter(0).value,
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._sMAValue = new e.SMAValue([this.indicatorValue, this._period]),
        this._sDSumNValue = new e.SDSumNValue([this.indicatorValue, this._sMAValue, this._period, !1]);
        for (var t = this.getData().min(); t;) {
            var i = this._sMAValue.getValue(t.key),
            s = this._sDSumNValue.getValue(t.key),
            n = this.indicatorValue.getValue(t.key);
            i.isExists && s.isExists && n.isExists && (0 == s.value ? this._signal.addValue(t.key, 0) : this._signal.addValue(t.key, (n.value - i.value) / (.015 * s.value / this._period))),
            t = this.getData().successor(t.key)
        }
    },
    l.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._sMAValue.getValue(e),
            i = this._sDSumNValue.getValue(e),
            s = this.indicatorValue.getValue(e);
            t.isExists && i.isExists && s.isExists && (0 == i.value ? this._signal.addValue(e, 0) : this._signal.addValue(e, (s.value - t.value) / (.015 * i.value / this._period)))
        }
    },
    l = null,
    e.DeMarker = function(t) {
        e.DeMarker.base.constructor.apply(this, arguments),
        this.setName("DeMarker"),
        this.className = "DeMarker",
        this.setShortName("DeM"),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this.setDefaultDigits(4);
        var i = new e.Signal;
        this._dSignal = i.getPoints(),
        i.setCaption("cICD"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICD",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#20B2AA",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.DeMarker, e.Indicator);
    var h = e.DeMarker.prototype;
    h.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    h.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    h.fixMaxMin = function() {
        this.getGraphicArea().min = 0,
        this.getGraphicArea().max = 1
    },
    h.calculate = function() {
        this._period = this.getParameter(0).value,
        this._signal.pointsClear(),
        this._deMaxValue = new e.DeMaxMinValue([this.getData()]),
        this._deMinValue = new e.DeMaxMinValue([this.getData(), !1]),
        this._smaMaxValue = new e.SMAValue([this._deMaxValue, this._period]),
        this._smaMinValue = new e.SMAValue([this._deMinValue, this._period]);
        for (var t = this.getData().min(); t;) {
            var i = this._smaMaxValue.getValue(t.key),
            s = this._smaMinValue.getValue(t.key);
            i.isExists && s.isExists && (i.value + s.value == 0 ? this._signal.addValue(t.key, 0) : this._signal.addValue(t.key, i.value / (i.value + s.value))),
            t = this.getData().successor(t.key)
        }
    },
    h.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._smaMaxValue.getValue(e),
            i = this._smaMinValue.getValue(e);
            t.isExists && i.isExists && (t.value + i.value == 0 ? this._signal.addValue(e, 0) : this._signal.addValue(e, t.value / (t.value + i.value)))
        }
    },
    h = null,
    e.Momentum = function(t) {
        e.Momentum.base.constructor.apply(this, arguments),
        this.setName("Momentum"),
        this.className = "Momentum",
        this.setShortName("Momentum"),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this.setDefaultDigits(4);
        var i = new e.Signal;
        this._dSignal = i.getPoints(),
        i.setCaption("cICD"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICD",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#1e90ff",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.Momentum, e.Indicator);
    var d = e.Momentum.prototype;
    d.calculate = function() {
        this._period = this.getParameter(0).value,
        this._signal.pointsClear(),
        this.setIndicatorValue();
        for (var e = this.getData().min(), t = null; e;) {
            t = e;
            for (var i = 1; i <= this._period && null !== t; i++) t = this.getData().predecessor(t.key);
            if (null != t) {
                var s = this.indicatorValue.getValue(e.key),
                n = this.indicatorValue.getValue(t.key);
                s.isExists && n.isExists && 0 != n && this._signal.addValue(e.key, s.value / n.value * 100)
            }
            e = this.getData().successor(e.key)
        }
    },
    d.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    d.recalcOnQuote = function() {
        if (this.getData()) {
            for (var e = this.getData().max().key, t = this.getData().max(), i = 1; i <= this._period && null !== t; i++) t = this.getData().predecessor(t.key);
            if (null != t) {
                var s = this.indicatorValue.getValue(e),
                n = this.indicatorValue.getValue(t.key);
                s.isExists && n.isExists && 0 != n && this._signal.addValue(e, s.value / n.value * 100)
            }
        }
    },
    d.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    d = null,
    e.WilliamsPercentRange = function(t) {
        e.WilliamsPercentRange.base.constructor.apply(this, arguments),
        this.setName("William''s Percent Range"),
        this.className = "WilliamsPercentRange",
        this.setShortName("%R"),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this.setDefaultDigits(4),
        this.setIntegerLevels(!0);
        var i = new e.Signal;
        this._dSignal = i.getPoints(),
        i.setCaption("cICR"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICR",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#00FFFF",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!1)
    },
    e.initClass(e.WilliamsPercentRange, e.Indicator);
    var c = e.WilliamsPercentRange.prototype;
    c.calculate = function() {
        this._period = this.getParameter(0).value,
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._stochasticKValue = new e.StochasticKValue([this.indicatorValue, this._period, !0]);
        for (var t = this.getData().min(); t;) {
            var i = this._stochasticKValue.getValue(t.key);
            i.isExists && this._signal.addValue(t.key, -i.value),
            t = this.getData().successor(t.key)
        }
    },
    c.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    c.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._stochasticKValue.getValue(e);
            t.isExists && this._signal.addValue(e, -t.value)
        }
    },
    c.drawBorders = function(i) {
        e.WilliamsPercentRange.base.drawBorders.apply(this, [i]);
        var s = this.getGraphicArea().top + e.UtipFunctions.div(this.getGraphicArea().heightForBorders, 5) + .5;
        t(this, i, s, -20),
        s = this.getGraphicArea().top + 4 * e.UtipFunctions.div(this.getGraphicArea().heightForBorders, 5) + .5,
        t(this, i, s, -80)
    },
    c.fixMaxMin = function() {
        this.getGraphicArea().max = 0,
        this.getGraphicArea().min = -100
    },
    c = null,
    e.Aroon = function(t) {
        e.Aroon.base.constructor.apply(this, arguments),
        this.setName("Aroon"),
        this.className = "Aroon",
        this.setShortName("Aroon"),
        this.addParameter({
            value: 10,
            type: "float",
            caption: "cICAroonUp"
        }),
        this.addParameter({
            value: 10,
            type: "float",
            caption: "cICAroonDown"
        }),
        this.setDefaultDigits(4),
        this.setIntegerLevels(!0),
        this.setDrawZero(!1);
        var i = new e.Signal;
        this._dSignal = i.getPoints(),
        i.setCaption("cICAroonUp"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICAroonUp",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#20abaa",
                lineStyle: "solid"
            }
        }),
        this._aroonUpSignal = i,
        i = new e.Signal,
        i.setCaption("cICAroonDown"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICAroonDown",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#87ceeb",
                lineStyle: "dotted"
            }
        }),
        this._aroonDownSignal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.Aroon, e.Indicator);
    var u = e.Aroon.prototype;
    u.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    u.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.drawLine(t, 1, !1),
        this.endImage(e, t)
    },
    u.fixMaxMin = function() {
        this.getGraphicArea().max = 100,
        this.getGraphicArea().min = 0
    },
    u.calculate = function() {
        this._aroonUpSignal.pointsClear(),
        this._aroonDownSignal.pointsClear(),
        this._upPeriod = this.getParameter(0).value,
        this._downPeriod = this.getParameter(1).value;
        var e = this.dataCount();
        if (e > this._upPeriod && e > this._downPeriod) {
            var t = this.getData().min();
            if (this._upPeriod < this._downPeriod) for (var i = 1; i <= this._upPeriod; i++) t = this.getData().successor(t.key);
            else for (var i = 1; i <= this._downPeriod; i++) t = this.getData().successor(t.key);
            for (; t;) {
                for (var s = t.value.low,
                n = t.value.high,
                o = 0,
                a = 0,
                r = !0,
                l = !0,
                h = t,
                i = 1; i <= this._downPeriod; i++) {
                    if (h = this.getData().predecessor(h.key), null == h) {
                        l = !1;
                        break
                    }
                    h.value.low < s && (s = h.value.low, o = i)
                }
                h = t;
                for (var i = 1; i <= this._upPeriod; i++) {
                    if (h = this.getData().predecessor(h.key), null == h) {
                        r = !1;
                        break
                    }
                    h.value.high > n && (n = h.value.high, a = i)
                }
                r && this._aroonUpSignal.addValue(t.key, 100 * (1 - a / this._upPeriod)),
                l && this._aroonDownSignal.addValue(t.key, 100 * (1 - o / this._downPeriod)),
                t = this.getData().successor(t.key)
            }
        }
    },
    u.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.dataCount();
            if (e > this._upPeriod && e > this._downPeriod) {
                for (var t = this.getData().max(), i = t.value.low, s = t.value.high, n = 0, o = 0, a = !0, r = !0, l = t, h = 1; h <= this._downPeriod; h++) {
                    if (l = this.getData().predecessor(l.key), null == l) {
                        r = !1;
                        break
                    }
                    l.value.low < i && (i = l.value.low, n = h)
                }
                l = t;
                for (var h = 1; h <= this._upPeriod; h++) {
                    if (l = this.getData().predecessor(l.key), null == l) {
                        a = !1;
                        break
                    }
                    l.value.high > s && (s = l.value.high, o = h)
                }
                a && this._aroonUpSignal.addValue(t.key, 100 * (1 - o / this._upPeriod)),
                r && this._aroonDownSignal.addValue(t.key, 100 * (1 - n / this._downPeriod))
            }
        }
    },
    u = null,
    e.ChaikinOscillator = function(t) {
        e.ChaikinOscillator.base.constructor.apply(this, arguments),
        this.setName("Chaikin Oscillator"),
        this.className = "ChaikinOscillator",
        this.setShortName("Ch. Osc."),
        this.addParameter({
            value: 3,
            type: "float",
            caption: "cICPeriod1"
        }),
        this.addParameter({
            value: 10,
            type: "float",
            caption: "cICPeriod2"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matEMA,
            type: "float",
            caption: ""
        }),
        this.setDefaultDigits(1),
        this.setMAUsing(!0);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.ChaikinOscillator, e.Indicator);
    var g = e.ChaikinOscillator.prototype;
    g.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    g.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    g.calculate = function() {
        var t = this.getParameter(0).value,
        i = this.getParameter(1).value;
        this._signal.pointsClear(),
        this._adValue = new e.ADValue([this.getData()]),
        this._movingAverageValue1 = this.initMovingAverage([this._adValue, t]),
        this._movingAverageValue2 = this.initMovingAverage([this._adValue, i]);
        for (var s = this.getData().min(); s;) {
            var n = this._movingAverageValue1.getValue(s.key),
            o = this._movingAverageValue2.getValue(s.key);
            n.isExists && n.isExists && this._signal.addValue(s.key, n.value - o.value),
            s = this.getData().successor(s.key)
        }
    },
    g.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._movingAverageValue1.getValue(e),
            i = this._movingAverageValue2.getValue(e);
            t.isExists && t.isExists && this._signal.addValue(e, t.value - i.value)
        }
    },
    g = null,
    e.DetrendedPriceOscillator = function(t) {
        e.DetrendedPriceOscillator.base.constructor.apply(this, arguments),
        this.setName("Detrended Price Oscillator"),
        this.className = "DetrendedPriceOscillator",
        this.setShortName("DPO"),
        this.addParameter({
            value: 20,
            type: "float",
            caption: "cICPeriod"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.DetrendedPriceOscillator, e.Indicator);
    var p = e.DetrendedPriceOscillator.prototype;
    p.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    p.calculate = function() {
        var e = this.getParameter(0).value;
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._movingAverageValue = this.initMovingAverage([this.indicatorValue, e]);
        for (var t = this.getData().min(); t;) {
            var i = this._movingAverageValue.getValue(t.key),
            s = this.indicatorValue.getValue(t.key);
            i.isExists && s.isExists && this._signal.addValue(t.key, s.value - i.value),
            t = this.getData().successor(t.key)
        }
    },
    p.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._movingAverageValue.getValue(e),
            i = this.indicatorValue.getValue(e);
            t.isExists && i.isExists && this._signal.addValue(e, i.value - t.value)
        }
    },
    p = null,
    e.MovingAverageofOscillator = function(t) {
        e.MovingAverageofOscillator.base.constructor.apply(this, arguments),
        this.className = "MovingAverageofOscillator",
        this.setDivergence(!0)
    },
    e.initClass(e.MovingAverageofOscillator, e.MACD),
    e.RelativeVigorIndex = function(t) {
        e.RelativeVigorIndex.base.constructor.apply(this, arguments),
        this.setName("Relative Vigor Index"),
        this.className = "RelativeVigorIndex",
        this.setShortName("RVI"),
        this.addParameter({
            value: 10,
            type: "float",
            caption: "cICPeriod"
        }),
        this.setDefaultDigits(4);
        var i = new e.Signal;
        i.setCaption("cICRVI"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICRVI",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._RVISignal = i,
        i = new e.Signal,
        i.setCaption("cICSignal"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICSignal",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#FF0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.RelativeVigorIndex, e.Indicator);
    var m = e.RelativeVigorIndex.prototype;
    m.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.drawLine(t, 1, !0),
        this.endImage(e, t)
    },
    m.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._sMAValue.getValue(e),
            i = this._lWMAValue.getValue(e);
            t.isExists && this._RVISignal.addValue(e, t.value),
            i.isExists && this._signal.addValue(e, i.value)
        }
    },
    m.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    m.calculate = function() {
        var t = this.getParameter(0).value;
        this._signal.pointsClear(),
        this._RVISignal.pointsClear(),
        this._rviValue = new e.RVIValue([this.getData()]),
        this._sMAValue = new e.SMAValue([this._rviValue, t]),
        this._lWMAValue = new e.LWMAValue([this._sMAValue, 4]);
        for (var i = this.getData().min(); i;) {
            var s = this._sMAValue.getValue(i.key),
            n = this._lWMAValue.getValue(i.key);
            s.isExists && this._RVISignal.addValue(i.key, s.value),
            n.isExists && this._signal.addValue(i.key, n.value),
            i = this.getData().successor(i.key)
        }
    },
    m = null,
    e.RateOfChange = function(t) {
        e.RateOfChange.base.constructor.apply(this, arguments),
        this.setName("Rate Of Change"),
        this.className = "RateOfChange",
        this.setShortName("ROC"),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this.setDefaultDigits(4);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#FF0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.RateOfChange, e.Indicator);
    var _ = e.RateOfChange.prototype;
    _.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    _.calculate = function() {
        this._period = this.getParameter(0).value,
        this.setIndicatorValue();
        for (var e = this.getData().min(), t = null, i = null; e;) {
            t = e.key;
            for (var s = 1; s <= this._period && t != -1; s++) i = this.getData().predecessor(t),
            t = i ? i.key: -1;
            var n = this.indicatorValue.getValue(e.key),
            o = this.indicatorValue.getValue(t);
            o.isExists && n.isExists && 0 != o.value && this._signal.addValue(e.key, (n.value - o.value) / o.value * 100),
            e = this.getData().successor(e.key)
        }
    },
    _.recalcOnQuote = function() {
        if (this.getData()) {
            for (var e = this.getData().max().key, t = e, i = null, s = 1; s <= this._period && t != -1; s++) i = this.getData().predecessor(t),
            t = i ? i.key: -1;
            var n = this.indicatorValue.getValue(e),
            o = this.indicatorValue.getValue(t);
            o.isExists && n.isExists && 0 != o.value && this._signal.addValue(e, (n.value - o.value) / o.value * 100)
        }
    },
    _ = null,
    e.PriceOscillator = function(t) {
        e.PriceOscillator.base.constructor.apply(this, arguments),
        this.setName("Price Oscillator"),
        this.className = "PriceOscillator",
        this.setShortName("PO"),
        this.addParameter({
            value: 5,
            type: "float",
            caption: "cICShortPeriod"
        }),
        this.addParameter({
            value: 7,
            type: "float",
            caption: "cICLongPeriod"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0),
        this.setDefaultDigits(6);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#FF0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.PriceOscillator, e.Indicator);
    var y = e.PriceOscillator.prototype;
    y.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    y.calculate = function() {
        var e = this.getParameter(0).value,
        t = this.getParameter(1).value;
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._shortMovingAverageValue = this.initMovingAverage([this.indicatorValue, e]),
        this._longMovingAverageValue = this.initMovingAverage([this.indicatorValue, t]);
        for (var i = this.getData().min(); i;) {
            var s = this._shortMovingAverageValue.getValue(i.key),
            n = this._longMovingAverageValue.getValue(i.key);
            s.isExists && n.isExists && this._signal.addValue(i.key, n.value - s.value),
            i = this.getData().successor(i.key)
        }
    },
    y.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._shortMovingAverageValue.getValue(e),
            i = this._longMovingAverageValue.getValue(e);
            t.isExists && i.isExists && this._signal.addValue(e, i.value - t.value)
        }
    },
    y = null,
    e.GatorOscillator = function(t) {
        e.GatorOscillator.base.constructor.apply(this, arguments),
        this.className = "GatorOscillator",
        this.setName("Gator Oscillator"),
        this.setShortName("Gator"),
        this.addParameter({
            value: 13,
            type: "float",
            caption: "cICPeriodJaw"
        }),
        this.addParameter({
            value: 8,
            type: "float",
            caption: "cICPeriodTeeth"
        }),
        this.addParameter({
            value: 5,
            type: "float",
            caption: "cICPeriodLips"
        }),
        this.addParameter({
            value: 8,
            type: "float",
            caption: "cICShiftJaw"
        }),
        this.addParameter({
            value: 5,
            type: "float",
            caption: "cICShiftTeeth"
        }),
        this.addParameter({
            value: 3,
            type: "float",
            caption: "cICShiftLips"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0),
        this.setDefaultDigits(6);
        var i = new e.Signal;
        this.addSignal(i),
        i.setCaption("cICValue"),
        i.addStyle({
            caption: "cICValueUp",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        i.addStyle({
            caption: "cICValueDown",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        i.setDrawStyle(e.signalDrawStyle.sdsUpDown),
        this._upperSignal = i,
        i = new e.Signal,
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.setDrawStyle(e.signalDrawStyle.sdsUpDown),
        this._lowerSignal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.GatorOscillator, e.HistogramIndicator);
    var S = e.GatorOscillator.prototype;
    return S.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    S.draw = function(e) {
        var t = this.initImage(e);
        this.drawHistogram(t, 0);
        var i = this.getSignal(0),
        s = i.getStyles(),
        n = s[0];
        i.getStyles()[0] = s[1],
        i.getStyles()[1] = n,
        i = this.getSignal(1),
        s = i.getStyles(),
        i.setStyles(this.getSignal(0).getStyles()),
        this.drawHistogram(t, 1),
        i.setStyles(s),
        i = this.getSignal(0),
        s = i.getStyles(),
        n = s[0],
        i.getStyles()[0] = s[1],
        i.getStyles()[1] = n,
        this.endImage(e, t)
    },
    S.calculate = function() {
        this._jawPeriod = this.getParameter(0).value,
        this._teethPeriod = this.getParameter(1).value,
        this._lipsPeriod = this.getParameter(2).value,
        this._jawShift = this.getParameter(3).value,
        this._teethShift = this.getParameter(4).value,
        this._lipsShift = this.getParameter(5).value,
        this._lowerSignal.pointsClear(),
        this._upperSignal.pointsClear(),
        this.setIndicatorValue(),
        this._jawMA = this.initMovingAverage([this.indicatorValue, this._jawPeriod]),
        this._teethMA = this.initMovingAverage([this.indicatorValue, this._teethPeriod]),
        this._lipsMA = this.initMovingAverage([this.indicatorValue, this._lipsPeriod]);
        for (var e = this._jawShift - this._teethShift,
        t = this._teethShift - this._lipsShift,
        i = this._jawPeriod - this._teethPeriod,
        s = this._teethPeriod - this._lipsPeriod,
        n = s > 0 ? this._teethShift: this._lipsShift, o = i > 0 ? this._jawShift: this._teethShift, a = this.getData().min(); a;) {
            var r = 0,
            l = 0,
            h = 0;
            i > 0 ? (r = a.key, l = this.getShiftedKey(a.key, e)) : (r = this.getShiftedKey(a.key, -e), l = a.key);
            var d = this._jawMA.getValue(r),
            c = this._teethMA.getValue(l);
            d.isExists && c.isExists && this._upperSignal.addValue(this.shiftedDate(a.key, o), Math.abs(d.value - c.value)),
            s > 0 ? (l = a.key, h = this.getShiftedKey(a.key, t)) : (l = this.getShiftedKey(a.key, -t), h = a.key);
            var u = this._lipsMA.getValue(h);
            c = this._teethMA.getValue(l),
            u.isExists && c.isExists && this._lowerSignal.addValue(this.shiftedDate(a.key, n), -Math.abs(u.value - c.value)),
            a = this.getData().successor(a.key)
        }
    },
    S.recalcOnQuote = function() {
        if (this.getData()) {
            for (var e = this.getData().max().key, t = this._jawShift - this._teethShift, i = this._teethShift - this._lipsShift, s = this._jawPeriod - this._teethPeriod, n = this._teethPeriod - this._lipsPeriod, o = s > 0 ? this._jawShift: this._teethShift, a = n > 0 ? this._teethShift: this._lipsShift, r = s > 0 ? this.getShiftedKey(e, -this._jawShift) : this.getShiftedKey(e, -this._teethShift), l = this.getData().get(r); l;) {
                var h = 0,
                d = 0,
                c = 0;
                s > 0 ? (h = l.key, d = this.getShiftedKey(l.key, t)) : (h = this.getShiftedKey(l.key, -t), d = l.key);
                var u = this._jawMA.getValue(h),
                g = this._teethMA.getValue(d);
                u.isExists && g.isExists && this._upperSignal.addValue(this.shiftedDate(l.key, o), Math.abs(u.value - g.value)),
                l = this.getData().successor(l.key)
            }
            for (r = n > 0 ? this.getShiftedKey(e, -this._teethShift) : this.getShiftedKey(e, -this._lipsShift), l = this.getData().get(r); l;) {
                var h = 0,
                d = 0,
                c = 0;
                n > 0 ? (d = l.key, c = this.getShiftedKey(l.key, i)) : (d = this.getShiftedKey(l.key, -i), c = l.key);
                var p = this._lipsMA.getValue(c);
                g = this._teethMA.getValue(d),
                p.isExists && g.isExists && this._lowerSignal.addValue(this.shiftedDate(l.key, a), -Math.abs(p.value - g.value)),
                l = this.getData().successor(l.key)
            }
        }
    },
    S.getShiftedKey = function(e, t) {
        var i = e,
        s = null,
        n = 0;
        if (t > 0) for (n = 1; n <= t && i != -1; n++) s = this.getData().successor(i),
        i = s ? s.key: -1;
        else for (n = 1; n <= Math.abs(t) && i != -1; n++) s = this.getData().predecessor(i),
        i = s ? s.key: -1;
        return i
    },
    S = null,
    e
}),
define("indicators/volatilityIndicators", ["indicators/baseIndicator"],
function(e) {
    e.AverageTrueRange = function(t) {
        e.AverageTrueRange.base.constructor.apply(this, arguments),
        this.setName("Average True Range"),
        this.className = "AverageTrueRange",
        this.setShortName("ATR"),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matEMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0),
        this.setDefaultDigits(4);
        var i = new e.Signal;
        this._dSignal = i.getPoints(),
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#0000ff",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.AverageTrueRange, e.Indicator);
    var t = e.AverageTrueRange.prototype;
    t.calculate = function() {
        this._period = this.getParameter(0).value,
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._trueRangeValue = new e.TrueRangeValue([this.indicatorValue]),
        this._maValue = this.initMovingAverage([this._trueRangeValue, this._period]);
        for (var t = this.getData().min(); t;) {
            var i = this._maValue.getValue(t.key);
            i.isExists && this._signal.addValue(t.key, i.value),
            t = this.getData().successor(t.key)
        }
    },
    t.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._maValue.getValue(e);
            t.isExists && this._signal.addValue(e, t.value)
        }
    },
    t.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    t.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    t = null,
    e.BollingerBands = function(t) {
        e.BollingerBands.base.constructor.apply(this, arguments),
        this.setName("Bollinger Bands"),
        this.className = "BollingerBands",
        this.setShortName("BBANDS"),
        this.addParameter({
            value: 20,
            type: "float",
            caption: "cICPeriod"
        }),
        this.addParameter({
            value: 2,
            type: "float",
            caption: "cWCTPendingOrderFormDeviation"
        });
        var i = new e.Signal;
        i.setCaption("cICTopLine"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICTopLine",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._topSignal = i,
        i = new e.Signal,
        i.setCaption("cICMedianLine"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICMedianLine",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._medianSignal = i,
        i = new e.Signal,
        i.setCaption("cICBottomLine"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICBottomLine",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._bottomSignal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0)
    },
    e.initClass(e.BollingerBands, e.Indicator);
    var i = e.BollingerBands.prototype;
    i.calculate = function() {
        var t = this.getParameter(0).value;
        this._devNum = this.getParameter(1).value,
        this._bottomSignal.pointsClear(),
        this._topSignal.pointsClear(),
        this._medianSignal.pointsClear(),
        this.setIndicatorValue(),
        this._sdSMAValue = new e.SMAValue([this.indicatorValue, t]),
        this._stdDevValue = new e.StdDevValue([this.indicatorValue, this._sdSMAValue, t]),
        this._smaValue = new e.SMAValue([this.indicatorValue, t]);
        for (var i = this.getData().min(); i;) {
            var s = this._stdDevValue.getValue(i.key),
            n = this._smaValue.getValue(i.key);
            s.isExists && n.isExists && (this._medianSignal.addValue(i.key, n.value), this._topSignal.addValue(i.key, n.value + this._devNum * s.value), this._bottomSignal.addValue(i.key, n.value - this._devNum * s.value)),
            i = this.getData().successor(i.key)
        }
    },
    i.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._stdDevValue.getValue(e),
            i = this._smaValue.getValue(e);
            t.isExists && i.isExists && (this._medianSignal.addValue(e, i.value), this._topSignal.addValue(e, i.value + this._devNum * t.value), this._bottomSignal.addValue(e, i.value - this._devNum * t.value))
        }
    },
    i.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 1, !0),
        this.drawLine(t, 0, !0),
        this.drawLine(t, 2, !0),
        this.endImage(e, t)
    },
    i = null,
    e.StandardDeviation = function(t) {
        e.StandardDeviation.base.constructor.apply(this, arguments),
        this.className = "StandardDeviation",
        this.setName("Standard Deviation"),
        this.setShortName("StdDev"),
        this.setDefaultDigits(4),
        this.addParameter({
            value: 20,
            type: "float",
            caption: "cICPeriod"
        }),
        this.addParameter({
            value: e.movingAverageTypes.matSMA,
            type: "float",
            caption: ""
        }),
        this.setMAUsing(!0);
        var i = new e.Signal;
        this.addSignal(i),
        i.setCaption("cICValue"),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1)
    },
    e.initClass(e.StandardDeviation, e.Indicator);
    var s = e.StandardDeviation.prototype;
    return s.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.endImage(e, t)
    },
    s.fixMaxMin = function() {
        this.getGraphicArea().min = 0
    },
    s.calculate = function() {
        var t = this.getParameter(0).value;
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._movingAverageValue = this.initMovingAverage([this.indicatorValue, t]),
        this._stdDevValue = new e.StdDevValue([this.indicatorValue, this._movingAverageValue, t]);
        for (var i = this.getData().min(); i;) {
            var s = this._stdDevValue.getValue(i.key);
            s.isExists && this._signal.addValue(i.key, s.value),
            i = this.getData().successor(i.key)
        }
    },
    s.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._stdDevValue.getValue(e);
            t.isExists && this._signal.addValue(e, t.value)
        }
    },
    s = null,
    e
}),
define("indicators/volumesIndicators", ["indicators/baseIndicator"],
function(e) {
    e.MoneyFlowIndex = function(t) {
        e.MoneyFlowIndex.base.constructor.apply(this, arguments),
        this.setName("Money Flow Index"),
        this.className = "MoneyFlowIndex",
        this.setShortName("MFI"),
        this.setIntegerLevels(!0),
        this.setDefaultDigits(4),
        this.addParameter({
            value: 14,
            type: "float",
            caption: "cICPeriod"
        });
        var i = new e.Signal;
        i.setCaption("cICMFI"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICMFI",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#1e90ff",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!1)
    },
    e.initClass(e.MoneyFlowIndex, e.Indicator);
    var t = e.MoneyFlowIndex.prototype;
    t.calculate = function() {
        var t = this.getParameter(0).value;
        this._signal.pointsClear(),
        this.setIndicatorValue(),
        this._positiveFlowValue = new e.MoneyFlowValue([this.indicatorValue, t, !0]),
        this._negativeFlowValue = new e.MoneyFlowValue([this.indicatorValue, t, !1]);
        for (var i = this.getData().min(); i;) {
            var s = this._positiveFlowValue.getValue(i.key),
            n = this._negativeFlowValue.getValue(i.key);
            s.isExists && n.isExists && (0 == n.value ? this._signal.addValue(i.key, 100) : this._signal.addValue(i.key, 100 - 100 / (1 + s.value / n.value))),
            i = this.getData().successor(i.key)
        }
    },
    t.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._positiveFlowValue.getValue(e),
            i = this._negativeFlowValue.getValue(e);
            t.isExists && i.isExists && (0 == i.value ? this._signal.addValue(e, 100) : this._signal.addValue(e, 100 - 100 / (1 + t.value / i.value)))
        }
    },
    t.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    t.fixMaxMin = function() {
        this.getGraphicArea().max = 100,
        this.getGraphicArea().min = 0
    },
    t.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    t = null,
    e.OnBalanceVolume = function(t) {
        e.OnBalanceVolume.base.constructor.apply(this, arguments),
        this.setName("On Balance Volume"),
        this.className = "OnBalanceVolume",
        this.setShortName("OBV"),
        this.setIntegerLevels(!0),
        this.setDefaultDigits(0);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#20B2AA",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.OnBalanceVolume, e.Indicator);
    var i = e.OnBalanceVolume.prototype;
    i.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    i.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles);
    },
    i.calculate = function() {
        if (this._signal.pointsClear(), null != this.getData().min()) {
            var e = this.getData().min(),
            t = parseInt(e.value.volume);
            this._signal.addValue(e.key, t);
            var i = e;
            e = this.getData().successor(e.key);
            for (var s = null; e;) s = e.value.close > i.value.close ? t + parseInt(e.value.volume) : e.value.close < i.value.close ? t - parseInt(e.value.volume) : t,
            this._signal.addValue(e.key, s),
            i = e,
            t = s,
            e = this.getData().successor(e.key)
        }
    },
    i.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = 0,
            i = 0;
            if (this._signal.getPoints().min() == this._signal.getPoints().max()) this._signal.addValue(e, 0),
            t = 0;
            else {
                var s = this._signal.getPoints().get(e);
                null != s ? (s = this._signal.getPoints().predecessor(e), t = s.value) : t = this._signal.getPoints().get(this._signal.getPoints().max().key).value
            }
            var n = this.getData().max();
            s = this.getData().predecessor(e),
            null != s && (i = n.value.close > s.value.close ? t + n.value.volume: n.value.close < s.value.close ? t - n.value.volume: t, this._signal.addValue(e, i))
        }
    },
    i = null,
    e.AccumulationDistribution = function(t) {
        e.AccumulationDistribution.base.constructor.apply(this, arguments),
        this.setName("Accumulation/Distribution"),
        this.className = "AccumulationDistribution",
        this.setShortName("A/D"),
        this.setDefaultDigits(0);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#20B2AA",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.AccumulationDistribution, e.Indicator);
    var s = e.AccumulationDistribution.prototype;
    return s.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !0),
        this.endImage(e, t)
    },
    s.calculate = function() {
        this._signal.pointsClear(),
        this._adValue = new e.ADValue([this.getData()]);
        for (var t = this.getData().min(); t;) {
            var i = this._adValue.getValue(t.key);
            i.isExists && this._signal.addValue(t.key, i.value),
            t = this.getData().successor(t.key)
        }
    },
    s.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = this._adValue.getValue(e);
            t.isExists && this._signal.addValue(e, t.value)
        }
    },
    s.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    s = null,
    e
}),
define("indicators/otherIndicators", ["indicators/baseIndicator"],
function(e) {
    e.IchimokuKinkoHyo = function(t) {
        e.IchimokuKinkoHyo.base.constructor.apply(this, arguments),
        this.setName("Ichimoku Kinko Hyo"),
        this.className = "IchimokuKinkoHyo",
        this.setShortName("IKH"),
        this.setDefaultDigits(4),
        this.setDrawZero(!1),
        this.addParameter({
            value: 9,
            type: "float",
            caption: "cICTenkanSen"
        }),
        this.addParameter({
            value: 26,
            type: "float",
            caption: "cICKijunSen"
        }),
        this.addParameter({
            value: 52,
            type: "float",
            caption: "cICSenkouSpanB"
        });
        var i = new e.Signal;
        i.setCaption("cICTenkanSen"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICTenkanSen",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._tenkanSenSignal = i,
        i = new e.Signal,
        i.setCaption("cICKijunSen"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICKijunSen",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#0000ff",
                lineStyle: "dotted"
            }
        }),
        this._kijunSenSignal = i,
        i = new e.Signal,
        i.setCaption("cICChinkouSpan"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICChinkouSpan",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#2e8b57",
                lineStyle: "solid"
            }
        }),
        this._chinkouSpanSignal = i,
        i = new e.Signal,
        i.setCaption("cICUpKumo"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICUpKumo",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#c71585",
                lineStyle: "dotted"
            }
        }),
        this._upKumoSignal = i,
        i = new e.Signal,
        i.setCaption("cICDownKumo"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICDownKumo",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ffd700",
                lineStyle: "dotted"
            }
        }),
        this._downKumoSignal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.IchimokuKinkoHyo, e.Indicator);
    var t = e.IchimokuKinkoHyo.prototype;
    t.calculate = function() {
        this._tSPeriod = this.getParameter(0).value,
        this._kSPeriod = this.getParameter(1).value,
        this._sSbSPeriod = this.getParameter(2).value,
        this._tenkanSenSignal.pointsClear(),
        this._kijunSenSignal.pointsClear(),
        this._chinkouSpanSignal.pointsClear(),
        this._upKumoSignal.pointsClear(),
        this._downKumoSignal.pointsClear(),
        this._lowValue = new e.SimpleIndicatorValue([this.getData(), e.signalTypes.stLow]),
        this._highValue = new e.SimpleIndicatorValue([this.getData(), e.signalTypes.stHigh]),
        this._hhvValue = new e.NPMaxMinValue([this._highValue, this._kSPeriod]),
        this._llvValue = new e.NPMaxMinValue([this._lowValue, this._kSPeriod, !1]);
        for (var t = this.getData().min(); t;) {
            var i = this._hhvValue.getValue(t.key),
            s = this._llvValue.getValue(t.key);
            i.isExists && s.isExists && this._kijunSenSignal.addValue(t.key, (i.value + s.value) / 2),
            t = this.getData().successor(t.key)
        }
        for (this._hhvValue.setParameters([this._highValue, this._tSPeriod]), this._llvValue.setParameters([this._lowValue, this._tSPeriod, !1]), t = this.getData().min(); t;) i = this._hhvValue.getValue(t.key),
        s = this._llvValue.getValue(t.key),
        i.isExists && s.isExists && this._tenkanSenSignal.addValue(t.key, (i.value + s.value) / 2),
        t = this.getData().successor(t.key);
        for (this._hhvValue.setParameters([this._highValue, this._sSbSPeriod]), this._llvValue.setParameters([this._lowValue, this._sSbSPeriod, !1]), t = this.getData().min(); t;) {
            if (i = this._hhvValue.getValue(t.key), s = this._llvValue.getValue(t.key), i.isExists && s.isExists) {
                for (var n = t,
                o = this.getData().get(n.key).key, a = 1; a <= this._kSPeriod; a++) null !== n && (n = this.getData().successor(n.key)),
                o = null !== n ? n.key: this.getGraphicWindows().getNextDate(o);
                this._downKumoSignal.addValue(o, (i.value + s.value) / 2)
            }
            t = this.getData().successor(t.key)
        }
        t = this.getData().min();
        for (var a = 1; a <= this._kSPeriod; a++) null != t && (t = this.getData().successor(t.key));
        for (; t;) {
            n = t;
            for (var a = 1; a <= this._kSPeriod; a++) null != t && (n = this.getData().predecessor(n.key));
            this._chinkouSpanSignal.addValue(n.key, this.getData().get(t.key).value.close),
            t = this.getData().successor(t.key)
        }
        var r = this._kijunSenSignal.getPoints().min();
        o = null !== r ? r.key: -1;
        var l = this._tenkanSenSignal.getPoints().min();
        for (null !== l && l.key > o && (o = l.key), t = this.getData().get(o); o > 0;) {
            var h = this._tenkanSenSignal.getPoints().get(o),
            d = this._kijunSenSignal.getPoints().get(o);
            if (null !== h && null !== d) {
                var c = (h.value + d.value) / 2;
                n = t;
                for (var u = o,
                a = 1; a <= this._kSPeriod; a++) null !== n && (n = this.getData().successor(n.key)),
                u = null == n ? this.getGraphicWindows().getNextDate(u) : n.key;
                this._upKumoSignal.addValue(u, c)
            }
            t = this.getData().successor(t.key),
            o = null == t ? -1 : t.key
        }
    },
    t.recalcOnQuote = function() {
        if (this.getData()) {
            var t = this.getData().max().key;
            this._hhvValue = new e.NPMaxMinValue([this._highValue, this._kSPeriod]),
            this._llvValue = new e.NPMaxMinValue([this._lowValue, this._kSPeriod, !1]);
            var i = this._hhvValue.getValue(t),
            s = this._llvValue.getValue(t);
            if (i.isExists && s.isExists && this._kijunSenSignal.addValue(t, (i.value + s.value) / 2), this._hhvValue.setParameters([this._highValue, this._tSPeriod]), this._llvValue.setParameters([this._lowValue, this._tSPeriod, !1]), i = this._hhvValue.getValue(t), s = this._llvValue.getValue(t), i.isExists && s.isExists && this._tenkanSenSignal.addValue(t, (i.value + s.value) / 2), this._hhvValue.setParameters([this._highValue, this._sSbSPeriod]), this._llvValue.setParameters([this._lowValue, this._sSbSPeriod, !1]), i = this._hhvValue.getValue(t), s = this._llvValue.getValue(t), i.isExists && s.isExists) {
                for (var n = this.getData().max(), o = n.key, a = 1; a <= this._kSPeriod; a++) null !== n && (n = this.getData().successor(n.key)),
                o = null !== n ? n.key: this.getGraphicWindows().getNextDate(o);
                this._downKumoSignal.addValue(o, (i.value + s.value) / 2)
            }
            n = this.getData().max();
            for (var a = 1; a <= this._kSPeriod; a++) null != n && (n = this.getData().predecessor(n.key));
            null !== n && this._chinkouSpanSignal.addValue(n.key, this.getData().get(t).value.close);
            var r = this._kijunSenSignal.getPoints().get(t),
            l = this._tenkanSenSignal.getPoints().get(t);
            if (t > 0 && null !== l && null !== r) {
                var h = (l.value + r.value) / 2,
                d = t;
                n = this.getData().max();
                for (var a = 1; a <= this._kSPeriod; a++) null !== n && (n = this.getData().successor(n.key)),
                d = null == n ? this.getGraphicWindows().getNextDate(d) : n.key;
                this._upKumoSignal.addValue(d, h)
            }
        }
    },
    t.drawCumoCloud = function(t) {
        for (var i = this.getGraphicWindows(), s = i.getVisibleBarsCount(), n = i.options, o = e.graphicConst.GraphicWindowLeft + 1 - n.scale + e.UtipFunctions.div(n.scale, 2), a = i.getPrevDate(i.getPosition()), r = null, l = 1; l <= s; l++) {
            o += n.scale,
            a = i._visiblePositions[l - 1];
            var h = this._upKumoSignal.getPoints().get(a),
            d = this._downKumoSignal.getPoints().get(a);
            null !== h && null !== d && (r = h.value > d.value ? this.getSignal(3).getStyle(0) : this.getSignal(4).getStyle(0), t.lineWidth = r.lineStyle.lineWidth, t.strokeStyle = r.lineStyle.lineColor, t.drawDashedLine(o + .5, this.getGraphicArea().getYCoord(h.value), o + .5, this.getGraphicArea().getYCoord(d.value), e.UtipFunctions.calcLineStyle(r.lineStyle.lineStyle)))
        }
    },
    t.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.drawLine(t, 1, !1),
        this.drawLine(t, 2, !1),
        this.drawLine(t, 3, !1),
        this.drawLine(t, 4, !1),
        this.drawCumoCloud(t),
        this.endImage(e, t)
    },
    t.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    t = null,
    e.Fractals = function(t) {
        e.Fractals.base.constructor.apply(this, arguments),
        this.setName("Fractals"),
        this.className = "Fractals";
        var i = new e.Signal;
        i.setCaption("cICHigh"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICHigh",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#0000FF",
                lineStyle: "solid"
            }
        }),
        this._upSignal = i,
        i = new e.Signal,
        i.setCaption("cICLow"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICLow",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#0000FF",
                lineStyle: "solid"
            }
        }),
        this._downSignal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0),
        this._recalc = !1
    },
    e.initClass(e.Fractals, e.DottedIndicator);
    var i = e.Fractals.prototype;
    i.calculate = function() {
        function e(e) {
            for (var i = n.getData().get(t.key).value[e], s = t, o = 0; o <= 1; o++) {
                if (s = n.getData().predecessor(s.key), null == s) return ! 1;
                if ("high" == e ? s.value[e] > i: s.value[e] < i) return ! 1
            }
            s = t;
            for (var o = 0; o <= 1; o++) {
                if (s = n.getData().successor(s.key), null == s) return ! 1;
                if ("high" == e ? s.value[e] > i: s.value[e] < i) return ! 1
            }
            return ! 0
        }
        var t = null;
        if (this._recalc) {
            t = this.getData().max();
            for (var i = 1; i <= 3; i++) null !== t && (t = this.getData().predecessor(t.key))
        } else t = this.getData().min(),
        this._upSignal.pointsClear(),
        this._downSignal.pointsClear();
        for (var s = null,
        n = this; null !== t;) {
            if (this._recalc) {
                var o = t.key;
                s = this._upSignal.getPoints().get(o),
                null !== s && this._upSignal.getPoints().delete(o),
                s = this._downSignal.getPoints().get(o),
                null !== s && this._downSignal.getPoints().delete(o)
            }
            if (e("high")) {
                var a = this.getData().get(t.key).value.high;
                a += 5e-4 * a,
                this._upSignal.addValue(t.key, a)
            }
            if (e("low")) {
                var a = this.getData().get(t.key).value.low;
                a -= 5e-4 * a,
                this._downSignal.addValue(t.key, a)
            }
            t = this.getData().successor(t.key)
        }
    },
    i.recalcOnQuote = function() {
        this.getData(),
        this._recalc = !0,
        this.calculate(),
        this._recalc = !1
    },
    i.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    i.draw = function(e) {
        var t = this.initImage(e);
        this.drawPoints(t, 0),
        this.drawPoints(t, 1),
        this.endImage(e, t)
    },
    i = null,
    e.MarketFacilitationIndex = function(t) {
        e.MarketFacilitationIndex.base.constructor.apply(this, arguments),
        this.setName("Market Facilitation Index"),
        this.className = "MarketFacilitationIndex",
        this.setShortName("BW MFI"),
        this.setDefaultDigits(4);
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICMFIStyleUpUp",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#00FF00",
                lineStyle: "solid"
            }
        }),
        i.addStyle({
            caption: "cICMFIStyleDownDown",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#8B4513",
                lineStyle: "solid"
            }
        }),
        i.addStyle({
            caption: "cICMFIStyleUpDown",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#0000FF",
                lineStyle: "solid"
            }
        }),
        i.addStyle({
            caption: "cICMFIStyleDownUp",
            lineStyle: {
                lineWidth: 2,
                lineColor: "#ffC0CB",
                lineStyle: "solid"
            }
        }),
        i.setDrawStyle(e.signalDrawStyle.sdsMFI),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!0),
        this.setDrawInExistsGraphicArea(!1),
        this.setChartSourceOnly(!1),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.MarketFacilitationIndex, e.HistogramIndicator);
    var s = e.MarketFacilitationIndex.prototype;
    s.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    s.fixMaxMin = function() {
        this.getGraphicArea().min = 0
    },
    s.calculate = function() {
        this._signal.pointsClear();
        for (var e = 10 * Math.pow(10, this.getSource(0).object.getDigits()), t = this.getData().min(), i = 0, s = null, n = 0, o = !1, a = !1; t;) i = t.value.volume,
        0 != i && (i = (t.value.high - t.value.low) / i * e),
        s = this.getData().predecessor(t.key),
        s ? (o = t.value.volume > s.value.volume, a = i > this._signal.getPoints().get(s.key).value.value, n = o && a ? 0 : o ? 3 : a ? 2 : 1) : n = 0,
        this._signal.addValue(t.key, {
            value: i,
            style: n
        }),
        t = this.getData().successor(t.key)
    },
    s.recalcOnQuote = function() {
        if (this.getData()) {
            var e = this.getData().max().key,
            t = 0;
            if (this.getData().max() != this.getData().min() && 0 != this.getData().max().value.volume) {
                t = this.getData().max().value.volume;
                var i = 10 * Math.pow(10, this.getSource(0).object.getDigits());
                0 != t && (t = (this.getData().max().value.high - this.getData().max().value.low) / t * i)
            }
            var s = this.getData().predecessor(e),
            n = 0,
            o = !1,
            a = !1;
            s ? (o = this.getData().max().value.volume > s.value.volume, a = t > this._signal.getPoints().get(s.key).value.value, n = o && a ? 0 : o ? 3 : a ? 2 : 1) : n = 0,
            this._signal.addValue(e, {
                value: t,
                style: n
            })
        }
    },
    s = null,
    e.PivotPoints = function(t) {
        e.PivotPoints.base.constructor.apply(this, arguments),
        this.setName("Pivot Points"),
        this.className = "PivotPoints",
        this.setShortName("PPoints"),
        this.setDefaultDigits(1),
        this.setDrawZero(!1),
        this.addParameter({
            value: e.allPeriods.PC_D1,
            type: "float",
            caption: ""
        });
        var i = new e.Signal;
        i.setCaption("cICX"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICX",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#000000",
                lineStyle: "solid"
            }
        }),
        this._x = i,
        i = new e.Signal,
        i.setCaption("cICR1"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICR1",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._r1 = i,
        i = new e.Signal,
        i.setCaption("cICS1"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICS1",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._s1 = i,
        i = new e.Signal,
        i.setCaption("cICR2"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICR2",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._r2 = i,
        i = new e.Signal,
        i.setCaption("cICS2"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICS2",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#008000",
                lineStyle: "solid"
            }
        }),
        this._s2 = i,
        i = new e.Signal,
        i.setCaption("cICR3"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICR3",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#0000ff",
                lineStyle: "solid"
            }
        }),
        this._r3 = i,
        i = new e.Signal,
        i.setCaption("cICS3"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICS3",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#0000ff",
                lineStyle: "solid"
            }
        }),
        this._s3 = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0)
    },
    e.initClass(e.PivotPoints, e.Indicator);
    var n = e.PivotPoints.prototype;
    n.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.drawLine(t, 1, !1),
        this.drawLine(t, 2, !1),
        this.drawLine(t, 3, !1),
        this.drawLine(t, 4, !1),
        this.drawLine(t, 5, !1),
        this.drawLine(t, 6, !1),
        this.endImage(e, t)
    },
    n.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    n.calculate = function() {
        if (this._x.pointsClear(), this._s1.pointsClear(), this._s2.pointsClear(), this._s3.pointsClear(), this._r1.pointsClear(), this._r2.pointsClear(), this._r3.pointsClear(), this._period = this.getParameter(0).value, !(this._period < this.getGraphicWindows().getPeriod())) {
            var t = this.getData().min();
            if (t) {
                var i = t.key;
                if (this._lastPeriodDate = e.QuotesArchive.getStartPeriodDate(i, this._period, !1), this._lastPeriodDate != i) for (; t && this._lastPeriodDate == e.QuotesArchive.getStartPeriodDate(i, this._period, !1);) t = this.getData().successor(t.key),
                t && (i = t.key);
                for (this._lastPeriodDate = e.QuotesArchive.getStartPeriodDate(i, this._period, !1), t && (this._high = t.value.high, this._low = t.value.low, this._close = t.value.close, this._pivot = 0); t;) {
                    if (i = t.key, this._lastPeriodDate == e.QuotesArchive.getStartPeriodDate(i, this._period, !1)) {
                        if (this._high < t.value.high && (this._high = t.value.high), this._low > t.value.low && (this._low = t.value.low), this._close = t.value.close, this._x.getPoints().min()) {
                            var s = this._x.getPoints().max().key;
                            this._x.addValue(t.key, this._x.getPoints().get(s).value),
                            this._r1.addValue(t.key, this._r1.getPoints().get(s).value),
                            this._s1.addValue(t.key, this._s1.getPoints().get(s).value),
                            this._r2.addValue(t.key, this._r2.getPoints().get(s).value),
                            this._s2.addValue(t.key, this._s2.getPoints().get(s).value),
                            this._r3.addValue(t.key, this._r3.getPoints().get(s).value),
                            this._s3.addValue(t.key, this._s3.getPoints().get(s).value)
                        }
                    } else this._lastPeriodDate = e.QuotesArchive.getStartPeriodDate(i, this._period, !1),
                    this._pivot = (this._high + this._low + this._close) / 3,
                    this._x.addValue(t.key, this._pivot),
                    this._r1.addValue(t.key, 2 * this._pivot - this._low),
                    this._s1.addValue(t.key, 2 * this._pivot - this._high),
                    this._r2.addValue(t.key, this._pivot + this._high - this._low),
                    this._s2.addValue(t.key, this._pivot - this._high + this._low),
                    this._r3.addValue(t.key, this._high + 2 * (this._pivot - this._low)),
                    this._s3.addValue(t.key, this._low - 2 * (this._high - this._pivot)),
                    this._high = t.value.high,
                    this._low = t.value.low,
                    this._close = t.value.close;
                    t = this.getData().successor(t.key)
                }
            }
        }
    },
    n.recalcOnQuote = function() {
        if (this.getData()) {
            if (this._period < this.getGraphicWindows().getPeriod()) return;
            var t = this.getData().max(),
            i = t.key;
            if (this._lastPeriodDate == e.QuotesArchive.getStartPeriodDate(i, this._period, !1)) {
                if (this._high < t.value.high && (this._high = t.value.high), this._low > t.value.low && (this._low = t.value.low), this._close = t.value.close, this._x.getPoints().min()) {
                    var s = this._x.getPoints().max().key;
                    this._x.addValue(i, this._x.getPoints().get(s).value),
                    this._r1.addValue(i, this._r1.getPoints().get(s).value),
                    this._s1.addValue(i, this._s1.getPoints().get(s).value),
                    this._r2.addValue(i, this._r2.getPoints().get(s).value),
                    this._s2.addValue(i, this._s2.getPoints().get(s).value),
                    this._r3.addValue(i, this._r3.getPoints().get(s).value),
                    this._s3.addValue(i, this._s3.getPoints().get(s).value)
                }
            } else this._lastPeriodDate = e.QuotesArchive.getStartPeriodDate(i, this._period, !1),
            this._pivot = (this._high + this._low + this._close) / 3,
            this._x.addValue(i, this._pivot),
            this._r1.addValue(i, 2 * this._pivot - this._low),
            this._s1.addValue(i, 2 * this._pivot - this._high),
            this._r2.addValue(i, this._pivot + this._high - this._low),
            this._s2.addValue(i, this._pivot - this._high + this._low),
            this._r3.addValue(i, this._high + 2 * (this._pivot - this._low)),
            this._s3.addValue(i, this._low - 2 * (this._high - this._pivot)),
            this._high = t.value.high,
            this._low = t.value.low,
            this._close = t.value.close
        }
    },
    n = null,
    e.ZigZag = function(t) {
        e.ZigZag.base.constructor.apply(this, arguments),
        this.setName("ZigZag"),
        this.className = "ZigZag",
        this.setShortName("ZZ"),
        this.setDefaultDigits(1),
        this.addParameter({
            value: .5,
            type: "float",
            caption: "cWCTPendingOrderFormDeviation"
        }),
        this.addParameter({
            value: 1,
            type: "float",
            caption: ""
        });
        var i = new e.Signal;
        i.setCaption("cICValue"),
        this.addSignal(i),
        i.addStyle({
            caption: "cICValue",
            lineStyle: {
                lineWidth: 1,
                lineColor: "#ff0000",
                lineStyle: "solid"
            }
        }),
        this._signal = i,
        this.setSourceNumber(1),
        this.setDrawInNewGraphicArea(!1),
        this.setDrawInExistsGraphicArea(!0),
        this.setChartSourceOnly(!0),
        this.setUseWholeChart(!0),
        this._recalc = !1
    },
    e.initClass(e.ZigZag, e.Indicator);
    var o = e.ZigZag.prototype;
    return o.draw = function(e) {
        var t = this.initImage(e);
        this.drawLine(t, 0, !1),
        this.endImage(e, t)
    },
    o.setSource = function() {
        this.setData(this.getSource(0).object.quotesData.candles)
    },
    o.calculate = function() {
        if (!this._recalc) {
            if (this._signal.pointsClear(), this._lastLowKey = -1, this._lastHighKey = -1, void 0 == this.getData().min()) return;
            this._deviation = this.getParameter(0).value,
            this._percent = 1 == this.getParameter(1).value
        }
        var e = !1,
        t = !1,
        i = -1;
        this._lastHighKey != -1 && this._lastLowKey != -1 ? this._lastHighKey > this._lastLowKey ? (this._signal.getPoints().delete(this._lastHighKey), i = this._lastLowKey, t = !0, this._lastHigh = this.getData().get(this._lastLowKey).value.high) : (this._signal.getPoints().delete(this._lastLowKey), i = this._lastHighKey, e = !0, this._lastLow = this.getData().get(this._lastHighKey).value.low) : (this._signal.pointsClear(), i = this.getData().min().key, this._lastHigh = this.getData().get(i).value.high, this._lastLow = this.getData().get(i).value.low, this._lastHighKey = i, this._lastLowKey = i);
        var s = 0,
        n = 0;
        this._percent ? (s = this._lastHigh / 100 * this._deviation, n = this._lastLow / 100 * this._deviation) : (s = this._deviation / Math.pow(10, this.getSource(0).object.getDigits()), n = s);
        for (var o = this.getData().successor(i), a = 0, r = 0; o;) a = o.value.high,
        r = o.value.low,
        this._lastHigh - r > s && e && this._signal.getPoints().max().value <= this._lastHigh && this._signal.getPoints().max().key != this._lastHighKey ? (this._signal.getPoints().delete(this._signal.getPoints().max().key), this._signal.addValue(this._lastHighKey, this._lastHigh), this._lastLow = r, this._lastLowKey = o.key, this._percent && (n = this._lastLow / 100 * this._deviation)) : a - this._lastLow > n && t && this._signal.getPoints().max().key != this._lastLowKey ? (this._signal.getPoints().delete(this._signal.getPoints().max().key), this._signal.addValue(this._lastLowKey, this._lastLow), this._lastHigh = a, this._lastHighKey = o.key, this._percent && (s = this._lastHigh / 100 * this._deviation)) : this._lastHigh - r > s && !e ? (e = !0, this._signal.addValue(this._lastHighKey, this._lastHigh), this._lastLow = r, this._lastLowKey = o.key, this._percent && (n = this._lastLow / 100 * this._deviation), t = !1) : a - this._lastLow > n && !t && (t = !0, this._signal.addValue(this._lastLowKey, this._lastLow), this._lastHigh = a, this._lastHighKey = o.key, this._percent && (s = this._lastHigh / 100 * this._deviation), e = !1),
        this._lastHigh <= a && (this._lastHigh = a, this._lastHighKey = o.key, this._percent && (s = this._lastHigh / 100 * this._deviation)),
        this._lastLow >= r && (this._lastLow = r, this._lastLowKey = o.key, this._percent && (n = this._lastLow / 100 * this._deviation)),
        o = this.getData().successor(o.key);
        this._signal.getPoints().min() && (e ? this._signal.addValue(this._lastLowKey, this._lastLow) : t && this._signal.addValue(this._lastHighKey, this._lastHigh))
    },
    o.recalcOnQuote = function() {
        this.getData() && (this._recalc = !0, this.calculate(), this._recalc = !1)
    },
    o = null,
    e
}),
define("menuIndicators", ["menu", "indicators/trendIndicators", "indicators/oscillatorsIndicators", "indicators/volatilityIndicators", "indicators/volumesIndicators", "indicators/otherIndicators"],
function(e) {
    e.IndicatorsMenu = function(t) {
        e.IndicatorsMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.IndicatorsMenu, e.Menu);
    var t = e.IndicatorsMenu.prototype;
    return t._render = function() {
        var t = this._Class.indexOf("MenuPanelSettings") != -1 ? "MenuPanelSettings": "";
        this._CheckedType = "NoChecked",
        this.ItemClick = e.Delegate(this, this._onIndicatorsItemClick),
        this._Items = [{
            Text: "Trend",
            Id: "trend",
            Key: "cICTrend",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Adaptive Moving Average",
                    Id: "adaptive_moving_average",
                    Data: e.AdaptiveMovingAverage
                },
                {
                    Text: "Alligator",
                    Id: "alligator",
                    Data: e.Alligator
                },
                {
                    Text: "Average Directional Movement Index",
                    Id: "average_directional_movement_index",
                    Data: e.AverageDirectionalMovementIndex
                },
                {
                    Text: "Envelopes",
                    Id: "envelopes",
                    Data: e.Envelopes
                },
                {
                    Text: "Moving Average",
                    Id: "moving_average",
                    Data: e.MovingAverage
                },
                {
                    Text: "Parabolic SAR",
                    Id: "parabolic_sar",
                    Data: e.ParabolicSAR
                },
                {
                    Text: "Price Channel",
                    Id: "price_channel",
                    Data: e.PriceChannel
                },
                {
                    Text: "Range Action Verification Index",
                    Id: "range_action_vVerification_index",
                    Data: e.RangeActionVerificationIndex
                }],
                Class: t
            })
        },
        {
            Text: "Oscillators",
            Id: "oscillators",
            Key: "cICOscillators",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Accelerator Oscillator",
                    Id: "accelerator_oscillator",
                    Data: e.AcceleratorOscillator
                },
                {
                    Text: "Aroon",
                    Id: "aroon",
                    Data: e.Aroon
                },
                {
                    Text: "Awesome Oscillator",
                    Id: "awesome_oscillator",
                    Data: e.AwesomeOscillator
                },
                {
                    Text: "Bears Power",
                    Id: "bears_power",
                    Data: e.BearsPower
                },
                {
                    Text: "Bulls Power",
                    Id: "bulls_power",
                    Data: e.BullsPower
                },
                {
                    Text: "Chaikin Oscillator",
                    Id: "chaikin_oscillator",
                    Data: e.ChaikinOscillator
                },
                {
                    Text: "Commodity Channel Index",
                    Id: "commodity_channel_index",
                    Data: e.CommodityChannelIndex
                },
                {
                    Text: "DeMarker",
                    Id: "demarker",
                    Data: e.DeMarker
                },
                {
                    Text: "Detrended Price Oscillator",
                    Id: "detrended_price_oscillator",
                    Data: e.DetrendedPriceOscillator
                },
                {
                    Text: "Gator Oscillator",
                    Id: "gator_oscillator",
                    Data: e.GatorOscillator
                },
                {
                    Text: "MACD",
                    Id: "macd",
                    Data: e.MACD
                },
                {
                    Text: "Momentum",
                    Id: "momentum",
                    Data: e.Momentum
                },
                {
                    Text: "Moving Average of Oscillator",
                    Id: "moving_average_of_oscillator",
                    Data: e.MovingAverageofOscillator
                },
                {
                    Text: "Price Oscillator",
                    Id: "price_oscillator",
                    Data: e.PriceOscillator
                },
                {
                    Text: "Rate Of Change",
                    Id: "rate_of_change",
                    Data: e.RateOfChange
                },
                {
                    Text: "Relative Strength Index",
                    Id: "relative_strength_index",
                    Data: e.RelativeStrengthIndex
                },
                {
                    Text: "Relative Vigor Index",
                    Id: "relative_vigor_index",
                    Data: e.RelativeVigorIndex
                },
                {
                    Text: "Stochastic Oscillator",
                    Id: "stochastic_oscillator",
                    Data: e.StochasticOscillator
                },
                {
                    Text: "William''s Percent Range",
                    Id: "williams_percent_range",
                    Data: e.WilliamsPercentRange
                }],
                Class: t
            })
        },
        {
            Text: "Volatility",
            Id: "volatility",
            Key: "cICVolatility",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Average True Range",
                    Id: "average_true_range",
                    Data: e.AverageTrueRange
                },
                {
                    Text: "Bollinger Bands",
                    Id: "bollinger_bands",
                    Data: e.BollingerBands
                },
                {
                    Text: "Standard Deviation",
                    Id: "standard_deviation",
                    Data: e.StandardDeviation
                }],
                Class: t
            })
        },
        {
            Text: "Volumes",
            Id: "volumes",
            Key: "cICVolumes",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Accumulation/Distribution",
                    Id: "accumulation_distribution",
                    Data: e.AccumulationDistribution
                },
                {
                    Text: "Money Flow Index",
                    Id: "money_flow_index",
                    Data: e.MoneyFlowIndex
                },
                {
                    Text: "On Balance Volume",
                    Id: "on_balance_volume",
                    Data: e.OnBalanceVolume
                }],
                Class: t
            })
        },
        {
            Text: "Others",
            Id: "other",
            Key: "cICOther",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Fractals",
                    Id: "fractals",
                    Data: e.Fractals
                },
                {
                    Text: "Ichimoku Kinko Hyo",
                    Id: "ichimoku_kinko_hyo",
                    Data: e.IchimokuKinkoHyo
                },
                {
                    Text: "Market Facilitation Index",
                    Id: "market_facilitation_index",
                    Data: e.MarketFacilitationIndex
                },
                {
                    Text: "Pivot Points",
                    Id: "pivot_points",
                    Data: e.PivotPoints
                },
                {
                    Text: "ZigZag",
                    Id: "zigzag",
                    Data: e.ZigZag
                }],
                Class: t
            })
        },
        {
            Text: "Bill Williams",
            Separator: !0,
            Id: "bill_williams",
            Key: "cMFBill",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Accelerator Oscillator",
                    Id: "accelerator_oscillator",
                    Data: e.AcceleratorOscillator
                },
                {
                    Text: "Alligator",
                    Id: "alligator",
                    Data: e.Alligator
                },
                {
                    Text: "Awesome Oscillator",
                    Id: "awesome_oscillator",
                    Data: e.AwesomeOscillator
                },
                {
                    Text: "Fractals",
                    Id: "fractals",
                    Data: e.Fractals
                },
                {
                    Text: "Gator Oscillator",
                    Id: "gator_oscillator",
                    Data: e.GatorOscillator
                },
                {
                    Text: "Market Facilitation Index",
                    Id: "market_facilitation_index",
                    Data: e.MarketFacilitationIndex
                }],
                Class: t
            })
        },
        {
            Text: "Alexander Elder",
            Id: "alexander_elder",
            Key: "cICAlexander",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Bears Power",
                    Id: "bears_power",
                    Data: e.BearsPower
                },
                {
                    Text: "Bulls Power",
                    Id: "bulls_power",
                    Data: e.BullsPower
                },
                {
                    Text: "MACD",
                    Id: "macd",
                    Data: e.MACD
                },
                {
                    Text: "Relative Strength Index",
                    Id: "relative_strength_index",
                    Data: e.RelativeStrengthIndex
                }],
                Class: t
            })
        },
        {
            Text: "Larry Williams",
            Id: "larry_williams",
            Key: "cICLarry",
            Menu: new e.Menu({
                CheckedType: "NoChecked",
                ItemClick: e.Delegate(this, this._onIndicatorsItemClick),
                Items: [{
                    Text: "Accumulation/Distribution",
                    Id: "accumulation_distribution",
                    Data: e.AccumulationDistribution
                },
                {
                    Text: "William''s Percent Range",
                    Id: "williams_percent_range",
                    Data: e.WilliamsPercentRange
                }],
                Class: t
            })
        }];
        var i = this.getLastIndicators();
        i.length > 0 && (this.getItemById("trend").Separator = !0),
        this._Items = i.concat(this._Items),
        e.IndicatorsMenu.base._render.apply(this, arguments)
    },
    t.reRender = function() {
        this.unregisterItems(),
        e.IndicatorsMenu.base.reRender.apply(this, arguments)
    },
    t.getLastIndicators = function() {
        var t = e.UserSettings.Terminal.LastIndicators;
        void 0 == t && (t = []);
        for (var i = [], s = 0; s < t.length; s++) {
            var n = t[s],
            o = this.copyMenuItem(this.getItemById(n));
            i.push(o)
        }
        return i
    },
    t._onIndicatorsItemClick = function(t) {
        var i = t.Item;
        if (e.activeChart) {
            var s = e.activeChart,
            n = i.getData(),
            o = null,
            a = new n(o);
            a.getDrawInExistsGraphicArea() && (o = s.graphicAreas[0]);
            var r = e.getDialogIndicatorSettings(a, i.getText(), o, s, !0);
            r.show()
        }
        e._menuMasterObject.hideAll()
    },
    t.show = function(t, i) {
        e.getTerminal().getChartPanel() ? e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i) : e.IndicatorsMenu.base.show.apply(this, arguments)
    },
    t = null,
    e.getIndicatorsMenu = function(t) {
        return e._indicatorsMenu && delete e._indicatorsMenu,
        e._indicatorsMenu = new e.IndicatorsMenu(t),
        e._indicatorsMenu
    },
    e
}),
define("menuWindowsLayout", ["menu"],
function(e) {
    e.layoutsCapacities = {
        layout02: 2,
        layout03: 2,
        layout04: 3,
        layout05: 3,
        layout06: 3,
        layout07: 3,
        layout08: 4,
        layout09: 4,
        layout10: 4,
        layout11: 4,
        layout12: 4,
        layout13: 9,
        layout14: 3,
        layout15: 3,
        layout16: 6,
        layout17: 6
    },
    e.WindowsLayoutMenu = function(t) {
        this._Class = "WTLayoutMenu",
        this.tabsBlockHeight = 30,
        e.WindowsLayoutMenu.base.constructor.apply(this, arguments),
        e.LangManager.register(this)
    },
    e.initClass(e.WindowsLayoutMenu, e.Menu);
    var t = e.WindowsLayoutMenu.prototype;
    return t._render = function() {
        this._Width = 220,
        this._CheckedType = "NoChecked",
        this.ItemClick = e.Delegate(this, this.onWindowsLayoutItemClick),
        this._Items = [{
            Id: "layout01",
            Class: "layout01",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout02",
            Class: "layout02",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout03",
            Class: "layout03",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "fake01",
            Class: "fakeLayout",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "fake02",
            Class: "fakeLayout",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout04",
            Class: "layout04",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout05",
            Class: "layout05",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout06",
            Class: "layout06",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout07",
            Class: "layout07",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "fake03",
            Class: "fakeLayout",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout08",
            Class: "layout08",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout09",
            Class: "layout09",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout10",
            Class: "layout10",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout11",
            Class: "layout11",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout12",
            Class: "layout12",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout13",
            Class: "layout13",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout14",
            Class: "layout14",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout15",
            Class: "layout15",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout16",
            Class: "layout16",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        },
        {
            Id: "layout17",
            Class: "layout17",
            Height: 30,
            Template: e._Templates.LayoutMenuItem
        }],
        e.WindowsLayoutMenu.base._render.apply(this, arguments);
        var t = e.htmlToDOM('<div class="WTLayoutMenuCaption"><div class="WTLayoutMenuCaptionText"></div></div>');
        this._DomNode.insertBefore(t, this._DomNode.firstChild),
        this.writeText()
    },
    t.writeText = function() {
        var t = this._DomNode.querySelector(".WTLayoutMenuCaptionText");
        t.innerHTML = e.LangManager.getStringByKey("cMFWindowsLayout") || "Charts Layout"
    },
    t._onChangeLang = function() {
        this.writeText()
    },
    t.show = function() {
        this.setSelectedLayout(),
        e.WindowsLayoutMenu.base.show.apply(this, arguments)
    },
    t.onWindowsLayoutItemClick = function(e) {
        e.stopPropagation(),
        e.preventDefault();
        var t = e.Item.getId();
        t.indexOf("fake") === -1 && this.switchLayout(t)
    },
    t.switchLayout = function(t) {
        if (e.UserSettings.ChartDialogsLayout === t || e.Charts2.getAllGraphicWindows().length <= 0) return this.hide(),
        void e._menuMasterObject.setAnyOpened(!1);
        e.Charts2.updateGraphicWindowsPause = !0;
        var i = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect();
        this["set" + t.capitalize()](i, e.getTerminal().chartDialogs),
        e.UserSettings.ChartDialogsLayout = t,
        e.Charts2.highlightSelectedTabs(),
        this.hide(),
        e._menuMasterObject.setAnyOpened(!1),
        e.updateSizeTradePanels(null, null),
        e.getTerminal().WebOffice && e.getTerminal().WebOffice.opened && e.getTerminal().getHeaderPanel().onGraphicsBtnClick(),
        e.activeChart && e.getTerminal().getChartPanel().getTradePanelButton().setPressed(e.activeChart.tradePanelModuleShown()),
        e.Charts2.updateMarksAndTradePanels(),
        e.getTerminal().saveSettings(),
        e.Charts2.updateGraphicWindowsPause = !1
    },
    t.tileHorizontalDialogs = function(e, t) {
        for (var i = t.length,
        s = e.top + 2,
        n = e.left,
        o = Math.floor(Math.sqrt(i)), a = Math.floor(i / o), r = Math.floor(e.width / o), l = (e.height - 2) / a, h = (e.height - 2) / (a + 1), d = i % o, c = o - d + 1, u = 0, g = 1; g <= o; g++) {
            var p = 0,
            m = 0;
            g < c ? (m = a, p = l) : g >= c && (m = a + 1, p = h);
            for (var _ = 1; _ <= m; _++) t[u].setTop(s),
            t[u].setLeft(n),
            t[u].setWidth(r),
            t[u].setHeight(p),
            s += p,
            u++;
            s = e.top + 2,
            n += r
        }
    },
    t.tileVerticalDialogs = function(e, t) {
        for (var i = t.length,
        s = e.top,
        n = e.left,
        o = Math.floor(Math.sqrt(i)), a = Math.floor(i / o), r = (e.height - 2) / o, l = Math.floor(e.width / a), h = Math.floor(e.width / (a + 1)), d = i % o, c = o - d + 1, u = 0, g = 1; g <= o; g++) {
            var p = 0,
            m = 0;
            g < c ? (m = a, p = l) : g >= c && (m = a + 1, p = h);
            for (var _ = 1; _ <= m; _++) t[u].setTop(s + 2),
            t[u].setLeft(n),
            t[u].setWidth(p),
            t[u].setHeight(r),
            n += p,
            u++;
            n = e.left,
            s += r
        }
    },
    t.cascadeDialogs = function(t, i) {
        for (var s = t.top,
        n = t.left,
        o = t.width - 200,
        a = t.height - 200,
        r = 0; r < e.getTerminal().chartDialogs.length; r++) i[r].setTop(s + 2),
        i[r].setLeft(n),
        i[r].setWidth(o),
        i[r].setHeight(a),
        s += 20,
        n += 20,
        (s + a > t.bottom || n + o > t.right) && (s = t.top, n = t.left)
    },
    t.setLayout01 = function(t, i) {
        e.getTerminal().showChartsAs != e.chartsMode.tabs && e.getTerminal().dialogsToTabs({
            layoutForbidden: !0
        })
    },
    t.setLayout02 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(2);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 2, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width),
            i[l].setHeight(o / 2),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            n > l && (i[l].setTop(o / 2 + a), i[l].setLeft(t.left), i[l].setWidth(t.width), i[l].setHeight(o / 2), i[l].setVisibility(!0)),
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout03 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(2);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 2, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 2),
            i[l].setHeight(o),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            n > l && (i[l].setTop(a), i[l].setLeft(t.left + t.width / 2), i[l].setWidth(t.width / 2), i[l].setHeight(o), i[l].setVisibility(!0)),
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout04 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(3);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 3, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width),
            i[l].setHeight(o / 2),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            n > l && (i[l].setTop(o / 2 + a), i[l].setLeft(t.left), i[l].setWidth(t.width / 2), i[l].setHeight(o / 2), i[l].setVisibility(!0), l++, n > l && (i[l].setTop(o / 2 + a), i[l].setLeft(t.left + t.width / 2), i[l].setWidth(t.width / 2), i[l].setHeight(o / 2), i[l].setVisibility(!0))),
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout05 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(3);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 3, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 2),
            i[l].setHeight(o / 2),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            n > l && (i[l].setTop(a), i[l].setLeft(t.left + t.width / 2), i[l].setWidth(t.width / 2), i[l].setHeight(o / 2), i[l].setVisibility(!0), l++, n > l && (i[l].setTop(o / 2 + a), i[l].setLeft(t.left), i[l].setWidth(t.width), i[l].setHeight(o / 2), i[l].setVisibility(!0))),
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout06 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(3);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 3, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 2),
            i[l].setHeight(o / 2),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            n > l && (i[l].setTop(a), i[l].setLeft(t.left + t.width / 2), i[l].setWidth(t.width / 2), i[l].setHeight(o), i[l].setVisibility(!0), l++, n > l && (i[l].setTop(o / 2 + a), i[l].setLeft(t.left), i[l].setWidth(t.width / 2), i[l].setHeight(o / 2), i[l].setVisibility(!0))),
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout07 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(3);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 3, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 2),
            i[l].setHeight(o),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            n > l && (i[l].setTop(a), i[l].setLeft(t.left + t.width / 2), i[l].setWidth(t.width / 2), i[l].setHeight(o / 2), i[l].setVisibility(!0), l++, n > l && (i[l].setTop(o / 2 + a), i[l].setLeft(t.left + t.width / 2), i[l].setWidth(t.width / 2), i[l].setHeight(o / 2), i[l].setVisibility(!0))),
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout08 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(4);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 4, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 2),
            i[l].setHeight(o / 2),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setTop(a),
                    i[l].setLeft(t.left + t.width / 2);
                    break;
                case 1:
                    i[l].setTop(o / 2 + a),
                    i[l].setLeft(t.left);
                    break;
                case 2:
                    i[l].setTop(o / 2 + a),
                    i[l].setLeft(t.left + t.width / 2)
                }
                i[l].setWidth(t.width / 2),
                i[l].setHeight(o / 2),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout09 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(4);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 4, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width),
            i[l].setHeight(2 * o / 3),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setLeft(t.left);
                    break;
                case 1:
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 2:
                    i[l].setLeft(t.left + 2 * t.width / 3)
                }
                i[l].setTop(2 * o / 3 + a),
                i[l].setWidth(t.width / 3),
                i[l].setHeight(o / 3),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout10 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(4);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 4, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 3),
            i[l].setHeight(o / 3),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 1:
                    i[l].setLeft(t.left + 2 * t.width / 3)
                }
                h < 2 ? (i[l].setTop(a), i[l].setWidth(t.width / 3), i[l].setHeight(o / 3)) : (i[l].setTop(o / 3 + a), i[l].setLeft(t.left), i[l].setWidth(t.width), i[l].setHeight(2 * o / 3)),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout11 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(4);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 4, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 3),
            i[l].setHeight(o / 3),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                if (0 == h) i[l].setTop(a),
                i[l].setLeft(t.left + t.width / 3),
                i[l].setWidth(2 * t.width / 3),
                i[l].setHeight(o);
                else {
                    switch (h) {
                    case 1:
                        i[l].setTop(a + o / 3);
                        break;
                    case 2:
                        i[l].setTop(a + 2 * o / 3)
                    }
                    i[l].setLeft(t.left),
                    i[l].setWidth(t.width / 3),
                    i[l].setHeight(o / 3)
                }
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout12 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(4);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 4, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(2 * t.width / 3),
            i[l].setHeight(o),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setTop(a);
                    break;
                case 1:
                    i[l].setTop(o / 3 + a);
                    break;
                case 2:
                    i[l].setTop(2 * o / 3 + a)
                }
                i[l].setLeft(t.left + 2 * t.width / 3),
                i[l].setWidth(t.width / 3),
                i[l].setHeight(o / 3),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout13 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(9);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 9, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 3),
            i[l].setHeight(o / 3),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setTop(a),
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 1:
                    i[l].setTop(a),
                    i[l].setLeft(t.left + 2 * t.width / 3);
                    break;
                case 2:
                    i[l].setTop(o / 3 + a),
                    i[l].setLeft(t.left);
                    break;
                case 3:
                    i[l].setTop(o / 3 + a),
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 4:
                    i[l].setTop(o / 3 + a),
                    i[l].setLeft(t.left + 2 * t.width / 3);
                    break;
                case 5:
                    i[l].setTop(2 * o / 3 + a),
                    i[l].setLeft(t.left);
                    break;
                case 6:
                    i[l].setTop(2 * o / 3 + a),
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 7:
                    i[l].setTop(2 * o / 3 + a),
                    i[l].setLeft(t.left + 2 * t.width / 3)
                }
                i[l].setWidth(t.width / 3),
                i[l].setHeight(o / 3),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout14 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(3);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 3, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width),
            i[l].setHeight(o / 3),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setTop(a + o / 3);
                    break;
                case 1:
                    i[l].setTop(a + 2 * o / 3)
                }
                i[l].setLeft(t.left),
                i[l].setWidth(t.width),
                i[l].setHeight(o / 3),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout15 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(3);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 3, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 3),
            i[l].setHeight(o),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 1:
                    i[l].setLeft(t.left + 2 * t.width / 3)
                }
                i[l].setTop(a),
                i[l].setWidth(t.width / 3),
                i[l].setHeight(o),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout16 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(6);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 6, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 2),
            i[l].setHeight(o / 3),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setTop(a),
                    i[l].setLeft(t.left + t.width / 2);
                    break;
                case 1:
                    i[l].setTop(a + o / 3),
                    i[l].setLeft(t.left);
                    break;
                case 2:
                    i[l].setTop(a + o / 3),
                    i[l].setLeft(t.left + t.width / 2);
                    break;
                case 3:
                    i[l].setTop(a + 2 * o / 3),
                    i[l].setLeft(t.left);
                    break;
                case 4:
                    i[l].setTop(a + 2 * o / 3),
                    i[l].setLeft(t.left + t.width / 2)
                }
                i[l].setWidth(t.width / 2),
                i[l].setHeight(o / 3),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.setLayout17 = function(t, i) {
        var s = this.getActiveIndex();
        e.getTerminal().showChartsAs != e.chartsMode.windows && e.getTerminal().tabsToDialogs(6);
        var n = i.length;
        if (0 != n) {
            for (var o = t.height - this.tabsBlockHeight,
            a = t.top + this.tabsBlockHeight,
            r = Math.max(n - 6, 0), l = 0; l <= r;) i[l].setTop(a),
            i[l].setLeft(t.left),
            i[l].setWidth(t.width / 3),
            i[l].setHeight(o / 2),
            i[l].setVisibility(!1),
            l == r && s >= l && i[l].setVisibility(!0),
            l++;
            for (var h = 0; n > l;) {
                switch (h) {
                case 0:
                    i[l].setTop(a),
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 1:
                    i[l].setTop(a),
                    i[l].setLeft(t.left + 2 * t.width / 3);
                    break;
                case 2:
                    i[l].setTop(a + o / 2),
                    i[l].setLeft(t.left);
                    break;
                case 3:
                    i[l].setTop(a + o / 2),
                    i[l].setLeft(t.left + t.width / 3);
                    break;
                case 4:
                    i[l].setTop(a + o / 2),
                    i[l].setLeft(t.left + 2 * t.width / 3)
                }
                i[l].setWidth(t.width / 3),
                i[l].setHeight(o / 2),
                i[l].setVisibility(!0),
                h++,
                l++
            }
            e.getTerminal().chartDialogs[s].setActive()
        }
    },
    t.collapseSplitters = function(t) {
        e.getTerminal().getQuoteSplitter().getIsCollapsed() != t && e.getTerminal().getQuoteSplitter().setIsCollapse(t),
        e.getTerminal().getTradeSplitter().getIsCollapsed() != t && e.getTerminal().getTradeSplitter().setIsCollapse(t)
    },
    t.setFullScreen = function() {
        e.getTerminal().showChartsAs != e.chartsMode.tabs && e.getTerminal().dialogsToTabs(),
        1 == e.getTerminal().getQuoteSplitter().getIsCollapsed() && 1 == e.getTerminal().getTradeSplitter().getIsCollapsed() ? this.collapseSplitters(!1) : this.collapseSplitters(!0)
    },
    t.getActiveIndex = function() {
        return e.getTerminal().showChartsAs != e.chartsMode.windows ? e.getTerminal().getSwiperCharts().getSelectedPageIndex() : e.Charts2.getActiveChartDialogIndex()
    },
    t.setSelectedLayout = function() {
        for (var t = e.UserSettings.ChartDialogsLayout,
        i = this._Items.length,
        s = 0; s < i; s++) this._Items[s].getId() == t ? this._Items[s].addCSSClass("Active") : this._Items[s].removeCSSClass("Active")
    },
    t = null,
    e.getWindowsLayoutMenu = function() {
        return e._WindowsLayoutMenu || delete e._WindowsLayoutMenu,
        e._WindowsLayoutMenu = new e.WindowsLayoutMenu,
        e._WindowsLayoutMenu
    },
    e
}),
define("headerPanel", ["button", "dialogNewOrder", "dialogPendingOrder", "dialogReport", "menuNewChart", "menuTimeFrame", "menuOffset", "menuChartSettings", "menuLines", "menuIndicators", "menuWindowsLayout"],
function(e) {
    e.HeaderPanel = function(t) {
        e.HeaderPanel.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.TraderData.register(this)
    },
    e.initClass(e.HeaderPanel, e.BaseControl);
    var t = e.HeaderPanel.prototype;
    return t.getMainMenuButton = function() {
        return this._mainMenuBtn
    },
    t.getAccountMenuButton = function() {
        return this._accountMenuButton
    },
    t.getTradeMenuButton = function() {
        return this._tradeMenuButton
    },
    t.getSettingsMenuButton = function() {
        return this._settingsMenuButton
    },
    t.getViewMenuButton = function() {
        return this._viewMenuButton
    },
    t.getHelpMenuButton = function() {
        return this._helpMenuButton
    },
    t.getChartMenuButton = function() {
        return this._chartMenuButton
    },
    t.getProfileMenuButton = function() {
        return this._profileMenuButton
    },
    t._changeLogotype = function(t) {
        var i = this.getDomNode(),
        s = i.querySelector("img"),
        n = "./settings/menuButton";
        switch (n = e.Browser.IsTablet ? n: "." + n, t) {
        case "beige_color_scheme":
            s.src = n + "/lightLogo.png";
            break;
        case "black_color_scheme":
            s.src = n + "/darkLogo.png"
        }
    },
    t._render = function() {
        if (e.HeaderPanel.base._render.apply(this, arguments), this.addCSSClass("WTHeaderPanel"), !e.Browser.IsMobile) {
            var t = e.htmlToDOM('<div class="mainLogoContainer"><div class="vertical"><img /></div></div>'),
            i = t.querySelector("img"),
            s = this.getDomNode();
            i.classList.add("bzzaLogo"),
            s.appendChild(t)
        }
        this._chartsLayoutBtn = new e.Button({
            ParentNode: this._DomNode,
            Class: e.Config.TerminalSettings.IntegratedWebOfficeEnabled ? "WindowsLayoutBtnOffice": "WindowsLayoutBtn",
            Tooltip: "Windows layout",
            TooltipKey: "cMFWindowsLayout",
            TooltipPosition: "BottomLeft",
            TooltipOffset: {
                X: 20,
                Y: 5
            },
            ImgWidth: "20px",
            ImgHeight: "20px",
            Menu: e.getWindowsLayoutMenu()
        }),
        this._colorSchemeBtn = new e.Button({
            ParentNode: this._DomNode,
            Class: "ColorSchemeBtn",
            ImgWidth: "22px",
            ImgHeight: "22px",
            TooltipKey: "cMFGWSettings",
            Tooltip: "Color scheme",
            TooltipPosition: "BottomLeft",
            TooltipOffset: {
                X: 20,
                Y: 5
            },
            Width: 30,
            Height: 30,
            Menu: this.getColorMenu()
        }),
        this._accountMenuButton = new e.Button({
            ParentNode: this._DomNode,
            Text: "Account",
            Key: "cOSAccount",
            Class: "TableButton HeaderMenuButton",
            Template: e._Templates.AccountButton,
            Height: 30,
            Menu: this.getAccountMenu()
        }),
        e.Config.TerminalSettings && e.Config.TerminalSettings.IntegratedWebOfficeEnabled && (this._profileMenuButton = new e.Button({
            ParentNode: this._DomNode,
            HoveredClass: null,
            Class: "ProfileBtn",
            ImageList: e.IconSVGList,
            ImageListRow: 17,
            ImageListCol: 0,
            Menu: this.getProfileMenu()
        }), this._myProfileButton = new e.Button({
            ParentNode: this._DomNode,
            HoveredClass: null,
            Width: 120,
            Class: "MyProfileBtn",
            Text: "Profile",
            Key: "cMFProfile",
            Click: e.Delegate(this, this.onMyProfileBtnClick)
        }), this._graphicsButton = new e.Button({
            ParentNode: this._DomNode,
            HoveredClass: null,
            Width: 120,
            Class: "GraphicsBtn",
            Text: "Graphics",
            Key: "cMobileChart",
            Click: e.Delegate(this, this.onGraphicsBtnClick)
        }), this._graphicsButton.setPressed(!0)),
        this.getAccountMenu().getItemById("hidden").setVisible(!1),
        this._changeLogotype(e.UserSettings.Terminal.ColorScheme)
    },
    t.setProfileData = function() {},
    t.onGraphicsBtnClick = function(t) {
        e.Config.TerminalSettings && e.Config.TerminalSettings.IntegratedWebOfficeEnabled && (this._myProfileButton.setPressed(!1), this._graphicsButton.setPressed(!0), e.WebOfficeController.hideWebOffice())
    },
    t.onMyProfileBtnClick = function(t) {
        this._graphicsButton.setPressed(!1),
        this._myProfileButton.setPressed(!0),
        e.WebOfficeController.showWebOffice()
    },
    t.setColorScheme = function(t) {
        var i = t.Item._Id;
        i !== e.UserSettings.Terminal.ColorScheme && this._changeColorScheme(i)
    },
    t._changeColorScheme = function(t) {
        e.saveColorScheme(t),
        e.ColorThemeChanger.changeColorThemeNotify(t),
        e.saveUserSettings(),
        this._changeLogotype(t)
    },
    t.checkedMenuItem = function(t) {
        for (var i = e.UserSettings.Terminal.ColorScheme ? e.UserSettings.Terminal.ColorScheme: "black_color_scheme", s = 0; s < t.length; s++) if (t[s]._Id === i) {
            t[s].setChecked(!0);
            break
        }
    },
    t.getColorMenu = function() {
        if (this._colorSchemeBtn) return this._colorSchemeBtn._Menu;
        var t = new e.Menu({
            Width: 110,
            CheckedType: "Checked",
            ItemClick: e.Delegate(this, this.setColorScheme),
            Items: [{
                Text: "Dark",
                Id: "black_color_scheme",
                Key: "cMobileColorSchemeDark"
            },
            {
                Text: "Ivory",
                Id: "beige_color_scheme",
                Key: "cMobileColorSchemeIvory"
            }]
        });
        return this.checkedMenuItem(t._Items),
        t
    },
    t.getViewMenu = function() {
        if (this._viewMenuButton) return this._viewMenuButton._Menu;
        var t = new e.Menu({
            Width: 200,
            CheckedType: "NoChecked",
            ItemClick: e.Delegate(this, this._onViewMenuItemClick),
            Items: [{
                Text: "Cascade",
                Id: "Cascade",
                Key: "cMFArrangeCascade"
            },
            {
                Text: "Tile Horizontally",
                Id: "Tile_Horizontally",
                Key: "cMFArrangeHorizontal"
            },
            {
                Text: "Tile Vertically",
                Id: "Tile_Vertically",
                Key: "cMFArrangeVertical",
                Separator: !0
            },
            {
                Text: e._Terminal.showChartsAs == e.chartsMode.tabs ? "Restore": "Maximize",
                Id: "Maximize",
                Key: e._Terminal.showChartsAs == e.chartsMode.tabs ? "cMFGWRestore": "cMFGWMaximize"
            },
            {
                Text: "Full Screen",
                Id: "Full_screen",
                Key: "cMFFullScreen",
                HotkeyText: "Shift+F11"
            }]
        });
        return t
    },
    t._onChartMenuOpen = function() {
        for (var t = this._chartMenuButton._Menu._Items,
        i = e.SymbolsData.getSelectedSymbols(), s = 0; s < t.length; s++)"New_chart" !== t[s]._Id ? (this._chartMenuButton._Menu.getItemById(t[s]._Id).setEnabled(0 !== e.Charts2._graphicWindows.length), 0 !== e.Charts2._graphicWindows.length && ("ZoomOut" == t[s]._Id && 1 == e.Charts2._graphicWindows[0].options.scale && this._chartMenuButton._Menu.getItemById("ZoomOut").setEnabled(!1), "ZoomIn" == t[s]._Id && 32 == e.Charts2._graphicWindows[0].options.scale && this._chartMenuButton._Menu.getItemById("ZoomIn").setEnabled(!1)), i.length <= 0 && (this._chartMenuButton._Menu.getItemById("Change_symbol").setEnabled(!1), this._chartMenuButton._Menu.getItemById("add_symbol").setEnabled(!1))) : this._chartMenuButton._Menu.getItemById(t[s]._Id).setEnabled( !! e.SymbolsData.isShowSymbols());
        if (this._chartMenuButton._Menu.getItemById("Change_symbol").getMenu()._render(), this._chartMenuButton._Menu.getItemById("add_symbol").getMenu()._render(), e.getTerminal().useOnlyOptions) {
            var n = e.getTerminal().useOnlyOptions && 0 === e.OptionsSettings.getUseOptionsCount();
            this._chartMenuButton._Menu.getItemById("New_chart").setEnabled(n)
        }
    },
    t.getChartMenu = function() {
        return this._chartMenuButton || (this._chartMenu = new e.Menu({
            CheckedType: "NoChecked",
            Items: [{
                Text: "New chart",
                Id: "New_chart",
                Key: "cMFNewChart",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 24,
                ImageListCol: 0,
                Menu: this.getNewChartMenu()
            },
            {
                Text: "Change symbol",
                Id: "Change_symbol",
                Key: "cMFEditSymbols",
                Menu: this.getChangeChartMenu()
            },
            {
                Text: "Add symbol",
                Id: "add_symbol",
                Key: "cMFAddSymbols",
                Menu: this.getAddChartMenu()
            },
            {
                Separator: !0,
                Text: "Refresh",
                Id: "Refresh",
                Key: "cMFRefreshVisible"
            },
            {
                Text: "Timeframes",
                Id: "Timeframes",
                Key: "cMFPeriods",
                Menu: new e.TimeFrameMenu
            },
            {
                Text: "Style",
                Id: "Style",
                Key: "cMFStyle",
                Menu: new e.ChartStyleMenu
            },
            {
                Separator: !0,
                Text: "Crosshair",
                Id: "Crosshair",
                Key: "cMFCrossCursor",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 3,
                ImageListCol: 0
            },
            {
                Text: "Indicators",
                Id: "Indicators",
                Key: "cMFIndicators",
                Menu: new e.IndicatorsMenu
            },
            {
                Text: "Lines",
                Id: "Lines",
                Key: "cMFLines",
                Menu: new e.LinesMenu,
                Separator: !0
            },
            {
                Text: "Volumes",
                Id: "Volumes",
                Key: "cICVolumes"
            },
            {
                Text: "Levels",
                Id: "levels",
                Key: "cMFLevels",
                Separator: !0
            },
            {
                Text: "Offset",
                Id: "Offset",
                Key: "cMFOffset",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 5,
                ImageListCol: 0,
                Menu: new e.OffsetMenu
            },
            {
                Text: "Zoom Out",
                Id: "ZoomOut",
                Key: "cMFZoomOut",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 7,
                ImageListCol: 0
            },
            {
                Text: "Zoom In",
                Id: "ZoomIn",
                Key: "cMFZoomIn",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 8,
                ImageListCol: 0,
                Separator: !0
            },
            {
                Text: "Chart Settings",
                Id: "ChartSettings",
                Key: "cMFChartSettings",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 9,
                ImageListCol: 0,
                Menu: new e.ChartSettingsMenu
            }]
        })),
        this._chartMenu
    },
    t.getAddChartMenu = function() {
        return this._addChartMenu || (this._addChartMenu = new e.AddChartMenu),
        this._addChartMenu
    },
    t.getChangeChartMenu = function() {
        return this._changeChartMenu || (this._changeChartMenu = new e.ChangeChartMenu),
        this._changeChartMenu
    },
    t.getNewChartMenu = function() {
        return this._newChartMenu || (this._newChartMenu = new e.NewChartMenu({
            NewChart: e.Delegate(e._Terminal, e._Terminal.createNewChart)
        })),
        this._newChartMenu
    },
    t._onViewMenuItemClick = function(t) {
        e.getWindowsLayoutMenu().onWindowsLayoutItemClick(t)
    },
    t._onChartMenuItemClick = function(t) {
        var i = t.Item.getId(),
        s = e.activeChart;
        switch (i) {
        case "levels":
            var n = e.getDialogLevels();
            n.show(s.charts[0].getGraphicArea());
            break;
        case "Volumes":
            t.Item._ParentMenu.hide(),
            s.charts[0].showVolume(),
            e.Charts2.saveOpenedCharts();
            break;
        case "Refresh":
            e.getChartMenu()._refreshChart();
            break;
        case "ZoomIn":
            e.getChartSettingsMenu()._onZoomInClick();
            break;
        case "ZoomOut":
            e.getChartSettingsMenu()._onZoomOutClick();
            break;
        case "Crosshair":
            t.Item._ParentMenu.hide();
            var o = e.activeChart;
            o.setCrosshair(!o._canvas.classList.contains("cross"))
        }
    },
    t.getProfileMenu = function() {
        return this._profileMenuButton ? this._profileMenu: (this._profileMenu = new e.Menu({
            CheckedType: "NoChecked",
            ItemClick: e.Delegate(this, this._onProfileMenuItemClick),
            Items: e.Config.BrokersSettings.ProfileMenuItems || []
        }), e.LangManager.register(this._profileMenu), this._profileMenu._onChangeLang = function() {
            for (var t = this.getItems(), i = 0; i < t.length; i++) t[i].setText(t[i]._Translations[e.LangManager.getLang()])
        },
        this._profileMenu._onChangeLang(), this._profileMenu)
    },
    t._onProfileMenuItemClick = function(t) {
        t.Item._WebOfficePage ? (this._graphicsButton.setPressed(!1), this._myProfileButton.setPressed(!0), e.WebOfficeController.setWebOfficePage(t.Item._WebOfficePage), e.WebOfficeController.showWebOffice()) : t.Item._Link && window.open(t.Item._Link, "_blank")
    },
    t.setTradeMenuItems = function() {
        var t = [{
            Text: "Buy / Sell",
            Key: "CBTNNeworder",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 17,
            ImageListCol: 0,
            Id: "buy_sell",
            HotkeyText: "F9"
        },
        {
            Text: "Pending order",
            Key: "cMFPendingOrder",
            Id: "pending_order",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 18,
            ImageListCol: 0
        },
        {
            Text: "Report",
            Key: "cMFReport",
            Id: "report",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 19,
            ImageListCol: 0
        }];
        return t
    },
    t.getTradeMenu = function() {
        return this._tradeMenuButton ? this._tradeMenuButton.getMenu() : new e.Menu({
            CheckedType: "NoChecked",
            ItemClick: e.Delegate(this, this._onTradeMenuItemClick),
            Items: this.setTradeMenuItems()
        })
    },
    t.changePassDisable = function() {
        e.investorAccount === !0 && this._accountMenuButton._Menu._Items[0].setVisible(!1)
    },
    t.getAccountMenu = function() {
        return this._accountMenuButton ? this._accountMenuButton.getMenu() : new e.Menu({
            CheckedType: "NoChecked",
            ItemClick: e.Delegate(this, this._onAccountMenuItemClick),
            Class: "BigMenu",
            Width: 200,
            Items: e.Config.TerminalSettings && e.Config.TerminalSettings.IntegratedWebOfficeEnabled ? [{
                Text: "Change Account",
                Key: "cMFChangeAccount",
                Id: "ChangeAccount",
                Menu: this.getChangeAccountMenu()
            },
            {
                Separator: !0,
                Text: "Account information",
                Key: "cCIFCaption",
                Id: "AccountInfo"
            },
            {
                Text: "New account",
                Key: "cNCBFCaption",
                Id: "NewAccount",
                Separator: !0
            },
            {
                Text: "Sign out",
                Key: "cBTNDisconnect",
                Id: "SignOut"
            }] : [{
                Text: "Change password",
                Key: "cMFEditPAssword",
                Id: "ChangePass"
            },
            {
                Separator: !0,
                Text: "Account information",
                Key: "cCIFCaption",
                Id: "AccountInfo"
            },
            {
                Text: "Sign in",
                Key: "cBTNConnect",
                Id: "SignIn"
            },
            {
                Text: "Open demo",
                Key: "cMFOpenDemo",
                Id: "OpenDemo"
            },
            {
                Text: "Open live",
                Key: "cMFOpenLive",
                Id: "OpenReal"
            },
            {
                Text: "",
                Key: "",
                Id: "hidden",
                Visible: !1,
                Separator: !0
            },
            {
                Text: "Language",
                Key: "Language",
                Id: "Language",
                Menu: {
                    Width: 150,
                    Class: "BigMenu",
                    ItemClick: e.Delegate(this, this._onLanguageClick),
                    Items: e.LangManager.getLanguageItems()
                }
            },
            {
                Text: "About",
                Key: "cMFAbout",
                Id: "About"
            },
            {
                Text: "Sign out",
                Key: "cBTNDisconnect",
                Id: "SignOut"
            }]
        })
    },
    t.updateAccountBtnText = function() {
        var t = e.TraderData.getTraderInfo();
        if (t) {
            var i = "demo" === t.region ? t.id + " (Demo)": t.id;
            this._accountMenuButton.setText(e.LangManager.getStringByKey("cOSAccount") + ": " + i)
        }
    },
    t.getSettingsMenu = function() {
        return this._settingsMenuButton || (this._settingsMenu = new e.Menu({
            CheckedType: "NoChecked",
            BeforeOpen: e.Delegate(this,
            function() {
                var t = this._settingsMenu.getItems()[0];
                e.getTerminal().useOnlyOptions ? t.setText(e.LangManager.getStringByKey("cMFOptionSettingsList") || "Option list") : t.setText(e.LangManager.getStringByKey("cMFSymbolChoice") || "Symbol list")
            }),
            ItemClick: e.Delegate(this, this._onSettingsMenuItemClick),
            Items: [{
                Text: "Symbol list",
                Key: "cMFSymbolChoice",
                Id: "SimbolList"
            },
            {
                Text: "Option list",
                Key: "cMFOptionSettingsList",
                Id: "OptionList"
            },
            {
                Text: "Color Scheme",
                Id: "Color_Scheme",
                Key: "cMFGWSettings",
                Menu: this.getColorMenu()
            }]
        })),
        this._settingsMenu
    },
    t.getHelpMenu = function() {
        if (!this._helpMenuButton) return new e.Menu({
            CheckedType: "NoChecked",
            ItemClick: e.Delegate(this, this._onHelpMenuItemClick),
            Items: [{
                Text: "About",
                Key: "cMFAbout",
                Id: "About"
            }]
        })
    },
    t._onHelpMenuItemClick = function(t) {
        var i = !1,
        s = t.Item.getId();
        switch (s) {
        case "About":
            e.getAboutDialog().show();
            break;
        default:
            i = !0
        }
    },
    t._onLanguageClick = function(t) {
        e.LangManager.setLang(t.Item.getKey()),
        e._menuMasterObject.hideAll(),
        this.updateAccountBtnText()
    },
    t._onSettingsMenuItemClick = function(t) {
        var i = !1,
        s = t.Item.getId();
        switch (s) {
        case "SimbolList":
            e.getSymbolListDialog().show();
            break;
        case "OptionList":
            e.getOptionsSettingsListDialog().show();
            break;
        case "Language":
            i = !0;
            break;
        default:
            i = !0
        }
    },
    t.getChangeAccountMenu = function() {
        return this._changeAccountMenu = new e.Menu({
            CheckedType: "NoChecked",
            ItemClick: e.Delegate(this, this._onChangeAccountMenuItemClick)
        }),
        this.updateChangeAccountMenuItems(),
        this._changeAccountMenu
    },
    t.updateChangeAccountMenuItems = function() {
        for (var t = [], i = 0; i < e.WebOfficeController.accounts.length; i++) {
            var s = e.WebOfficeController.accounts[i];
            t.push({
                Text: s.account_number + " " + s.account_server,
                Id: i
            })
        }
        this._changeAccountMenu.setItems(t),
        this._changeAccountMenu.updateMenuItems()
    },
    t._onChangeAccountMenuItemClick = function(t) {
        var i = t.Item.getId(),
        s = e.WebOfficeController.accounts[i],
        n = {};
        n.Login = s.account_number,
        n.Password = s.account_password;
        for (var o = 0; o < e.Config.Servers.length; o++) if (e.Config.Servers[o].Name == s.account_server) {
            n.Server = e.Config.Servers[o];
            break
        }
        e.requester.authorization(n, !1, !1, !1)
    },
    t._onTradeMenuItemClick = function(t) {
        var i = !1,
        s = t.Item.getId();
        switch (s) {
        case "buy_sell":
            var n = e.getDialogNewOrder();
            if (e.activeChart) {
                var o = e.activeChart.getMainSymbolName();
                n.setCurrentQuote(o)
            }
            n.show();
            break;
        case "pending_order":
            var n = e.getDialogPendingOrder();
            if (e.activeChart) {
                var o = e.activeChart.getMainSymbolName();
                n.setCurrentQuote(o)
            }
            n.show();
            break;
        case "buy_option":
            var a = null;
            e.activeChart && (a = e.activeChart.getMainSymbolName()),
            e.getTerminal().showBuyOptionDialogByChart(e.OptionsSettings.getSelectedOptionSettings());
            break;
        case "report":
            e.getDialogReport().show();
            break;
        default:
            i = !0
        }
    },
    t.openDemoDialog = function() {
        e.Config.BrokersSettings.OpenDemoLink ? "" === e.Config.BrokersSettings.OpenDemoLink ? e.getOpenDemoDialog().show() : window.open(e.Config.BrokersSettings.OpenDemoLink, "_blank") : e.getOpenDemoDialog().show()
    },
    t._onAccountMenuItemClick = function(t) {
        var i = !1,
        s = t.Item.getId(),
        n = e.getTerminal();
        switch (s) {
        case "SignIn":
            e.AuthModule.show(0);
            break;
        case "OpenDemo":
            e.AuthModule.show(1);
            break;
        case "SignOut":
            e.Browser.IsMobile || this.onGraphicsBtnClick(),
            hidePreloader(),
            n.signOut();
            break;
        case "AccountInfo":
            e.getAccountInfoDialog().show();
            break;
        case "ChangePass":
            e.getChangePassDialog().show(e.TraderData._TraderInfo.id, "");
            break;
        case "OpenReal":
            n.getSwiperTrade().onOpenLiveAccountBtnClick(),
            t.Item._ParentMenu.hide();
            break;
        case "NewAccount":
            e.WebOfficeController.setWebOfficePage("register"),
            this.onMyProfileBtnClick();
            break;
        case "About":
            e.getAboutDialog().show();
            break;
        default:
            i = !0
        }
    },
    t.blockTradeItems = function() {
        var t = this.getTradeMenu().getItemById("buy_sell"),
        i = this.getTradeMenu().getItemById("pending_order");
        e.SymbolsData.isShowSymbols() ? (t.setEnabled(!0), i.setEnabled(!0)) : (t.setEnabled(!1), i.setEnabled(!1))
    },
    t._onGetSymbols = function() {
        this.blockTradeItems()
    },
    t._onGetTraderInfo = function() {},
    t._onGetGroupInfo = function() {
        var t = this.getAccountMenu(),
        i = e.Config.BrokersSettings.isVisibleOpenDemo,
        s = t.getItemById("OpenDemo");
        e.Config.TerminalSettings && e.Config.TerminalSettings.IntegratedWebOfficeEnabled || t.getItemById("OpenReal").setVisible(e.TraderData.traderIsDemo()),
        void 0 != i && 1 != e.Config.TerminalSettings.IntegratedWebOfficeEnabled && s.setVisible(i)
    },
    t = null,
    e
}),
define("menuChartStyle", ["menu"],
function(e) {
    e.ChartStyleMenu = function(t) {
        e.ChartStyleMenu.base.constructor.apply(this, arguments)
    },
    e.initClass(e.ChartStyleMenu, e.Menu);
    var t = e.ChartStyleMenu.prototype;
    return t._render = function() {
        this._CheckedType = "Checked",
        this.ItemClick = e.Delegate(this, this._onStyleItemClick),
        this.BeforeOpen = e.Delegate(this, this._onStyleMenuOpen),
        this._BigIcons === !0 || this._Class && this._Class.indexOf("HorizontalMenu") > -1 ? this._Items = [{
            Text: "Candlesticks",
            Id: "candlesticks",
            Key: "cMFJCandle",
            ImageList: e.IconSVGList,
            ImageListRow: 22,
            ImageListCol: 0,
            Data: e.barStyles.jCandle,
            Class: "CandleSticks"
        },
        {
            Text: "Bar chart",
            Id: "bar_chart",
            Key: "cMFGBar",
            ImageList: e.IconSVGList,
            ImageListRow: 23,
            ImageListCol: 0,
            Data: e.barStyles.gBar,
            Class: "BarChart"
        },
        {
            Text: "Chart line",
            Id: "chart_line",
            Key: "cMFLine",
            ImageList: e.IconSVGList,
            ImageListRow: 24,
            ImageListCol: 0,
            Data: e.barStyles.line,
            Class: "ChartLine"
        }] : this._Items = [{
            Text: "Candlesticks",
            Id: "candlesticks",
            Key: "cMFJCandle",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 32,
            ImageListCol: 1,
            Data: e.barStyles.jCandle,
            Class: "CandleSticks"
        },
        {
            Text: "Bar chart",
            Id: "bar_chart",
            Key: "cMFGBar",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 33,
            ImageListCol: 1,
            Data: e.barStyles.gBar,
            Class: "BarChart"
        },
        {
            Text: "Chart line",
            Id: "chart_line",
            Key: "cMFLine",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 34,
            ImageListCol: 1,
            Data: e.barStyles.line,
            Class: "ChartLine"
        }],
        e.ChartStyleMenu.base._render.apply(this, arguments)
    },
    t.show = function(t, i) {
        e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i)
    },
    t.hide = function(t) {
        e.ChartStyleMenu.base.hide.apply(this, arguments)
    },
    t._onStyleMenuOpen = function() {
        var t = this.getItemById("bar_chart");
        t.setChecked(e.activeChart.options.barStyle == t._Data),
        t = this.getItemById("candlesticks"),
        t.setChecked(e.activeChart.options.barStyle == t._Data),
        t = this.getItemById("chart_line"),
        t.setChecked(e.activeChart.options.barStyle == t._Data)
    },
    t._onStyleItemClick = function(t) {
        e.activeChart.options.barStyle = t.Item._Data,
        e.UserSettings.WindowsTemplates.barStyle = e.activeChart.options.barStyle,
        e.saveUserSettings(),
        e._menuMasterObject.hideAll()
    },
    t = null,
    e.getChartStyleMenu = function(t) {
        return e._chartStyleMenu && delete e._chartStyleMenu,
        e._chartStyleMenu = new e.ChartStyleMenu(t),
        e._chartStyleMenu
    },
    e
}),
define("menuAdditionalPanel", ["menu"],
function(e) {
    e.menuAdditionalPanel = function(t) {
        e.menuAdditionalPanel.base.constructor.apply(this, arguments)
    },
    e.initClass(e.menuAdditionalPanel, e.Menu);
    var t = e.menuAdditionalPanel.prototype;
    return t._render = function() {
        this._CheckedType = "NoChecked",
        this._BeforeOpen = e.Delegate(this, this._onChartMenuOpen),
        this.ItemClick = e.Delegate(this, this._onChartMenuItemClick),
        this._Items = [{
            Text: "New chart",
            Id: "New_chart",
            Key: "cMFNewChart",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 24,
            ImageListCol: 0,
            Menu: this.getNewChartMenu({
                Class: "MenuPanelSettings"
            })
        },
        {
            Text: "Timeframes",
            Id: "Timeframes",
            Key: "cMFPeriods",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 0,
            ImageListCol: 0,
            Menu: new e.TimeFrameMenu({
                Class: "MenuPanelSettings"
            })
        },
        {
            Text: "Indicators",
            Id: "Indicators",
            Key: "cMFIndicators",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 1,
            ImageListCol: 0,
            Menu: new e.IndicatorsMenu({
                Class: "MenuPanelSettings"
            })
        },
        {
            Text: "Lines",
            Id: "Lines",
            Key: "cMFLines",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 28,
            ImageListCol: 0,
            Menu: new e.LinesMenu({
                Class: "HorizontalMenu Lines MenuPanelSettings"
            })
        },
        {
            Text: "Crosshair",
            Id: "Crosshair",
            Key: "cMFCrossCursor",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 3,
            ImageListCol: 0
        },
        {
            Text: "Style",
            Id: "Style",
            Key: "cMFStyle",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 4,
            ImageListCol: 0,
            Menu: new e.ChartStyleMenu({
                Class: "HorizontalMenu ChartStyle MenuPanelSettings"
            })
        },
        {
            Text: "To current price",
            Id: "ToCurrentPrice",
            Key: "cToCurrentPrice",
            ImageList: e.IconSVGList,
            ImageListRow: 6,
            ImageListCol: 0
        },
        {
            Text: "Zoom Out",
            Id: "ZoomOut",
            Key: "cMFZoomOut",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 7,
            ImageListCol: 0
        },
        {
            Text: "Zoom In",
            Id: "ZoomIn",
            Key: "cMFZoomIn",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 8,
            ImageListCol: 0
        },
        {
            Text: "Chart Settings",
            Id: "ChartSettings",
            Key: "cMFChartSettings",
            ImageList: e.MenuIconSVGList,
            ImageListRow: 9,
            ImageListCol: 0,
            Menu: e.getChartSettingsMenu({
                Class: "MenuPanelSettings"
            })
        }],
        e.menuAdditionalPanel.base._render.apply(this, arguments)
    },
    t.reRender = function() {
        this.unregisterItems(),
        e.menuAdditionalPanel.base.reRender.apply(this, arguments)
    },
    t.show = function(t, i) {
        e.getTerminal().getChartPanel().showMenuFromChartPanelOrNormally(this, t, i)
    },
    t._onChartMenuItemClick = function(t) {
        var i = t.Item.getId(),
        s = e.activeChart;
        switch (i) {
        case "levels":
            var n = e.getDialogLevels();
            n.show(s.charts[0].getGraphicArea());
            break;
        case "Volumes":
            t.Item._ParentMenu.hide(),
            s.charts[0].showVolume(),
            e.Charts2.saveOpenedCharts();
            break;
        case "Refresh":
            e.getChartMenu()._refreshChart();
            break;
        case "ZoomIn":
            e.getChartSettingsMenu()._onZoomInClick();
            break;
        case "ZoomOut":
            e.getChartSettingsMenu()._onZoomOutClick();
            break;
        case "Crosshair":
            t.Item._ParentMenu.hide();
            var o = e.activeChart;
            o.setCrosshair(!o._canvas.classList.contains("cross"));
            break;
        case "ToCurrentPrice":
            e.activeChart.goToCurrentPrice()
        }
    },
    t.getNewChartMenu = function(t) {
        return this._newChartMenu || (t = t || {},
        t.NewChart = e.Delegate(e.getTerminal(), e.getTerminal().createNewChart), this._newChartMenu = new e.NewChartMenu(t)),
        this._newChartMenu
    },
    t.updateVisibleItems = function(e) {
        for (var t = this._Items.length - e,
        i = 0; i < this._Items.length; i++) i < t ? this._Items[i].setVisible(!1) : this._Items[i].setVisible(!0);
        this._Items[this._Items.length - 1].getMenu().setMenuSource(this)
    },
    t = null,
    e.getAdditionalPanelMenu = function(t) {
        return e._additionalPanelMenu && delete e._additionalPanelMenu,
        e._additionalPanelMenu = new e.menuAdditionalPanel(t),
        e._additionalPanelMenu
    },
    e
}),
define("chartPanel", ["button", "menuChartStyle", "menuNewChart", "menuTimeFrame", "menuOffset", "menuChartSettings", "menuLines", "menuIndicators", "menuAdditionalPanel"],
function(e) {
    e.ChartPanel = function(t) {
        e.ChartPanel.base.constructor.apply(this, arguments)
    },
    e.initClass(e.ChartPanel, e.BaseControl);
    var t = e.ChartPanel.prototype;
    return t._render = function() {
        e.ChartPanel.base._render.apply(this, arguments),
        this.addCSSClass("WTChartPanel"),
        this._showRightPanel = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Trade panel",
            TooltipKey: "cMFTradePanel",
            ImageList: e.IconSVGList,
            TooltipPosition: "Left",
            investorModeDependency: !0,
            ImageListRow: 51,
            ImageListCol: 0,
            Click: e.Delegate(this, this._onShowRightPanelClick)
        }),
        this._newChartBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "New chart",
            TooltipKey: "cMFNewChart",
            ImageList: e.IconSVGList,
            TooltipPosition: "Left",
            ImageListRow: 50,
            ImageListCol: 0,
            Menu: e.getNewChartMenu({
                Class: "MenuPanelSettings"
            })
        }),
        this._timeFrameBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Timeframes",
            TooltipKey: "cMFPeriods",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 0,
            ImageListCol: 0,
            Menu: e.getTimeFrameMenu({
                Class: "MenuPanelSettings"
            })
        }),
        this._indicatorsBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Indicators",
            TooltipKey: "cMFIndicators",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 1,
            ImageListCol: 0,
            Menu: e.getIndicatorsMenu({
                Class: "MenuPanelSettings"
            })
        }),
        this._linesBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Lines",
            TooltipKey: "cMFLines",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 2,
            ImageListCol: 0,
            Menu: e.getLinesMenu({
                Class: "HorizontalMenu Lines MenuPanelSettings",
                BigIcons: !0
            })
        }),
        this._crosshairBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Crosshair",
            TooltipKey: "cMFCrossCursor",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 3,
            ImageListCol: 0,
            Click: e.Delegate(this, this._onCrosshairClick)
        }),
        this._styleBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Style",
            TooltipKey: "cMFStyle",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 4,
            ImageListCol: 0,
            Menu: e.getChartStyleMenu({
                Class: "HorizontalMenu ChartStyle MenuPanelSettings",
                BigIcons: !1
            })
        }),
        this._autoscrollBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "To current price",
            TooltipKey: "cToCurrentPrice",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 6,
            ImageListCol: 0,
            Click: e.Delegate(this, this._onAutoScrollClick)
        }),
        this._increaseChartBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Zoom Out",
            TooltipKey: "cMFZoomOut",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 7,
            ImageListCol: 0,
            Click: e.Delegate(this, this._onIncreaseClick)
        }),
        this._reduceChartBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Zoom In",
            TooltipKey: "cMFZoomIn",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 8,
            ImageListCol: 0,
            Click: e.Delegate(this, this._onReduceClick)
        }),
        this._settingsChartBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Chart Settings",
            TooltipKey: "cMFChartSettings",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 9,
            ImageListCol: 0,
            Menu: e.getChartSettingsMenu({
                Class: "MenuPanelSettings"
            })
        }),
        this._extraMenuBtn = new e.Button({
            ParentNode: this._DomNode,
            Tooltip: "Hidden elements",
            TooltipKey: "cTHidenElems",
            TooltipPosition: "Left",
            ImageList: e.IconSVGList,
            ImageListRow: 52,
            ImageListCol: 0,
            Menu: e.getAdditionalPanelMenu({
                Class: "MenuPanelSettings"
            })
        }),
        this._showRightPanel.investorModeDependency = !0,
        this._onButtonBlock(0 != e.SymbolsData.getSelectedSymbols().length),
        this._extraMenuBtn._DomNode.style.display = "none",
        this._btnCollection = [this._settingsChartBtn, this._reduceChartBtn, this._increaseChartBtn, this._autoscrollBtn, this._styleBtn, this._crosshairBtn, this._linesBtn, this._indicatorsBtn, this._timeFrameBtn, this._newChartBtn, this._showRightPanel]
    },
    t._onButtonBlock = function(e) {
        this._newChartBtn.setEnabled(e)
    },
    t.getCrosshairButton = function() {
        return this._crosshairBtn
    },
    t.updateCrosshairAndButton = function(t) {
        var i = e.activeChart;
        i && (i.getCursorIsCrosshair() && !t ? (i.setCrosshair(!0), this._crosshairBtn.setPressed(!0)) : t ? (this._crosshairBtn.setPressed(!this._crosshairBtn._Pressed), i.setCrosshair(this._crosshairBtn._Pressed)) : (i.setCrosshair(!1), this._crosshairBtn.setPressed(!1)))
    },
    t._onCrosshairClick = function() {
        this.updateCrosshairAndButton(!0),
        e.saveUserSettings()
    },
    t._onAutoScrollClick = function() {
        e.activeChart.goToCurrentPrice()
    },
    t._onChangePeriod = function(e) {},
    t.showExtraBtn = function() {
        var e = parseInt(this._DomNode.style.height);
        if (!this._DomNode.classList.contains("EmptyChartPanel")) if (e < 385) {
            for (var t = Math.ceil((385 - e) / 35) + 1, i = 0, s = this._btnCollection.length; i < s; i++) i >= t ? this._btnCollection[i]._DomNode.style.display = "block": this._btnCollection[i]._DomNode.style.display = "none";
            this._extraMenuBtn._DomNode.style.display = "block",
            this._extraMenuBtn._DomNode.style.position = "absolute",
            this._extraMenuBtn._DomNode.style.bottom = "5px",
            this._extraMenuBtn.getMenu().updateVisibleItems(t)
        } else {
            for (var t = 0,
            i = 0,
            s = this._btnCollection.length; i < s; i++) this._btnCollection[i]._DomNode.style.display = "block";
            this._extraMenuBtn._DomNode.style.display = "none"
        }
    },
    t.getTradePanelButton = function() {
        return this._showRightPanel
    },
    t._onShowRightPanelClick = function(t) {
        var i = e.activeChart.canShowTradePanel(),
        s = e.getTerminal();
        e._menuMasterObject.hideAll(),
        e.updateSizeTradePanels(e.activeChart, i),
        t.Sender.setPressed(i),
        s.saveSettings()
    },
    t._onReduceClick = function() {
        var t = e.activeChart;
        t.zoomIn()
    },
    t._onIncreaseClick = function() {
        var t = e.activeChart;
        t.zoomOut()
    },
    t.showMenuFromChartPanelOrNormally = function(t, i, s) {
        if (t.getMenuSource() instanceof e.Button && t.getMenuSource().getParentNode().className.indexOf("WTChartPanel") != -1) {
            var n = parseInt(this._DomNode.style.left) + t.getWidth() + 41,
            o = parseInt(this._DomNode.style.top) + t.getMenuSource().getDomNode().offsetTop;
            if (e.Menu.prototype.show.apply(t, [n, o]), t instanceof e.NewChartMenu) {
                var a = e.getTerminal().getNewChartBtnOnSwiperCharts();
                a && a.setPressed(!1)
            }
        } else e.Menu.prototype.show.apply(t, [i, s]),
        t instanceof e.NewChartMenu && this._newChartBtn.setPressed(!1)
    },
    t.adjustView = function() {
        var t = e.getTerminal().getSwiperCharts()._tabsBlock.clientHeight,
        i = e.getTerminal().getHeaderPanel().getDomNode().clientHeight;
        e.getTerminal().getStatusBar().getDomNode().clientHeight;
        this._DomNode.style.top = i + t - 2 + "px",
        this.showOrHideGraphicButtons()
    },
    t.showOrHideGraphicButtons = function() {
        e.Browser.IsMobile || (null == e.activeChart ? (this._showRightPanel._DomNode.style.display = "none", this._newChartBtn._DomNode.style.display = "none", this._reduceChartBtn._DomNode.style.display = "none", this._increaseChartBtn._DomNode.style.display = "none", this._settingsChartBtn._DomNode.style.display = "none", this._crosshairBtn._DomNode.style.display = "none", this._styleBtn._DomNode.style.display = "none", this._timeFrameBtn._DomNode.style.display = "none", this._linesBtn._DomNode.style.display = "none", this._indicatorsBtn._DomNode.style.display = "none", this._extraMenuBtn._DomNode.style.display = "none", this._autoscrollBtn._DomNode.style.display = "none", this._DomNode.style.borderTop = "", this._DomNode.style.borderLeft = "", this._DomNode.classList.remove("NotEmptyChartPanel"), this._DomNode.classList.add("EmptyChartPanel")) : (this._showRightPanel._DomNode.style.display = "", this._newChartBtn._DomNode.style.display = "", this._reduceChartBtn._DomNode.style.display = "", this._increaseChartBtn._DomNode.style.display = "", this._settingsChartBtn._DomNode.style.display = "", this._crosshairBtn._DomNode.style.display = "", this._styleBtn._DomNode.style.display = "", this._timeFrameBtn._DomNode.style.display = "", this._linesBtn._DomNode.style.display = "", this._indicatorsBtn._DomNode.style.display = "", this._autoscrollBtn._DomNode.style.display = "", this.showExtraBtn(), this._DomNode.classList.remove("EmptyChartPanel"), this._DomNode.classList.add("NotEmptyChartPanel")), e.investorAccount && this._showRightPanel._DomNode.classList.add("Disabled"))
    },
    t = null,
    e
}),
define("splitter", ["control"],
function(e) {
    e.Splitter = function(t) {
        this._Content1 = null,
        this._Content2 = null,
        this._Orientation = "Vertical",
        this._CollapsedContentTitles = [],
        this._TitleKeys = [],
        this._MinPanelSize = 2,
        this._IsCollapse = !1,
        this._c1BoxHeight = null,
        this._c2BoxHeight = null,
        this._c2BoxWidth = null,
        this.minContent1W = 140,
        this._minContent1H = "MSIE" === e.Browser.Browser || "Trident" === e.Browser.Browser ? 183 : 153,
        this._minContent2H = 110,
        this._Template = e._Templates.Splitter,
        this._defineEvents(["ChangeSize", "ChangeIsCollapse"]),
        e.Splitter.base.constructor.apply(this, arguments),
        e.LangManager.register(this)
    },
    e.initClass(e.Splitter, e.BaseControl);
    var t = e.Splitter.prototype;
    return t._onChangeLang = function() {
        this.translateCollapsedContentTitles()
    },
    t._render = function() {
        e.Splitter.base._render.apply(this, arguments),
        this._binds = {
            resizerTouchstart: this._onResizerTouchStart.bind(this),
            resizerMousedown: this._onResizerMousedown.bind(this),
            resizerMouseup: this._onResizerMouseup.bind(this),
            resizerMousemove: this._onResizerMousemove.bind(this),
            collapseBtnClick: this._onCollapseBtnClick.bind(this)
        },
        this._collapseBtnNode = this._DomNode.querySelector(".WTSplitterCollapseBtn"),
        e.addEvent(this._collapseBtnNode, "click", this._binds.collapseBtnClick, !0),
        this._resizerNode = this._DomNode.querySelector(".WTSplitterResizer"),
        e.addEvent(this._resizerNode, "touchstart", this._binds.resizerTouchstart),
        e.addEvent(this._resizerNode, "mousedown", this._binds.resizerMousedown),
        this._phantom = this._DomNode.querySelector(".WTSplitterPhantom"),
        this._phantom.style.display = "none",
        this.addCSSClass(this._Orientation),
        this._content1Node = this._DomNode.querySelector(".WTSplitterContent1"),
        this._content2Node = this._DomNode.querySelector(".WTSplitterContent2"),
        this.setContent1(this._Content1),
        this.setContent2(this._Content2),
        this.setIsCollapse(this._IsCollapse)
    },
    t.translateCollapsedContentTitles = function() {
        if (this._IsCollapse && this._resizerNode.childNodes.length > 0) for (var t = 0; t < this._resizerNode.childNodes.length; t++) this._resizerNode.childNodes[t].innerHTML = e.LangManager.getStringByKey(this._TitleKeys[t]) || this._CollapsedContentTitles[t]
    },
    t.addToNode = function(t) {
        e.Splitter.base.addToNode.apply(this, arguments),
        this.redraw()
    },
    t._onCollapseBtnClick = function(t) {
        this.setIsCollapse(!this._IsCollapse),
        e.getTerminal().saveSettings()
    },
    t.setIsCollapse = function(t) {
        function i(e) {
            var t, i = 50,
            s = 38;
            switch (e) {
            case "header":
                t = i;
                break;
            case "statusBar":
                t = s
            }
            return {
                getDomNode: function() {
                    return {
                        offsetHeight: t
                    }
                }
            }
        }
        e.Charts2.updateGraphicWindowsPause = !0;
        var s = e.getTerminal(),
        n = "Horizontal" == this._Orientation,
        o = n ? this._content2Node: this._content1Node;
        if (this._IsCollapse = !!t, this._IsCollapse) if (this._widthPercentage = 100 - this._content2Node.offsetWidth / this._Width * 100, this._heightPercentage = this._content2Node.offsetHeight / this._Height * 100, this.addCSSClass("IsCollapse"), e.removeEvent(this._resizerNode, "mousedown", this._binds.resizerMousedown), e.removeEvent(this._resizerNode, "touchend", this._binds.resizerMousedown), e.addEvent(this._resizerNode, "click", this._binds.collapseBtnClick, !0), o.style.display = "none", n) {
            if (this._content1Node.style.height = this._Height - this._resizerNode.offsetHeight + "px", this._chartPanel) {
                var a = this._Height - this._resizerNode.offsetHeight - 37;
                this._chartPanel.setHeight(a),
                this._chartPanel.adjustView()
            }
            this._Content1 instanceof e.BaseControl && (this._c1BoxHeight = this._c1BoxHeight || this._Content1.getHeight(), this._c2BoxHeight = this._Content2.getHeight(), this._Content1.setHeight(this._Height - this._resizerNode.offsetHeight - 5)),
            this._c1BoxHeight = this._c1BoxHeight || this._content1Node.getBoundingClientRect().height - 2
        } else this._Content2 instanceof e.BaseControl && (this._c2BoxWidth = this._c2BoxWidth || this._Content2.getWidth() + 15, this._Content2.setWidth(this._Width - 78), this._chartPanel && (this._chartPanel._DomNode.style.left = document.querySelector(".WTSplitterContent2").offsetLeft - 23 + "px")),
        this._c2BoxWidth = this._c2BoxWidth || this._content2Node.getBoundingClientRect().width - 2;
        else if (this.removeCSSClass("IsCollapse"), e.removeEvent(this._resizerNode, "click", this._binds.collapseBtnClick), e.addEvent(this._resizerNode, "mousedown", this._binds.resizerMousedown), e.addEvent(this._resizerNode, "touchend", this._binds.resizerMousedown), this.removeCollapsedTitlesFromDOM(), o.style.display = "", n) {
            var r = this._content2Node.offsetHeight,
            l = 5,
            h = e.UserSettings.Terminal.Splitter1Height || 0,
            d = this._resizerNode.offsetHeight || 5,
            c = this._heightPercentage || e.UserSettings.Terminal.HeightPercentage,
            u = this._minContent1H,
            g = this._minContent2H,
            p = this._Height;
            if (p <= 0 || e.valueIsEmpty(p)) {
                var m = s.getHeaderPanel() || i("header"),
                _ = s.getStatusBar() || i("statusBar"),
                y = m.getDomNode().offsetHeight,
                S = _.getDomNode().offsetHeight;
                p = window.innerHeight - (y + S)
            } (r <= 0 || e.valueIsEmpty(r)) && (r = p - h),
            p - r - d < g ? p - g - d >= u && (r = g) : p - r - d < u && (r = p - u - d),
            r < g && (e.valueIsEmpty(c) || isNaN(c) ? r = g: (r = p / 100 * c, r = r < g ? g: r));
            var f = p - r;
            isFinite(h) && (f = f <= 0 || e.valueIsEmpty(f) ? h: f),
            this._content1Node.style.height = f + "px",
            this._content2Node.style.height = r - l + "px";
            var v = this._Content1,
            C = this._Content2,
            b = this._chartPanel;
            if (v instanceof e.BaseControl && (v.setHeight(f), b)) {
                var T = e.getTerminal().showChartsAs == e.chartsMode.windows ? 3 : 32;
                b.setHeight(f - T),
                b.showExtraBtn()
            }
            C instanceof e.BaseControl && C.setHeight(r - 2),
            this._c1BoxHeight = null,
            this._c2BoxHeight = r,
            this._Height = p
        } else {
            var P = this._content1Node.offsetWidth,
            D = e.UserSettings.Terminal.SwiperQuotesWidth || 0,
            I = this._widthPercentage || e.UserSettings.Terminal.WidthPercentage,
            w = this.minContent1W,
            M = this._Width;
            v = this._Content1,
            C = this._Content2,
            b = this._chartPanel;
            var O;
            O = P < w ? D: P,
            O = O < w && I ? M / 100 * I - 45 : O,
            O = O < w ? w: O,
            this._content1Node.style.width = O + "px",
            this._content2Node.style.width = M - O - 45 + "px",
            v instanceof e.BaseControl && v.setWidth(O),
            C instanceof e.BaseControl && (C.setWidth(M - O - 45), e.getTerminal().getTableQuotes().resizeHeader(), b && (b.getDomNode().style.left = document.querySelector(".WTSplitterContent2").offsetLeft - 35 + "px")),
            this._c2BoxWidth = null
        }
        if (this.setCollapsedTitles(), this.redraw(), this.ChangeIsCollapse.fire({
            Sender: this,
            c1BoxHeight: this._c1BoxHeight,
            c2BoxWidth: this._c2BoxWidth,
            c2BoxHeight: this._c2BoxHeight,
            widthPercentage: this._widthPercentage,
            heightPercentage: this._heightPercentage
        }), e.WebOfficeController && e.WebOfficeController.fixWindow(), e.Charts2.updateGraphicWindowsPause = !1, s.showChartsAs == e.chartsMode.tabs) {
            var L = e.activeChart,
            k = L ? L.tradePanelModule: null;
            e.updateSizeTradePanels(L, k ? k.showed: null)
        } else e.updateSizeTradePanels(e.Charts2.getAllGraphicWindows(), null)
    },
    t.refreshContentNode = function() {
        this._DomNode.offsetHeight > 0 && (this._content2Node.style.height = this._DomNode.offsetHeight - this._content1Node.offsetHeight - this._resizerNode.offsetHeight + 1 + "px")
    },
    t.removeCollapsedTitlesFromDOM = function() {
        for (; this._resizerNode.firstChild;) this._resizerNode.removeChild(this._resizerNode.firstChild)
    },
    t.setCollapsedTitles = function() {
        if (!this._resizerNode.querySelector(".CollapsedContentTitle")) if (this._IsCollapse) for (var t = 0; t < this._CollapsedContentTitles.length; t++) {
            var i = document.createElement("div"),
            s = this; !
            function(e) {
                "Horizontal" == s._Orientation ? i.addEventListener("click",
                function() {
                    this._Content2.setSelectedPage(e)
                }.bind(s)) : 1 === s._CollapsedContentTitles.length && "Options" === s._CollapsedContentTitles[e] ? i.addEventListener("click",
                function() {
                    this._Content1.setSelectedPage(1, null, !0)
                }.bind(s)) : i.addEventListener("click",
                function() {
                    this._Content1.setSelectedPage(e, null, !0)
                }.bind(s))
            } (t),
            i.className = "CollapsedContentTitle",
            i.innerHTML = e.LangManager.getStringByKey(this._TitleKeys[t]) || this._CollapsedContentTitles[t],
            this._resizerNode.appendChild(i)
        } else this.removeCollapsedTitlesFromDOM()
    },
    t.redrawVerticalCollapsedTitles = function() {
        if (this._IsCollapse && "Vertical" == this._Orientation && this._resizerNode.childNodes.length > 0) for (var e = 64,
        t = 0; t < this._resizerNode.childNodes.length; t++) this._resizerNode.childNodes[t].style.top = e + "px",
        e += 70
    },
    t.getIsCollapsed = function() {
        return this._IsCollapse
    },
    t.getHeight = function() {
        return this._Height
    },
    t.getContent1Height = function() {
        return this._Content1.getHeight()
    },
    t._onResizerTouchStart = function(e) {
        this._IsCollapse || this._onResizerMousedown(e)
    },
    t._onResizerMousedown = function(t) {
        t && t.preventDefault();
        var i = this._DomNode.getBoundingClientRect(),
        s = this._phantom.style,
        n = "Horizontal" == this._Orientation;
        n ? this._resizerNode.getBoundingClientRect().left + 1 : this._resizerNode.getBoundingClientRect().top + 1;
        s.top = n ? t.clientY + "px": i.top + "px",
        s.left = n ? "5px": t.clientX + "px",
        s.width = n ? i.width + "px": "",
        s.height = n ? "": i.height + "px",
        s.display = "",
        document.body.style.cursor = n ? "row-resize !important": "col-resize !important",
        this._startResize = !0,
        e.Browser.IsTablet ? (e.addEvent(document.body, "touchmove", this._binds.resizerMousemove), e.addEvent(document.body, "touchend", this._binds.resizerMouseup)) : (e.addEvent(document.body, "mousemove", this._binds.resizerMousemove), e.addEvent(document.body, "mouseup", this._binds.resizerMouseup)),
        e.WebOfficeController.hideIFrame()
    },
    t.redraw = function() {
        if (this._content1Node) {
            this._IsCollapse && "Horizontal" == this._Orientation && (this._content1Node.style.height = this._Height - this._resizerNode.offsetHeight + "px");
            var t = "Horizontal" == this._Orientation,
            i = this._content1Node.getBoundingClientRect(),
            s = this._DomNode.getBoundingClientRect();
            this.redrawVerticalCollapsedTitles(),
            this._resizerNode.style.height = t ? "": (this._Height ? this._Height - 3 : i.height) + "px",
            this._resizerNode.style.width = t ? (this._Width ? this._Width: i.width - 3) + "px": "",
            this._resizerNode.style.top = t ? s.top + i.height + "px": s.top + 1 + "px";
            var n = t ? 0 : i.left + i.width - 1;
            n = n < 1 ? "": n + "px",
            this._resizerNode.style.left = n,
            "Horizontal" == this._Orientation ? this._IsCollapse ? (this._collapseBtnNode.style.top = s.top + (i.height + 1) + "px", this._collapseBtnNode.style.left = s.left + i.width - 32 + "px") : (this._collapseBtnNode.style.top = s.top + (i.height + 5) + "px", this._collapseBtnNode.style.left = s.left + i.width - 32 + "px") : "Vertical" == this._Orientation && (this._IsCollapse ? (this._collapseBtnNode.style.top = s.top + (t ? i.height + 5 : 1) + "px", this._collapseBtnNode.style.left = s.left + i.width - 17 + "px") : (this._collapseBtnNode.style.top = s.top + 1 + "px", this._collapseBtnNode.style.left = s.left + i.width - 30 + "px")),
            this._content1Node && this._Content1 instanceof e.BaseControl && this._Content1._collapseBtnNode && (this._Content1._collapseBtnNode.style.height = Math.min(i.height, this._collapseBtnStandardHeight) + "px")
        }
    },
    t.getResizerNode = function() {
        return this._resizerNode
    },
    t.getCollapseBtnNode = function() {
        return this._collapseBtnNode
    },
    t.canMoveUpHorisontalResizer = function(t) {
        if (!e.valueIsEmpty(t)) return t - 50 > this._minContent1H
    },
    t._onResizerMousemove = function(t) {
        if (!this._IsCollapse) {
            var i, s;
            if (t.clientX && t.clientY ? (i = t.clientX, s = t.clientY) : t.targetTouches && (i = t.targetTouches[0].clientX, s = t.targetTouches[0].clientY), this._startResize) {
                t.preventDefault();
                var n, o = this._DomNode.getBoundingClientRect(),
                a = {
                    top: 0,
                    left: 0
                };
                a.width = o.left + this._DomNode.offsetWidth - 1,
                a.height = o.top + this._DomNode.offsetHeight - 1,
                a.left += 1,
                a.top += 1,
                n = this._phantom.style,
                "Horizontal" != this._Orientation ? n.left = i - o.left + "px": s < e.DisplaySize.getHeight() - 58 && this.canMoveUpHorisontalResizer(s) === !0 && (n.top = s + "px")
            }
        }
    },
    t._onResizerMouseup = function(t) {
        if (!this._IsCollapse) {
            e.Charts2.updateGraphicWindowsPause = !0,
            e.Browser.IsTablet ? (e.removeEvent(document.body, "touchmove", this._binds.resizerMousemove), e.removeEvent(document.body, "touchend", this._binds.resizerMouseup)) : (e.removeEvent(document.body, "mousemove", this._binds.resizerMousemove), e.removeEvent(document.body, "mouseup", this._binds.resizerMouseup)),
            document.body.style.cursor = "",
            this._phantom.style.display = "none",
            this._startResize = !1;
            var i = this._DomNode.getBoundingClientRect(),
            s = "Horizontal" == this._Orientation,
            n = s ? "Height": "Width",
            o = s ? parseInt(this._phantom.style.top, 10) - i.top: parseInt(this._phantom.style.left, 10);
            if (s ? (o = Math.max(o, this._MinPanelSize), this._chartPanel.setHeight(o - 32)) : (o = Math.min(o, this._Width - 200), this._chartPanel._DomNode.style.left = o + 10 + "px"), this._content1Node) {
                if (this._content1Node.style[n.toLowerCase()] = o + "px", this._Content1 instanceof e.BaseControl) {
                    var a = this._content2Node.offsetWidth;
                    if (this._Content1["set" + n](o), !s) {
                        if (this._IsCollapse) return e.UserSettings.Terminal.WidthPercentage = this._widthPercentage = 100 - a / this._Width * 100,
                        void e.getTerminal().saveSettings();
                        e.UserSettings.Terminal.WidthPercentage = this._widthPercentage = this._content1Node.offsetWidth / this._Width * 100
                    }
                }
                if (this._Content2 instanceof e.BaseControl) {
                    var r = s ? this._Height - this._resizerNode.clientHeight + 3 - o: this._Width - o - 46;
                    this._content2Node.style.width = r + "px",
                    this._content2Node.style.height = this._DomNode.offsetHeight - this._content1Node.offsetHeight - this._resizerNode.offsetHeight + 1 + "px",
                    this._Content2["set" + n](r),
                    !this._IsCollapse && s && (this._heightPercentage = this._content2Node.offsetHeight / this._Height * 100, e.UserSettings.Terminal.HeightPercentage = this._heightPercentage)
                }
            }
            this.redraw(),
            this._chartPanel.showExtraBtn(),
            null !== e.activeChart && e.Charts2.redrawActiveChart(),
            e.updateSizeTradePanels(null, null),
            e.WebOfficeController.fixWindow(),
            e.WebOfficeController.showIFrame(),
            e.getTerminal().saveSettings(),
            e.Charts2.updateGraphicWindowsPause = !1
        }
    },
    t.setContent1 = function(t) {
        this._Content1 = t,
        this._content1Node && (this._content1Node.innerHTML = "", this._Content1 instanceof e.BaseControl ? this._Content1.addToNode(this._content1Node) : this._content1Node.innerHTML = this._Content1 || "")
    },
    t.setContent2 = function(t) {
        this._Content2 = t,
        this._content2Node && (this._content2Node.innerHTML = "", this._Content2 instanceof e.BaseControl ? this._Content2.addToNode(this._content2Node) : this._content2Node.innerHTML = this._Content2 || "")
    },
    t.setWidth = function(t) {
        e.Splitter.base.setWidth.apply(this, arguments);
        var i = "Horizontal" == this._Orientation,
        s = this._Width,
        n = this._Width;
        i || (s = this._IsCollapse ? 0 : this._Content1 && this._Content1._Width ? this._Content1._Width: this._content1Node ? this._content1Node.getBoundingClientRect().width: 0, n = this._IsCollapse ? this._Width - s - 55 : this._Width - s - 45 - 1),
        s && this._Content1 instanceof e.BaseControl && this._Content1.setWidth(s),
        n && this._Content2 instanceof e.BaseControl && (this._content2Node && (this._content2Node.style.width = n + "px"), this._Content2.setWidth(n)),
        this.redraw(),
        this.ChangeSize.fire({
            Sender: this,
            Prop: "Width",
            Content1Width: s,
            Content2Width: n
        })
    },
    t.setHeight = function(t) {
        e.Splitter.base.setHeight.apply(this, arguments);
        var i = "Horizontal" == this._Orientation,
        s = this._Height,
        n = this._Height;
        i && (s = this._IsCollapse ? this._Height - 6 : this._Content1 && this._Content1._Height ? this._Content1._Height: this._content1Node ? this._content1Node.getBoundingClientRect().height: 0, n = this._IsCollapse ? 0 : this._Height - s - 2),
        s && this._Content1 instanceof e.BaseControl && (this._Content1.setHeight(s), i && this._IsCollapse && this._Height > 0 && this._c2BoxHeight > 0 && (this._c1BoxHeight = this._Height - this._c2BoxHeight)),
        n && this._Content2 instanceof e.BaseControl && this._Content2.setHeight(n),
        this.redraw(),
        this.ChangeSize.fire({
            Sender: this,
            Prop: "Height",
            Content1Heigth: s,
            Content2Heigth: n
        })
    },
    t = null,
    e
}),
define("dialogSymbolInfo", ["dialog", "divTable"],
function(e) {
    e.DialogSymbolInfo = function(t) {
        this._Symbol = t,
        e.DialogSymbolInfo.base.constructor.apply(this, arguments)
    },
    e.initClass(e.DialogSymbolInfo, e.Dialog);
    var t = e.DialogSymbolInfo.prototype;
    return t._render = function() {
        this._Width = 444,
        this._ImageList = e.MainImageList,
        this._ImageListRow = 1,
        this._ImageListCol = 16,
        this._WithBlock = !1,
        this._Content = e.htmlToDOM(e._Templates.DialogSymbolInfoContent),
        this._descriptionNode = this._Content.querySelector(".SymbolDescription"),
        this._details = {
            Symbol: {
                Key: "cQASSymbol",
                PropName: "_SymbolName",
                Title: "Symbol"
            },
            Spread: {
                Key: "cWCTQuoteSpread",
                PropName: "_Spread",
                Title: "Spread"
            },
            SwapLong: {
                Key: "cWCTQuoteSvopLong",
                PropName: "_SwapLong",
                Title: "Swap long"
            },
            SwapShort: {
                Key: "cWCTQuoteSvopShort",
                PropName: "_SwapShort",
                Title: "Swap short"
            },
            Commission: {
                Key: "cQASCommission",
                PropName: "_Commission",
                Title: "Commission"
            },
            CalculationType: {
                Key: "cQASType",
                PropName: "_CalculationType",
                Title: "Type"
            },
            Digits: {
                Key: "cWCTQuoteAccuracyPrice",
                PropName: "_Digits",
                Title: "Digits"
            },
            GapLevel: {
                Key: "cWCTQuoteGaplevel",
                PropName: "_GapLevel",
                Title: "Gap level"
            },
            StopLevel: {
                Key: "cWCTQuoteStopLevel",
                PropName: "_StopLevel",
                Title: "Stop level"
            }
        };
        var t, i, s, n, o = this._Content.querySelector(".SymbolDetails");
        for (t in this._details) i = o.querySelector("." + t),
        s = e.htmlToDOM('<div class="Lbl"></div>'),
        n = e.htmlToDOM('<div class="Val"></div>'),
        i.appendChild(s),
        i.appendChild(n),
        this._details[t].Lbl = s,
        this._details[t].Val = n;
        this._dayOfWeekKeys = {
            Sunday: {
                Key: "cSGOSunday",
                Id: "1"
            },
            Monday: {
                Key: "cSGOMonday",
                Id: "2"
            },
            Tuesday: {
                Key: "cSGOTuesday",
                Id: "3"
            },
            Wednesday: {
                Key: "cSGOWednesday",
                Id: "4"
            },
            Thursday: {
                Key: "cSGOThursday",
                Id: "5"
            },
            Friday: {
                Key: "cSGOFriday",
                Id: "6"
            },
            Saturday: {
                Key: "cSGOSaturday",
                Id: "7"
            }
        },
        this._table = new e.DivTable({
            Template: e._Templates.TableSymbolInfo,
            HeaderTemplate: e._Templates.TableSymbolInfoHeader,
            RowTemplates: [e._Templates.TableSymbolInfoRow],
            TableType: "Levels",
            HeaderColumns: {
                DayOfWeek: {
                    Title: "Day of week",
                    Key: "cSGODayOfWeek",
                    Id: "DayOfWeek",
                    IsVisible: !0,
                    Index: 0
                },
                OpenTime: {
                    Title: "Open time",
                    Key: "cSGOOpenTime",
                    Id: "OpenTime",
                    IsVisible: !0,
                    Index: 1
                },
                CloseTime: {
                    Title: "Close time",
                    Key: "cSGOCloseTime",
                    Id: "CloseTime",
                    IsVisible: !0,
                    Index: 2
                }
            },
            AutoSizes: [1, 1, 1],
            IsAutoSize: !0,
            IsSizingEnabled: !0,
            Selectable: !1
        });
        var a = e.htmlToDOM(e._Templates.SymbolInfoContent),
        r = a.querySelector(".tableContent"),
        l = this._table.getDomNode();
        l.style.width = "100%",
        r.appendChild(l),
        this._Content.querySelector(".SymbolInfoTable").appendChild(a),
        this._table.fillTable(this.getDaysData()),
        e.DialogSymbolInfo.base._render.apply(this, arguments),
        this.addCSSClass("DialogSymbolInfo"),
        this.setSymbol(this._Symbol),
        this._registerToLangManager = !0
    },
    t.getDaysData = function() {
        var t = [];
        for (var i in this._dayOfWeekKeys) t.push({
            rowId: this._dayOfWeekKeys[i].Id,
            cellValues: {
                Id: this._dayOfWeekKeys[i].Id,
                DayOfWeek: e.LangManager.getStringByKey(this._dayOfWeekKeys[i].Key) || i,
                OpenTime: "00:00",
                CloseTime: "00:00"
            }
        });
        return t
    },
    t.setSymbol = function(t) {
        this._Symbol = t,
        this.setTitle(this._Symbol ? this._Symbol._SymbolName: ""),
        this._descriptionNode.innerHTML = this._Symbol ? this._Symbol._Description: "";
        var i, s, n;
        for (i in this._details) s = this._details[i],
        s.Lbl.innerHTML = (e.LangManager.getStringByKey(s.Key) || s.Title) + ":",
        n = "",
        this._Symbol && (n = this._Symbol[s.PropName], "SwapLong" != i && "SwapShort" != i || (n = e.numberFormat(n, 2, ".", " ") || 0)),
        s.Val.innerHTML = n || 0;
        this.setTradeSession()
    },
    t.setTradeSession = function() {
        if (this._Symbol) {
            var t = this._table.getRows();
            switch (e.getTerminal().platformType) {
            case e.PlatformTypes.ptUTIP:
                var i, s, n, o = e.SymbolsData.getSymbolsGroupById(this._Symbol.getSymbolGroupID()).tradeMode;
                for (i in t) s = t[i],
                n = o[i],
                s.setValue("OpenTime", n.open, !0),
                s.setValue("CloseTime", n.close, !0);
                break;
            case e.PlatformTypes.ptMT:
                var a = this._Symbol.getSessions();
                for (i = 0; i < a.length; i++) {
                    s = t[i + 1];
                    var r = a[i],
                    l = (r.openHour.length < 2 ? "0": "") + r.openHour + ":" + (r.openMin.length < 2 ? "0": "") + r.openMin,
                    h = (r.closeHour.length < 2 ? "0": "") + r.closeHour + ":" + (r.closeMin.length < 2 ? "0": "") + r.closeMin;
                    s.setValue("OpenTime", l, !0),
                    s.setValue("CloseTime", h, !0)
                }
            }
        }
    },
    t.show = function() {
        e.DialogSymbolInfo.base.show.apply(this, arguments),
        this._table.resizeHeader()
    },
    t._onChangeLang = function() {
        e.DialogSymbolInfo.base._onChangeLang.apply(this, arguments);
        var t, i;
        for (t in this._details) i = this._details[t],
        i.Lbl.innerHTML = (e.LangManager.getStringByKey(i.Key) || i.Title) + ":";
        this._table.fillTable(this.getDaysData()),
        this.setTradeSession()
    },
    t = null,
    e.getSymbolInfoDialog = function(t) {
        return e._symbolInfoDialog || (e._symbolInfoDialog = new e.DialogSymbolInfo(t)),
        t && e._symbolInfoDialog.setSymbol(t),
        e._symbolInfoDialog
    },
    e
}),
define("tableQuotes", ["container", "symbolsData", "dialogSymbolInfo", "divTable"],
function(e) {
    function t() {
        return {
            Symbol: {
                Title: "Symbol",
                Key: "cQASSymbol",
                Id: "Symbol",
                IsVisible: !0,
                Index: 0
            },
            Bid: {
                Title: "Bid",
                Key: "cWCTQuoteSell",
                Id: "Bid",
                IsVisible: !0,
                Index: 1
            },
            Ask: {
                Title: "Ask",
                Key: "cWCTQuoteBuy",
                Id: "Ask",
                IsVisible: !0,
                Index: 2
            },
            Spread: {
                Title: "Spread",
                Key: "cWCTQuoteSpread",
                Id: "Spread",
                IsVisible: !1,
                Index: 3
            },
            SwapShort: {
                Title: "Swap short",
                Key: "cWCTQuoteSvopShort",
                Id: "SwapShort",
                IsVisible: !1,
                Index: 4
            },
            SwapLong: {
                Title: "Swap long",
                Key: "cWCTQuoteSvopLong",
                Id: "SwapLong",
                IsVisible: !1,
                Index: 5
            },
            Time: {
                Title: "Time",
                Key: "cWCTQuoteTime",
                Id: "Time",
                IsVisible: !1,
                Index: 6
            },
            Margin: {
                Title: "Margin",
                Key: "cWCTTradePositionsFormMarginByPosition",
                Id: "Margin",
                IsVisible: !1,
                Index: 7
            }
        }
    }
    e.TableQuotes = function(t) {
        this._Symbols = e.SymbolsData.getSelectedSymbols(),
        e.TableQuotes.base.constructor.apply(this, arguments),
        this.DoubleClickRow.add(e.Delegate(this, this._onRowDoubleClick)),
        this.ClickRow.add(e.Delegate(this, this._onRowClick)),
        e.TraderData.register(this),
        e.SymbolsData.register(this)
    },
    e.initClass(e.TableQuotes, e.DivTable);
    var i = e.TableQuotes.prototype;
    return i._render = function() {
        this._Template = e._Templates.TableQuotes,
        this._RowTemplates = [e._Templates.TableQuotesRow],
        this._HeaderTemplate = e._Templates.TableQuotesHeader,
        this._HeaderColumns = t(),
        this._ContextMenu = this.getContextMenu(),
        this._AutoSizes = [1, 1, 1, 1, 1, 1, 1, 1],
        this._RowTooltipLocation = "Symbol",
        this._IsAutoSize = null == e.UserSettings.TableQuotes.AutoArrage || e.UserSettings.TableQuotes.AutoArrage,
        this._TableType = "Quotes",
        this._DraggableRows = !0,
        this._IsSizingEnabled = !0,
        this._Sizes = e.UserSettings.TableQuotes.ColumnSizes,
        this.AutoSizeChange = e.Delegate(this, this._onAutoArrangeChange),
        this._CustomScrollEnabled = !0,
        this._ContextMenu.getItemById("New_market_order").investorModeDependency = !0,
        this._ContextMenu.getItemById("New_pending_order").investorModeDependency = !0,
        e.TableQuotes.base._render.apply(this, arguments)
    },
    i.getContextMenu = function() {
        return this._ContextMenu ? this._ContextMenu: new e.Menu({
            BeforeOpen: e.Delegate(this, this._onContextMenuOpen),
            CheckedType: "NoChecked",
            MenuSource: e._TableQuotes,
            ItemClick: e.Delegate(this, this._onItemClick),
            Items: [{
                Text: "New market order",
                Id: "New_market_order",
                Key: "cMFNewMarketOrder",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 17,
                ImageListCol: 0
            },
            {
                Text: "New pending order",
                Id: "New_pending_order",
                Key: "cMFNewPendingOrder",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 18,
                ImageListCol: 0
            },
            {
                Text: "New chart",
                Id: "New_chart",
                Key: "cMFNewChart",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 24,
                ImageListCol: 0
            },
            {
                Text: "Information",
                Id: "Information",
                Key: "cMFInfoSymbols"
            },
            {
                Text: "Symbol list",
                Id: "SymbolList",
                Key: "cMFSymbolChoice"
            },
            {
                Text: "Columns",
                Id: "Columns",
                Key: "cPPCColumns",
                Menu: this.getColumnsMenu(["Symbol"])
            },
            {
                Text: "Auto arrange",
                Id: "Auto_arrange",
                Key: "CoAutoSize",
                Checked: e.UserSettings.TableQuotes.AutoArrage
            }]
        })
    },
    i._onContextMenu = function(t) {
        var i = this.getRowById(t.sender.getId());
        this._fromRow = !0,
        this.setSelectedRow(i.getId());
        var s = this.getSelectedRow(),
        n = this._ContextMenu.getItemById("New_market_order"),
        o = this._ContextMenu.getItemById("New_pending_order"),
        a = this._ContextMenu.getItemById("New_chart");
        if (0 === this._Data.length) n.setEnabled(!1),
        o.setEnabled(!1),
        a.setEnabled(!1);
        else {
            a.setEnabled(!0);
            var r = this._Data[s._DataIdx];
            if (r) {
                var l = e.SymbolsData.getSymbols()[r.rowId];
                "index" === l.getCalculationTypeName() ? (n.setEnabled(!1), o.setEnabled(!1)) : (n.setEnabled(!0), o.setEnabled(!0))
            }
        }
        l && !l.allowTrade() && (n.setEnabled(!1), o.setEnabled(!1));
        var h = t.event.clientX ? t.event.clientX: t.event.targetTouches[0].clientX,
        d = t.event.clientY ? t.event.clientY: t.event.targetTouches[0].clientY;
        this._ContextMenu.hide(),
        this._ContextMenu.show(h, d)
    },
    i._onVisibleColumnsChange = function() {
        e.UserSettings.TableQuotes.VisiblesColumns = this._VisiblesColumns,
        e.TableQuotes.base._onVisibleColumnsChange.apply(this, arguments)
    },
    i._onAutoArrangeChange = function() {
        e.UserSettings.TableQuotes.AutoArrage = this._IsAutoSize
    },
    i._onChangeSelectedSymbols = function() {
        this.setSymbols(e.SymbolsData.getSelectedSymbols())
    },
    i.setStyleOfIndexes = function() {
        for (var t = Object.keys(this._Rows), i = 0; i < t.length; i++) {
            var s = t[i],
            n = e.SymbolsData.getSymbols()[s];
            if (n && n.getCalculationTypeName().toLowerCase() === "index".toLowerCase()) {
                var o = this._Rows[s]._Cells.Symbol;
                e.addCSSClass(o.contentNode, "WTTableIndexRow")
            }
        }
    },
    i._onRowClick = function() {
        var t = e.activeChart;
        if (t) {
            var i = t.tradePanelModuleShown();
            i || t.deActivateMarks()
        }
    },
    i._onRowDoubleClick = function(t) {
        if (0 != t && !e.investorAccount && (this._currentSymbol = "string" == typeof t ? e.SymbolsData.getSymbols()[t] : t, this._currentSymbol && 2 != this._currentSymbol._CalculationTypeID && this._currentSymbol.allowTrade())) {
            var i = e.getDialogNewOrder();
            i.setCurrentQuote(t),
            i.show(),
            e.TableQuotes.base._onRowDoubleClick.apply(this, arguments),
            e.activeChart && !e.activeChart.tradePanelModuleShown() && e.activeChart.deActivateMarks()
        }
    },
    i._onRowDragStart = function(e) {
        e.event.dataTransfer.setData("text", e.sender.getId());
        var t = document.getElementById("InvisibleDragGhost");
        null == t && (t = document.createElement("div"), t.setAttribute("style", "position: absolute; top: 0px; left: 0px; width: 1px; height: 1px;"), t.setAttribute("id", "InvisibleDragGhost"), document.body.appendChild(t)),
        "setDragImage" in e.event.dataTransfer && e.event.dataTransfer.setDragImage(t, 0, 0)
    },
    i._onContextMenuOpen = function(t) {
        var i = this.getSelectedRow(),
        s = this._ContextMenu.getItemById("New_market_order"),
        n = this._ContextMenu.getItemById("New_pending_order"),
        o = this._ContextMenu.getItemById("Information"),
        a = this._ContextMenu.getItemById("New_chart");
        if (0 === this._Data.length) s.setEnabled(!1),
        n.setEnabled(!1),
        a.setEnabled(!1),
        o.setEnabled(!1);
        else {
            e.activeChart && !e.activeChart.tradePanelModuleShown() && e.activeChart.deActivateMarks(),
            a.setEnabled(!0),
            o.setEnabled(!0);
            var r = this._Data[i._DataIdx];
            if (r) {
                var l = e.SymbolsData.getSymbols()[r.rowId];
                "index" === l.getCalculationTypeName() ? (s.setEnabled(!1), n.setEnabled(!1)) : (s.setEnabled(!0), n.setEnabled(!0))
            }
        }
        l ? l.allowTrade() || (s.setEnabled(!1), n.setEnabled(!1), o.setEnabled(!1)) : l = e.SymbolsData.getSymbols()[i.getId()],
        e.investorAccount && (s.setEnabled(!1), n.setEnabled(!1), s.setVisible(!1), n.setVisible(!1))
    },
    i._onItemClick = function(t) {
        var i, s = t.Item.getId(),
        n = this.getSelectedRow();
        if (t.preventDefault(), s) {
            var o, a = !0;
            switch (s) {
            case "New_market_order":
                o = e.getDialogNewOrder(),
                o.setCurrentQuote(n.getId()),
                o.show();
                break;
            case "New_pending_order":
                o = e.getDialogPendingOrder(),
                o.setCurrentQuote(n.getId()),
                o.show();
                break;
            case "New_chart":
                var r, l, h, d, c = e.getTerminal(),
                u = n.getId(),
                g = c.getSwiperQuotes(),
                p = g.getSelectedPage(),
                m = "Quotes" === p.getId();
                r = e.OptionsSettings.getOptionSettingsBySymbolName(u),
                r && c.useOptions && (l = r.getID(), h = r.getType());
                var _ = e.tradePanelConst,
                y = _.workMode,
                S = m ? y.market: y.binary,
                f = e.valueIsEmpty(h) || S !== y.binary ? _.toolType[y.market].buySell: h,
                v = e.showTradePanel(),
                C = {
                    workMode: S,
                    toolType: f,
                    symbolName: u,
                    binaryOptionId: l || null,
                    chartIndex: 0,
                    showed: v
                };
                d = c.createNewChart(u, l, h),
                d.initTradePanelModule(C),
                e.updateSizeTradePanels(d, v);
                break;
            case "Information":
                i = e.SymbolsData.getSymbols()[n.getId()],
                e.getSymbolInfoDialog(i).show();
                break;
            case "SymbolList":
                e.getSymbolListDialog().show();
                break;
            case "Columns":
                a = !1;
                break;
            case "Auto_arrange":
                var b = !t.Item.getChecked();
                t.Item.setChecked(b),
                this.setAutoArrange(b),
                e.saveUserSettings()
            }
            a && this._ContextMenu.hide()
        }
    },
    i.getSymbolImg = function(t) {
        var i = e.htmlToDOM('<div style="float: left;"></div>');
        return 0 == t ? (i.classList.remove("icon-buy"), i.classList.remove("NoneArrow"), i.classList.add("icon-sell")) : 1 == t ? (i.classList.remove("icon-sell"), i.classList.add("icon-buy")) : (i.classList.remove("icon-buy"), i.classList.remove("icon-sell"), i.classList.add("NoneArrow")),
        i.outerHTML
    },
    i.setSymbols = function(t) {
        for (var i = [], s = t.length, n = 0; n < s; ++n) {
            var o = t[n],
            a = e.SymbolsData.getSymbols()[o],
            r = !!e.valueIsEmpty(a) || !a.canUse();
            if (r !== !0) {
                var l = a.getBid() || "",
                h = a.getAsk() || "",
                d = a.getDigits() || "",
                c = e.UtipFunctions.formattedDate(e.SymbolsData.getLastChangedTime());
                i.push({
                    templateIndex: 0,
                    rowId: o,
                    tooltip: !0,
                    cellValues: {
                        Symbol: this.getSymbolImg(a.getBidDirection()) + o,
                        Bid: e.numberFormat(l, d, ".", " "),
                        Ask: e.numberFormat(h, d, ".", " "),
                        Spread: e.numberFormat(a.getSpread(), 0, ".", " "),
                        SwapShort: e.numberFormat(a.getSwapShort(), 2, ".", " "),
                        SwapLong: e.numberFormat(a.getSwapLong(), 2, ".", " "),
                        Time: c.substr(0, c.length - 3),
                        Margin: e.numberFormat(e.tradeFunctions.marginCalculate(a, e.TraderData, e._TraderData.positionType.buy, 1), 2, ".", " ")
                    }
                })
            } else t.splice(n, 1),
            --n,
            --s
        }
        this._Symbols = t,
        e.TableQuotes.base.fillTable.call(this, i)
    },
    i.fillTable = function() {
        this.setSymbols(e.SymbolsData.getSelectedSymbols())
    },
    i._onGetSymbols = function() {
        this.resetTable(),
        this.setSymbols(e.SymbolsData.getSelectedSymbols())
    },
    i.setQuote = function(t, i) {
        try {
            if (this._Rows && t && t._SymbolName) {
                var s = this._Rows[t._SymbolName];
                s && (t.needToRefreshGrids || i) && (s.setValue("Symbol", this.getSymbolImg(t._BidDirection) + t._SymbolName), s.setValue("Bid", e.numberFormat(t._Bid, t._Digits, ".", " ")), s.setValue("Ask", e.numberFormat(t._Ask, t._Digits, ".", " ")), s.setValue("Spread", e.numberFormat(t._Spread, 0, ".", " ")), s.setValue("SwapShort", e.numberFormat(t._SwapShort, 2, ".", " ")), s.setValue("SwapLong", e.numberFormat(t._SwapLong, 2, ".", " ")), s.setValue("Time", e.UtipFunctions.formattedDate(t._LastChangedTime).substr(0, e.UtipFunctions.formattedDate(t._LastChangedTime).length - 3)), s.setValue("Margin", e.numberFormat(e.tradeFunctions.marginCalculate(t, e.TraderData, e._TraderData.positionType.buy, 1), 2, ".", " ")), t.needToRefreshGrids = !1)
            }
        } catch(e) {
            console.log(e.name + ": " + e.message)
        }
    },
    i._onRefreshSymbols = function(t) {
        if (t) for (var i = e.SymbolsData,
        s = i.getSymbols(), n = i.getSelectedSymbols(), o = {},
        a = 0, r = n.length; a < r; a++) o = s[n[a]],
        this.setQuote(o, t)
    },
    i._onGetQuote = function(e) {
        e.updateQuoteAllowed && this.setQuote(e, !0)
    },
    i = null,
    e
}),
define("loop", ["charts"],
function(e) {
    function t(s) {
        s *= .001,
        s - o > n && (e.Charts2.drawGraphicWindows(), i(), o = s),
        requestAnimationFrame(t)
    }
    function i() {
        var t = e.eventsQueue.shift();
        if (t instanceof Object) switch (t.type) {
        case "DROP_POSITION_TO_GRAPHIC_WINDOW":
            t.fn();
            break;
        case "DROP_POSITION_TO_GRAPHIC_HEADER":
            t.fn();
            break;
        case "SOCKET_MESSAGE_OPTIONS_POSITIONS":
            e.updatePositionMarkPlacements(),
            e.Charts2.updateMarksAndTradePanels()
        }
    }
    var s = 30,
    n = Math.floor(1 / s * 1e3) / 1e3,
    o = 0;
    return e.eventsQueue = [],
    t(0),
    e
}),
define("tree", ["control", "input"],
function(e) {
    e.TreeNode = function(t) {
        this._Expand = "Open",
        this._Title = "",
        this._WithCheckBox = !0,
        this._Data = null,
        this._IsRoot = !1,
        this._IsLast = !1,
        this._IsChecked = !1,
        this._Enabled = !0,
        this._Parent = null,
        this._NodeID = null,
        this._SelectedItem = null,
        this._defineEvents(["StateChanged"]),
        this._Template = 1 == t.IsRoot ? e._Templates.RootTreeNode: e._Templates.TreeNode,
        e.TreeNode.base.constructor.apply(this, arguments)
    },
    e.initClass(e.TreeNode, e.BaseControl);
    var t = e.TreeNode.prototype;
    t._render = function() {
        e.TreeNode.base._render.apply(this, arguments),
        this._binds = {
            titleClick: this._onExpandClick.bind(this),
            checked: this._onCheckedChange.bind(this)
        },
        this.setWithCheckBox(this._WithCheckBox),
        this.setTitle(this._Title),
        this._Data ? e.addEvent(this._DomNode.querySelector(".TitleEnvelope"), "click", this._binds.titleClick, !0) : this._Expand = "Leaf",
        this.setExpand(this._Expand),
        this.setData(this._Data),
        this.setIsRoot(this._IsRoot),
        this.setIsLast(this._IsLast),
        this._checkBoxNode && (this._checkBoxNode.checked = this._IsChecked, this._IsChecked && e.addCSSClass(this._checkBoxNode, "IsChecked"), this._Parent && this._Parent.onChildCheckedChange && this._Parent.onChildCheckedChange(), this._Enabled || e.removeEvent(this._checkBoxNode, "click", this._binds.checked))
    },
    t.getNodeID = function() {
        return this._NodeID
    },
    t.getParent = function() {
        return this._Parent
    },
    t.getTitle = function() {
        return this._Title
    },
    t.setIsRoot = function(e) {
        this._IsRoot = !!e,
        this._IsRoot ? this.addCSSClass("IsRoot") : this.removeCSSClass("IsRoot")
    },
    t.setIsLast = function(e) {
        this._IsLast = !!e,
        this._IsLast ? this.addCSSClass("IsLast") : this.removeCSSClass("IsLast")
    },
    t.setTitle = function(e) {
        this._Title = e || "",
        this._titleNode || (this._titleNode = this._DomNode.querySelector(".Title")),
        this._titleNode && (this._titleNode.innerHTML = this._Title)
    },
    t._onCheckedChange = function(t) {
        t.stopPropagation(),
        this._checkBoxNode && (this.setIsChecked(!this._checkBoxNode.checked), e.getTerminal() instanceof e.MobileTerminal && (e.getTerminal()._UlSelectSymbols.Save(), e.getTerminal().checkSymbolsData()))
    },
    t.onChildCheckedChange = function() {
        if (this._treeNodes) {
            var e, t = 0;
            for (e = 0; e < this._treeNodes.length; e++) this._treeNodes[e]._IsChecked && (t += 1);
            t == this._treeNodes.length ? this.setIsChecked(!0, !1) : 0 == t ? this.setIsChecked(!1, !1) : this.setIsChecked("Indeterminate", !1)
        }
    },
    t.setIsChecked = function(t, i) {
        if (this._WithCheckBox) if ("Indeterminate" == t) this._IsChecked = !1,
        this._checkBoxNode && (this._checkBoxNode.checked = !1),
        e.removeCSSClass(this._checkBoxNode, "IsChecked"),
        e.addCSSClass(this._checkBoxNode, "Indeterminate");
        else {
            var s = !!t;
            if (this._checkBoxNode && (this._checkBoxNode.checked = s), e.removeCSSClass(this._checkBoxNode, "Indeterminate"), t ? e.addCSSClass(this._checkBoxNode, "IsChecked") : e.removeCSSClass(this._checkBoxNode, "IsChecked"), 0 != i && this._treeNodes) {
                var n;
                for (n = 0; n < this._treeNodes.length; n++) 0 == this._treeNodes[n]._Enabled && 0 == s || this._treeNodes[n].setIsChecked(s)
            }
            this._IsChecked = !!t,
            this._Parent && this._Parent.onChildCheckedChange && this._Parent.onChildCheckedChange()
        }
    },
    t.getIsChecked = function() {
        return this._IsChecked
    },
    t.setWithCheckBox = function(t) {
        this._WithCheckBox = !!t,
        this._checkBoxNode || (this._checkBoxNode = this._DomNode.querySelector(".CheckBox")),
        this._checkBoxNode.checked = this._IsChecked,
        this._WithCheckBox ? e.addEvent(this._checkBoxNode, "click", this._binds.checked, !1) : (e.removeEvent(this._checkBoxNode, "click", this._binds.checked), this._checkBoxNode.innerHTML = "")
    },
    t.setExpand = function(e) {
        this.removeCSSClass("Expand" + this._Expand),
        this._Expand = e,
        this.addCSSClass("Expand" + e)
    },
    t._onExpandClick = function(e) {
        "Leaf" !== this._Expand && this.setExpand("Open" == this._Expand ? "Closed": "Open"),
        this.StateChanged.fire({
            event: e,
            sender: this
        })
    },
    t.setData = function(t) {
        if (this._Data = t, this._Data) {
            this._treeUlContainer || (this._treeUlContainer = e.htmlToDOM(e._Templates.TreeUlContainer), this._DomNode.appendChild(this._treeUlContainer)),
            this._treeNodes = [];
            var i, s;
            for (i = 0; i < this._Data.length; i++) s = this._Data[i],
            s.Parent = this,
            s.ParentNode = this._treeUlContainer,
            s.IsLast = i == this._Data.length - 1,
            this._treeNodes[i] = new e.TreeNode(s),
            this._treeNodes[i].setEnabled(this._Data[i].Enabled)
        }
    },
    t.getCheckedItems = function() {
        var e, t, i = [];
        if (this._treeNodes) for (e = 0; e < this._treeNodes.length; e++) t = [],
        this._treeNodes[e]._treeNodes ? (t = this._treeNodes[e].getCheckedItems(), t.length && i.push(t)) : this._treeNodes[e].getIsChecked() && i.push(this._treeNodes[e]);
        return i
    },
    t.getAllItems = function() {
        var e, t, i = [];
        if (this._treeNodes) for (e = 0; e < this._treeNodes.length; e++) t = [],
        this._treeNodes[e]._treeNodes ? (t = this._treeNodes[e].getAllItems(), t.length && i.push(t)) : i.push(this._treeNodes[e]);
        return i
    },
    t = null,
    e.Tree = function(t) {
        this._Data = null,
        this._IsCheckedAll = !1,
        this._Template = e._Templates.Tree,
        this._defineEvents(["NodesChanged"]),
        e.Tree.base.constructor.apply(this, arguments)
    },
    e.initClass(e.Tree, e.BaseControl);
    var i = e.Tree.prototype;
    return i._render = function() {
        e.Tree.base._render.apply(this, arguments),
        this._treeUlContainer = e.htmlToDOM(e._Templates.TreeUlContainer),
        this._DomNode.appendChild(this._treeUlContainer),
        this._treeNodes = [];
        var t, i;
        for (t = 0; t < this._Data.length; t++) i = this._Data[t],
        i.Parent = this,
        i.ParentNode = this._treeUlContainer,
        i.IsRoot = !0,
        i.IsLast = t == this._Data.length - 1,
        i.StateChanged = e.Delegate(this, this._onNodesChanged),
        this._treeNodes[t] = new e.TreeNode(i);
        this.setHeight(this._Height)
    },
    i.setSelectedItem = function(e) {
        e && (this._SelectedItem = e)
    },
    i.getSelectedItem = function() {
        return this._SelectedItem
    },
    i.setHeight = function(e) {
        this._Height = e > 0 ? e: 0,
        this._DomNode && (this._DomNode.style.height = "", this._Height && this._Height < this._DomNode.offsetHeight && (this._DomNode.style.overflowY = this._Height && this._Height < this._DomNode.offsetHeight ? "scroll": ""), this._DomNode.style.height = this._Height ? this._Height + "px": "")
    },
    i.setIsCheckedAll = function(e) {
        if (this._IsCheckedAll = !!e, this._treeNodes) {
            var t;
            for (t = 0; t < this._treeNodes.length; t++) this._treeNodes[t].setIsChecked(this._IsCheckedAll)
        }
    },
    i.getCheckedItems = function() {
        var e, t, i = [];
        if (this._treeNodes) for (e = 0; e < this._treeNodes.length; e++) t = [],
        this._treeNodes[e]._treeNodes.length ? (t = this._treeNodes[e].getCheckedItems(), t.length && i.push(t)) : this._treeNodes[e].getIsChecked() && i.push(this._treeNodes[e]);
        return i
    },
    i.getAllItems = function() {
        var e, t, i = [];
        if (this._treeNodes) for (e = 0; e < this._treeNodes.length; e++) t = [],
        this._treeNodes[e]._treeNodes.length ? (t = this._treeNodes[e].getAllItems(), t.length && i.push(t)) : i.push(this._treeNodes[e]);
        return i
    },
    i.getAllItemsAsArray = function() {
        return this.getAllItems().reduce(function(e, t) {
            return e.concat(t)
        })
    },
    i._onNodesChanged = function(e) {
        this.NodesChanged.fire({
            event: e,
            sender: this,
            node: e.sender
        })
    },
    i = null,
    e
}),
define("dialogSymbolList", ["dialog", "tree", "symbolsData"],
function(e) {
    e.DialogSimbolList = function() {
        this._IsSelectAll = !1,
        e.DialogSimbolList.base.constructor.apply(this, arguments),
        this._Content = e.htmlToDOM(e._Templates.DialogSimbolListContent),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogSimbolList, e.Dialog);
    var t = e.DialogSimbolList.prototype;
    return t._onClosed = function() {
        delete e._symbolListDialog
    },
    t._render = function() {
        this._Width = 350,
        this._Title = "Simbol List",
        this._Key = "cMFSymbolChoice",
        this._Content = e.htmlToDOM(e._Templates.DialogSimbolListContent);
        var t = this._Content.querySelector(".DFooterControls"),
        i = this._Content.querySelector(".DTreeListContainer");
        this._unselectAllBtn = new e.Button({
            ParentNode: t,
            Class: "DButton ImgBtn DeselectAllBtn",
            ImgWidth: "14px",
            ImgHeight: "12px",
            Click: e.Delegate(this, this._unselectAllClick)
        }),
        this._selectAllBtn = new e.Button({
            ParentNode: t,
            Class: "DButton ImgBtn SelectAllBtn",
            ImgWidth: "14px",
            ImgHeight: "12px",
            Click: e.Delegate(this, this._selectAllClick)
        }),
        this._saveBtn = new e.Button({
            ParentNode: t,
            Class: "DButton SaveBtn GreenButton",
            Width: 110,
            Text: "Save",
            Key: "cMFSave",
            Click: e.Delegate(this, this._onSaveBtnClick)
        }),
        this._createSymbolTree(),
        this._SymbolTree && this._SymbolTree.addToNode(i),
        e.DialogSimbolList.base._render.apply(this, arguments),
        this.addCSSClass("DialogSymbolList"),
        this._SymbolTree.getDomNode().className += " scroller-content";
        var s = this._Content.querySelector(".scrollable");
        this.customScroller = new customScroller(s)
    },
    t._createSymbolTree = function() {
        this._SymbolTree = new e.Tree({
            Data: e.getSymbolsListTree(),
            NodesChanged: e.Delegate(this, this._onNodesChanged)
        })
    },
    t._onSaveBtnClick = function() {
        e.SymbolsData.setSelectedSymbols(this._getCheckedSymbols()),
        e.getNewChartMenu().update(),
        e.getAddChartMenu().update(),
        e.getChangeChartMenu().update(),
        e.SymbolsData.onRefreshSymbols(!0),
        e.getTerminal().checkNewChartBtnAvailable(),
        e.getTerminal().setOptionsSettingsTypeSelect(),
        e.getTerminal().checkIsOptionsEnabled(),
        e.getTerminal().getSwiperTrade()._onButtonBlock(),
        e.getTerminal()._ChartPanel._onButtonBlock(0 != e.SymbolsData.getSelectedSymbols().length),
        e.getTerminal().getHeaderPanel().blockTradeItems(),
        e.getTerminal().getHeaderPanel().getNewChartMenu()._render(),
        e.getTerminal().getHeaderPanel().getNewChartMenu().update(),
        e.getTerminal().getHeaderPanel().getAddChartMenu()._render(),
        e.getTerminal().getHeaderPanel().getChangeChartMenu()._render(),
        e.getChartMenu()._render(),
        e.saveUserSettings(),
        this.hide()
    },
    t._getCheckedSymbols = function() {
        var e, t, i = [],
        s = [],
        n = [];
        if (this._SymbolTree) for (n = this._SymbolTree.getCheckedItems(), e = 0; e < n.length; e++) for (s = n[e], t = 0; t < s.length; t++) i.push(s[t]._Title);
        return i
    },
    t._selectAllClick = function(e) {
        this.setIsSelectAll(!0)
    },
    t._unselectAllClick = function(e) {
        this.setIsSelectAll(!1)
    },
    t.setIsSelectAll = function(e) {
        this._IsSelectAll = !!e,
        this._SymbolTree && this._SymbolTree.setIsCheckedAll(this._IsSelectAll)
    },
    t.show = function() {
        e.DialogSimbolList.base.show.apply(this, arguments),
        this.customScroller.update()
    },
    t._onNodesChanged = function(e) {
        this.customScroller.update()
    },
    t = null,
    e.getSymbolListDialog = function() {
        return e._symbolListDialog || (e._symbolListDialog = new e.DialogSimbolList),
        e._symbolListDialog
    },
    e
}),
define("dialogOptionsSettingsList", ["dialog", "tree", "optionsSettingsData", "dialogSymbolList"],
function(e) {
    e.DialogOptionsSettingsList = function() {
        this._IsSelectAll = !1,
        e.DialogOptionsSettingsList.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogOptionsSettingsList, e.Dialog);
    var t = e.DialogOptionsSettingsList.prototype;
    return t._onClosed = function() {
        delete e._optionsSettingsListDialog
    },
    t._render = function() {
        this._Width = 350,
        this._Title = "Option list",
        this._Key = "cMFOptionSettingsList",
        this._Content = e.htmlToDOM(e._Templates.DialogSimbolListContent);
        var t = this._Content.querySelector(".DFooterControls"),
        i = this._Content.querySelector(".DTreeListContainer");
        this._unselectAllBtn = new e.Button({
            ParentNode: t,
            Class: "DButton ImgBtn DeselectAllBtn",
            ImgWidth: "14px",
            ImgHeight: "12px",
            Click: e.Delegate(this, this._unselectAllClick)
        }),
        this._selectAllBtn = new e.Button({
            ParentNode: t,
            Class: "DButton ImgBtn SelectAllBtn",
            ImgWidth: "14px",
            ImgHeight: "12px",
            Click: e.Delegate(this, this._selectAllClick)
        }),
        this._saveBtn = new e.Button({
            ParentNode: t,
            Class: "DButton SaveBtn GreenButton",
            Width: 110,
            Text: "Save",
            Key: "cMFSave",
            Click: e.Delegate(this, this._onSaveBtnClick)
        }),
        this._createSymbolTree(),
        this._optionsSettingsTree && this._optionsSettingsTree.addToNode(i),
        e.DialogOptionsSettingsList.base._render.apply(this, arguments),
        this.addCSSClass("DialogSymbolList"),
        this._optionsSettingsTree.getDomNode().className += " scroller-content";
        var s = this._Content.querySelector(".scrollable");
        this.customScroller = new customScroller(s)
    },
    t._createSymbolTree = function() {
        this._optionsSettingsTree = new e.Tree({
            Data: e.getOptionsSettingsListTree(),
            NodesChanged: e.Delegate(this, this._onNodesChanged)
        })
    },
    t._onSaveBtnClick = function() {
        this.saveFavoritesOptionsSettings(),
        e.getTerminal().setOptionsSettingsTypeSelect(),
        e.getOptionsSettingsTable().fillTable(),
        e.OptionsSettings.saveSettings(),
        e.saveServerSettings(),
        e.getTerminal().checkIsOptionsEnabled(),
        this.hide();
        var t = e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.classic, !0),
        i = e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.express, !0),
        s = e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.oneTouch, !0),
        n = e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.range, !0);
        0 == t.length && 0 == i.length && 0 == s.length && 0 == n.length ? e.getTerminal()._buyOptionButton.setEnabled(!1) : e.getTerminal()._buyOptionButton.setEnabled(!0),
        e.saveUserSettings()
    },
    t.setFavoritesOptionsSettingsByTypeName = function(t) {
        for (var i = 0; i < t.length; i++) {
            var s = t[i],
            n = e.OptionsSettings.byID(s.getNodeID());
            n.isShowOption = s.getIsChecked()
        }
    },
    t.saveFavoritesOptionsSettings = function() {
        for (var e = this._optionsSettingsTree.getAllItems(), t = 0; t < e.length; t++) this.setFavoritesOptionsSettingsByTypeName(e[t])
    },
    t._selectAllClick = function(e) {
        this.setIsSelectAll(!0)
    },
    t._unselectAllClick = function(e) {
        this.setIsSelectAll(!1)
    },
    t.setIsSelectAll = function(e) {
        this._IsSelectAll = !!e,
        this._optionsSettingsTree && this._optionsSettingsTree.setIsCheckedAll(this._IsSelectAll)
    },
    t.show = function() {
        e.DialogOptionsSettingsList.base.show.apply(this, arguments),
        this.customScroller.update()
    },
    t._onNodesChanged = function(e) {
        this.customScroller.update()
    },
    t = null,
    e.getOptionsSettingsListDialog = function() {
        return e._optionsSettingsListDialog || (e._optionsSettingsListDialog = new e.DialogOptionsSettingsList),
        e._optionsSettingsListDialog
    },
    e
}),
define("dialogBuyOption", ["dialog", "optionsSettingsData"],
function(e) {
    e.DialogBuyOption = function(t) {
        this._optionId = t,
        this._isOptionOpening = !1,
        this._currentSymbol = t ? e.SymbolsData.getSymbols()[e.OptionsSettings.byID(this._optionId).getSymbolName()] : null,
        e.DialogBuyOption.base.constructor.apply(this, arguments),
        e.OptionsSettings.register(this),
        e.SymbolsData.register(this),
        e.Socket.register(this),
        this._isTerminalOffline = !1,
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogBuyOption, e.Dialog);
    var t = e.DialogBuyOption.prototype;
    return t._onClosed = function() {
        this.removeFromDom(),
        e.OptionsSettings.unRegister(this),
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this),
        e.Resizer.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        delete e._dialogBuyOption
    },
    t._onSocketClose = function() {
        this._isTerminalOffline = !0
    },
    t._onSocketOpen = function() {
        this._isTerminalOffline = !1
    },
    t._render = function() {
        this._Width = 400,
        this._Height = 325,
        this._WithBlock = !0,
        this._ImageList = e.MainImageList,
        this._ImageListRow = this._ImageListRow || 6,
        this._ImageListCol = this._ImageListCol || 15,
        this._Title = this._Title || "Buy option",
        this._Key = this._Key || "cMFBuyOption",
        this._Content = e.htmlToDOM(e._Templates.DialogBuyOptionContent),
        this._optionsSettingsSelect = new e.InputSelect({
            Label: "Option name:",
            Key: "cWCTOptionName",
            Edit: !1,
            LabelPosition: "Top",
            Width: 170,
            ChangedValue: e.Delegate(this, this._onOptionSettingsSelectChanged)
        });
        var t = "<bdo> (" + e.TraderData.getTraderGroup().minOptionSum + " - " + e.TraderData.getTraderGroup().maxOptionSum + ")</bdo>:";
        this._sumSelect = new e.InputSelectNumber({
            Label: "Sum",
            Key: "cWCTOptionSum",
            OnlyNumbers: !0,
            Edit: !0,
            Options: [e.TraderData.getTraderGroup().optionSumLevel1, e.TraderData.getTraderGroup().optionSumLevel2, e.TraderData.getTraderGroup().optionSumLevel3],
            LabelPosition: "Top",
            LabelPostfix: t,
            Width: 170,
            MinValue: e.TraderData.getTraderGroup().minOptionSum,
            MaxValue: e.TraderData.getTraderGroup().maxOptionSum,
            MaxLength: e.TraderData.getTraderGroup().maxOptionSum.toString().length,
            ChangeValue: e.Delegate(this, this._onSumSelectChanged),
            ChangedValue: e.Delegate(this, this._onSumSelectChanged)
        }),
        this._periodSelect = new e.InputSelect({
            Label: "Period",
            Key: "cICPeriod",
            Edit: !1,
            LabelPosition: "Top",
            LabelPostfix: ":",
            Width: 170,
            ChangedValue: e.Delegate(this, this._periodSelectChanged)
        }),
        this._lowButton = new e.Button({
            Class: "DButton BigButton RedButton",
            Text: "Low",
            Key: "cWCTOptionLow",
            Width: 170,
            Height: 45,
            Click: e.Delegate(this, this._onLowBtnClick)
        }),
        this._highButton = new e.Button({
            Class: "DButton BigButton GreenButton",
            Text: "High",
            Key: "cWCTOptionHigh",
            Width: 170,
            Height: 45,
            Click: e.Delegate(this, this._onHighBtnClick)
        }),
        this._pageNames = this.getPages();
        var i, s, n, o = [];
        for (i = 0; i < this._pageNames.length; i++) s = this._pageNames[i],
        n = this._getPageTitle(s),
        o.push({
            Title: n.Title,
            Key: n.Key,
            Id: s,
            Content: this._getPageContent(s)
        });
        this._swiper = new e.Swiper({
            ParentNode: this._Content,
            TabMode: "Normal",
            Class: "DPOSettsContent",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            Pages: o,
            Animation: e.SwiperAnimationConst.None
        }),
        e.DialogBuyOption.base._render.apply(this, arguments);
        var a = e.OptionsSettings.getFavoritesByType(e.OptionsSettings.getSelectedOptionType());
        if (this._currentOptionType = e.OptionsSettings.getSelectedOptionType(), 0 == a.length) switch (this._currentOptionType) {
        case 0:
            optionType = e.OptionSettingsType.express;
            break;
        case 1:
            optionType = e.OptionSettingsType.classic;
            break;
        case 2:
            optionType = e.OptionSettingsType.oneTouch;
            break;
        case 3:
            optionType = e.OptionSettingsType.range;
            break;
        default:
            optionType = e.OptionSettingsType.classic
        }
        this.setSwiperButtonsWidth(),
        this.addCSSClass("dialogBuyOption"),
        this.setOptionType(this._currentOptionType),
        this._onOptionSettingsSelectChanged(),
        this._onSumSelectChanged(),
        this._lowButton._getImgNode().style.marginTop = "9px",
        this._highButton._getImgNode().style.marginTop = "9px",
        this._swiper.ChangeSelectedPage.fire(this._swiper)
    },
    t.swiperButtonUpdate = function() {
        var t = this._swiper.getSelectedPageIndex();
        if (this._swiper.removeAllPage(), e.Browser.IsMobile) {
            this._pages = this.getPages();
            var i, s, n = [];
            for (i = 0; i < this._pages.length; i++) s = this._pages[i].name,
            n = this._getPageTitle(s),
            this._swiper.addPage({
                Title: n.Title,
                Key: n.Key,
                Id: s,
                Content: this._getPageContent(s),
                PreContent: this._getPreContent(s, this._pages[i].type)
            })
        } else {
            this._pageNames = this.getPages();
            var i, s, n = [];
            for (i = 0; i < this._pageNames.length; i++) s = this._pageNames[i],
            n = this._getPageTitle(s),
            this._swiper.addPage({
                Title: n.Title,
                Key: n.Key,
                Id: s,
                Content: this._getPageContent(s)
            },
            !1)
        }
        this._swiper.getPagesLength() > 0 ? (this._swiper.getPagesLength() > t ? this._swiper.setSelectedPage(this._swiper.getPages()[t], !0) : this._swiper.setSelectedPage(0, !0), this.setSwiperButtonsWidth()) : this.hide()
    },
    t.setSwiperButtonsWidth = function() {
        if (!e.getTerminal().useNewOptions) {
            var t = this._swiper._DomNode.childNodes[0].childNodes;
            t[0].style.width = "50.1%",
            t[1].style.width = "50.1%"
        }
    },
    t.getPages = function() {
        var t = e.OptionsSettings,
        i = t.getOptionsByTypeExceptForbidden.bind(t),
        s = e.OptionTypeNames,
        n = e.OptionSettingsType,
        o = [],
        a = n.express,
        r = n.classic;
        if (i(a, !0).length > 0 && o.push(s[a]), i(r, !0).length > 0 && o.push(s[r]), e.getTerminal().useNewOptions) {
            var l = n.oneTouch,
            h = n.range;
            i(l, !0).length > 0 && o.push(s[l]),
            i(h, !0).length > 0 && o.push(s[h])
        }
        return o
    },
    t._getPageContent = function(t) {
        var i = e.htmlToDOM(e._Templates.BuyOptionContent),
        s = {};
        return s.pageName = t,
        s.optionTypeContent = i.querySelector(".BuyOptionTypeContent"),
        s.optionContent = i.querySelector(".BuyOptionContent"),
        s.optionParam = s.optionContent.querySelector(".BuyOptionParam"),
        s.leftControls = s.optionParam.querySelector(".DLeftControls"),
        s.rightControls = s.optionParam.querySelector(".DRightControls"),
        s.payoutNode = e.htmlToDOM(e._Templates.LabelsPanel),
        s.payoutNode.className += " Payout",
        s.payoutLabelNode = s.payoutNode.querySelector(".LabelCaption"),
        s._payoutValueNode = s.payoutNode.querySelector(".LabelValue"),
        s.payoutLabelNode.innerHTML = (e.LangManager.getStringByKey("cWCTOptionPayout") || "Payout") + ":",
        s._payoutValueNode.innerHTML = "0",
        s.rightControls.appendChild(s.payoutNode),
        s.currentPriceNode = s.optionContent.querySelector(".CurrentPrice"),
        s._priceLabelNode = s.currentPriceNode.querySelector(".CurrentPriceLabel"),
        s._priceLabelNode.innerHTML = (e.LangManager.getStringByKey("cWCTOptionPrice") || "Price") + ":",
        s._priceValueNode = s.currentPriceNode.querySelector(".Bid"),
        s._topBorderValueNode = s.currentPriceNode.querySelector(".TopBorderValue"),
        s._bottomBorderValueNode = s.currentPriceNode.querySelector(".BottomBorderValue"),
        s._statusNode = s.currentPriceNode.querySelector(".Status"),
        s._statusNode.style.display = "none",
        this["_" + t] = s,
        i
    },
    t.setOptionsSettingsSelectItem = function(e) {
        this._optionsSettingsSelect.setSelectedOption(e)
    },
    t.setContent = function(t) {
        e.DialogBuyOption.base.setContent.apply(this, [t]),
        e.Browser.IsMobile || (this._contentNode.style.height = this._Height - 38 + "px")
    },
    t._onSwiperChangeSelectedPage = function(t) {
        var i = t.getSelectedPage()._Content,
        s = i.querySelector(".Top"),
        n = i.querySelector(".BuyOptionContent"),
        o = n.querySelector(".BuyOptionParam"),
        a = o.querySelector(".DLeftControls"),
        r = i.querySelector(".Buttons");
        if (this._optionsSettingsSelect.addToNode(s), this._sumSelect.addToNode(a), this._periodSelect.addToNode(s), this._lowButton.addToNode(r), this._highButton.addToNode(r), this._swiper) {
            this._currentOptionType = this.getOptionTypeByPageNumber(),
            this.setOptionType(this._currentOptionType);
            var l = e.OptionsSettings.getOptionsSettingsNames(e.OptionsSettings.getFavoritesByType(this._currentOptionType));
            this.optionListIsEmpty = 0 == l.length,
            l && (l.indexOf(this._optionsSettingsSelect.getValue()) == -1 ? 0 != l.length && this._optionsSettingsSelect.setSelectedOption(0) : this.checkTradeAllowed() && this.unblockButtons()),
            this._onOptionSettingsSelectChanged();
            var h = this._highButton.getDomNode(),
            d = this._lowButton.getDomNode();
            h.classList.remove(this._hButtonPrevClass),
            d.classList.remove(this._lButtonPrevClass),
            t.getSelectedPage()._Id == e.OptionTypeNames[e.OptionSettingsType.oneTouch] ? (this._hButtonPrevClass = "Top", this._lButtonPrevClass = "Bottom", this._lowButton.setText(e.LangManager.getStringByKey("cOPTBottom") || "Bottom"), this._highButton.setText(e.LangManager.getStringByKey("cOPTTop") || "Top")) : t.getSelectedPage()._Id == e.OptionTypeNames[e.OptionSettingsType.range] ? (this._hButtonPrevClass = "Inside", this._lButtonPrevClass = "Outside", this._lowButton.setText(e.LangManager.getStringByKey("cOPTOutside") || "Outside"), this._highButton.setText(e.LangManager.getStringByKey("cOPTInside") || "inside")) : (this._hButtonPrevClass = "High", this._lButtonPrevClass = "Low", this._lowButton.setText(e.LangManager.getStringByKey("cWCTOptionLow") || "Low"), this._highButton.setText(e.LangManager.getStringByKey("cWCTOptionHigh") || "High")),
            h.classList.add(this._hButtonPrevClass),
            d.classList.add(this._lButtonPrevClass)
        }
        this.checkTradeAllowed()
    },
    t.fillCurrenPriceNode = function() {},
    t._getPageTitle = function(t) {
        var i = {
            Title: "",
            Key: ""
        };
        switch (t) {
        case e.OptionTypeNames[e.OptionSettingsType.express]:
            i = {
                Title: e.OptionTypeNames[e.OptionSettingsType.express],
                Key: ""
            };
            break;
        case e.OptionTypeNames[e.OptionSettingsType.classic]:
            i = {
                Title: e.OptionTypeNames[e.OptionSettingsType.classic],
                Key: ""
            };
            break;
        case e.OptionTypeNames[e.OptionSettingsType.oneTouch]:
            i = {
                Title: e.OptionTypeNames[e.OptionSettingsType.oneTouch],
                Key: ""
            };
            break;
        case e.OptionTypeNames[e.OptionSettingsType.range]:
            i = {
                Title: e.OptionTypeNames[e.OptionSettingsType.range],
                Key: ""
            }
        }
        return i
    },
    t._checkAvailabilityPeriodForThePurchase = function(t) {
        return !! this._currentSymbol && !(e.UtipFunctions.isHoliday(t, this._currentSymbol) || !e.UtipFunctions.isTradeTime(t, this._currentSymbol))
    },
    t._tradingAvailable = function(e, t) {
        e || 0 == e ? this.unblockButtons() : (this._periodSelect._showMenu(), this.blockButtons(), t.preventDefault(), t.stopPropagation())
    },
    t._periodSelectChanged = function(t) {
        this._checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + t.sender.getSelectedData().period) ? this._tradingAvailable(!0, t.event) : this._tradingAvailable(!1, t.event),
        this.checkTradeAllowed(),
        this._currentParamID = t.sender.getSelectedData().paramID,
        this.setPayout()
    },
    t._onSumSelectChanged = function(e) {
        this.setPayout(),
        this.checkTradeAllowed()
    },
    t.setPayout = function() {
        if (this._swiper && this._currentOptionSettings) {
            var t = this._swiper.getSelectedPage().getId(),
            i = this["_" + t],
            s = this._currentOptionSettings.getProfitPercentageByPeriod(this._periodSelect.getSelectedData().period),
            n = s + "%",
            o = this._sumSelect.getValue();
            o = parseInt(o) || 0,
            e.Browser.IsMobile || (n = "(" + n + ")"),
            i._payoutValueNode.innerHTML = '<span class="PayoutValue">' + e.numberFormat(o + o * s / 100, 2, ".", "") + '</span><span class="PayoutPersent"> ' + n + "</span>"
        }
    },
    t.isThereEmptyFields = function() {
        return "" == this._optionsSettingsSelect.getValue() || "" == this._sumSelect.getValue() || "" == this._periodSelect.getValue()
    },
    t.checkTradeAllowed = function() {
        var t = !1,
        i = this._sumSelect.getValue(),
        s = parseInt(i);
        if ("" != i) {
            var n = e.TraderData.getTraderGroup();
            t = s >= n.minOptionSum && s <= n.maxOptionSum
        }
        if (!e.UtipFunctions.binaryEquityEnough(i) || !t || this._isOptionOpening || this._isTerminalOffline || this.optionListIsEmpty || this.isThereEmptyFields() || !this.isTradingTime()) return this.blockButtons(),
        !1;
        if (this.enabled()) {
            var o = this._periodSelect,
            a = o.getOptions();
            if (a.length > 0 && (period = a[o.getSelectedOption()].Data.period, !this._checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + period))) return this.blockButtons(),
            !1;
            this.unblockButtons()
        }
        return ! 0
    },
    t.isTradingTime = function() {
        return ! this._currentSymbol || e.UtipFunctions.isAllowTrade(e.UtipFunctions.setServerFormatDate(e.SymbolsData._LastChangedTime), this._currentSymbol)
    },
    t.blockButtons = function() {
        this._lowButton.setEnabled(!1),
        this._highButton.setEnabled(!1)
    },
    t.unblockButtons = function() {
        this._lowButton.setEnabled(!0),
        this._highButton.setEnabled(!0)
    },
    t.setOptionType = function(e) {
        this.setSelectedSwiperPageByOptionType(e),
        this._currentOptionType = e,
        this.fillOptionsSettingsName(),
        this.setPayout()
    },
    t.setSelectedSwiperPageByOptionType = function(t) {
        var i = e.OptionTypeNames[t];
        this._swiper._Pages.forEach(function(e, t) {
            e._Id === i && e.setIsSelected(!0)
        })
    },
    t.getOptionTypeByPageNumber = function(t) {
        var i = void 0;
        return i = void 0 !== t && null !== t ? t.getSelectedPage().getId() : this._swiper.getSelectedPage()._Id,
        e.OptionTypeByName[i] ? e.OptionTypeByName[i] : i === e.OptionTypeNames[e.OptionSettingsType.express] ? e.OptionSettingsType.express: i === e.OptionTypeNames[e.OptionSettingsType.classic] ? e.OptionSettingsType.classic: i === e.OptionTypeNames[e.OptionSettingsType.oneTouch] ? e.OptionSettingsType.oneTouch: i === e.OptionTypeNames[e.OptionSettingsType.range] ? e.OptionSettingsType.range: void 0
    },
    t.initOptionPosition = function() {
        var t = this._currentOptionSettings;
        if (!t) return null;
        var i = t.getType(),
        s = t.getParamsByID(this._currentParamID);
        return {
            settingName: t.getName(),
            optionType: i,
            openPrice: e.parseFloat(t.getPrice()),
            investmentSum: this._sumSelect.getValue(),
            symbolName: t.getSymbolName(),
            stopLine: s.stopLine,
            payoutPercentage: s.payoutPercentage,
            earlyClosing: s.earlyClosing,
            interval: s.interval,
            period: s.period,
            optionParamId: this._currentParamID,
            optionSettingsId: t.getID().toString()
        }
    },
    t.checkIsOptionEnabled = function(t) {
        return ! e.valueIsEmpty(t) || (e.showErrorDialog(e.LangManager.getStringByKey("cWCTOptionIsDisabled") || "This option is disabled"), document.getElementById("WTDialogBlockscreen").style.display = "inline", !1)
    },
    t._onLowBtnClick = function() {
        var t = this.initOptionPosition(),
        i = this._swiper.getSelectedPage().getId();
        this["_" + i];
        if (this.checkIsOptionEnabled(t)) {
            switch (this._currentOptionType) {
            case 0:
                t.direction = e.OptionPositionTypes.lowExpress;
                break;
            case 1:
                t.direction = e.OptionPositionTypes.lowClassic;
                break;
            case 2:
                t.direction = e.OptionPositionTypes.bottom;
                break;
            case 3:
                t.direction = e.OptionPositionTypes.outside
            }
            this.openOptionPosition(t),
            this._closeBtn.setEnabled(!1)
        }
    },
    t._onHighBtnClick = function() {
        var t = this.initOptionPosition(),
        i = this._swiper.getSelectedPage().getId();
        this["_" + i];
        if (this.checkIsOptionEnabled(t)) {
            switch (this._currentOptionType) {
            case 0:
                t.direction = e.OptionPositionTypes.highExpress;
                break;
            case 1:
                t.direction = e.OptionPositionTypes.highClassic;
                break;
            case 2:
                t.direction = e.OptionPositionTypes.top;
                break;
            case 3:
                t.direction = e.OptionPositionTypes.inside
            }
            this.openOptionPosition(t),
            this._closeBtn.setEnabled(!1)
        }
    },
    t.openOptionPosition = function(t) {
        this.setEnabled(!1),
        this.blockButtons(),
        this.showQueryStatus(e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent!"),
        this._isOptionOpening = !0,
        e.requester.openOptionPosition(t)
    },
    t.showQueryStatus = function(t) {
        if (this._swiper) {
            var i = this._swiper.getSelectedPage().getId(),
            s = this["_" + i];
            t ? (s._priceValueNode.innerHTML = "", s._statusNode.innerHTML = t, s._topBorderValueNode && s._bottomBorderValueNode && (s._topBorderValueNode.innerHTML = "", s._bottomBorderValueNode.innerHTML = ""), s._statusNode.style.display = "") : (s._priceValueNode.innerHTML = this._currentOptionSettings.getPrice(), s._priceLabelNode.innerHTML = (e.LangManager.getStringByKey("cWCTOptionPrice") || "Price") + ":", s._statusNode.innerHTML = "", s._statusNode.style.display = "none", this.setCurrentQuote())
        }
    },
    t.doOnChangeSettingsEvents = function() {
        this.fillPeriodSelect(),
        this.setCurrentQuote(),
        this.checkTradeAllowed(),
        this.setPayout()
    },
    t.fillPeriodSelect = function() {
        if (this._currentOptionSettings) {
            for (var t = this._currentOptionSettings.getOptionPeriodCaptions(), i = 0; i < t.length; i++) {
                var s = t[i].Data.period;
                this._checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + s) || (t[i].Text += " (" + (e.LangManager.getStringByKey("cOPClosed") || "closed") + ")")
            }
            this._periodSelect.setOptions(t),
            this._periodSelect.setSelectedOption(0),
            this._currentParamID = this._periodSelect.getSelectedData().paramID
        }
    },
    t._onOptionSettingsSelectChanged = function() {
        var t = null === this._optionsSettingsSelect.getSelectedData() || void 0 === this._optionsSettingsSelect.getSelectedData();
        this._currentOptionSettings = t ? e.OptionsSettings.getSelectedOptionSettings() : e.OptionsSettings.byID(this._optionsSettingsSelect.getSelectedData()),
        this._optionId = this._currentOptionSettings.getID(),
        this._currentSymbol = e.SymbolsData.getSymbols()[this._currentOptionSettings.getSymbolName()],
        e.Browser.IsMobile && this._optionsSettingsSelect.setDescription(this._currentSymbol._Description),
        this.doOnChangeSettingsEvents()
    },
    t.getBorder = function(t, i) {
        null == i && (i = e.parseFloat(this._currentOptionSettings.getPrice()));
        var s = this.initOptionPosition().interval;
        return t === !0 ? i + parseInt(s) / this._currentSymbol.getPrecision() : i - parseInt(s) / this._currentSymbol.getPrecision()
    },
    t.setCurrentQuote = function() {
        if (this._swiper && this._currentOptionSettings) {
            var t = this._swiper.getSelectedPage().getId(),
            i = this["_" + t];
            if (i._statusNode.innerHTML == (e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent!!")) return;
            this._currentOptionSettings._type >= 2 ? (i._priceLabelNode.innerHTML = (e.LangManager.getStringByKey("cOPSBorders") || "Borders") + ":", i._topBorderValueNode.style.display = "", i._bottomBorderValueNode.style.display = "", i._priceValueNode.style.display = "none", this._currentSymbol && (i._topBorderValueNode.innerHTML = e.numberFormat(this.getBorder(!0), this._currentSymbol.getDigits(), ","), i._bottomBorderValueNode.innerHTML = e.numberFormat(this.getBorder(!1), this._currentSymbol.getDigits(), ","))) : "" === i._statusNode.innerHTML && (e.Browser.IsMobile || (i._priceLabelNode.innerHTML = (e.LangManager.getStringByKey("cWCTOptionPrice") || "Price") + ":", i._priceValueNode.style.display = "", i._topBorderValueNode.style.display = "none", i._bottomBorderValueNode.style.display = "none"), i._priceValueNode.innerHTML = this._currentOptionSettings.getPrice(), i._statusNode.innerHTML = "")
        }
    },
    t.fillOptionsSettingsName = function() {
        for (var t, i = e.OptionsSettings,
        s = e.SymbolsData,
        n = s.getSymbols(), o = i.getFavoritesByType(this._currentOptionType).filter(function(t, i, s) {
            return n[t.getSymbolName()].allowTrade() && e.SymbolsData.isActiveSymbol(t.getSymbolName())
        }), a = i.byID(this._optionId), r = [], l = 0, h = 0, d = o.length; h < d; ++h) t = o[h],
        r.push({
            Data: t.getID(),
            Text: t.getName()
        });
        if (l = o.indexOf(a), l === -1 && (l = 0, a)) {
            var c = a.getSymbolName(),
            u = a.getName(),
            g = s.getSymbols()[c];
            o.forEach(function(e, t, i) {
                if (e.getName() === u && e.getSymbolName() === c && g.allowTrade()) return void(l = t)
            })
        }
        var p = this._optionsSettingsSelect;
        if (p.setOptions(r), 0 !== o.length) {
            var m;
            l === -1 && (l = 0),
            m = o[l],
            p.setSelectedOption(l),
            this._optionId = m.getID(),
            this._currentOptionSettings = m
        }
        this.doOnChangeSettingsEvents()
    },
    t._onGetOptionsSettings = function(t) {
        if (this._currentOptionSettings) {
            var i = this._currentOptionSettings;
            this._currentOptionSettings = e.OptionsSettings.getOptionSettingsByOptionTypeAndSymbolName(i.getType(), i.getSymbolName())
        }
    },
    t._onGetQuote = function(e) {
        e && this._currentOptionSettings && this._currentOptionSettings.getSymbolName() == e._SymbolName && this.setCurrentQuote()
    },
    t.refreshTime = function() {
        this.setExpiryDateSelect(),
        this.setTimeBeforeStopTime()
    },
    t.setExpiryDateSelect = function() {
        var t = e.UtipFunctions.getExpiryDates(this._currentOptionSettings.getID(), this._currentOptionType, e.SymbolsData._LastChangedTime),
        i = [];
        if (t.strings.length > 0 && (0 == this._periodSelect.getOptions().length || this._periodSelect.getOptions()[0].Data != t.values[0])) {
            t.strings.forEach(function(e, s) {
                i.push({
                    Text: e,
                    Data: t.values[s]
                })
            },
            this),
            this._periodSelect.setOptions(i);
            var s = this._periodSelect.indexOfData(this._expiryDate);
            s != -1 ? this._periodSelect.setSelectedOption(s) : (this._periodSelect.setSelectedOption(0), this._expiryDate = this._periodSelect.getOptions()[0].Data),
            this._periodSelect.onChange()
        } else 0 == t.strings.length && (this._periodSelect.setOptions([]), this._periodSelect.setValue(""))
    },
    t.setTimeBeforeStopTime = function() {
        if (this._swiper) {
            var t = this._swiper.getSelectedPage().getId(),
            i = this["_" + t];
            if (0 == this._periodSelect.getOptions().length && (this._expiryDate = null), this._expiryDate) {
                var s = e.UtipFunctions.getOptionTime(this._currentOptionType, this._currentOptionSettings.getName(), e.SymbolsData._LastChangedTime, this._expiryDate);
                i._stopValueNode.innerHTML = new Date(s.timeBeforeStopTime).toLocaleFormat("%M:%S")
            } else i._stopValueNode.innerHTML = ""
        }
    },
    t.checkOptionsTypesEnabled = function() {
        if (this._swiper) {
            var t = e.OptionTypeNames[e.OptionSettingsType.express],
            i = e.OptionTypeNames[e.OptionSettingsType.classic],
            s = e.OptionTypeNames[e.OptionSettingsType.oneTouch],
            n = e.OptionTypeNames[e.OptionSettingsType.range],
            o = this._swiper.getPageById(t),
            a = this._swiper.getPageById(i),
            r = this._swiper.getPageById(s),
            l = this._swiper.getPageById(n);
            o && (0 === e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.express, !0).length ? this._swiper.getPageById(t).addCSSClass("Disabled") : this._swiper.getPageById(t).removeCSSClass("Disabled")),
            a && (0 === e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.classic, !0).length ? this._swiper.getPageById(i).addCSSClass("Disabled") : this._swiper.getPageById(i).removeCSSClass("Disabled")),
            r && (0 === e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.oneTouch, !0).length ? this._swiper.getPageById(s).addCSSClass("Disabled") : this._swiper.getPageById(s).removeCSSClass("Disabled")),
            l && (0 === e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.range, !0).length ? this._swiper.getPageById(n).addCSSClass("Disabled") : this._swiper.getPageById(n).removeCSSClass("Disabled"))
        }
    },
    t.updateOptionsSettingsName = function() {
        for (var t, i = e.SymbolsData.getSymbols(), s = e.OptionsSettings.getFavoritesByType(this._currentOptionType).filter(function(e) {
            return i[e.getSymbolName()].allowTrade()
        }), n = 0, o = [], a = s.length; n < a; ++n) t = s[n],
        o.push({
            Data: t.getID(),
            Text: t.getName()
        });
        1 === o.length ? this.fillOptionsSettingsName() : this._optionsSettingsSelect.setOptions(o),
        e.getTerminal().checkIsOptionsEnabled(),
        this.checkOptionsTypesEnabled()
    },
    t._onSocketMessage = function(t) {
        if (t) {
            var i = t.msgType,
            s = t.msgResult || "";
            switch (i) {
            case "traderData":
            case "positions":
            case "pendingOrders":
                this.checkTradeAllowed();
                break;
            case "optionsPositions":
                this._closeBtn.setEnabled(!0),
                this.enabled() || this.hide(),
                this.checkTradeAllowed();
                break;
            case "openOptionPosition":
                if ("SUCCESS" != s.toUpperCase()) this._closeBtn.setEnabled(!0),
                this.setEnabled(!0),
                this.unblockButtons(),
                this.showQueryStatus("");
                else if (e.Browser.IsMobile) {
                    var n = e.getTerminal().mainSwiper,
                    o = e.MobileTerminalPage;
                    n.getSelectedPageIndex() === o.QuotesPage && n.setSelectedPage(o.TradePage)
                }
                break;
            case "deleteOptionSettings":
            case "optionsSettings":
            case "addOptionSettings":
                this.updateOptionsSettingsName(),
                this.swiperButtonUpdate();
                var a = e.OptionsSettings.getOptionsSettingsNames(e.OptionsSettings.getFavoritesByType(this._currentOptionType));
                this.optionListIsEmpty = 0 == a.length,
                a && a.indexOf(this._optionsSettingsSelect.getValue()) == -1 && this._optionsSettingsSelect.setSelectedOption(0);
                break;
            case "changeOptionSettings":
                var r = this._optionsSettingsSelect.getValue(),
                l = t.optionSettings.name,
                h = t.optionSettings.isUseSetting;
                this.swiperButtonUpdate(),
                l == r && "0" == h && this._optionsSettingsSelect.setSelectedOption(0)
            }
        }
        "SUCCESS" != s.toUpperCase() && (this._isOptionOpening = !1)
    },
    t.updateOptionSettingsSelect = function() {
        this._onOptionSettingsSelectChanged()
    },
    t.show = function(t) {
        if (t.optionSettings) {
            this.setOptionType(t.optionType),
            this._optionsSettingsSelect.setValue(t.optionSettings.getName()),
            this._sumSelect.setValue(this._sumSelect.getOptions()[0]);
            var i = this._periodSelect.indexOfData(t.expiryTime);
            i != -1 ? (this._periodSelect.setSelectedOption(i), this._currentParamID = this._periodSelect.getSelectedData().paramID, this.setPayout()) : this._periodSelect.setSelectedOption(0)
        }
        period = this._periodSelect.getOptions()[this._periodSelect.getSelectedOption()].Data.period,
        this._checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + period) ? this.unblockButtons() : this.blockButtons(),
        this.checkTradeAllowed(),
        e.DialogBuyOption.base.show.apply(this, arguments)
    },
    t = null,
    e.getDialogBuyOption = function(t) {
        return e._dialogBuyOption || (e._dialogBuyOption = new e.DialogBuyOption(t)),
        e._dialogBuyOption
    },
    e.getDialogBuyOptionWithoutInit = function() {
        return e._dialogBuyOption
    },
    e.DialogBuyOptionShowed = function() {
        return !! e._dialogBuyOption
    },
    e
}),
define("dialogOptionInfo", ["dialog", "divTable"],
function(e) {
    e.DialogOptionInfo = function(t) {
        this._OptionSettings = t,
        e.DialogOptionInfo.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogOptionInfo, e.Dialog);
    var t = e.DialogOptionInfo.prototype;
    return t._render = function() {
        this._Width = 500,
        this._Content = e.htmlToDOM(e._Templates.DialogOptionInfoContent),
        this._Title = this._OptionSettings.getSymbolName(),
        this.setOptionDescription(),
        this.setTable();
        var t = this._OptionSettings.getType();
        this.setOptionTypeLeft(t != e.OptionSettingsType.express && t != e.OptionSettingsType.classic),
        e.DialogOptionInfo.base._render.apply(this, arguments),
        this.addCSSClass("dialogOptionInfo")
    },
    t._onClosed = function() {
        var t = e._dialogMasterObject._Listeners,
        i = t.indexOf(this);
        i > -1 && t.splice(i, 1),
        this._table.removeFromDom(),
        delete this._table,
        this.removeFromDom(),
        delete e._optionInfoDialog
    },
    t.setOptionDescription = function() {
        var t = this._Content.querySelector(".OptionDescription"),
        i = this._Content.querySelector(".SymbolName"),
        s = e.htmlToDOM('<div class="SymbolNameLable"></div>'),
        n = e.htmlToDOM('<div class="SymbolNameValue"></div>'),
        o = this._Content.querySelector(".OptionType"),
        a = e.htmlToDOM('<div class="OptionTypeLable"></div>'),
        r = e.htmlToDOM('<div class="OptionTypeValue"></div>');
        s.innerHTML = e.LangManager.getStringByKey("cTOSymbolName") + ":",
        n.innerHTML = this._OptionSettings.getSymbolName(),
        a.innerHTML = e.LangManager.getStringByKey("cMODOptionType") + ":",
        r.innerHTML = e.OptionTypeNames[this._OptionSettings.getType()],
        i.appendChild(s),
        i.appendChild(n),
        o.appendChild(a),
        o.appendChild(r),
        t.appendChild(i),
        t.appendChild(o)
    },
    t.setTable = function() {
        var t = this._Content.querySelector(".TableContainer");
        this._table = new e.DivTable({
            ParentNode: t,
            Template: e._Templates.TableOptionsInfo,
            RowTemplates: this._OptionSettings._type <= 1 ? [e._Templates.TableOptionsInfoRow2] : [e._Templates.TableOptionsInfoRow1],
            HeaderTemplate: this._OptionSettings._type <= 1 ? [e._Templates.TableOptionsInfoHeader2] : [e._Templates.TableOptionsInfoHeader1],
            HeaderColumns: this.getColumns(),
            HeadersTooltipsEnabled: !0
        }),
        this._table.fillTable(this.getDataForTable())
    },
    t.getColumns = function() {
        return this._OptionSettings._type <= 1 ? {
            Period: {
                Id: "Period",
                Title: "Period",
                Key: "cICPeriod",
                IsVisible: !0,
                Index: 0
            },
            Payout: {
                Id: "PayOut",
                Title: "Payout % ",
                Key: "cOPSPayoutPercentage",
                IsVisible: !0,
                Index: 1
            },
            Stop: {
                Id: "Stop",
                Title: "Stop",
                Key: "cWCTOptionStop",
                IsVisible: !0,
                Index: 2
            },
            EarlyClosing: {
                Id: "EarlyClosing",
                Title: "Early Closing %",
                Key: "cOPSEarlyClosing",
                Tooltip: "Early Closing %",
                TooltipKey: "cOPSEarlyClosing",
                IsVisible: !0,
                Index: 3
            }
        }: {
            Period: {
                Id: "Period",
                Title: "Period",
                Key: "cICPeriod",
                IsVisible: !0,
                Index: 0
            },
            Payout: {
                Id: "PayOut",
                Title: "Payout % ",
                Key: "cOPSPayoutPercentage",
                IsVisible: !0,
                Index: 1
            },
            Interval: {
                Id: "Interval",
                Title: "Interval",
                Key: "cOPSInterval",
                IsVisible: !0,
                Index: 2
            },
            Stop: {
                Id: "Stop",
                Title: "Stop",
                Key: "cWCTOptionStop",
                IsVisible: !0,
                Index: 3
            },
            EarlyClosing: {
                Id: "EarlyClosing",
                Title: "Early Closing %",
                Key: "cOPSEarlyClosing",
                Tooltip: "Early Closing %",
                TooltipKey: "cOPSEarlyClosing",
                IsVisible: !0,
                Index: 4
            }
        }
    },
    t.getDataForTable = function() {
        var t = [],
        i = this._OptionSettings;
        return this._OptionSettings._optionParams.forEach(function(s) {
            i._type <= 1 ? t.push({
                templateIndex: 0,
                cellValues: {
                    Id: s.id,
                    Period: i.getOptionPeriodCaption(1e3 * s.period),
                    Payout: s.payoutPercentage,
                    Stop: 0 != s.stopLine ? i.getOptionPeriodCaption(1e3 * s.stopLine) : " ",
                    EarlyClosing: 0 != s.earlyClosing ? s.earlyClosing: e.LangManager.getStringByKey("cDOIDenied") || "Denied"
                }
            }) : t.push({
                templateIndex: 0,
                cellValues: {
                    Id: s.id,
                    Period: i.getOptionPeriodCaption(1e3 * s.period),
                    Payout: s.payoutPercentage,
                    Interval: s.interval,
                    Stop: 0 != s.stopLine ? i.getOptionPeriodCaption(1e3 * s.stopLine) : " ",
                    EarlyClosing: 0 != s.earlyClosing ? s.earlyClosing: e.LangManager.getStringByKey("cDOIDenied") || "Denied"
                }
            })
        }),
        t
    },
    t.refresh = function(t) {
        this._OptionSettings = t;
        var i = function(e) {
            if (null != e && e.childNodes) for (; e.childNodes[0];) e.removeChild(e.childNodes[0])
        };
        i(this._Content.querySelector(".OptionName")),
        i(this._Content.querySelector(".SymbolName")),
        i(this._Content.querySelector(".OptionType")),
        i(this._Content.querySelector(".TableContainer")),
        this.setOptionDescription(),
        this.setTable();
        var s = this._OptionSettings.getType();
        this.setOptionTypeLeft(s != e.OptionSettingsType.express && s != e.OptionSettingsType.classic)
    },
    t.setOptionTypeLeft = function(e) {
        var t = this._Content.querySelector(".OptionDescription .OptionType");
        switch (e) {
        case ! 0 : t.style.paddingLeft = "45px",
            t.style.width = "auto";
            break;
        default:
            t.style.paddingLeft = "",
            t.style.width = ""
        }
    },
    t = null,
    e.getDialogOptionInfo = function(t) {
        return e._optionInfoDialog ? e._optionInfoDialog.refresh(t) : e._optionInfoDialog = new e.DialogOptionInfo(t),
        e._optionInfoDialog
    },
    e
}),
define("tableOptionsSettings", ["container", "optionsSettingsData", "dialogOptionsSettingsList", "dialogBuyOption", "divTable", "dialogOptionInfo"],
function(e) {
    function t() {
        return {
            Name: {
                Title: "Symbol",
                Key: "cQASSymbol",
                Id: "Name",
                IsVisible: !0,
                Index: 0
            },
            Price: {
                Title: "Price",
                Key: "cOSGPrice",
                Id: "Price",
                IsVisible: !0,
                Index: 1
            },
            Period: {
                Title: "Period",
                Key: "cICPeriod",
                Id: "Period",
                IsVisible: !1,
                Index: 2
            },
            Profit: {
                Title: "Profit",
                Key: "cWCTTradePositionsFormProfitByPosition",
                Id: "Profit",
                IsVisible: !0,
                Index: 3
            }
        }
    }
    e.TableOptionsSettings = function(t) {
        e.TableOptionsSettings.base.constructor.apply(this, arguments),
        e.OptionsSettings.register(this),
        e.TraderData.register(this),
        e.SymbolsData.register(this),
        this.DoubleClickRow.add(e.Delegate(this, this._onRowDoubleClick)),
        this.ClickRow.add(e.Delegate(this, this._onRowClick)),
        e.LangManager.register(this)
    },
    e.initClass(e.TableOptionsSettings, e.DivTable);
    var i = e.TableOptionsSettings.prototype;
    return i.canDeActivateMark = function() {
        var t = e.activeChart;
        if (t) {
            var i = t.tradePanelModule,
            s = i.hasAnyPosition();
            return ! s || s && !i.showed
        }
    },
    i._onRowClick = function(t) {
        var i = e.getTerminal(),
        s = t.rowID,
        n = e.OptionsSettings.byID(s),
        o = n ? n.getSymbolName() : "",
        a = e.activeChart,
        r = e.Charts2.getChartsBySymbolName(o),
        l = r.length;
        if (a && (this.canDeActivateMark() && a.tradePanelModule.ready === !0 && a.deActivateMarks(), 0 !== l)) {
            e.OptionsSettings.setSelectedOptionSettingsID(s),
            e.OptionsSettings.setSelectedOptionType(n.getType());
            for (var h = null,
            d = 0; d < l; d++) {
                var c = r[d],
                u = c.getGraphicArea(),
                g = u.getGraphicWindows(),
                p = g.tradePanelModule,
                m = p.showed,
                _ = p.hasAnyPosition();
                h = !_ || _ && !m,
                h && (c.clearBinaryPosition(), c.setOptionSettingsType(n.getType()), c.setOptionSettingsId(n.getID()), g.options._lastSelectedMark = null)
            }
            var y = n.getSymbolName();
            if (a.getMainSymbolName() !== y && i.setActiveChart(y), a = e.activeChart, p = a.tradePanelModule, m = p.showed, _ = p.hasAnyPosition(), h = !_ || _ && !m) {
                e.OptionsSettings.setSelectedOptionType(n.getType());
                var S = this.getSelectedRow().getCellValues(),
                f = S.Period,
                v = f.getOptions(),
                C = f.getSelectedOption();
                if (n.lastSelectedValue = v[C].Data.period, a.getMainSymbolName() === y) {
                    var b = {
                        workMode: e.tradePanelConst.workMode.binary,
                        toolType: n.getType(),
                        symbol: e.SymbolsData.getSymbols()[n.getSymbolName()],
                        binaryOption: n,
                        chart: a.charts[0]
                    };
                    p.changeData(b)
                }
            }
        }
    },
    i._render = function() {
        this._Template = e._Templates.OptionsSettingsTable,
        this._RowTemplates = [e._Templates.OptionsSettingsTableRow],
        this._HeaderTemplate = e._Templates.OptionsSettingsTableHeader,
        this._HeaderColumns = t(),
        this._ContextMenu = this.getContextMenu(),
        this._AutoSizes = [1, 1, 1, 1],
        this._IsAutoSize = !0,
        this._TableType = "OptionsSettings",
        this._IsSizingEnabled = !0,
        this._DraggableRows = !0,
        this._LastChangedTime = 0,
        this._CustomScrollEnabled = !0,
        this._ContextMenu.getItemById("Buy_Option").investorModeDependency = !0,
        e.TableOptionsSettings.base._render.apply(this, arguments)
    },
    i._onRowDoubleClick = function(t) {
        if (0 != t && !e.investorAccount) {
            var i = e.OptionsSettings.byID(t);
            if (i) {
                if (!e.SymbolsData.getSymbols()[i.getSymbolName()].allowTrade()) return;
                var s = this.getSelectedRow().getValue("Period"),
                n = s.getSelectedData();
                e.getTerminal().showBuyOptionDialogByChart(i, n)
            } else e.getTerminal().showBuyOptionDialogByChart(null);
            this.canDeActivateMark() && e.activeChart.deActivateMarks()
        }
    },
    i.onContextMenuItemClick = function(t) {
        t.preventDefault();
        var i = t.Item.getId();
        if (i) {
            var s = this.getSelectedRow().getId(),
            n = e.OptionsSettings.byID(s);
            switch (i) {
            case "Buy_Option":
                if (n) {
                    var o = this.getSelectedRow().getValue("Period"),
                    a = o.getSelectedData();
                    e.getTerminal().showBuyOptionDialogByChart(n, a)
                } else e.getTerminal().showBuyOptionDialogByChart(null);
                break;
            case "New_Chart":
                var r = e.getTerminal(),
                l = n.getSymbolName(),
                h = n.getID(),
                d = n.getType(),
                c = r.createNewChart(l, h, e.OptionsSettings.getSelectedOptionType()),
                u = e.showTradePanel(),
                g = {
                    workMode: e.tradePanelConst.workMode.binary,
                    toolType: d,
                    symbolName: l,
                    binaryOptionId: h,
                    chartIndex: 0,
                    showed: u
                };
                e.OptionsSettings.setSelectedOptionSettingsID(h),
                c.initTradePanelModule(g),
                e.updateSizeTradePanels(c, u);
                break;
            case "Option_List":
                e.getOptionsSettingsListDialog().show();
                break;
            case "Information":
                e.getDialogOptionInfo(n).show()
            }
            t.Item._ParentMenu.hide()
        }
    },
    i.getContextMenu = function() {
        return this._ContextMenu ? this._ContextMenu: new e.Menu({
            CheckedType: "NoChecked",
            BeforeOpen: e.Delegate(this, this._onContextMenuOpen),
            MenuSource: e._tableOptionsSettings,
            ItemClick: e.Delegate(this, this.onContextMenuItemClick),
            Items: [{
                Text: "Buy option",
                Id: "Buy_Option",
                Key: "cMFBuyOption",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 20,
                ImageListCol: 0
            },
            {
                Text: "New Chart",
                Id: "New_Chart",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 24,
                ImageListCol: 0,
                Key: "cMFNewChart"
            },
            {
                Text: "Information",
                Id: "Information",
                Key: "cMFInfoSymbols"
            },
            {
                Text: "Option list",
                Id: "Option_List",
                Key: "cMFOptionSettingsList"
            }]
        })
    },
    i._onContextMenuOpen = function() {
        this.canDeActivateMark() && e.activeChart.deActivateMarks();
        var t = this._ContextMenu.getItemById("Buy_Option"),
        i = this._ContextMenu.getItemById("New_Chart"),
        s = this._ContextMenu.getItemById("Information"),
        n = e.OptionsSettings.getFavoritesByType(e.OptionsSettings.getSelectedOptionType()),
        o = !(0 == n.length);
        t.setEnabled(o),
        i.setEnabled(o);
        var a = this.getOptionSettingsById(this.getSelectedRow().getId());
        if (a) {
            var r = e.SymbolsData.getSymbols()[a.getSymbolName()];
            if (!r) return t.setEnabled(!1),
            void s.setEnabled(!1);
            r.allowTrade() || t.setEnabled(!1)
        }
        s.setEnabled(o),
        e.investorAccount && (t.setEnabled(!1), t.setVisible(!1))
    },
    i.fillTable = function() {
        for (var t, i, s, n, o, a = e.OptionsSettings,
        r = e.InputSelect,
        l = e.Delegate,
        h = a.getSelectedOptionType(), d = a.getOptionsByTypeExceptForbidden(h, !0), c = [], u = 0, g = d.length; u < g; ++u) {
            i = d[u],
            t = i.getID(),
            s = i.getOptionPeriodCaptions(),
            n = i.lastSelectedValue,
            o = i.getFirstPeriod(),
            n !== -1 && (o = n);
            var p = new r({
                Edit: !1,
                Options: s,
                ChangedValue: l(this, this._onPeriodsChangeValue),
                DropDown: l(this, this._onPeriodsDropDown)
            });
            p.setValue(i.getOptionPeriodCaption(o)),
            p.setData({
                period: o,
                optionSettingsID: t
            }),
            c.push({
                templateIndex: 0,
                rowId: t,
                cellValues: {
                    SymbolName: i.getSymbolName(),
                    Name: i.getName(),
                    Price: i.getPrice(),
                    Period: p,
                    Profit: this.getMaxProfit(i)
                }
            })
        }
        e.TableOptionsSettings.base.fillTable.call(this, c),
        a.setSelectedOptionSettingsID(this.getSelectedRowID())
    },
    i._onPeriodsDropDown = function(e) {
        if (e.getData()) {
            var t = e.getData().optionSettingsID;
            this.setSelectedRow(t)
        }
    },
    i._onPeriodsChangeValue = function(t) {
        var i = this.getSelectedRow(),
        s = i.getId(),
        n = e.OptionsSettings.byID(parseInt(s));
        t.sender.setData({
            period: t.sender.getSelectedData().period,
            optionSettingsID: n.getID()
        }),
        n.lastSelectedValue = t.sender.getSelectedData().period
    },
    i.getOptionSettingsBySymbolName = function(t) {
        for (var i = this.getRows(), s = [], n = Object.keys(i).map(function(e) {
            return i[e]
        }), o = 0; o < n.length; o++) e.OptionsSettings.byID(parseInt(n[o].getId())) && e.OptionsSettings.byID(parseInt(n[o].getId())).getSymbolName() === t && s.push(n[o]);
        switch (s.length) {
        case 0:
            return;
        default:
            return e.OptionsSettings.byID(parseInt(s[0].getId()))
        }
    },
    i.getMaxProfit = function(t) {
        for (var i = t._optionParams,
        s = i.length,
        n = 0,
        o = null,
        a = null,
        r = 0; r < s; r++) a = i[r],
        o = e.parseFloat(a.payoutPercentage),
        n = n < o ? o: n;
        return n ? n: null
    },
    i.getOptionSettingsById = function(t) {
        if (this.getRows()[t]) return e.OptionsSettings.byID(t)
    },
    i._onGetOptionsSettings = function() {
        1 == e.getTerminal().getSwiperQuotes().getSelectedPageIndex() && this.fillTable()
    },
    i._onRowDragStart = function(t) {
        var i = t.sender.getId(),
        s = e.OptionsSettings.byID(i),
        n = s.getType();
        e.getTerminal().getSwiperQuotes().getSelectedPage();
        t.event.dataTransfer.setData("optionSettingsId", i),
        t.event.dataTransfer.setData("optionSettingsType", n),
        t.event.dataTransfer.setData("text", t.sender._CellValues.SymbolName);
        var o = document.getElementById("InvisibleDragGhost");
        null == o && (o = document.createElement("div"), o.setAttribute("style", "position: absolute; display: fixed; top: 0; left: 0; width: 1px; height: 1px;"), o.setAttribute("id", "InvisibleDragGhost"), document.body.appendChild(o)),
        "setDragImage" in t.event.dataTransfer && t.event.dataTransfer.setDragImage(o, 0, 0)
    },
    i._onContextMenu = function(e) {
        var t = this.getRowById(e.sender.getId());
        this.setSelectedRow(t.getId());
        var i = e.event.clientX ? e.event.clientX: e.event.targetTouches[0].clientX,
        s = e.event.clientY ? e.event.clientY: e.event.targetTouches[0].clientY,
        n = this.getContextMenu();
        n.hide(),
        n.show(i, s)
    },
    i._onGetQuote = function(t) {
        if (1 == e.getTerminal().getSwiperQuotes().getSelectedPageIndex()) {
            this._LastChangedTime = t._LastChangedTime;
            for (var i in this.getRows()) {
                var s = this.getRows()[i],
                n = e.OptionsSettings.byID(s.getId());
                n && n.getSymbolName() == t.getSymbolName() && s.setValue("Price", n.getPrice())
            }
        }
    },
    i.setActiveRowBySymbolName = function(t, i) {
        var s = !1,
        n = !1;
        for (var o in this.getRows()) {
            var a = this.getRows()[o],
            r = e.OptionsSettings.byID(parseInt(a.getId()));
            if (r) {
                if (r.getName() == i) {
                    n = a;
                    break
                }
                r.getSymbolName() != t || s || (s = a)
            }
        }
        a = n || s,
        a && this.getSelectedRow() != a && (this.setSelectedRow(a.getId()), e.OptionsSettings.setSelectedOptionSettingsID(r.getID()))
    },
    i = null,
    e.getOptionsSettingsTable = function() {
        return e._tableOptionsSettings || (e._tableOptionsSettings = new e.TableOptionsSettings),
        e._tableOptionsSettings
    },
    e.deleteTableOptionsSettings = function() {
        e._tableOptionsSettings && (e._tableOptionsSettings.unregister(), delete e._tableOptionsSettings, e._tableOptionsSettings = null)
    },
    e
}),
define("accountManager", ["button", "templates"],
function(e) {
    var t = function(t) {
        function i(e) {
            localStorage.setItem(m.connectionInfo, JSON.stringify(e))
        }
        function s() {
            try {
                return JSON.parse(localStorage.getItem(m.connectionInfo))
            } catch(e) {
                return null
            }
        }
        function n(e) {
            localStorage.setItem(m.demoAccount, JSON.stringify(e))
        }
        function o() {
            try {
                return JSON.parse(localStorage.getItem(m.demoAccount))
            } catch(e) {
                return null
            }
        }
        function a(e) {
            localStorage.setItem(m.loginPasswordInfo, JSON.stringify(e))
        }
        function r() {
            try {
                return JSON.parse(localStorage.getItem(m.loginPasswordInfo))
            } catch(e) {
                return null
            }
        }
        function l() {
            try {
                return JSON.parse(localStorage.getItem(m.webOfficeAccount))
            } catch(e) {
                return null
            }
        }
        function h() {
            var e = sessionStorage.getItem(_.login),
            t = sessionStorage.getItem(_.password),
            i = sessionStorage.getItem(_.serverName),
            s = sessionStorage.getItem(_.token);
            return {
                login: e,
                password: t,
                serverName: i,
                token: s
            }
        }
        var d = window.UtipConfig,
        c = [],
        u = [],
        g = {},
        p = e.serversMode == e.serversModes.fromConfig || !(e.Browser.IsMobile || e.Browser.IsTablet),
        m = {
            connectionInfo: "ConnectionsInfo",
            demoAccount: "DemoAccount",
            loginPasswordInfo: "LoginPasswordInfo",
            webOfficeAccount: "WebOfficeAccount",
            token: "token"
        },
        _ = {
            login: "Login",
            password: "Password",
            serverName: "ServerName",
            token: "Token"
        };
        this.isConfigServersMode = p === !0,
        this.getCurrentAccount = function() {
            return g
        },
        this.getDemoAccount = function() {
            return o()
        },
        this.getCurrentAccountServerName = function() {
            var e = g.Server;
            return e ? e.Name: ""
        },
        this.getCurrentAccountPassword = function() {
            return g.Password
        },
        this.setGroups = function(t) { ! e.valueIsEmpty(t) && t instanceof Array && (c = t)
        },
        this.getGroups = function() {
            return c
        },
        this.getGroupNames = function() {
            for (var e = [], t = c.length, i = 0; i < t; ++i) e.push(c[i].Name);
            return e
        },
        this.groupsCount = function() {
            return c.length
        },
        this.saveLocalStorageServers = function(t) {
            e.savedServers = t,
            t = JSON.stringify({
                Servers: t
            }),
            localStorage.setItem("SavedServers", t)
        },
        this.updateServers = function(t) {
            var i = e.savedServers;
            t === !1 ? u = i: (u = d.Servers, this.setGroups(d.Groups))
        },
        this.getServers = function() {
            return u
        },
        this.getServerNames = function() {
            for (var t = [], i = e.UtipFunctions.filterOnlyBinaryServersIOS(u), s = i.length, n = 0; n < s; ++n) t.push(i[n].Name);
            var o = !e.AccountManager.isConfigServersMode && t instanceof Array;
            return o && (otherServer = e.LangManager.getStringByKey("cMobileServerSearch") || "Search servers", t.push(otherServer)),
            t
        },
        this.getServerIndexByName = function(t) {
            if (!e.valueIsEmpty(t)) {
                for (var i = u.length,
                s = 0; s < i; ++s) if (u[s].Name === t) return s;
                return - 1
            }
        },
        this.containsGroup = function(e) {
            for (var t = null,
            i = c.length,
            s = 0; s < i; ++s) if (t = c[s], t.Id === e) return ! 0;
            return ! 1
        },
        this.getGroupById = function(e) {
            for (var t = null,
            i = c.length,
            s = 0; s < i; ++s) if (t = c[s], t.Id === e) return t;
            return ! 1
        },
        this.getGroupByName = function(e) {
            for (var t = null,
            i = c.length,
            s = 0; s < i; ++s) if (t = c[s], t.Name === e) return t;
            return ! 1
        },
        this.setConnectionInfoByArguments = function(t) {
            var n = s() || {};
            t = t || {};
            var o = null;
            for (var a in t) o = t[a],
            e.valueIsEmpty(o) || (n[a] = o);
            i(n)
        },
        this.updateLastAccount = function(t, n) {
            var o = s() || {},
            a = t.login,
            r = t.password,
            l = t.serverName,
            h = this.getAccountsByServerName(l),
            d = e.UtipFunctions.isExistsAccount(h, a);
            d == -1 ? h.push({
                Login: a,
                Password: !o.SaveChecked || e.Browser.IsMobile ? CryptoJS.RC4.encrypt(r, e.SecretString).toString() : "",
                Token: n
            }) : (h[d].Password = !o.SaveChecked || e.Browser.IsMobile ? CryptoJS.RC4.encrypt(r, e.SecretString).toString() : "", h[d].Token = n),
            o[l] = h,
            o.Last = {
                Server: l,
                LoginIdx: e.UtipFunctions.getLoginIndexByServer(h, a),
                Token: n
            };
            var c = o.Last.Password;
            o.SaveChecked === !1 || e.Browser.IsMobile ? (c = CryptoJS.RC4.encrypt(r, e.SecretString).toString(), h[o.Last.LoginIdx].Password = c) : (h[o.Last.LoginIdx].Password = "", c = ""),
            o.Last.Password = c,
            this.updateSessionData({
                login: a,
                password: c,
                serverName: l,
                token: n
            }),
            i(o)
        },
        this.updateDemoInfo = function(t) {
            t = e.valueIsEmpty(t) ? "{ }": t,
            a(t)
        },
        this.updateSessionData = function(e) {
            sessionStorage.setItem("Token", e.token),
            sessionStorage.setItem("ServerName", e.serverName),
            sessionStorage.setItem("Login", e.login),
            sessionStorage.setItem("Password", e.password)
        },
        this.getDemoInfo = function() {
            return r()
        },
        this.removeDemoInfo = function() {
            localStorage.removeItem(m.loginPasswordInfo)
        },
        this.getWebofficeAccount = function() {
            return l()
        },
        this.getAccountsByCurrentAccountServer = function() {
            var t = [],
            i = g.Server,
            n = g.Login;
            if (i && (t = this.getAccountNamesByServerName(i.Name)), n) return t;
            var o = s() || {},
            a = o.Last,
            r = null,
            l = 0,
            h = n;
            return a && !e.valueIsEmpty(r = a.LoginIdx) && (l = r, h = g.Login = t[l], h && (g.Password = CryptoJS.RC4.decrypt(a.Password || "", e.SecretString).toString(CryptoJS.enc.Utf8))),
            h && t.indexOf(h) === -1 && t.push(h),
            t
        },
        this.getAccountsByServerName = function(e) {
            var t = s() || {},
            i = t[e] || [],
            n = i.length,
            o = [];
            if (i) for (var a = 0; a < n; ++a) o.push(i[a]);
            return o
        },
        this.getAccountNamesByServerName = function(e) {
            var t = s() || {},
            i = t[e] || [],
            n = i.length,
            o = [];
            if (i) for (var a = 0; a < n; ++a) o.push(i[a].Login);
            return o
        },
        this.getLastAccount = function() {
            var e = s() || {};
            return e.Last
        },
        this.getConnectionInfo = function() {
            return s()
        },
        this.getDataByAccountNumber = function(t, i) {
            var n = s() || {},
            o = i || g.Server,
            a = [],
            r = -1;
            return o && (a = n[o.Name] || [], r = e.UtipFunctions.getLoginIndexByServer(a, t)),
            {
                accountArray: a,
                index: r
            }
        },
        this.updateAuthAccount = function(t) {
            g = {},
            g.Login = t.login,
            g.Password = t.password,
            p === !0 ? g.Server = e.Config.Servers[t.serverIndex] : g.Server = e.savedServers[t.serverIndex]
        },
        this.updateDemoAccount = function(t) {
            var i = o() || {};
            t = e.valueIsEmpty(t) ? {}: t,
            i.server = t.server,
            i.type = t.type,
            i.deposit = t.deposit,
            i.name = t.name,
            i.surname = t.surname,
            i.email = t.email,
            i.phone = t.phone,
            i.country = t.country,
            i.city = t.city,
            i.leverage = "1:" + t.leverage,
            n(i)
        },
        this.clearToken = function() {
            var t = e.Auth.getServer(),
            n = t.Name,
            o = s() || {},
            a = o.Last;
            a && a.Token && (a.Token = "");
            var r;
            e.TraderData._TraderInfo ? r = e.UtipFunctions.isExistsAccount(o[n], e.TraderData._TraderInfo.id) : a && a.LoginIdx && (r = a.LoginIdx),
            r != -1 && null != r && o[n] && o[n][r] && (o[n][r].Token = ""),
            i(o),
            sessionStorage.setItem("Token", "")
        },
        this.extractTokenFromStorage = function() {
            var t = !1,
            i = null,
            n = null,
            o = null,
            a = r(),
            l = h() || {},
            d = l.token;
            if (d) {
                i = l.serverName,
                o = l.login;
                var c = l.password;
                return c && (n = CryptoJS.RC4.decrypt(c, e.SecretString).toString(CryptoJS.enc.Utf8)),
                t = d,
                n || a || (t = null),
                o && t && i && n && this.updateLastAccount({
                    login: o,
                    password: n,
                    serverName: i
                },
                t),
                t
            }
            var u = s() || {},
            g = u.Last;
            return g && g.Token && (t = g.Token, n = g.Password, i = g.Server, o = u[i][g.LoginIdx].Login, n || a || (t = null), this.updateSessionData({
                login: o,
                password: n,
                serverName: i,
                token: t
            })),
            t
        },
        function(t) {
            var i = s() || {},
            n = i.Last,
            o = p === !0 ? d.Servers: e.savedServers,
            a = null,
            r = o.length;
            if (!g.Server && n && n.Server) for (var l = 0; l < r; ++l) if (a = o[l], a.Name === n.Server) {
                g.Server = a;
                break
            }
            this.updateServers(p)
        }.apply(this, t)
    };
    return e.valueIsEmpty(e.AccountManager) && (e.AccountManager = new t),
    e
}),
define("errorModule", ["templates"],
function(e) {
    var t = function() {
        function t(e) {
            var t = e.currentTarget.parentNode,
            i = t.parentNode;
            this.hide(i)
        }
        function i(e) {
            return e.error.equalSender(e.sender)
        }
        function s(e) {
            return e.hideServerErrors === !0 || !e.error.isServerError()
        }
        function n(e, t) {
            for (var i = null,
            s = 0; o.length > 0 && s < o.length;) i = o[s],
            t.error = i,
            e.apply(this, [t]) ? (i.hide(), i = null, o.splice(s, 1)) : s++
        }
        var o = [];
        this.show = function(e) {
            var i = new a(e, t.bind(this));
            i.show(),
            o.push(i)
        },
        this.hide = function(e) {
            n(i, {
                sender: e
            })
        },
        this.hideAllErrors = function(t) {
            var i = null,
            o = {
                hideServerErrors: !1
            };
            if (t instanceof Object) for (var a in t) i = t[a],
            !e.valueIsEmpty(i) && a in o && (o[a] = i);
            else t = null;
            n(s, o)
        };
        var a = function(t, i) {
            t = t || {};
            var s = null,
            n = null,
            o = null,
            a = null,
            r = null,
            l = null,
            h = t.message,
            d = t.errorType,
            c = t.messageType,
            u = t.sender,
            g = null,
            p = {
                css: {
                    success: "success",
                    information: "information",
                    warning: "warning",
                    error: "error",
                    use: "use"
                },
                errorType: {
                    server: 0,
                    client: 1
                },
                messageType: {
                    information: 0,
                    warning: 1,
                    error: 2
                },
                cssMessageType: {
                    0 : "information",
                    1 : "warning",
                    2 : "error"
                },
                events: {
                    tablets: {
                        touch: {
                            end: "touchend"
                        }
                    },
                    pc: {
                        mouse: {
                            click: "click"
                        }
                    }
                }
            },
            m = e.Browser,
            _ = m.IsTablet;
            m.IsMobile;
            this.isServerError = function() {
                return d === p.errorType.server
            },
            this.show = function() {
                if (u) {
                    var t = p.errorType,
                    s = p.css,
                    o = p.cssMessageType,
                    l = u instanceof e.BaseControl ? u.getDomNode() : u;
                    switch (d) {
                    case t.server:
                        a.innerText = h.title,
                        n.classList.add("use"),
                        l.appendChild(n),
                        setTimeout(function() {
                            n.style.opacity = "1"
                        },
                        10),
                        clearInterval(g),
                        g = setInterval(function() {
                            i({
                                currentTarget: n
                            })
                        }.bind(this), 2010);
                        break;
                    case t.client:
                        n.style.opacity = "",
                        a.innerText = h.title,
                        r.innerText = h.description,
                        n.classList.add(s[o[c]]),
                        l.classList.add(s.error),
                        l.appendChild(n),
                        setTimeout(function() {
                            n.style.opacity = "1"
                        },
                        10)
                    }
                }
            },
            this.equalSender = function(t) {
                return e.equalsObjects(u, t)
            },
            this.hide = function(t) {
                function i() {
                    r.removeChild(n);
                    var e = p.css;
                    n.classList.remove(e.success),
                    n.classList.remove(e.information),
                    n.classList.remove(e.warning),
                    n.classList.remove(e.error)
                }
                if (u) {
                    var s = p.errorType,
                    o = p.css,
                    r = u instanceof e.BaseControl ? u.getDomNode() : u;
                    switch (d) {
                    case s.server:
                        a.innerText = "",
                        n.style.opacity = "0",
                        setTimeout(function() {
                            n.classList.remove(o.use),
                            r.removeChild(n)
                        }.bind(this), 150),
                        clearInterval(g),
                        g = null;
                        break;
                    case s.client:
                        t = !e.valueIsEmpty(t) && !!t,
                        n.style.opacity = "0",
                        r.classList.remove(o.error),
                        t ? i() : setTimeout(i, 150)
                    }
                }
            },
            function(t) {
                function h(e) {
                    e.preventDefault(),
                    e.stopPropagation()
                }
                var d = p.events,
                c = null;
                c = _ ? d.tablets.touch.end: d.pc.mouse.click,
                t ? (s = e.htmlToDOM(e._Templates.AuthServerErrorContainer, !0, null), n = s[0], a = n.querySelector(".title"), l = n.querySelector(".closeButton"), l.classList.add("icon-exit-cross"), l.addEventListener(c, i)) : (s = e.htmlToDOM(e._Templates.AuthClientErrorContainer, !0, null), n = s[0], o = n.querySelector(".container"), a = o.querySelector(".title"), r = o.querySelector(".description")),
                n.addEventListener(c, h)
            } (this.isServerError()),
            this.getSender = function() {
                return u
            }
        }
    };
    return e.valueIsEmpty(e.ErrorModule) && (e.ErrorModule = new t),
    e
}),
define("authModule", ["base", "userSettings", "inputSelect", "button", "templates", "errorModule", "accountManager"],
function(e) {
    var t = function() {
        function t(e) {
            e.stopPropagation()
        }
        function i(t) {
            var i = Ee.controlButtons,
            s = "",
            n = "";
            switch (t) {
            case i.openDemo:
                n = Ee.css.selected;
                break;
            case i.signIn:
            default:
                s = Ee.css.selected
            }
            if (Ke || Ge) {
                var o = Ee.css.selected,
                a = Ke.getDomNode(),
                r = Ge.getDomNode();
                e.removeCSSClass(a, o),
                e.removeCSSClass(r, o),
                e.addCSSClass(a, s),
                e.addCSSClass(r, n)
            } else Ke = new e.Button({
                ParentNode: xe,
                Id: i.signIn,
                Key: "cBTNConnect",
                Text: "Sign in",
                Class: " " + s + " signInTab",
                Click: e.Delegate(this, v)
            }),
            Ge = new e.Button({
                ParentNode: xe,
                Id: i.openDemo,
                Text: window.UtipConfig.BrokersSettings.OpenDemoAccountCaption[e.LangManager.getLang()] || e.LangManager.getStringByKey("cCFOpendemo") || "Open a demo account",
                Class: " " + n + " openDemoTab",
                Click: e.Delegate(this, v),
                Visible: Te.isVisibleOpenDemo === !0
            });
            D()
        }
        function s() {
            i(He),
            o.apply(this, []),
            l.apply(this, []);
            var t = Ee.controlButtons;
            switch (He) {
            case t.openDemo:
                u();
                break;
            case t.signIn:
            default:
                r(!1)
            }
            w.apply(this, []),
            O.apply(this, [null]);
            var s = Ee.events,
            a = null,
            h = null;
            if (We) {
                var d = s.tablets.touch;
                a = d.end,
                h = d.move
            } else {
                var c = s.pc.mouse;
                a = c.click,
                h = c.move
            }
            ke.addEventListener(a, me),
            ke.addEventListener(h, _e),
            window.addEventListener("resize", ye),
            n(),
            re.apply(this, []),
            he.apply(this, []),
            ne.apply(this, [e.UserSettings.Terminal.ColorScheme])
        }
        function n() {
            function t(t) {
                var i = document.querySelector(".overlay.opened");
                if (i) {
                    var s = t.keyboardHeight,
                    n = s ? e.getAppHeight() - s + "px": "";
                    i.classList.toggle("animate"),
                    i.style.height = n
                }
                setTimeout(function() {
                    document.body.scrollTop = 0,
                    ye()
                },
                200)
            }
            window.WT_Device.ipad() && window.WT_Device.cordova() && (window.cordova.plugins.Keyboard.disableScroll(!0), window.addEventListener("native.keyboardshow", t), window.addEventListener("native.keyboardhide", t))
        }
        function o() {
            Ie = document.createElement("div"),
            Ie.classList.add("authView"),
            qe = g(Ie, Ee.controlButtons.signIn),
            ze = new e.InputSelect({
                ParentNode: Ie,
                Edit: !0,
                Options: ve.getAccountsByCurrentAccountServer(),
                Placeholder: "Login",
                PlaceholderKey: "cLPFLOgin",
                Width: 250,
                Height: 40,
                ItemsHeight: 40,
                Class: "Login",
                IconClass: "icon-login",
                MenuClass: "AmazingMenu",
                ChangeValue: e.Delegate(this, F),
                ChangedValue: e.Delegate(this, F)
            }),
            je = _.apply(this, []),
            Qe = new e.CheckBox({
                ParentNode: Ie,
                LabelPosition: "Right",
                Label: "Don't remember",
                Key: "cMFAnotherComputer"
            }),
            Ye = Q({
                ParentNode: Ie,
                Template: e._Templates.CandyButton,
                Key: "cBTNConnect",
                Text: "Sign in",
                Width: 250,
                Height: 50,
                Class: ""
            },
            this, K),
            z()
        }
        function a() {
            Ie.parentNode === Ve && Ve.removeChild(Ie)
        }
        function r(e) {
            c(),
            Ve.appendChild(Ie);
            var t = ve.getCurrentAccountServerName(),
            i = qe.getSelectedOption(),
            s = 0;
            i > -1 ? qe.setSelectedOption(i) : t ? qe.setValue(t) : qe.setSelectedOption(s),
            e === !1 && qe.ChangedValue.fire({
                event: null,
                sender: qe
            })
        }
        function l() {
            we = document.createElement("div"),
            we.classList.add("demoView"),
            Re = g(we, Ee.controlButtons.openDemo),
            d() && (it = p()),
            h() && (st = new e.Input({
                ParentNode: we,
                Edit: !0,
                Placeholder: "Deposit",
                PlaceholderKey: "cWCTDeposit",
                Width: 250,
                Height: 40,
                Class: "padding",
                IconClass: "icon-deposit"
            })),
            Je = new e.Input({
                ParentNode: we,
                Edit: !0,
                Placeholder: "Name",
                PlaceholderKey: "cWCTAccountListFormName",
                Width: 250,
                Height: 40,
                Class: "padding",
                IconClass: "icon-user"
            }),
            Xe = new e.Input({
                ParentNode: we,
                Edit: !0,
                Placeholder: "Surname",
                PlaceholderKey: "cWCTAccountListFormSurname",
                Width: 250,
                Height: 40,
                Class: "padding",
                IconClass: "icon-user"
            }),
            Ze = new e.Input({
                ParentNode: we,
                Edit: !0,
                Placeholder: "E-mail",
                PlaceholderKey: "cWCTAccountListFormEmail",
                Width: 250,
                Height: 40,
                MaxLength: 255,
                Class: "padding",
                IconClass: "icon-mail"
            }),
            tt = new e.Input({
                ParentNode: we,
                Edit: !0,
                Placeholder: "Phone",
                PlaceholderKey: "cWCTAccountListFormTelephone",
                Width: 250,
                Height: 40,
                Class: "padding",
                IconClass: "icon-phone"
            }),
            $e = new e.Input({
                ParentNode: we,
                Edit: !0,
                Placeholder: "Country",
                PlaceholderKey: "cWCTAccountListFormCountry",
                Width: 250,
                Height: 40,
                Class: "padding",
                IconClass: "icon-map-mark"
            }),
            et = new e.Input({
                ParentNode: we,
                Edit: !0,
                Placeholder: "City",
                PlaceholderKey: "cWCTAccountListFormCity",
                Width: 250,
                Height: 40,
                Class: "padding",
                IconClass: "icon-map-mark"
            }),
            nt = Q({
                ParentNode: we,
                Template: e._Templates.CandyButton,
                Key: "cBTNNAdd",
                Text: "Register",
                Width: 250,
                Height: 50,
                Class: ""
            },
            this, G),
            j()
        }
        function h() {
            var e = Te.Default_FirstDeposit;
            return ! (isFinite(e) || e > -1)
        }
        function d() {
            var e = Te.Default_GroupId;
            return ! isFinite(e) || !ve.containsGroup(e)
        }
        function c() {
            we.parentNode === Ve && Ve.removeChild(we)
        }
        function u() {
            a(),
            Ve.appendChild(we)
        }
        function g(i, s) {
            var n = ve.getServerNames(),
            o = !ve.isConfigServersMode && n instanceof Array,
            a = new e.InputSelect({
                ParentNode: i,
                Placeholder: "Server",
                PlaceholderKey: "cPFServer",
                Edit: !1,
                NeedleDrop: !0,
                Options: n,
                Width: 250,
                Height: 40,
                ItemsHeight: 40,
                Class: "Server",
                IconClass: "icon-server",
                MenuClass: "AmazingMenu" + (o === !0 ? " savedServers": ""),
                ChangedValue: ot
            });
            a.ChangedValue.add(at),
            a.DropDown.add(ht),
            a.workMode = s;
            var r = a.getDomNode();
            return r.addEventListener("click", t),
            r.addEventListener("touchend", t),
            a
        }
        function p() {
            if (it) return it;
            var t = new e.InputSelect({
                Placeholder: "Account type",
                PlaceholderKey: "cWCTAccountListFormAccountType",
                Options: ve.getGroupNames(),
                Width: 250,
                Height: 40,
                ItemsHeight: 40,
                Class: "AccountType",
                IconClass: "icon-account-type",
                MenuClass: "AmazingMenu"
            });
            return we.insertBefore(t.getDomNode(), Re.getDomNode().nextSibling),
            t
        }
        function m() {
            if (it) {
                var e = it.getDomNode(),
                t = e.parentNode;
                t && t.removeChild(e),
                it = null
            }
        }
        function _() {
            var t = new e.Input({
                ParentNode: Ie,
                Placeholder: "Password",
                PlaceholderKey: "cLPFPAss",
                Width: 250,
                Height: 40,
                Class: "padding",
                IconClass: "icon-password-lock input",
                InputType: "Password",
                KeyPress: e.Delegate(this, W)
            });
            t.setValue(ve.getCurrentAccountPassword());
            var i = t.getDomNode(),
            s = document.createElement("div");
            s.classList.add("eye"),
            s.classList.add("icon-eye");
            var n = Ee.events,
            o = null,
            a = null,
            r = null;
            if (We) {
                var l = n.tablets.touch;
                o = l.start,
                a = l.leave,
                r = l.end
            } else {
                var h = n.pc.mouse;
                o = h.down,
                a = h.leave,
                r = h.up
            }
            return s.addEventListener(o, y),
            s.addEventListener(a, S),
            s.addEventListener(r, y),
            i.appendChild(s),
            t
        }
        function y(e) {
            var t = je.getInputNode(),
            i = Ee.events,
            s = null,
            n = null;
            if (We) {
                var o = i.tablets.touch;
                s = o.start,
                n = o.end
            } else {
                var a = i.pc.mouse;
                s = a.down,
                n = a.up
            }
            e.type === s ? t.setAttribute("type", "text") : e.type === n && t.setAttribute("type", "password")
        }
        function S(e) {
            var t = je.getInputNode();
            t.setAttribute("type", "password")
        }
        function f() {
            return new e.Menu({
                Width: 100,
                CheckedType: "Checked",
                Items: Ce.getLanguageItems(),
                ItemClick: e.Delegate(this, ue),
                Class: "BigMenu"
            })
        }
        function v(t) {
            if (Ue !== !0) {
                e._menuMasterObject.hideAll(),
                ge(!1);
                var s = t.event,
                n = t.Sender.getId(),
                o = Ee.controlButtons;
                He === n || He == o.signIn && e.valueIsEmpty(n) || (He = n, i(n), Ae.style.opacity = "0", Ue = !0, setTimeout(function() {
                    switch (fe.hideAllErrors({
                        hideServerErrors: !0
                    }), n) {
                    case o.openDemo:
                        u();
                        break;
                    case o.signIn:
                    default:
                        r(!0)
                    }
                    Ae.style.opacity = "1",
                    Ue = !1
                },
                250), s && (s.preventDefault(), s.stopPropagation()))
            }
        }
        function C(e, t, i) {
            var s = Ee.css,
            n = s.disabled,
            o = e.getDomNode(),
            a = i === !0 ? Ee.other.add: Ee.other.remove;
            if (o.classList[a](s.inProgress), Ve.classList[a](n), xe.classList[a](n), ke.classList[a](n), i === !0) t && (e.baseText = e.getText(), e.setText(t));
            else {
                var r = Ce.getStringByKey(e.getKey()),
                l = e.baseText;
                t ? e.setText(t) : r ? e.setText(r) : l && e.setText(l)
            }
            this.processing = i
        }
        function b() {
            var e = Ee.controlButtons;
            switch (He) {
            case e.openDemo:
                C.apply(this, [nt, Ce.getStringByKey("cBTNNAdd") || "Register", !1]);
                break;
            case e.signIn:
            default:
                C.apply(this, [Ye, Ce.getStringByKey("cBTNConnect") || "Sign in", !1])
            }
        }
        function T(e, t) {
            ut.style.left = e + "px",
            ut.style.top = t + "px"
        }
        function P(e, t) {
            gt.style.left = ke.offsetWidth - e + "px",
            gt.style.top = t + "px"
        }
        function D() {
            var e = Ke.getDomNode(),
            t = Ge.getDomNode();
            e.querySelector(".WTButtonText"),
            t.querySelector(".WTButtonText")
        }
        function I() {
            Ge.setText(Te.OpenDemoAccountCaption[Ce.getLang()] || Ce.getStringByKey("cCFOpendemo") || "Open a demo account")
        }
        function w() {
            var e = ve.getCurrentAccount(),
            t = e.Login || "",
            i = (e.Password || "", e.Server);
            if (t && i) {
                var s = ve.getServers(),
                n = ve.getServerIndexByName(i.Name),
                o = ve.getDataByAccountNumber(t, i),
                a = o.accountArray,
                r = o.index;
                n !== -1 ? (qe.setSelectedOption(n), qe.ChangedValue.fire({
                    event: null,
                    sender: qe
                }), r !== -1 ? ze.setSelectedOption(r) : 0 !== a.length && ze.setSelectedOption(0), ze.ChangedValue.fire({
                    event: null,
                    sender: ze
                })) : 0 !== s.length && (qe.setSelectedOption(0), qe.ChangedValue.fire({
                    event: null,
                    sender: qe
                }))
            }
        }
        function M() {
            var t = ve.getDemoAccount() || {},
            i = t.server || t.serverName,
            s = Re.indexOfText(i);
            if (s !== -1 && Re.setSelectedOption(s), s = s === -1 ? 0 : s, Me === !1 && O.apply(Se, [s === -1 ? 0 : s]), it) {
                var n = t.type;
                e.valueIsEmpty(n) ? it.setSelectedOption(0) : it.setValue(n)
            }
            st && st.setValue(t.deposit),
            Je.setValue(t.name),
            Xe.setValue(t.surname),
            Ze.setValue(t.email),
            tt.setValue(t.phone),
            $e.setValue(t.country),
            et.setValue(t.city)
        }
        function O(t) {
            var i = [],
            s = {},
            n = {},
            o = 0;
            Me === !1 && (t = e.valueIsEmpty(t) || !isFinite(t) ? Re.getSelectedOption() : t, i = e.savedServers, s = i[t], n = s.Groups, o = n.length, ve.setGroups(n)),
            d() && 0 !== o ? (it = p(), it.setOptions(ve.getGroupNames()), it.setSelectedOption(0)) : m(),
            nt.setEnabled(Me === !0 || 0 !== o)
        }
        function L() {
            qe && qe.reCreateMenu(),
            Re && Re.reCreateMenu(),
            ze && ze.reCreateMenu(),
            it && it.reCreateMenu(),
            pt && (e._menuMasterObject.unRegister(pt), pt = f.apply(this, []))
        }
        function k(e) {
            var t = e.sender;
            if (Me !== !1 || t.getSelectedOption() !== t.lastOptionIndex) if (t.workMode === Ee.controlButtons.signIn) {
                var i = ve.getAccountNamesByServerName(qe.getValue()),
                s = null,
                n = null;
                ze.setOptions(s = i),
                n = s.length,
                n ? ze.setSelectedOption(0) : (ze.setValue(""), je.setValue(""), Qe.setChecked(!1)),
                se(e)
            } else O(t.getSelectedOption())
        }
        function B(t) {
            var i = t.sender;
            if (ve.isConfigServersMode === !1 && i.getSelectedOption() === i.lastOptionIndex) {
                var s = i.getDomNode();
                s.classList.add("searching"),
                i.setPlaceholder(Ce.getStringByKey("cAMSearchServer") || "Server search..."),
                i.setValue("");
                var n = Ee.controlButtons,
                o = Te.Default_GroupId,
                a = ve.getGroupById(o);
                switch (He) {
                case n.signIn:
                    ct = {
                        serverIndex: i.getSelectedOption(),
                        loginIndex: ze.getSelectedOption(),
                        loginValue: ze.getValue(),
                        password: je.getValue()
                    };
                    break;
                case n.openDemo:
                    ct = {
                        serverIndex: i.getSelectedOption(),
                        typeAccountIndex: it ? it.getSelectedOption() : -1,
                        typeAccountValue: it ? it.getValue() : a ? a.Name: "",
                        deposit: st ? st.getValue() : Te.Default_FirstDeposit,
                        name: Je.getValue(),
                        surname: Xe.getValue(),
                        email: Ze.getValue(),
                        phone: tt.getValue(),
                        country: $e.getValue(),
                        city: et.getValue()
                    }
                }
                e.requester.getServersList({
                    handler: N,
                    context: this,
                    sender: i
                })
            }
        }
        function N(t, i) {
            var s = t.result,
            n = null;
            if (s === !0) {
                t.data = e.UtipFunctions.filterOnlyBinaryServersIOS(t.data),
                dt = i.getOptions();
                var o = e.cloneObject(dt);
                o.splice(o.length - 1, 1);
                for (var a = t.data,
                r = a.length,
                l = [], h = 0; h < r; ++h) l.push(a[h].Name);
                i.ChangedValue.remove(Se, ot),
                i.ChangedValue.remove(Se, at),
                i.ChangedValue.remove(Se, ht),
                i.ChangedValue.add(rt),
                i.KeyUp.add(lt),
                i.addSelectButtonEventListener(E),
                i.setOptions(o),
                i.setReadOnly(!1),
                i.serverList = a,
                i.searchMode = !0,
                i.drop();
                var d = i.getOptionsMenu();
                n = d.getDomNode(),
                n.classList.remove("savedServers"),
                d.excludeClass("savedServers"),
                this.search.processing = !0,
                this.search.sender = i,
                n = i.getDomNode(),
                n.classList.add("searching")
            } else i.setSelectedOption(0),
            i.ChangedValue.fire({
                event: null,
                sender: i
            })
        }
        function x(t) {
            if ("change" !== t.event.type && "input" !== t.event.type) {
                var i = t.sender,
                s = i.getDomNode(),
                n = s.querySelector("input");
                menu = i.getOptionsMenu(),
                node = menu.getDomNode(),
                menu.includeClass("savedServers"),
                node.classList.add("savedServers"),
                n.blur(),
                s.classList.remove("searching");
                var o = e.savedServers,
                a = i.getSelectedOption(),
                r = i.getOptions(),
                l = i.serverList,
                h = r[a],
                d = [i.getValue()],
                c = o.filter(function(e) {
                    return e.Name === h
                });
                0 === c.length && (c = l.filter(function(e) {
                    return e.Name === h
                })),
                c = c.length > 0 ? c[0] : null,
                dt.indexOf(d[0]) === -1 && c && dt.splice.apply(dt, [ - 1, 0].concat(d)),
                i.ChangedValue.remove(Se, rt),
                i.KeyUp.remove(Se, lt),
                i.ChangedValue.add(ot),
                i.ChangedValue.add(at),
                i.ChangedValue.add(ht),
                i.removeSelectButtonEventListener(E),
                i.setReadOnly(!0),
                delete i.serverList,
                delete i.searchMode;
                for (var u = o.length,
                g = -1,
                p = 0; p < u; ++p) if (e.equalsObjects(o[p], c)) {
                    g = p;
                    break
                }
                g === -1 && null !== g && (o.push(c), g = o.length - 1, ve.saveLocalStorageServers(o)),
                Se.search.processing = !1,
                Se.search.sender = null,
                qe.setOptions(dt),
                Re.setOptions(dt),
                ve.updateServers(Me),
                i.setSelectedOption(g < 0 ? ct.serverIndex: g),
                i.ChangedValue.fire({
                    event: null,
                    sender: i
                }),
                i.setPlaceholder(Ce.getStringByKey("cPFServer") || "Server")
            }
        }
        function A(t) {
            var i = t.sender,
            s = i.getValue(),
            n = new RegExp(s, "i"),
            o = i.serverList,
            a = [],
            r = 0;
            if ("" === s) a = e.cloneObject(dt),
            a.splice(a.length - 1, 1);
            else {
                a = o.filter(function(e) {
                    return n.test(e.Name) === !0
                }),
                r = a.length;
                for (var l = 0; l < r; ++l) a[l] = a[l].Name
            }
            i.setOptions(a);
            var h = i.getOptionsMenu(),
            d = h.getDomNode();
            d.classList.remove("savedServers"),
            h.excludeClass("savedServers"),
            i.drop()
        }
        function V(e) {
            var t = e.sender || e,
            i = !ve.isConfigServersMode;
            if (i === !0 && !t.searchMode) {
                var s = t.getOptions(),
                n = Ce.getStringByKey("cAMSearchServer") || "Search servers";
                n = n.replace("...", ""),
                s[t.lastOptionIndex] = n,
                t.setOptions(s)
            }
        }
        function E() {
            if (Se.search.processing === !0) {
                var e = Se.search.sender;
                delete e.serverList,
                delete e.searchMode,
                e.setOptions(dt),
                e.ChangedValue.remove(Se, rt),
                e.ChangedValue.add(ot),
                e.ChangedValue.add(at);
                var t = e.getDomNode();
                if (t.classList.remove("searching"), e.workMode === Ee.controlButtons.signIn) {
                    e.setSelectedOption(e.previousIndex);
                    var i = ct.loginIndex;
                    isFinite(i) && i > -1 ? ze.setSelectedOption(i) : ze.setValue(ct.loginValue),
                    ze.ChangedValue.fire({
                        event: null,
                        sender: ze
                    }),
                    je.setValue(ct.password)
                } else {
                    var s = e.previousIndex;
                    if (e.setSelectedOption(s), O(s), it) {
                        var n = ct.typeAccountIndex;
                        isFinite(n) && n > -1 ? it.setSelectedOption(n) : it.setValue(ct.typeAccountValue)
                    }
                    st && st.setValue(ct.deposit),
                    Je.setValue(ct.name),
                    Xe.setValue(ct.surname),
                    Ze.setValue(ct.email),
                    tt.setValue(ct.phone),
                    $e.setValue(ct.country),
                    et.setValue(ct.city)
                }
                Se.search.processing = !1,
                Se.search.sender = null,
                e.setPlaceholder(Ce.getStringByKey("cPFServer") || "Server")
            }
        }
        function F(e) {
            se(e)
        }
        function W(e) {
            var t = e.event.charCode;
            13 === t && ee() && te.apply(this, [])
        }
        function R(t, i) {
            if (!this.processing) {
                e._menuMasterObject.hideAll(),
                ge(!1);
                var s = ee();
                s.result === !0 ? t.apply(Se, [{
                    hideServerErrors: !0
                }]) : fe.show(s.error)
            }
        }
        function H() {
            e.UserSettings.Terminal.OpenedCharts.forEach(function(e) {
                e.tradePanelData && e.options && (delete e.options._lastSelectedMark, delete e.tradePanelData.position)
            }),
            e.saveUserSettings()
        }
        function K(e) {
            R(te, e),
            document.activeElement.blur()
        }
        function G(e) {
            R(ie, e)
        }
        function U(e) {
            var t = [8, 9, 35, 36, 37, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57],
            i = e.charCode,
            s = e.keyCode;
            return 0 !== i && t.indexOf(i) === -1 ? (e.preventDefault(), e.stopPropagation(), !1) : 0 !== s && t.indexOf(s) === -1 ? (e.preventDefault(), e.stopPropagation(), !1) : void 0
        }
        function q(e) {
            32 == e.charCode && 0 == e.target.value.length && e.preventDefault();
            var t = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 40, 41, 43, 45];
            t.indexOf(e.charCode) == -1 && 8 != e.keyCode || !(e.target.value.length < 20 || 8 == e.keyCode) ? e.preventDefault() : (40 == e.charCode && e.target.value.indexOf("(") != -1 && e.preventDefault(), 41 != e.charCode || e.target.value.indexOf("(") != -1 && e.target.value.indexOf(")") == -1 || e.preventDefault(), 45 == e.charCode && e.target.value.length < 1 && e.preventDefault(), 43 == e.charCode && e.target.value.length > 0 && e.preventDefault())
        }
        function z() {
            var e = Ee.events.pc.keyboard,
            t = e.press,
            i = ze.getInputNode();
            i.addEventListener(t, U)
        }
        function j() {
            var e = Ee.events.pc.keyboard,
            t = e.press,
            i = st ? st.getInputNode() : null,
            s = tt.getInputNode();
            i && i.addEventListener(t, U),
            s.addEventListener(t, q)
        }
        function Q(t, i, s) {
            var n = We === !0 ? "TouchEnd": "Click";
            return t[n] = e.Delegate(i, Y, {
                handler: s
            }),
            new e.Button(t)
        }
        function Y(e) {
            if (Se.search.processing === !1) {
                var t = e.Event || window.event,
                i = e.Sender,
                s = e.handler;
                s.apply(this, [{
                    Event: t,
                    Sender: i
                }]),
                t && (t.preventDefault(), t.stopPropagation())
            } else E()
        }
        function X() {
            var e = qe.getSelectedOption(),
            t = ze.getInputNode(),
            i = je.getInputNode(),
            s = Qe.getChecked(),
            n = null,
            o = !1,
            a = !1,
            r = null,
            l = Ce.getStringByKey("cWCTAccountListFormError") || "Invalid parameter";
            return t.value ? i.value ? (Pe = {},
            Pe.serverIndex = e, Pe.login = t.value, Pe.password = i.value, Pe.remember = s, ve.updateAuthAccount({
                login: t.value,
                password: i.value,
                serverIndex: e
            }), o = !0) : (a = !0, r = Ce.getStringByKey("cLPFPAss") || "Password", n = je) : (a = !0, r = Ce.getStringByKey("cLPFLOgin") || "Login", n = ze),
            a && (l = '"' + r + '" ' + l),
            {
                result: o,
                error: {
                    message: {
                        title: Ce.getStringByKey("cMFInvalidParameter") || "Invalid parameter",
                        description: l
                    },
                    errorType: 1,
                    messageType: 2,
                    sender: n
                }
            }
        }
        function J() {
            var t = e.AccountManager,
            i = t.isConfigServersMode === !0,
            s = UtipConfig.BrokersSettings,
            n = ve.getGroupById(Te.Default_GroupId);
            i || (n = it ? t.getGroupByName(it.getInputNode().value) : t.getGroups()[0]),
            n || (n = {
                Id: s.Default_GroupId,
                Name: ""
            });
            var o = Te.Default_FirstDeposit;
            o = isFinite(o) ? o: window.UtipConfig.TradeSettings.DefaultDeposit || 5e3;
            var a = Re.getInputNode(),
            r = Re.getSelectedOption(),
            l = it ? it.getInputNode() : {
                value: n.Name
            },
            h = st ? st.getInputNode() : {
                value: o
            },
            d = Je.getInputNode(),
            c = Xe.getInputNode(),
            u = Ze.getInputNode(),
            g = tt.getInputNode(),
            p = $e.getInputNode(),
            m = et.getInputNode(),
            _ = Te.Default_Leverage,
            y = null,
            S = !1,
            f = !1,
            v = null,
            C = Ce.getStringByKey("cWCTAccountListFormError") || "Invalid parameter";
            return _ = isFinite(_) && 0 !== _ ? _.toString() : "100",
            isFinite(h.value) ? d.value ? c.value ? u.value ? Z(u.value) ? $(g.value) ? p.value ? m.value ? (De = {},
            De.serverIndex = r, De.server = a.value, De.type = l.value, De.groupID = n.Id, De.deposit = h.value, De.name = d.value, De.surname = c.value, De.email = u.value, De.phone = g.value, De.country = p.value, De.city = m.value, De.leverage = _, S = !0) : (f = !0, v = Ce.getStringByKey("cWCTAccountListFormCity") || "City", y = et) : (f = !0, v = Ce.getStringByKey("cWCTAccountListFormCountry") || "Country", y = $e) : (f = !0, v = Ce.getStringByKey("cWCTAccountListFormTelephone") || "Phone", y = tt) : (C = Ce.getStringByKey("cWCTAccountListFormErrormail") || "Invalid email address", y = Ze) : (f = !0, v = Ce.getStringByKey("cWCTAccountListFormEmail") || "E-mail", y = Ze) : (f = !0, v = Ce.getStringByKey("cWCTAccountListFormSurname") || "Surname", y = Xe) : (f = !0, v = Ce.getStringByKey("cWCTAccountListFormName") || "Name", y = Je) : (f = !0, v = Ce.getStringByKey("cWCTDeposit") || "Deposit", y = st),
            f && (C = '"' + v + '" ' + C),
            {
                result: S,
                error: {
                    message: {
                        title: Ce.getStringByKey("cMFInvalidParameter") || "Invalid parameter",
                        description: C
                    },
                    errorType: 1,
                    messageType: 2,
                    sender: y
                }
            }
        }
        function Z(e) {
            var t = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
            return t.test(e)
        }
        function $(e) {
            var t = /^(?!([^-]*-){5})(\+\d+)?\s*(\(\d+\))?[- \d]+$/gi;
            return t.test(e)
        }
        function ee() {
            fe.hideAllErrors({
                hideServerErrors: !0
            });
            var e = Ee.controlButtons,
            t = !1;
            switch (He) {
            case e.openDemo:
                t = J();
                break;
            case e.signIn:
            default:
                t = X()
            }
            return t
        }
        function te(t) {
            var i = e.Auth;
            if (i.getCheckAuth()) {
                var s = e.getTerminal();
                s.signOut()
            }
            if (H(), t = t || {},
            Se.search.processing === !0) return void E();
            var n = e.requester,
            o = e._menuMasterObject,
            a = e._dialogMasterObject;
            fe.hideAllErrors({
                hideServerErrors: !0
            }),
            C.apply(this, [Ye, Ce.getStringByKey("cBTNConnecting") || "Connecting", !0]),
            ve.setConnectionInfoByArguments({
                SaveChecked: Pe.remember
            }),
            ve.updateAuthAccount({
                login: Pe.login,
                password: Pe.password,
                serverIndex: Pe.serverIndex
            }),
            i.getCheckAuth() || (e.activeChart = null, o.hideAll(), a.hideAll(!0), i.resetAttempt(), n.sendTerminalVersion(n.authorization, [ve.getCurrentAccount(), !1, !1, !1], !0))
        }
        function ie() {
            if (Se.search.processing === !0) return void E();
            C.apply(this, [nt, Ce.getStringByKey("cBTNSendingData") || "Sending data", !0]),
            ve.updateDemoAccount(De);
            var t = e.getTerminal(),
            i = {
                serverIndex: De.serverIndex,
                groupName: De.type,
                groupID: De.groupID,
                deposit: De.deposit,
                leverage: De.leverage,
                name: De.name,
                surname: De.surname,
                email: De.email,
                phone: De.phone,
                country: De.country,
                city: De.city
            };
            t && t.saveSettings(),
            e.requester.sendTerminalVersion(e.requester.openDemoAccount, [i], !0),
            e._menuMasterObject.hideAll()
        }
        function se(t) {
            var i = ve.getServerIndexByName(qe.getValue()),
            s = ve.getServers(),
            n = s[i],
            o = ze.getValue(),
            a = ve.getDataByAccountNumber(o, n),
            r = a.index;
            if (r > -1) {
                var l = a.accountArray[r].Password,
                h = CryptoJS.RC4.decrypt(l, e.SecretString),
                d = 0 != h.sigBytes;
                je.setValue(d ? h.toString(CryptoJS.enc.Utf8) : "")
            } else je.setValue("");
            "" === o && ze.unselect(),
            Qe.setChecked(!1)
        }
        function ne(e) {
            var t = "./settings/menuButton",
            i = Ne.querySelector("img");
            switch (t = We ? t: "." + t, i.addEventListener("load", oe), e) {
            case "beige_color_scheme":
                i.src = t + "/lightLogo.png";
                break;
            case "black_color_scheme":
                i.src = t + "/darkLogo.png"
            }
        }
        function oe(e) {
            var t = e.currentTarget;
            Ne.style.width = t.naturalWidth + "px",
            t.removeEventListener("load", oe)
        }
        function ae() {
            var e = document.body,
            t = e.firstChild,
            i = ke.parentNode;
            if (i && i !== e) i.removeChild(ke);
            else if (i && i === e) return;
            t ? e.insertBefore(ke, t) : e.appendChild(ke)
        }
        function re() {
            var e = document.createElement("div"),
            t = document.createElement("div");
            e.classList.add("comeback"),
            t.classList.add("icon-option-arrow-up"),
            e.appendChild(t);
            var i = Ee.events,
            s = null;
            if (We) {
                var n = i.tablets.touch;
                s = n.end
            } else {
                var o = i.pc.mouse;
                s = o.click
            }
            e.addEventListener(s, this.hide.bind(this)),
            ut = e,
            ke.appendChild(ut)
        }
        function le() {
            var t = !e.valueIsEmpty(e.getTerminal());
            switch (t = t === !0 ? !!e.TerminalContainer.firstChild: t) {
            case ! 0 : ut.classList.add("use");
                break;
            case ! 1 : default:
                ut.classList.remove("use")
            }
        }
        function he() {
            var e = document.createElement("div"),
            t = document.createElement("div");
            e.classList.add("language"),
            t.classList.add("text"),
            t.innerHTML = Ce.getLang(),
            e.appendChild(t),
            gt = e;
            var i = Ee.events,
            s = null,
            n = null;
            if (We) {
                var o = i.tablets.touch;
                n = o.end,
                s = o.start
            } else {
                var a = i.pc.mouse;
                n = a.click
            }
            gt.addEventListener(n, de.bind(this)),
            s && gt.addEventListener(s, ce.bind(this)),
            ke.appendChild(gt)
        }
        function de(e) {
            pt || (pt = f.apply(this, []));
            var t = !1,
            i = pt.getItemByKey(Ce.getLang().toLowerCase());
            i && i.setChecked(!0),
            pt.getIsOpen() === !0 ? (pt.hide(), t = !1) : (pt.show(ke.offsetWidth - 100, gt.offsetTop + gt.offsetHeight + 5), t = !0),
            ge(t),
            e.preventDefault(),
            e.stopPropagation(),
            E()
        }
        function ce(e) {
            e.preventDefault(),
            e.stopPropagation()
        }
        function ue(t) {
            var i = t.Item.getKey(),
            s = gt.querySelector(".text");
            Ce.setLang(i),
            s.innerHTML = i,
            ge(!1),
            e._menuMasterObject.hideAll();
            var n = e.getTerminal();
            if (n) {
                var o = n.getHeaderPanel();
                if (o) {
                    var a = o.getAccountMenuButton();
                    if (a) {
                        var r = a.getMenu(),
                        l = r.getItemByKey("Language");
                        if (l) {
                            var h = l.getMenu(),
                            d = h.getItemByKey(i);
                            d && d.setChecked(!0)
                        }
                    }
                }
            }
        }
        function ge(t) {
            t = !e.valueIsEmpty(t) && !!t,
            gt && (t === !0 ? gt.classList.add("active") : gt.classList.remove("active"))
        }
        function pe() {
            for (var t, i, s = [qe, ze, Re, it], n = 0, o = s.length; n < o; ++n) if (t = s[n], t && (i = t.getOptionsMenu(), i.getIsOpen())) {
                var a = e.getCoords(t._inputNode);
                i.show(a.left, a.bottom)
            }
        }
        function me(e) {
            fe.hideAllErrors(),
            ge(!1),
            mt === !1 ? (E(), "input" !== e.target.tagName.toLowerCase() && document.activeElement.blur()) : mt = !1
        }
        function _e(t) {
            e.Browser.IsTablet ? e._menuMasterObject.hideAll() : requestAnimationFrame(function() {
                mt = !0
            }),
            mt = !0
        }
        function ye(t) {
            T(30, 30),
            P(70, 30),
            setTimeout(function() {
                if (ke.offsetHeight < Ae.offsetHeight || e.keyboardIsShown()) {
                    var t = Ae.offsetTop;
                    if (t < 0) {
                        var i = -1 * t;
                        Ne.style.top = i + "px",
                        Ae.style.top = i + "px"
                    }
                } else Ne.style.top = "",
                Ae.style.top = "";
                setTimeout(pe, 10)
            },
            150)
        }
        var Se = this,
        fe = e.ErrorModule,
        ve = e.AccountManager,
        Ce = e.LangManager,
        be = e.ColorThemeChanger,
        Te = UtipConfig.BrokersSettings,
        Pe = null,
        De = null,
        Ie = null,
        we = null;
        Ce.register(this),
        be.register(this);
        var Me = ve.isConfigServersMode === !0,
        Oe = "<div class='mainContainer'><div class='leftContainer'><div class='logotype'><img /></div><div class='controlButtonsContainer'></div></div><div class='rightContainer'><div class='content'></div></div></div>",
        Le = e.htmlToDOM(e._Templates.AuthModule || Oe, !0, null),
        ke = Le[0],
        Be = ke.querySelector(".mainContainer"),
        Ne = Be.querySelector(".leftContainer"),
        xe = Ne.querySelector(".controlButtonsContainer"),
        Ae = Be.querySelector(".rightContainer"),
        Ve = Ae.querySelector(".content"),
        Ee = {
            css: {
                opened: "opened",
                selected: "selected",
                disabled: "disabled",
                inProgress: "inProgress",
                hasCharacters: "hasCharacters"
            },
            controlButtons: {
                signIn: 0,
                openDemo: 1
            },
            other: {
                add: "add",
                remove: "remove"
            },
            events: {
                tablets: {
                    touch: {
                        start: "touchstart",
                        move: "touchmove",
                        leave: "touchleave",
                        end: "touchend"
                    }
                },
                pc: {
                    mouse: {
                        click: "click",
                        down: "mousedown",
                        move: "mousemove",
                        over: "mouseover",
                        enter: "mouseenter",
                        leave: "mouseleave",
                        up: "mouseup"
                    },
                    keyboard: {
                        down: "keydown",
                        press: "keypress",
                        up: "keyup"
                    }
                }
            }
        },
        Fe = e.Browser,
        We = Fe.IsTablet;
        Fe.IsMobile;
        this.showed = !1,
        this.processing = !1,
        this.search = {
            sender: null,
            processing: !1
        };
        var Re, He = Ee.controlButtons.signIn,
        Ke = null,
        Ge = null,
        Ue = !1,
        qe = null,
        ze = null,
        je = null,
        Qe = null,
        Ye = null,
        Xe = null,
        Je = null,
        Ze = null,
        $e = null,
        et = null,
        tt = null,
        it = null,
        st = null,
        nt = null,
        ot = e.Delegate(Se, k),
        at = e.Delegate(Se, B),
        rt = e.Delegate(Se, x),
        lt = e.Delegate(Se, A),
        ht = e.Delegate(Se, V),
        dt = [],
        ct = {};
        this.show = function(e) {
            this.showed !== !0 && (ae(), v({
                Sender: {
                    getId: function() {
                        return e
                    }
                }
            }), le(), ke.classList.add(Ee.css.opened), T(30, 30), P(70, 30), D(), w(), M(), ke.style.opacity = "1", this.showed = !0)
        },
        this.hide = function(e) {
            e === !0 && this.processing !== !0 || (ke.style.opacity = "", this.showed = !1, setTimeout(function() {
                b.apply(this, []),
                ke.classList.remove(Ee.css.opened),
                fe.hideAllErrors(),
                this.processing = !1
            }.bind(this), 250))
        },
        this.stopAnimation = function() {
            b.apply(this, []),
            le()
        },
        this.error = function(e) {
            if (e) {
                var t;
                switch (e) {
                case "Error on server":
                    t = Ce.getStringByKey("cSMTServerError") || "The operation failed. Retry the request";
                    break;
                case "Invalid login or password":
                    t = Ce.getStringByKey("cCUTInvalidLogin") || t;
                    break;
                case "Unable to connect to server":
                    t = Ce.getStringByKey("cCUTCantConnectToServer") || t;
                    break;
                case "Maximum number of accounts is exceeded":
                    t = Ce.getStringByKey("cSMSMaxCountAccountExceeded") || t;
                    break;
                case "Invalid mobile terminal version":
                    var i = Ce.getStringByKey("cSMNewVersionPath");
                    t = i ? i.substring(0, i.indexOf(".") + 1) : t;
                    break;
                case "Operation forbidden":
                default:
                    t = e ? e: Ce.getStringByKey("cSMTOperationForbidden") || t
                }
                fe.show({
                    message: {
                        title: t
                    },
                    errorType: 0,
                    messageType: 2,
                    sender: ke
                }),
                this.stopAnimation()
            }
        },
        this._onChangeLang = function(e) {
            var t = gt.querySelector(".text");
            t.innerHTML = Ce.getLang(),
            I(),
            D()
        },
        this._onColorThemeChanged = function(e) {
            ne.apply(this, [e])
        };
        var ut = null,
        gt = null,
        pt = null,
        mt = !1;
        this.reRegister = function() {
            var e = [this, Ke, Ge, Qe, Ye, nt];
            e.forEach(function(e) {
                Ce.register(e)
            }),
            L()
        },
        s.apply(this, [])
    };
    return e.initClass(t, e.Container),
    e.valueIsEmpty(e.AuthModule) && (window.AuthModule = e.AuthModule = new t),
    e
}),
define("terminal", ["socket", "authorization", "statusBar", "dialogChart", "swiperTrade", "webOffice", "headerPanel", "chartPanel", "splitter", "swiper", "tableQuotes", "tableTrade", "charts", "loop", "requests", "tableOptionsSettings", "dialogBuyOption", "base", "accountManager", "authModule"],
function(e) {
    e.PlatformTypes = {
        ptUTIP: 0,
        ptMT: 2
    },
    e.Terminal = function(t) {
        this._ParentNode = e.TerminalContainer,
        this.wantToReconnect = !1,
        this.showChartsAs = e.UserSettings.Terminal.ChartsMode || e.chartsMode.tabs,
        this.chartDialogs = [],
        e.Terminal.base.constructor.apply(this, arguments),
        this.platformType = e.PlatformTypes.ptUTIP,
        this.useOptions = !1,
        this.useOnlyOptions = !1
    },
    e.initClass(e.Terminal, e.BaseControl);
    var t = e.Terminal.prototype;
    return t._render = function() {
        e.Terminal.base._render.apply(this, arguments),
        this._HeaderPanel = this._Content = this._StatusBar = this._ChartPanel = null,
        this._Token = e.Auth.token,
        e.Socket.register(this),
        e.Socket.register(e.QuotesArchive)
    },
    t.setRestart = function(t) {
        t = !e.valueIsEmpty(t) && !!t,
        this._restart = t
    },
    t.disableOptionsIfIOS = function() {
        if (!WT_Device.ios() || !window.cordova) return ! 0;
        switch (this.useOnlyOptions) {
        case ! 0 : return this.signOut(),
            WT_Device.ipad() && e.AuthModule.stopAnimation(),
            !1;
        default:
        case ! 1 : return this.useOptions = !1,
            this.useOnlyOptions = !1,
            !0
        }
    },
    t.clearOldData = function() {
        e.TraderData && (e.TraderData.clearPositionsData(), e.TraderData.clearReportData()),
        e.investorAccount = void 0
    },
    t.redrawTerminal = function() {
        if (e.Charts2.updateGraphicWindowsPause = !0, this._ParentNode) {
            for (e._menuMasterObject.hideAll(), e._menuMasterObject.reRenderAll(); this._ParentNode.firstChild;) this._ParentNode.removeChild(this._ParentNode.firstChild);
            if (e.Auth._checkAuth || this._restart) {
                var t = e.DisplaySize.getWidth(),
                i = e.DisplaySize.getHeight(),
                s = 0;
                if (document.body.height = i + "px", this._ParentNode.style.width = t + "px", this._ParentNode.style.height = i + "px", this._HeaderPanel && (this._HeaderPanel.addToNode(this._ParentNode), this._HeaderPanel.setWidth(t), s += this._HeaderPanel._DomNode.getBoundingClientRect().height), this._TradeSplitter && this._TradeSplitter.addToNode(this._ParentNode), this._StatusBar && (this._StatusBar.setServerName(e.Auth._Server.Name), this._StatusBar.addToNode(this._ParentNode), this._StatusBar.setWidth(t), s += this._StatusBar._DomNode.getBoundingClientRect().height), this._TradeSplitter && (this._SwiperTrade && this._SwiperTrade.setWidth(t - 10), this._QuoteSplitter && this._QuoteSplitter.setWidth(t - 9), this._TradeSplitter.setHeight(i - s), this._QuoteSplitter.getIsCollapsed() && (e.UserSettings.Terminal.Splitter1c2BoxWidth = null), this._TradeSplitter.getIsCollapsed() && this._TradeSplitter._Content1.setHeight(this._TradeSplitter._content1Node.offsetHeight), this._TradeSplitter.refreshContentNode()), this._TableTrade && (this._TableTrade.resizeHeader(), this._TableTrade.clearScroll()), this._SwiperCharts && (this._SwiperCharts.restoreHidedTabs(), this._SwiperCharts.checkIsScrollButtonsNeeded()), this._ChartPanel) {
                    if (t = document.querySelector(".Vertical .WTSplitterContent1").offsetWidth + 5, this._ChartPanel.addToNode(this._ParentNode), this._ChartPanel.setWidth(40), this._ChartPanel.getDomNode().style.left = t + 5 + "px", this._ChartPanel.addToNode(document.querySelector(".WTSplitterContent2")), this._TradeSplitter._chartPanel = this._ChartPanel, this._QuoteSplitter._chartPanel = this._ChartPanel, t = e.DisplaySize.getWidth(), this._QuoteSplitter.getIsCollapsed() === !0) {
                        this._ChartPanel._DomNode.style.left = document.querySelector(".WTSplitterContent2").offsetLeft - 23 + "px";
                        var n = this._QuoteSplitter.getResizerNode().offsetWidth;
                        this._SwiperCharts.setWidth(t - n - 57)
                    }
                    this._TradeSplitter.getIsCollapsed() === !0 && this._QuoteSplitter.setHeight(i - s - 37),
                    i = document.querySelector(".WTSplitterContent2").offsetHeight - 32,
                    this._ChartPanel.setHeight(i),
                    this._ChartPanel.showExtraBtn(),
                    this._SwiperTrade && this._SwiperTrade.tuneTradeButtons()
                }
                e.activeChart && e.Charts2.redrawActiveChart()
            }
            e.WebOfficeController && (1 == e.WebOfficeController.opened && showPreloaderCircle(), e.WebOfficeController.fixWindow()),
            e.updateSizeTradePanels(null, null),
            e.Charts2.updateGraphicWindowsPause = !1
        }
    },
    t.requireAll = function() {
        this.createTerminal(),
        setTimeout(this.openSocket, 100)
    },
    t.startPingTimer = function() {
        this._pingTimerID = setInterval(function() {
            e.requester.sendPing()
        },
        3e4)
    },
    t.openSocket = function() {
        e.removeCSSClass(e.TerminalContainer, "AuthState");
        var t = e.Auth.getServer();
        e.requester.sendTerminalVersion(e.Socket.openSocket, [t.Url, t.Port, e.Auth.token], !t.versionCorrect)
    },
    t.loadServerSettings = function() {
        var t = e.Auth.getServer().Name.replace(" ", "_");
        e.ServerSettings = e.jsonParse(sessionStorage.getItem(t)) || e.jsonParse(localStorage.getItem(t)) || {
            OptionsSettings: {
                FavoritesOptionsSettings: [],
                SelectedOptionSettingsName: "",
                SelectedOptionType: 0
            }
        }
    },
    t.adjustQuotesContent = function(t) {
        if (!e.Browser.IsMobile) {
            var i = this._SwiperQuotes;
            e.ServerSettings.OptionsSettings.UseOnlyOptions && t === !0 ? (i.setSelectedPage(1), i._tabsBlock.childNodes[0].style.display = "none", i.getPages()[0]._Content.style.display = "none") : (i._tabsBlock.childNodes[0].style.display = "inline-block", i.getPages()[0]._Content.style.display = "block")
        }
    },
    t._onSocketOpen = function(t) {
        e.Auth.resetAttempt(),
        e.OptionsSettings.clearOptionsSettings(),
        e.TerminalContainer.style.visibility = "";
        var i = document.getElementById("WTDialogBlockscreen");
        i && (i.style.zIndex = "", i.style.opacity = ""),
        e.Auth.setCheckAuth(!0),
        this.loadServerSettings(),
        this.adjustQuotesContent(),
        this.startPingTimer(),
        this._restart ? this._restart = !1 : this._HeaderPanel && this._TradeSplitter ? this.redrawTerminal() : this.requireAll()
    },
    t._onSocketError = function(e) {
        this._restart = !0
    },
    t._onSocketClose = function(t) {
        e.Charts2.updateGraphicWindowsPause = !0;
        var i = e._dialogMasterObject.getBlockscreen(!0);
        i.style.display = "inline",
        this._restart = !!e.Auth.getCheckAuth(),
        this._restart ? (i.classList.add("RestartMode"), this._StatusBar.setConnectionStatus(), e.requester.sendTerminalVersion(e.requester.authorization, [e.AccountManager.getCurrentAccount(), !1, !1, !1], !0)) : (this._HeaderPanel && e.Config.TerminalSettings && e.Config.TerminalSettings.IntegratedWebOfficeEnabled && this._HeaderPanel.onGraphicsBtnClick(), this._Token = e.Auth.token = "", e.activeChart = null, this.saveAndCloseChartsWindows(), clearInterval(this._pingTimerID), delete e._newChartMenu, e.AccountManager.clearToken(), e.Auth.check(), e.Charts2.closeAllGraphicWindows(), this.configureChartContainerBackground(), this.wantToReconnect ? (e._dialogMasterObject.hideAll(), e.requester.sendTerminalVersion(e.requester.authorization, [e.AccountManager.getCurrentAccount(), !1, !1, !1], !0)) : this.deleteControls());
        var s;
        s && s.getReportButton().setEnabled(!1),
        e.SymbolsData._LastChangedTime = 0,
        e.SymbolsData.setSymbols([]),
        clearInterval(this._pingTimerID),
        console.log("Close", t),
        e.Socket.unRegister(this)
    },
    t.destroyTerminal = function() {
        var e = document.getElementById("WTDialogsContainer");
        if (e) for (; e.firstChild;) e.removeChild(e.firstChild)
    },
    t.closeAllDialogs = function() {
        e._dialogMasterObject.hideAll()
    },
    t.saveAndCloseOnlyChartsDialogs = function() {
        var t = [];
        this.showChartsAs == e.chartsMode.windows && (t = e.cloneObject(e.UserSettings.Terminal.OpenedCharts)),
        e.Charts2.unRegisterAllCharts(),
        e.Charts2.closeAllChartDialogs(),
        this.showChartsAs == e.chartsMode.windows && (e.UserSettings.Terminal.OpenedCharts = t)
    },
    t.saveAndCloseChartsWindows = function() {
        var t = [];
        this.showChartsAs == e.chartsMode.windows && (t = e.cloneObject(e.UserSettings.Terminal.OpenedCharts)),
        e.Charts2.unRegisterAllCharts(),
        this.closeAllDialogs(),
        this.showChartsAs == e.chartsMode.windows && (e.UserSettings.Terminal.OpenedCharts = t)
    },
    t.clearTerminalDom = function() {
        var e = document.querySelector(".WTTerminalContainer");
        if (e) for (; e.firstChild;) e.removeChild(e.firstChild)
    },
    t.closeAllMenu = function() {
        e._menuMasterObject.hideAll()
    },
    t.addNewChart = function(t, i, s, n, o) {
        var a = e.generator.getID(),
        r = e.periodNames[e.getPeriodCode(i.period)],
        l = null;
        if (this.showChartsAs == e.chartsMode.windows) {
            var h = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect(),
            d = new e.DialogChart({
                SymbolName: t,
                Id: a,
                Top: h.top + 2,
                Left: h.left,
                Width: 640,
                Height: 400,
                Title: '<div class="Symbol">' + t + '</div> <div class="Period">' + r + "</div>",
                Closed: e.Delegate(this, this._dialogChartClosed),
                HeaderDblClick: e.Delegate(this, this.dialogsToTabs, {
                    layoutForbidden: !0
                }),
                Settings: {
                    options: i
                },
                OptionSettingsId: s,
                OptionSettingsType: n
            });
            if (d.show(), this.chartDialogs.push(d), l = d.ownGraphicWindow, e.UserSettings.ChartDialogsLayout && "layout01" != e.UserSettings.ChartDialogsLayout) if (e.Charts2.isLayoutOverflowed()) {
                var c = e.activeChartDialog,
                u = c.getDomNode().style;
                d.getDomNode().style.top = u.top,
                d.getDomNode().style.left = u.left,
                d.getDomNode().style.width = u.width,
                d.getDomNode().style.height = u.height,
                d.updateContent();
                var g = e.Charts2.getChartDialogInFirstPosition();
                if (g) {
                    var p = g.getDomNode().style;
                    u.top = p.top,
                    u.left = p.left,
                    u.width = p.width,
                    u.height = p.height
                }
                c.setVisibility(!1),
                c.updateContent()
            } else e.getWindowsLayoutMenu()["set" + e.UserSettings.ChartDialogsLayout.capitalize()](h, this.chartDialogs);
            e.Charts2.addTabButtonForChartDialog(l),
            d.setActive(),
            this._ChartPanel.adjustView(),
            this._SwiperCharts.checkIsScrollButtonsNeeded()
        } else {
            var m = o ? o: a;
            this._SwiperCharts.addPage({
                Title: '<div class="Symbol">' + t + '</div> <div class="Period">' + r + "</div>",
                Key: m,
                Data: t,
                CheckIfTabExists: !0,
                Content: '<canvas id="' + m + '"></canvas>'
            }),
            this._SwiperCharts.scrollRight();
            var _ = this._SwiperCharts.getContentNode();
            l = e.Charts2.addGraphicWindow(o ? o: a, _, i, t, s, n),
            this._ChartPanel.adjustView()
        }
        return e.WebOfficeController && e.WebOfficeController.opened && this._HeaderPanel.onGraphicsBtnClick(),
        this.addAppendChartBtn(!0),
        this.redrawOpenedMenuForNewChartSwiperBtn(),
        this.checkNewChartBtnAvailable(),
        l
    },
    t.createNewChart = function(t, i, s) {
        var n = e.cloneObject(e.UserSettings.WindowsTemplates || e.getDefaultWindowsTemplate());
        if (this.useOptions && i && void 0 != s && null != s) {
            var o = e.getOptionsSettingsTable().getSelectedRow().getValue("Period"),
            a = e.UserSettings;
            a ? n.period = a.Terminal.LastPeriod: o && (n.period = e.getPeriodCodeBySeconds(o._Data.period / 1e3))
        }
        n.offset = n.offset || .3,
        n.offsetForAction = n.offsetForAction ? n.offsetForAction: n.offset,
        n.useOffset = n.useOffset || !0,
        n.userTurnOffAutoScroll = n.userTurnOffAutoScroll || !1,
        e.UserSettings.WindowsTemplates || (e.UserSettings.WindowsTemplates = n);
        var r = this.addNewChart(t, n, i, s);
        return e.UtipFunctions.saveLastOpenedWindows(t),
        e.getNewChartMenu().update(),
        this._HeaderPanel.getNewChartMenu().update(),
        this._ChartPanel && (this._ChartPanel.getDomNode().style.display = "", this._ChartPanel.getTradePanelButton().setPressed(e.showTradePanel())),
        e.Charts2.highlightSelectedTabs(),
        r.getToEnd(),
        r
    },
    t._tuneSwiperQuotesButtons = function(e) {
        for (var t = this.useOnlyOptions,
        i = 110,
        s = 30,
        n = this._SwiperQuotes.getSwiperButtonNodes(), o = t ? n.length - 1 : n.length, a = o, r = t ? 0 : -1, l = a - 1; l > r; --l) n[l].style.display = "",
        i * o + s > e && (n[l].style.display = "none", --o)
    },
    t._onUserSettingsChange = function(t) {
        var i, s, n;
        switch (this._SwiperQuotes && (1 == this._SwiperQuotes.getSelectedPageIndex() ? (i = e.getOptionsSettingsTable(), n = 100) : (i = this._TableQuotes, n = 60), s = this.getSwiperQuotes().getDomNode().querySelector(".tableContent")), t.Type) {
        case "SwiperQuotesWidth":
            if (this._SwiperQuotes && "Width" == t.Prop) {
                e.UserSettings.Terminal.SwiperQuotesWidth = this._SwiperQuotes.getWidth(),
                this._SwiperQuotes.recalcSmoothlySwiperWidth(),
                i.updateColsWidth();
                var o = t.Value;
                this._tuneSwiperQuotesButtons(o);
                var a = this._QuoteSplitter;
                a && o < a.minContent1W && a.setIsCollapse(!0)
            }
            break;
        case "Splitter1Height":
            this._QuoteSplitter && "Height" == t.Prop && (e.UserSettings.Terminal.Splitter1Height = this._QuoteSplitter.getHeight(), s.style.height = t.Content1Heigth - n + "px", i.resizeHeader(), e.getOptionsSettingsTable().updateColsWidth());
            break;
        case "Splitter1IsCollapse":
            this._QuoteSplitter && (this._QuoteSplitter.getIsCollapsed() || this._QuoteSplitter.setWidth(e.DisplaySize.getWidth() - 9), e.UserSettings.Terminal.Splitter1IsCollapse = this._QuoteSplitter._IsCollapse, e.UserSettings.Terminal.Splitter1c1BoxHeight = t.c1BoxHeight, e.UserSettings.Terminal.HeightPercentage = t.heightPercentage, e.UserSettings.Terminal.Splitter1c2BoxWidth = t.c2BoxWidth, e.Charts2.redrawActiveChart());
            break;
        case "SplitterIsCollapse":
            if (this._TradeSplitter) {
                if (e.UserSettings.Terminal.SplitterIsCollapse = this._TradeSplitter._IsCollapse, e.UserSettings.Terminal.Splitterc1BoxHeight = t.c1BoxHeight, e.UserSettings.Terminal.HeightPercentage = t.heightPercentage, e.UserSettings.Terminal.Splitterc2BoxWidth = t.c2BoxWidth, this.getSwiperTrade()) {
                    var r = 0;
                    this._TableTrade && this._TableTrade.getHeaderNode() && (r = this._TableTrade.getHeaderNode().clientHeight),
                    this.getSwiperTrade().getDomNode().querySelector(".tableContent").style.height = t.c2BoxHeight - 40 - r + "px"
                }
                this._TableTrade.updateColsWidth(),
                this._SwiperTrade.tuneTradeButtons(),
                e.Charts2.redrawActiveChart()
            }
            break;
        case "SwiperTradeHeight":
            if ("Height" == t.Prop && (r = 0, this._TableTrade && this._TableTrade.getHeaderNode() && (r = this._TableTrade.getHeaderNode().clientHeight), this.getSwiperTrade() && (this.getSwiperTrade().getDomNode().querySelector(".tableContent").style.height = t.Value - 40 - r + "px"), this._TableTrade.resizeHeader(), this._TradeSplitter)) {
                var l = this._TradeSplitter._DomNode.offsetHeight - t.Value < this._TradeSplitter._minContent1H; (t.Value < 105 || l) && this._TradeSplitter.setIsCollapse(!0)
            }
        }
    },
    t._onTabelJournalChange = function(t) {
        this._TabelJournal && ("VisibleColumnsChange" == t.Type ? e.UserSettings.TableJornal.VisiblesColumns = this._TabelJournal._VisiblesColumns: "AutoArrage" == t.Type && (e.UserSettings.TableJornal.AutoArrage = this._TabelJournal._AutoArrage !== !1))
    },
    t._onSwiperChangeSelectedPage = function(t) {
        var i = t.getPages(),
        s = i.length;
        if (s > 0) {
            var n = t.getSelectedPage(),
            o = n.getKey(),
            a = e.Charts2.getGraphicWindowByContainerID(o);
            if (null !== a) {
                var r = e.activeChart,
                l = e.getTerminal(),
                h = l.getChartPanel(),
                d = h.getTradePanelButton();
                r.setCrosshair(!1),
                e.activeChart = r = a;
                var c = r.tradePanelModule;
                h.updateCrosshairAndButton(!1),
                e.Charts2.redrawActiveChart(),
                d.setPressed(c.showed),
                r.appendTradePanelModule(),
                e.updateSizeTradePanels(r, c ? c.showed: null);
                var u, g = r.options._lastSelectedMark,
                p = e.getPositionMarkByPositionId(g),
                m = e.getTableTrade(),
                _ = m.getSelectedRow();
                if (!e.valueIsEmpty(p) && t.onRowNoSelect !== !0) {
                    var y = p.getPosition();
                    u = p.isOrderPosition() ? m.getRowById(y.id + "_" + y.positionType) : p.isPendingOrderPosition() ? m.getRowById(y.id + "_" + y.pendingOrderType) : m.getRowById(y.id + "_" + y.direction),
                    e.valueIsEmpty(u) || u.getId() === _.getId() || u.setSelected(!0)
                }
                delete t.onRowNoSelect,
                e.saveUserSettings()
            }
        }
    },
    t.changeSwiperSelectPage = function(e) {
        var t = this._SwiperCharts,
        i = t.getPages(),
        s = i.length,
        n = null,
        o = null;
        t.onRowNoSelect = !0;
        for (var a = 0; a < s; a++) if (n = i[a], o = n.getKey(), e == o) return void t.setSelectedPage(a)
    },
    t._onSwiperClosePage = function(t) {
        e._menuMasterObject.hideAll(),
        0 === this._SwiperCharts.getPagesLength() ? (e.activeChart = null, this._newChartBtnOnSwiperCharts._Menu.hide()) : e.Charts2.redrawActiveChart(),
        e.Charts2.deleteGraphicWindows(t.getKey()),
        e.saveUserSettings()
    },
    t._onSwiperChartsChangeSize = function(t, i, s) {
        if (e.UserSettings.ChartDialogsLayout && "layout01" != e.UserSettings.ChartDialogsLayout) {
            var n = document.getElementsByClassName("WTSplitterContent2")[0];
            if (n && n.childNodes[0]) {
                var o = n.childNodes[0].getBoundingClientRect();
                e.getWindowsLayoutMenu()["set" + e.UserSettings.ChartDialogsLayout.capitalize()](o, this.chartDialogs)
            }
        }
    },
    t._onSwiperChartsTabDblClick = function(t) {
        e.UserSettings.ChartWindows && e.UserSettings.ChartWindows.length > 0 ? this.tabsToDialogs() : e.getWindowsLayoutMenu().switchLayout("layout08")
    },
    t.redrawOpenedMenuForNewChartSwiperBtn = function() {
        var e = this._newChartBtnOnSwiperCharts;
        e && e._Menu._IsOpen && (e._Menu.setMenuSource(e), e._Menu.show(e._DomNode.offsetLeft, e._DomNode.offsetTop + e._DomNode.offsetHeight))
    },
    t.getDialogChartById = function(e) {
        for (var t = null,
        i = this.chartDialogs,
        s = i.length,
        n = 0; n < s; ++n) if (t = i[n], t.getId() === e) return t;
        return null
    },
    t.tabsToDialogs = function(t) {
        var i = 0,
        s = e.Charts2.getAllGraphicWindows(),
        n = s.slice(0),
        o = n.length;
        for (b = 0; b < o; b++) {
            for (var a = n[b], r = a.charts, l = r.length, h = a.tradePanelModule, d = 0; d < l; d++) e.Socket.unRegister(r[d]);
            h && h.dispose()
        }
        t && !isNaN(t) && (i = n.length - Math.floor(t));
        for (var c = this.getSwiperCharts().getSelectedPageIndex(), u = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect(), g = 0; g < n.length; g++) {
            var p = n[g].getSettingsForSave(),
            m = u.top,
            _ = u.left,
            y = 640,
            S = 400,
            f = 12;
            null != e.UserSettings.ChartWindows && e.UserSettings.ChartWindows.length > 0 && g < e.UserSettings.ChartWindows.length && (m = u.top + e.UserSettings.ChartWindows[g].Top, _ = u.left + e.UserSettings.ChartWindows[g].Left, y = e.UserSettings.ChartWindows[g].Width + f, S = e.UserSettings.ChartWindows[g].Height + f);
            var v = new e.DialogChart({
                SymbolName: n[g].charts[0].getSymbolName(),
                Id: this._SwiperCharts.getPages()[0].getKey(),
                Title: this._SwiperCharts.getPages()[0].getTitle(),
                Closed: e.Delegate(this, this._dialogChartClosed),
                HeaderDblClick: e.Delegate(this, this.dialogsToTabs, {
                    layoutForbidden: !0
                }),
                Top: m,
                Left: _,
                Width: y,
                Height: S,
                Settings: p,
                OptionSettingsId: n[g].charts[0].getOptionSettingsId(),
                OptionSettingsType: n[g].charts[0].getOptionSettingsType()
            });
            s.shift(),
            this._SwiperCharts.removePage(this._SwiperCharts.getPages()[0], !1, !0, !0),
            v.show(),
            this.showChartsAs = e.UserSettings.Terminal.ChartsMode = e.chartsMode.windows,
            this.chartDialogs.push(v),
            v.ownGraphicWindow.recalcAllDependentIndicators()
        }
        for (var C = this.chartDialogs.length,
        b = 0; b < C; b++) if (v = this.chartDialogs[b], p = n[b].getSettingsForSave(), v.ownGraphicWindow && (v.ownGraphicWindow.initTradePanelModule(p.tradePanelData), p.tradePanelData.showed)) {
            var a = v.ownGraphicWindow;
            e.updateSizeTradePanels(a, a.tradePanelModule.showed)
        }
        this._ChartPanel.setHeight(this._TradeSplitter.getContent1Height() - 32),
        this._ChartPanel.adjustView(),
        e.Charts2.connectTabsToChartDialogs(),
        e.UserSettings.ChartDialogsLayout = "",
        this.chartDialogs.length > 0 && this.chartDialogs[c].setActive(),
        e.saveUserSettings()
    },
    t.dialogsToTabs = function(t) {
        e.saveChartWindows(this.chartDialogs);
        var i = e.cloneObject(e.UserSettings.Terminal.OpenedCharts),
        s = this.chartDialogs.length;
        for (this._SwiperCharts.removeTabs(); s > 0;) {
            var n = this.chartDialogs[0],
            o = n.ownGraphicWindow;
            o.tradePanelModule.dropOutOfFollowers(!1);
            for (var a = null,
            r = o.charts,
            l = r.length,
            h = 0; h < l; h++) a = r[h],
            e.Socket.unRegister(a);
            t && t.layoutForbidden && (n.layoutForbidden = !0),
            n.hide(),
            s--
        }
        e.activeChartDialog = null,
        this.chartDialogs = [],
        this.showChartsAs = e.UserSettings.Terminal.ChartsMode = e.chartsMode.tabs,
        this._loadOpenedChart(i),
        this._ChartPanel.setHeight(this._TradeSplitter.getContent1Height() - 32),
        this._ChartPanel.adjustView(),
        null !== e.activeChart && this._ChartPanel.updateCrosshairAndButton(!1),
        e.UserSettings.ChartDialogsLayout = "layout01",
        e.saveUserSettings()
    },
    t._dialogChartClosed = function(t) {
        var i = t.getId(),
        s = t == e.activeChartDialog,
        n = !1;
        this.wantToReconnect !== !1 || this.signOutParameter || e.Charts2.deleteGraphicWindows(i);
        var o = document.getElementById("WTDialogsContainer");
        Array.from(o.childNodes).indexOf(t.getDomNode()) > -1 && (n = !e.Charts2.replaceClosedChartDialog(t) && this.wantToReconnect === !1 && !t.layoutForbidden, o.removeChild(t.getDomNode())),
        e.Socket.unRegister(t),
        e.TraderData.unRegister(t),
        e.LangManager.unRegister(t);
        var a = this.chartDialogs.indexOf(t);
        if (this.chartDialogs.splice(a, 1), e._dialogMasterObject.unRegister(t), this.chartDialogs.length > 0 && this.wantToReconnect === !1) s && this.chartDialogs[this.chartDialogs.length - 1].setActive();
        else {
            e.activeChartDialog = null,
            e.activeChart = null;
            var r = this._SwiperCharts,
            l = r.getSelectedPage();
            if (l) {
                var h = e.Charts2.getGraphicWindowByContainerID(l.getKey());
                e.activeChart = h
            }
        }
        if (this.getChartPanel().showOrHideGraphicButtons(), e.UserSettings.ChartDialogsLayout && "" != e.UserSettings.ChartDialogsLayout && n) {
            var d = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect();
            e.getWindowsLayoutMenu()["set" + e.UserSettings.ChartDialogsLayout.capitalize()](d, this.chartDialogs)
        }
        if (this.wantToReconnect === !1 && (t.layoutForbidden || this._restart || this.signOutParameter ? e.saveUserSettings() : e.saveChartWindows(this.chartDialogs)), e.Charts2.highlightSelectedTabs(), this.wantToReconnect === !1 && 0 == this.chartDialogs.length && !t.layoutForbidden && !this._restart && this.signOutParameter !== !0) {
            var d = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect();
            e.getWindowsLayoutMenu().setLayout01(d, this.chartDialogs)
        }
    },
    t._loadOpenedChart = function(t) {
        var i = !1;
        null != t && 0 != t.length || e.updateWindowsTemplates();
        var s = t || e.UserSettings.Terminal.OpenedCharts,
        t = [];
        if (e.getTerminal().useOnlyOptions) for (var n = 0; n < s.length; n++) {
            var o = s[n].symbolName;
            e.OptionsSettings.getAllFavoriteSymbolsNames().indexOf(o) !== -1 && t.push(s[n])
        } else for (var n = 0; n < s.length; n++) {
            var o = s[n].symbolName;
            e.SymbolsData.getSelectedSymbols().indexOf(o) !== -1 && t.push(s[n])
        }
        var a = Object.keys(e.SymbolsData.getSymbols());
        if (e._Terminal.showChartsAs == e.chartsMode.windows) {
            var r = e.cloneObject(t),
            l = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect(),
            h = l.top,
            d = l.left,
            c = null,
            u = null,
            g = !0,
            p = 12,
            m = e.UserSettings.ChartWindows.length > 0 && e.UserSettings.ChartWindows.length === s.length;
            if (0 === r.length) return void e.getWindowsLayoutMenu().setLayout01();
            for (var _ = 0,
            y = [], S = 0; S < r.length; S++) if (a.indexOf(r[S].symbolName) != -1) {
                m && (h = l.top + e.UserSettings.ChartWindows[S].Top, d = l.left + e.UserSettings.ChartWindows[S].Left, c = e.UserSettings.ChartWindows[S].Width + p, u = e.UserSettings.ChartWindows[S].Height + p, g = e.UserSettings.ChartWindows[S].Visibility);
                var f = e.generator.getID(),
                v = '<div class="Symbol">' + r[S].symbolName + '</div> <div class="Period">' + e.periodNames[e.getPeriodCode(t[S].options.period)] + "</div>",
                C = new e.DialogChart({
                    SymbolName: r[S].symbolName,
                    Id: f,
                    Title: v,
                    Closed: e.Delegate(this, this._dialogChartClosed),
                    HeaderDblClick: e.Delegate(this, this.dialogsToTabs, {
                        layoutForbidden: !0
                    }),
                    Top: h,
                    Left: d,
                    Width: c,
                    Height: u,
                    Visibility: g,
                    Settings: r[S],
                    OptionSettingsId: r[S].graphicAreas[0].objects[0].optionSettingsId,
                    OptionSettingsType: r[S].graphicAreas[0].objects[0].optionSettingsType
                });
                1 == t[S].active && (_ = S),
                t[S].options.offsetForAction = t[S].options.offsetForAction ? t[S].options.offsetForAction: t[S].options.offset,
                t[S].userTurnOffAutoScroll = t[S].options.userTurnOffAutoScroll || !1,
                C.show(),
                C.ownGraphicWindow.recalcAllDependentIndicators(),
                this.showChartsAs = e.UserSettings.Terminal.ChartsMode = e.chartsMode.windows,
                this.chartDialogs.push(C),
                y.push(t[S].tradePanelData),
                this._ChartPanel.adjustView()
            } else i = !0;
            var b = this.chartDialogs.length;
            if (b > 0) {
                for (var T = 0; T < b; T++) {
                    var P = y[T];
                    if (C = this.chartDialogs[T], C.ownGraphicWindow && (C.ownGraphicWindow.initTradePanelModule(P), P && P.showed)) {
                        var D = C.ownGraphicWindow;
                        e.updateSizeTradePanels(D, D.tradePanelModule.showed)
                    }
                }
                var D = this.chartDialogs[0].ownGraphicWindow,
                I = D.charts[0].getGraphicArea();
                D.options._lastSelectedMark && I.markers && I.markers[D.options._lastSelectedMark] && I.markers[D.options._lastSelectedMark].updateTradePanelState(),
                e.Charts2.generateTabsForChartDialogs(),
                _ < this.chartDialogs.length ? this.chartDialogs[_].setActive() : this.chartDialogs[0].setActive(),
                this._ChartPanel._DomNode.style.display = ""
            }
            if (this.addAppendChartBtn(b > 0), e.Charts2.connectTabsToChartDialogs(), i && "" != e.UserSettings.ChartDialogsLayout && "layout01" != e.UserSettings.ChartDialogsLayout) {
                var l = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].getBoundingClientRect();
                e.getWindowsLayoutMenu()["set" + e.UserSettings.ChartDialogsLayout.capitalize()](l, this.chartDialogs),
                e.Charts2.highlightSelectedTabs(),
                e.getTerminal().saveSettings()
            }
        } else {
            var w = 0,
            M = t.length,
            O = null;
            M > 0 && (O = t.reduce(function(e, t, i, s) {
                var n = parseInt((e.containerID || "id1").replace("id", "")),
                o = parseInt((t.containerID || "id1").replace("id", ""));
                return n > o ? e: t
            }), e.valueIsEmpty(O.containerID) && (O.containerID = "id" + M));
            for (var n = 0; n < M; n++) if (a.indexOf(t[n].symbolName) != -1) {
                if (t[n].options.offsetForAction = t[n].options.offsetForAction ? t[n].options.offsetForAction: t[n].options.offset, t[n].options.userTurnOffAutoScroll = t[n].options.userTurnOffAutoScroll || !1, this.useOnlyOptions && null == t[n].graphicAreas[0].objects[0].optionSettingsId) {
                    var L = e.OptionsSettings.getOptionSettingsBySymbolName(t[n].symbolName);
                    L && (t[n].graphicAreas[0].objects[0].optionSettingsId = L.getID(), t[n].graphicAreas[0].objects[0].optionSettingsType = L.getType())
                }
                var k = this.addNewChart(t[n].symbolName, t[n].options, t[n].graphicAreas[0].objects[0].optionSettingsId, t[n].graphicAreas[0].objects[0].optionSettingsType, t[n].containerID);
                k && (k.loadSettings(t[n]), k.initTradePanelModule(t[n].tradePanelData)),
                t[n].active && (w = n, this._ChartPanel._DomNode.style.display = ""),
                k.recalcAllDependentIndicators(),
                e.updateSizeTradePanels(null, null)
            }
            if (O) {
                var B = O.containerID;
                0 === B && (B = "id1"),
                e.generator.num = parseInt(B.replace("id", "")) + 1
            }
            if (this._SwiperCharts.setSelectedPage(this._SwiperCharts.getPages(w)), M > 0) {
                var N = e.activeChart.tradePanelModule;
                this._ChartPanel.getTradePanelButton().setPressed(N.showed),
                this._ChartPanel.getDomNode().style.display = ""
            }
            this.addAppendChartBtn(M > 0),
            e.UserSettings.ChartDialogsLayout = "layout01"
        }
        this._ChartPanel.showExtraBtn(),
        this.checkNewChartBtnAvailable(),
        e.addEvent(document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0], "dragover", this._onChartsFielsDragOver),
        e.addEvent(document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0], "drop", this._onChartsFielsDrop),
        e.activeChart || this._ChartPanel.showOrHideGraphicButtons(),
        e.valueIsEmpty(k) || k.getToEnd()
    },
    t.getNewChartBtnOnSwiperCharts = function() {
        return this._newChartBtnOnSwiperCharts
    },
    t.CreateNewChartBtn = function(t) {
        this._newChartBtnOnSwiperCharts || (this._newChartBtnOnSwiperCharts = new e.Button({
            ParentNode: this._DomNode,
            Key: "chartBtn",
            Tooltip: "New chart",
            TooltipKey: "cMFNewChart",
            Class: "newChartBtn" + (t === !1 ? " Empty": ""),
            TooltipPosition: "BottomLeft",
            TooltipOffset: {
                X: 20,
                Y: 5
            },
            ImgWidth: "16px",
            ImgHeight: "16px",
            Menu: e.getNewChartMenu().reInit()
        }));
        var i = document.getElementsByClassName("WTSplitterContent2")[0].childNodes[0].childNodes[0];
        i.appendChild(this._newChartBtnOnSwiperCharts._DomNode)
    },
    t.checkNewChartBtnAvailable = function() {
        if (!e.Browser.IsMobile) {
            var t = e.OptionsSettings.checkAreOptionsEnabledExceptForbidden(),
            i = !1,
            s = e.SymbolsData.getSelectedSymbols(),
            n = e.SymbolsData.getSymbols();
            if (s.length > 0) for (var o = 0; o < s.length; o++) {
                var a = n[s[o]];
                if ("index" != a.getCalculationTypeName()) {
                    i = !0;
                    break
                }
            } ! this.useOnlyOptions && i ? this.addAppendChartBtn(e.Charts2.getAllGraphicWindows().length > 0) : this.useOnlyOptions && t ? this.addAppendChartBtn(e.Charts2.getAllGraphicWindows().length > 0) : this._newChartBtnOnSwiperCharts && this._newChartBtnOnSwiperCharts.removeFromDom()
        }
    },
    t.addAppendChartBtn = function(e) {
        this._newChartBtnOnSwiperCharts && (this._newChartBtnOnSwiperCharts.removeFromDom(), this._newChartBtnOnSwiperCharts = null),
        this.CreateNewChartBtn(e)
    },
    t.storedObjectContainsRestrictedCharts = function(t) {
        for (var i = e.SymbolsData.getSelectedSymbols(), s = t.graphicAreas, n = 0; n < s.length; n++) for (var o = 0; o < s[n].objects.length; o++) {
            var a = s[n].objects[o].symbolName;
            if (a && i.indexOf(a) == -1) return ! 0
        }
        return ! 1
    },
    t._onChartsFielsDragOver = function(e) {
        e.preventDefault()
    },
    t._onChartsFielsDrop = function(t) {
        function i(t) {
            var i = t.tableRow,
            s = t.data,
            n = t.graphicWindow;
            if (n.initTradePanelModule(s), t.tradePanelButton.setPressed(n.tradePanelData.showed), !e.valueIsEmpty(i)) {
                var o = e.getTableTrade(),
                a = o.getRowById(i);
                a && a.setSelected(!0)
            }
            e.updateSizeTradePanels(t.activeChart, n.tradePanelData.showed)
        }
        e._menuMasterObject.hideAll();
        var s = t.dataTransfer;
        t.preventDefault();
        var n = e.getTerminal(),
        o = parseInt(s.getData("optionSettingsId")),
        a = parseInt(s.getData("optionSettingsType")),
        r = s.getData("text");
        if (e.SymbolsData.getSymbols()[r]) {
            var l = e.activeChart;
            if (l) {
                var h = l.tradePanelModule,
                d = h.showed,
                c = h.hasAnyPosition(); (!c || c && !d) && l.deActivateMarks(!0)
            }
            var u = n.getChartPanel(),
            g = u.getTradePanelButton(),
            p = n.createNewChart(r, o, a);
            l = e.activeChart;
            var m = n.getSwiperQuotes(),
            _ = m.getSelectedPage(),
            y = e.tradePanelConst,
            S = y.workMode,
            f = s.getData("workMode");
            f && "" !== f || (f = "Quotes" == _.getId() ? S.market: S.binary);
            var v = e.valueIsEmpty(a) || f !== S.binary ? y.toolType[S.market].buySell: a,
            C = e.showTradePanel(),
            b = {
                workMode: f,
                toolType: v,
                symbolName: r,
                binaryOptionId: o || null,
                chartIndex: 0,
                showed: C
            };
            e.eventsQueue.push({
                type: "DROP_POSITION_TO_GRAPHIC_HEADER",
                fn: i.bind(this, {
                    tableRow: t.dataTransfer.getData("tableRow"),
                    activeChart: l,
                    graphicWindow: p,
                    tradePanelButton: g,
                    data: b
                })
            })
        }
    },
    t.optionsSettingsTypeChanged = function(t) {
        if (t.sender.getOptions().length > 0) {
            var i = t.sender.getOptions()[t.sender.getSelectedOption()].Data;
            e.OptionsSettings.setSelectedOptionType(i),
            e.getOptionsSettingsTable().fillTable();
            var s = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.classic),
            n = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.express),
            o = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.oneTouch),
            a = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.range);
            0 == s.length && 0 == n.length && 0 == o.length && 0 == a.length ? this._buyOptionButton.setEnabled(!1) : this._buyOptionButton.setEnabled(!0)
        }
        t.event && e.activeChart && e.activeChart.tradePanelModuleShown() !== !0 && e.activeChart.deActivateMarks(),
        e.Charts2.redrawActiveChart(),
        e.saveUserSettings()
    },
    t.getOptionsSettingsNode = function() {
        var t = e.getOptionsSettingsTable(),
        i = e.htmlToDOM(e._Templates.OptionsSettingsContent),
        s = i.querySelector(".OptionsSettingsTypeContent"),
        n = i.querySelector(".OptionsSettingsTableContent");
        return this._optionsSettingsTypeSelect = new e.InputSelect({
            ParentNode: s,
            Width: "100%",
            Edit: !1,
            Options: this.getTypesOptions(),
            MenuClass: "MenuOptionTypeSelect",
            ItemsHeight: 30,
            ChangedValue: e.Delegate(this, this.optionsSettingsTypeChanged)
        }),
        e.ServerSettings.OptionsSettings.SelectedOptionType && this.useNewOptions ? (e.OptionsSettings.setSelectedOptionType(e.ServerSettings.OptionsSettings.SelectedOptionType), this._optionsSettingsTypeSelect.setSelectedOption(e.ServerSettings.OptionsSettings.SelectedOptionType)) : e.OptionsSettings.setSelectedOptionType(e.OptionSettingsType.express),
        n.appendChild(t._DomNode),
        i
    },
    t.setSelectedOptionType = function(t) {
        if (!e.Browser.IsMobile) {
            var i = this._optionsSettingsTypeSelect.getOptions(),
            s = 0;
            for (var n in i) {
                var o = i[n];
                o.Data === t.Data && (this._optionsSettingsTypeSelect.setSelectedOption(s), this.optionsSettingsTypeChanged({
                    sender: this._optionsSettingsTypeSelect
                })),
                s++
            }
        }
    },
    t.setOptionsSettingsTypeSelect = function() {
        if (!e.Browser.IsMobile) {
            if (this._optionsSettingsTypeSelect) {
                var t = this.getTypesOptions();
                this._optionsSettingsTypeSelect.setOptions(t),
                0 == t.length && this._optionsSettingsTypeSelect.setValue("-");
                var i = this._optionsSettingsTypeSelect.getSelectedOption(),
                s = this._optionsSettingsTypeSelect.getMenuItems().filter(function(e) {
                    return e.Id == i
                });
                0 == s.length ? (this._optionsSettingsTypeSelect.setSelectedOption(0), this.optionsSettingsTypeChanged({
                    sender: this._optionsSettingsTypeSelect
                })) : this._optionsSettingsTypeSelect.setSelectedOption(i),
                this._optionsSettingsTypeSelect.onChange()
            }
            var n = e.getTableTrade().getContextMenu();
            if (this.useOptions) {
                var o = n.getItems().filter(function(e) {
                    return "OptionExpiration" == e.getID()
                }).length;
                0 == o && n.addItem(this._MenuItemOptionExpiration, n.getItems().length - 2)
            } else {
                var a = n.getItems().filter(function(e) {
                    return "OptionExpiration" == e.getID()
                })[0];
                this._MenuItemOptionExpiration = a,
                n.deleteItem(a)
            }
        }
    },
    t.getTypesOptions = function() {
        var t = [];
        return e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.express, !0).length > 0 && t.push({
            Id: e.OptionSettingsType.express,
            Text: e.OptionTypeNames[e.OptionSettingsType.express],
            Data: e.OptionSettingsType.express
        }),
        e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.classic, !0).length > 0 && t.push({
            Id: e.OptionSettingsType.classic,
            Text: e.OptionTypeNames[e.OptionSettingsType.classic],
            Data: e.OptionSettingsType.classic
        }),
        this.useNewOptions && (e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.oneTouch, !0).length > 0 && t.push({
            Id: e.OptionSettingsType.oneTouch,
            Text: e.OptionTypeNames[e.OptionSettingsType.oneTouch],
            Data: e.OptionSettingsType.oneTouch
        }), e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.range, !0).length > 0 && t.push({
            Id: e.OptionSettingsType.range,
            Text: e.OptionTypeNames[e.OptionSettingsType.range],
            Data: e.OptionSettingsType.range
        })),
        t
    },
    t.getQuotesNode = function() {
        var t = this._TableQuotes.getDomNode(),
        i = e.htmlToDOM(e._Templates.QuotesContent);
        return i.querySelector(".QuotesTableContent").appendChild(t),
        i
    },
    t._onSwiperQuotesChangePage = function(t) {
        if (t._Pages && t._Pages.length > 0) {
            var i = this._SwiperQuotes;
            if (i) {
                var s = i.getDomNode();
                if (1 == t._SelectedPage) {
                    var n = s.getElementsByClassName("tableContent"),
                    o = n.length > 1 ? 1 : 0;
                    n[o].style.height = i._Height - 102 + "px",
                    e.getOptionsSettingsTable().fillTable()
                } else s.getElementsByClassName("tableContent")[0].style.height = i._Height - 61 + "px",
                0 != Object.keys(e.SymbolsData.getSymbols()).length && this._TableQuotes.fillTable();
                e.UserSettings.Terminal.ActiveQuotesTabIndex = this.getSwiperQuotes().getSelectedPageIndex()
            }
        }
    },
    t.createTerminal = function() {
        e.imagePreload(["res/img/buy_option.png", "res/img/PositionMarks/Sell_select.png", "res/img/PositionMarks/Buy_select.png"]),
        e.removeAllEventsByNode(document.body, "mousemove", null),
        e.deleteTableTrade(),
        e.deleteTableOptionsSettings(),
        this.clearOldData();
        var t = e._dialogMasterObject.getBlockscreen(!0);
        e._dialogMasterObject.isAnyDialogOpen() && !e.getOpenDemoDialogWithoutInit() || (t.style.display = "none"),
        t.classList.remove("RestartMode"),
        this._restart = !1,
        this._HeaderPanel = new e.HeaderPanel,
        this._TableQuotes = new e.TableQuotes({
            NewChart: e.Delegate(this, this.createNewChart)
        }),
        this._TableTrade = e.getTableTrade();
        var i = this._TableTrade._DomNode,
        s = e.htmlToDOM(e._Templates.TradeContent),
        n = s.querySelector(".TableTradeContent");
        n.appendChild(i),
        this._TabelJournal = new e.DivTable({
            VisiblesColumns: e.UserSettings.TableJornal.VisiblesColumns || [],
            AutoArrage: e.UserSettings.TableJornal.AutoArrage !== !1,
            VisibleColumnsChange: e.Delegate(this, this._onTabelJournalChange, {
                Type: "VisibleColumnsChange"
            }),
            AutoArrageChange: e.Delegate(this, this._onTabelJournalChange, {
                Type: "AutoArrage"
            }),
            Columns: [{
                Title: "Time",
                Id: "Date",
                Width: "15%"
            },
            {
                Title: "Message",
                Id: "Message"
            }],
            CustomScrollEnabled: !0
        }),
        this._SwiperQuotes = new e.Swiper({
            TabMode: "Normal",
            Width: e.UserSettings.Terminal.SwiperQuotesWidth || 360,
            ChangeSelectedPage: e.Delegate(this, this._onSwiperQuotesChangePage),
            ChangeSize: e.Delegate(this, this._onUserSettingsChange, {
                Type: "SwiperQuotesWidth"
            }),
            Pages: [{
                Id: "Quotes",
                Title: "Quotes",
                Key: "CWNQuotes",
                Content: this.getQuotesNode(),
                ContextMenu: this._TableQuotes._ContextMenu
            }],
            Class: "SwiperQuotes",
            Animation: e.SwiperAnimationConst.Smoothly
        }),
        this._SwiperCharts = new e.Swiper({
            TabMode: "Normal",
            ScrollableTabs: !0,
            Edited: !0,
            Class: "SwiperCharts",
            Template: e._Templates.SwiperChart,
            SwiperContentText: ".WTSwiperContentChart",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            ClosePage: e.Delegate(this, this._onSwiperClosePage),
            ChangeSize: e.Delegate(this, this._onSwiperChartsChangeSize),
            TabDblClick: e.Delegate(this, this._onSwiperChartsTabDblClick),
            Pages: []
        }),
        this._SwiperTrade = new e.SwiperTrade({
            TabMode: "Normal",
            Class: "SwiperTrade",
            ChangeSize: e.Delegate(this, this._onUserSettingsChange, {
                Type: "SwiperTradeHeight"
            }),
            Pages: [{
                Title: "Trade",
                Key: "cMFTrade",
                Content: s,
                ContextMenu: this._TableTrade._ContextMenu
            }]
        }),
        this._TableTrade.fillTable(),
        this._QuoteSplitter = new e.Splitter({
            Height: e.UserSettings.Terminal.Splitter1Height || 410,
            ChangeSize: e.Delegate(this, this._onUserSettingsChange, {
                Type: "Splitter1Height"
            }),
            ChangeIsCollapse: e.Delegate(this, this._onUserSettingsChange, {
                Type: "Splitter1IsCollapse"
            }),
            IsCollapse: e.UserSettings.Terminal.Splitter1IsCollapse,
            c1BoxHeight: e.UserSettings.Terminal.Splitter1c1BoxHeight,
            c2BoxWidth: e.UserSettings.Terminal.Splitter1c2BoxWidth,
            Content1: this._SwiperQuotes,
            Content2: this._SwiperCharts
        }),
        this._TradeSplitter = new e.Splitter({
            IsCollapse: e.UserSettings.Terminal.SplitterIsCollapse,
            c1BoxHeight: e.UserSettings.Terminal.Splitterc1BoxHeight,
            c2BoxWidth: e.UserSettings.Terminal.Splitterc2BoxWidth,
            ChangeIsCollapse: e.Delegate(this, this._onUserSettingsChange, {
                Type: "SplitterIsCollapse"
            }),
            Content1: this._QuoteSplitter,
            Content2: this._SwiperTrade,
            CollapsedContentTitles: ["Trade"],
            TitleKeys: ["cMFTrade"],
            Orientation: "Horizontal"
        }),
        "ontouchstart" in window && (e.Browser.IsMobile || e.Browser.IsTablet) && (e.addEvent(this._SwiperTrade._tabsBlock, "mousedown", this._TradeSplitter._binds.resizerMousedown), e.addEvent(this._SwiperTrade._tabsBlock, "touchstart", this._TradeSplitter._binds.resizerTouchstart), e.addEvent(this._SwiperTrade._tabsBlock, "touchmove", this._TradeSplitter._binds.resizerMousemove)),
        this._redrawBind = this._redrawBind || this.redrawTerminal.bind(this),
        this._resizeF = function() {
            this._resizeTimeout && clearTimeout(this._resizeTimeout),
            this._resizeTimeout = setTimeout(this._redrawBind, 300)
        }.bind(this),
        document.body.onresize = this._resizeF,
        document.onkeydown = this._onKeyDown.bind(this),
        document.onmouseup = this._onMouseUp.bind(this),
        document.onmousedown = this._onMouseDown.bind(this),
        this._StatusBar = new e.StatusBar,
        this._ChartPanel = new e.ChartPanel,
        this._ChartPanel._DomNode.style.display = "none",
        this.redrawTerminal(),
        this.configureChartContainerBackground(),
        this._ChartPanel.showExtraBtn(),
        this.signOutParameter = !1
    },
    t.configureChartContainerBackground = function() {
        var t = this._SwiperCharts;
        if (t) {
            var i = t.getDomNode(),
            s = (i.childNodes[0], i.childNodes[1], 0 == this._SwiperCharts._DomNode.childNodes[1].childNodes.length);
            s ? (e.removeCSSClass(this._SwiperCharts._DomNode.childNodes[1], "WTSwiperContentChart"), e.addCSSClass(this._SwiperCharts._DomNode.childNodes[1], "EmptySwiperContentChart")) : (e.removeCSSClass(this._SwiperCharts._DomNode.childNodes[1], "EmptySwiperContentChart"), e.addCSSClass(this._SwiperCharts._DomNode.childNodes[1], "WTSwiperContentChart"));
            var n = this._newChartBtnOnSwiperCharts;
            n && e[s === !0 && this._SwiperCharts._DomNode.childNodes[0].childNodes.length <= 1 ? "addCSSClass": "removeCSSClass"](n.getDomNode(), "Empty")
        }
    },
    t.saveSettings = function(t) {
        function i(t) {
            t !== !1 && (s.showChartsAs == e.chartsMode.windows && e.saveChartWindows(e._Terminal.chartDialogs), e.Charts2.saveOpenedCharts())
        }
        var s = this;
        return "" == e.Auth.token || null == e.Auth.token || 1 == e.Auth.openningDemo ? (e.saveUserSettings(), e.saveServerSettings(), e.Auth.openningDemo = !1, void i(t)) : (i(t), e.UserSettings.Terminal.ActiveQuotesTabIndex = this._SwiperQuotes._SelectedPage, e.saveUserSettings(), void e.saveServerSettings())
    },
    t._onKeyDown = function(t) {
        if (! (Math.abs(e.lastKeyDownExecutions - t.timeStamp) < 100 || (e.lastKeyDownExecutions = t.timeStamp, e._dialogMasterObject.isBlockScreenEnabled()))) if (t.shiftKey) switch (t.keyCode) {
        case 122:
            t.preventDefault(),
            e.getWindowsLayoutMenu().setFullScreen()
        } else if (0 !== e.Charts2._graphicWindows.length) switch (t.keyCode) {
        case 35:
            t.preventDefault(),
            e.activeChart.getToEnd();
            break;
        case 36:
            t.preventDefault(),
            e.activeChart.getToStart();
            break;
        case 46:
            t.preventDefault();
            for (var i = e.activeChart.graphicAreas,
            s = 0; s < i.length; s++) for (var n = e.activeChart.graphicAreas[s].graphicObjects, o = 1; o < n.length;) n[o].selected !== !0 || n[o] instanceof e._PositionMark ? o++:n[o].getGraphicArea().deleteGraphicObject(n[o]);
            for (var a = e.activeChart.getVerticalLines(), s = 0; s < a.length;) a[s].selected === !0 ? e.activeChart.deleteVerticalLine(a[s]) : s++;
            break;
        case 33:
            t.preventDefault();
            for (var s = 1; s < e.activeChart.getVisibleBarsCount(); s++) e.activeChart.setPosition(e.activeChart.getPrevDate(e.activeChart.getPosition()));
            break;
        case 34:
            t.preventDefault();
            for (var s = 1; s < e.activeChart.getVisibleBarsCount(); s++) e.activeChart.setPosition(e.activeChart.getNextDate(e.activeChart.getPosition()));
            break;
        case 109:
        case 189:
            t.preventDefault(),
            e._Terminal._ChartPanel._increaseChartBtn.isEnabled() && e._Terminal._ChartPanel._onIncreaseClick();
            break;
        case 107:
        case 187:
            t.preventDefault(),
            e._Terminal._ChartPanel._reduceChartBtn.isEnabled() && e._Terminal._ChartPanel._onReduceClick();
            break;
        case 37:
            for (var s = 1; s < 4; s++) e.activeChart.setPosition(e.activeChart.getPrevDate(e.activeChart.getPosition()));
            e.activeChart.updateOffsetAfterMouseMove(),
            e.getTerminal().saveSettings();
            break;
        case 39:
            for (var s = 1; s < 4; s++) e.activeChart.setPosition(e.activeChart.getNextDate(e.activeChart.getPosition()));
            e.activeChart.updateOffsetAfterMouseMove(),
            e.getTerminal().saveSettings();
            break;
        case 38:
            t.preventDefault(),
            e.activeChart.setPosition(e.activeChart.getNextDate(e.activeChart.getPosition())),
            e.activeChart.updateOffsetAfterMouseMove(),
            e.getTerminal().saveSettings();
            break;
        case 40:
            t.preventDefault(),
            e.activeChart.setPosition(e.activeChart.getPrevDate(e.activeChart.getPosition())),
            e.activeChart.updateOffsetAfterMouseMove(),
            e.getTerminal().saveSettings();
            break;
        case 120:
            t.preventDefault();
            var r = e.activeChart.charts[0].getSymbolName();
            if (this.useOnlyOptions) {
                this.selectedOptions = [],
                this._optionsSettingsTypeSelect.getSelectedData() == e.OptionSettingsType.express ? this.selectedOptions = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.express) : this.selectedOptions = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.classic);
                var l = e.OptionsSettings.getOptionSettingsByName(e.activeChart.charts[0].getSymbolName());
                this.selectedOptions.indexOf(l) && this.showBuyOptionDialogByChart(l)
            } else if (this.selectedSymbols = e.SymbolsData.getSelectedSymbolExceptIndexes(), this.selectedSymbols.indexOf(e.activeChart.charts[0].getSymbolName()) != -1) {
                var h = e.getDialogNewOrder();
                h.show()
            }
        } else switch (t.keyCode) {
        case 120:
            if (t.preventDefault(), this.useOnlyOptions) {
                if (this.selectedOptions = [], this._optionsSettingsTypeSelect.getSelectedData() == e.OptionSettingsType.express ? this.selectedOptions = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.express) : this.selectedOptions = e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.classic), this.selectedOptions.length > 0) {
                    var r = "";
                    r = e.activeChart ? e.activeChart.charts[0].getSymbolName() : e._tableOptionsSettings.getSelectedRow()._CellValues.Name;
                    var l = e.OptionsSettings.getOptionSettingsByName(r);
                    this.selectedOptions.indexOf(l) != -1 && this.showBuyOptionDialogByChart(l)
                }
            } else {
                var d = e.SymbolsData.getSelectedSymbolExceptIndexes();
                if (d.length > 0) {
                    var r = "";
                    if (r = e.activeChart ? e.activeChart.charts[0].getSymbolName() : this._TableQuotes.getSelectedRow().getId(), d.indexOf(r) != -1) {
                        var h = e.getDialogNewOrder();
                        h.setCurrentQuote(r),
                        h.show()
                    }
                }
            }
        }
    },
    t._onMouseDown = function(t) {
        e.chartFocused = t.target.nodeName.toLowerCase() === "canvas".toLowerCase()
    },
    t.addToNode = function(t) {
        e.Terminal.base.addToNode.apply(this, arguments),
        this.redrawTerminal()
    },
    t.getHeaderPanel = function() {
        return this._HeaderPanel
    },
    t.getStatusBar = function() {
        return this._StatusBar
    },
    t.getChartPanel = function() {
        return this._ChartPanel
    },
    t.getSwiperCharts = function() {
        return this._SwiperCharts
    },
    t.getSwiperChartsButtons = function() {
        return this._SwiperCharts.getTabButtons()
    },
    t.getTableQuotes = function() {
        return this._TableQuotes
    },
    t.getQuoteSplitter = function() {
        return this._QuoteSplitter
    },
    t.getTradeSplitter = function() {
        return this._TradeSplitter
    },
    t.setPlatformSettings = function() {
        switch (this.platformType) {
        case e.PlatformTypes.ptUTIP:
            e.UtipFunctions.setIsVisibleMenuColumn(this._TableQuotes, "AdditionalParameters", !0),
            e.UtipFunctions.setIsVisibleMenuColumn(this._TableTrade, "AdditionalParameters", !0);
            break;
        case e.PlatformTypes.ptMT:
            e.UtipFunctions.setIsVisibleMenuColumn(this._TableQuotes, "AdditionalParameters", !1),
            this._TableQuotes.setIsVisibleColumn("AdditionalParameters", !1),
            e.UtipFunctions.setIsVisibleMenuColumn(this._TableTrade, "AdditionalParameters", !1),
            this._TableTrade.setIsVisibleColumn("AdditionalParameters", !1)
        }
    },
    t._onMouseUp = function(t) {
        e.chartFocused && e.activeChart.scrolling && (e.activeChart.scrolling = !1, e.activeChart._parentNode.style.cursor = e.activeChart.lastCursor)
    },
    t.graphicWindowContainsRestrictedCharts = function(t) {
        for (var i = e.OptionsSettings.getOptionsSettingsNames(e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.classic)), s = e.OptionsSettings.getOptionsSettingsNames(e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.express)), n = i.concat(s), o = t.charts, a = 0; a < o.length; a++) if (n.indexOf(o[a].getSymbolName()) == -1) return ! 0;
        return ! 1
    },
    t.closeRestrictedGraphicWindows = function() {
        if (this.useOnlyOptions) {
            var t = e.OptionsSettings.getOptionsSettingsNames(e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.classic)),
            i = e.OptionsSettings.getOptionsSettingsNames(e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.express)),
            s = t.concat(i);
            if (this.showChartsAs == e.chartsMode.tabs) for (var n = this._SwiperCharts.getPages(), o = 0; o < n.length; o++) {
                var a = e.Charts2.getGraphicWindowByContainerID(n[o].getKey()); (s.indexOf(n[o].getData()) == -1 || this.graphicWindowContainsRestrictedCharts(a)) && (this._SwiperCharts.setSelectedPage(o, !0), this._SwiperCharts.removePage(this._SwiperCharts.getSelectedPage(), !0))
            } else if (this.showChartsAs == e.chartsMode.windows) for (var o = 0; o < this.chartDialogs.length; o++)(this.selectedOptions && this.selectedOptions.indexOf(this.chartDialogs[o].getSymbolName()) == -1 || this.graphicWindowContainsRestrictedCharts(this.chartDialogs[o].ownGraphicWindow)) && this.chartDialogs[o].hide()
        }
    },
    t.setOnlyOptionsVisible = function(e) {
        1 == e ? (this.getSwiperQuotes().setSelectedPage(1), this.getSwiperQuotes()._tabsBlock.childNodes[0].style.display = "none", this.getSwiperTrade().setForexButtonsVisibility(!1), this.getHeaderPanel().getTradeMenu().getItemById("buy_sell").setVisible(!1), this.getHeaderPanel().getTradeMenu().getItemById("pending_order").setVisible(!1), this._TableTrade._ContextMenu.getItemById("New_market_order").setVisible(!1), this._TableTrade._ContextMenu.getItemById("New_pending_order").setVisible(!1), this._TableTrade._ContextMenu.getItemById("Profit").setVisible(!1), this.closeRestrictedGraphicWindows()) : (this.getSwiperQuotes()._tabsBlock.childNodes[0].style.display = "inline-block", this.getSwiperTrade().setForexButtonsVisibility(!0), this.getHeaderPanel().getTradeMenu().getItemById("buy_sell").setVisible(!0), this.getHeaderPanel().getTradeMenu().getItemById("pending_order").setVisible(!0), this._TableTrade._ContextMenu.getItemById("New_market_order").setVisible(!0), this._TableTrade._ContextMenu.getItemById("New_pending_order").setVisible(!0), this._TableTrade._ContextMenu.getItemById("Profit").setVisible(!0)),
        this.configureQuotesSplitterCollapsedTitles(),
        this._SwiperTrade && this._SwiperTrade.tuneTradeButtons()
    },
    t.configureQuotesSplitterCollapsedTitles = function() {
        this._QuoteSplitter._CollapsedContentTitles = [],
        this._QuoteSplitter._TitleKeys = [],
        this._QuoteSplitter.removeCollapsedTitlesFromDOM(),
        this.useOnlyOptions || (this._QuoteSplitter._CollapsedContentTitles.push("Quotes"), this._QuoteSplitter._TitleKeys.push("CWNQuotes")),
        (this.useOptions || this.useOnlyOptions) && (this._QuoteSplitter._CollapsedContentTitles.push("Options"), this._QuoteSplitter._TitleKeys.push("cOSGOptions")),
        this._QuoteSplitter.setCollapsedTitles(),
        this._QuoteSplitter.redrawVerticalCollapsedTitles()
    },
    t.showOptionsPanels = function() {
        if (1 == this._SwiperQuotes.getPagesLength()) {
            var t = this.getOptionsSettingsNode(),
            i = {
                Title: "Options",
                Id: "Options",
                Key: "cOSGOptions",
                Content: t,
                ContextMenu: e.getOptionsSettingsTable()._ContextMenu
            };
            this._SwiperQuotes.addPage(i, !1),
            this.useOnlyOptions === !0 ? this._SwiperQuotes._tabsBlock.querySelector(".WTButton:last-child").classList.add("First") : this._SwiperQuotes._tabsBlock.querySelector(".WTButton:last-child").classList.remove("First")
        }
        if (null == this._buyOptionButton) {
            this._buyOptionButton = new e.Button({
                Height: 30,
                ImageList: e.IconSVGList,
                ImageListRow: 14,
                ImageListCol: 0,
                ImgHeight: "22px",
                Text: "Buy option",
                Key: "cMFBuyOption",
                Enabled: !1,
                Class: "Disabled",
                MouseOut: e.Delegate(this, this._onBuyOptionBtnMouseUpAndLeave),
                MouseUp: e.Delegate(this, this._onBuyOptionBtnMouseUpAndLeave),
                MouseDown: e.Delegate(this, this._onBuyOptionBtnMouseDown),
                Click: e.Delegate(this, this._onBuyOptionBtnClick)
            }),
            this._buyOptionButton.investorModeDependency = !0;
            var s = 0 === e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.classic).length && 0 === e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.express).length && 0 === e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.oneTouch).length && 0 === e.OptionsSettings.getFavoritesByType(e.OptionSettingsType.range).length;
            s ? this._buyOptionButton.setEnabled(!1) : this._buyOptionButton.setEnabled(!0),
            this._buyOptionButton.setVisible(!0),
            this._SwiperTrade.getButtonsBlock().insertBefore(this._buyOptionButton._DomNode, this._SwiperTrade.getReportButton()._DomNode),
            e.getTerminal().getHeaderPanel().setTradeMenuItems()
        }
        var n = this._TableTrade._ContextMenu.getItemById("buy_option"),
        o = this._TableTrade._ContextMenu.getItemById("OptionExpiration");
        this._TableTrade._ContextMenu.getItemById("Columns");
        if (this.useOptions ? (n.setVisible(!0), o.setVisible(!0), e.getOptionsSettingsTable().fillTable()) : (n.setVisible(!1), o.setVisible(!1)), this._HeaderPanel) {
            var a = this._HeaderPanel.getTradeMenu().getItemById("buy_option");
            null == a && this._HeaderPanel.getTradeMenu().addItem({
                Text: "Buy option",
                Key: "cMFBuyOption",
                Id: "buy_option",
                ImageList: e.MenuIconSVGList,
                ImageListRow: 20,
                ImageListCol: 0,
                Enabled: !s
            },
            2)
        }
        e.UserSettings.Terminal.ActiveQuotesTabIndex && this._SwiperQuotes.setSelectedPage(this._SwiperQuotes.getPages(e.UserSettings.Terminal.ActiveQuotesTabIndex)),
        this._tuneSwiperQuotesButtons(e.UserSettings.Terminal.SwiperQuotesWidth)
    },
    t.checkIsOptionsEnabled = function() {
        e.OptionsSettings.checkAreOptionsEnabledExceptForbidden() ? this.setEnabledOptionButtons(!0) : this.setEnabledOptionButtons(!1)
    },
    t.setEnabledOptionButtons = function(e) {
        this._buyOptionButton && this._buyOptionButton.setEnabled(e)
    },
    t.hideOptionsPanels = function() {
        if (this._SwiperQuotes && 2 == this._SwiperQuotes.getPagesLength() && this._SwiperQuotes.removePage(this._SwiperQuotes.getPages(1)), this._buyOptionButton && (this._buyOptionButton.removeFromDom(), this._buyOptionButton = null), this._HeaderPanel) {
            var e = this._HeaderPanel.getTradeMenu().getItemById("buy_option");
            e && this._HeaderPanel.getTradeMenu().deleteItem(e)
        }
    },
    t.setOptionsVisible = function() {
        if (this.platformType == e.PlatformTypes.ptUTIP && this.useOptions && e.OptionsSettings.getCount() > 0) this.showOptionsPanels();
        else {
            if (this._TableTrade) {
                for (var t in this._TableTrade.getRows()) {
                    var i = this._TableTrade.getRows()[t];
                    i._CellValues.Payout && (i.removeFromDom(), delete i)
                }
                var s = this._TableTrade._ContextMenu.getItemById("buy_option"),
                n = this._TableTrade._ContextMenu.getItemById("OptionExpiration");
                s.setVisible(!1),
                n && n.setVisible(!1);
                this._TableTrade._ContextMenu.getItemById("Columns");
                this._TableTrade.resizeHeader()
            }
            this.hideOptionsPanels()
        }
        this._SwiperTrade && this._SwiperTrade.tuneTradeButtons()
    },
    t._onBuyOptionBtnClick = function(t) {
        var i = null;
        e.activeChart && (i = e.activeChart.getMainSymbolName()),
        this.showBuyOptionDialogByChart(e.OptionsSettings.getSelectedOptionSettings(), e.getOptionsSettingsTable().getSelectedRow().getValue("Period").getSelectedData())
    },
    t._onBuyOptionBtnMouseDown = function(e) {
        e.Sender.setPressed(!0)
    },
    t._onBuyOptionBtnMouseUpAndLeave = function(e) {
        e.Sender.setPressed(!1)
    },
    t.showBuyOptionDialogByChart = function(t, i) {
        var s = !1;
        if (t) {
            var n = e.SymbolsData.getSymbols()[t.getSymbolName()];
            if (s = n.allowTrade(), !s) {
                var o = e.OptionsSettings.getOptionsSettings();
                for (var a in o) if (t = o[a], n = e.SymbolsData.getSymbols()[t.getSymbolName()], s = n.allowTrade()) break
            }
        }
        if (s) {
            var r = {
                optionSettings: t,
                optionType: t ? t.getType() : e.OptionsSettings.getSelectedOptionType(),
                expiryTime: i
            };
            e.getDialogBuyOption(t.getID()).show(r)
        }
    },
    t.setActiveChart = function(t) {
        if (e.getTerminal().showChartsAs == e.chartsMode.windows) for (var i = e.getTerminal().chartDialogs, s = 0; s < i.length; s++) {
            var n = i[s];
            if (n.getSymbolName() == t) {
                n.setActive();
                break
            }
        } else for (var o = this._SwiperCharts.getPages(), s = 0; s < o.length; s++) {
            var a = o[s];
            if (a.getData() == t) {
                this._SwiperCharts.setSelectedPage(a);
                break
            }
        }
    },
    t.getSwiperQuotes = function() {
        return this._SwiperQuotes
    },
    t.getSwiperTrade = function() {
        return this._SwiperTrade
    },
    t.deleteControls = function() {
        this._SwiperQuotes.unregister(),
        delete this._SwiperQuotes,
        this._SwiperCharts.unregister(),
        delete this._SwiperCharts,
        this._ChartPanel.unregister(),
        delete this._ChartPanel,
        this._SwiperTrade.unregister(),
        delete this._SwiperTrade,
        this._QuoteSplitter.unregister(),
        delete this._QuoteSplitter,
        this._TradeSplitter.unregister(),
        delete this._TradeSplitter,
        this._HeaderPanel.unregister(),
        delete this._HeaderPanel,
        this._StatusBar.unregister(),
        delete this._StatusBar,
        this._TableQuotes.unregister(),
        delete this._TableQuotes,
        this._TableTrade.unregister(),
        delete this._TableTrade,
        this._TabelJournal.unregister(),
        delete this._TabelJournal,
        e.deleteTableOptionsSettings()
    },
    t.signOut = function() {
        this.signOutParameter = !0;
        var t = e.UserSettings.Terminal.OpenedCharts,
        i = e.UserSettings.ChartDialogsLayout;
        this.wantToReconnect = !1,
        this.setRestart(!1),
        this.saveSettings(),
        e._dialogMasterObject.hideAll(),
        e._menuMasterObject.hideAll(),
        this.clearOldData(),
        this.clearTerminalDom(),
        this.destroyTerminal(),
        e.Auth.exit(),
        e.UserSettings.Terminal.OpenedCharts = t,
        e.UserSettings.ChartDialogsLayout = i,
        i && (e._Terminal.showChartsAs = e.chartsMode.windows),
        e.Browser.IsMobile || e.AuthModule.show(0)
    },
    t = null,
    e
}),
define("authContainer", ["container", "webOffice"],
function(e) {
    e.AuthContainer = function(t) {
        return this instanceof e.AuthContainer ? (e.AuthContainer.base.constructor.apply(this, arguments), void e.LangManager.register(this)) : new e.AuthContainer(t)
    },
    e.initClass(e.AuthContainer, e.Container);
    var t = e.AuthContainer.prototype;
    return t._render = function() {
        this._Class = "AuthContainer",
        e.Container.base._render.apply(this, arguments),
        this._DomNode.appendChild(e.htmlToDOM(e._Templates.AuthContainerContent)),
        this.addToNode(document.body),
        this._leftBlock = this._DomNode.querySelector(".LeftBlock"),
        this._centerBlock = this._DomNode.querySelector(".CenterBlock"),
        this._centerBlock2 = this._DomNode.querySelector(".CenterBlock2"),
        this._rightBlock = this._DomNode.querySelector(".RightBlock"),
        this._selectorsNode = this._leftBlock.querySelector(".Selectors"),
        this._title = this._centerBlock.querySelector(".Title"),
        this._secondaryTitle = this._centerBlock2.querySelector(".Title"),
        this._subjectNode = this._rightBlock.querySelector(".Subject"),
        this._subjectImg = this._rightBlock.querySelector(".SubjectImg"),
        this._subjectTitle = this._rightBlock.querySelector(".SubjectTitle"),
        this._helpText = this._rightBlock.querySelector(".HelpText"),
        this._leftBlock.querySelector(".Name").innerHTML = e.Config.BrokersSettings.TerminalName,
        this.tunePosition(),
        this.attachSelectorsButtons(),
        this.appendAuthPackage(),
        this.attachLangButton(),
        this.showAuthContainer()
    },
    t.tunePosition = function() {
        var e = (window.innerWidth - this._DomNode.clientWidth) / 2,
        t = (window.innerHeight - this._DomNode.clientHeight) / 2;
        this._DomNode.style.top = t + "px",
        this._DomNode.style.left = Math.max(e, 0) + "px"
    },
    t.attachSelectorsButtons = function() {
        this._authSelectBtn = new e.Button({
            ParentNode: this._selectorsNode,
            Class: "SelectBtn",
            Text: "Authorization",
            Key: "cJRNLAuthorization",
            Click: e.Delegate(this, this.appendAuthPackage)
        }),
        this._regSelectBtn = new e.Button({
            ParentNode: this._selectorsNode,
            Class: "SelectBtn",
            Text: "Registration",
            Key: "cMobileRegistration",
            Click: e.Delegate(this, this.appendRegPackage)
        }),
        this._recoverySelectBtn = new e.Button({
            ParentNode: this._selectorsNode,
            Class: "SelectBtn",
            Text: "Forgot password?",
            Key: "cMobileFogotPassword",
            Click: e.Delegate(this, this.appendRecoveryPackage)
        }),
        this._recoverySelectBtn.setText(this._recoverySelectBtn.getText() + "?")
    },
    t.unpressSelectors = function() {
        this._authSelectBtn.setPressed(!1),
        this._regSelectBtn.setPressed(!1),
        this._recoverySelectBtn.setPressed(!1)
    },
    t.attachLangButton = function() {
        this._langButton = new e.Button({
            Class: "LangCircleButton",
            Width: 30,
            Height: 30,
            Menu: this.getLangMenu()
        }),
        this._langButton.setText(e.LangManager.getLang().toUpperCase()),
        this._langButton.addToNode(this._DomNode)
    },
    t.getLangMenu = function() {
        return this._langMenu || (this._langMenu = new e.Menu({
            Width: 100,
            BeforeOpen: e.Delegate(this, this._beforeLangMenuOpen),
            CheckedType: "Checked",
            Class: "AuthLangMenu",
            ItemClick: e.Delegate(this, this._onLanguageClick),
            Items: e.LangManager.getLanguageItems()
        })),
        this._langMenu
    },
    t._beforeLangMenuOpen = function() {
        for (var t = e.LangManager.getLang(), i = 0; i < this._langMenu.getItems().length; i++) if (this._langMenu.getItems()[i].getKey() == t) {
            this._langMenu.getItems()[i].setChecked(!0, !1);
            break
        }
    },
    t._onLanguageClick = function(t) {
        e.LangManager.setLang(t.Item.getKey()),
        e._menuMasterObject.hideAll()
    },
    t._onChangeLang = function() {
        this.updateTitle(),
        this._langButton.setText(e.LangManager.getLang().toUpperCase()),
        this._recoverySelectBtn.getText().indexOf("?") == -1 && this._recoverySelectBtn.setText(this._recoverySelectBtn.getText() + "?"),
        this._recoveryDescription.innerHTML = e.LangManager.getStringByKey("cMobileSentNewPassword") || "To your E-Mail will be sent a new password"
    },
    t.prepareAuthPackage = function() {
        this._authPackage = new e.Container({
            Class: "AuthPackage",
            CreateLabel: !1,
            Id: "AuthPackage"
        }),
        this._loginInput = new e.Input({
            Placeholder: "E-mail",
            Picture: "res/img/MobileImg/buttons/email.png",
            Width: 220,
            Height: 40
        }),
        this._passwordInput = new e.Input({
            Placeholder: "Password",
            PlaceholderKey: "cLPFPAss",
            Picture: "res/img/MobileImg/buttons/key.png",
            Width: 220,
            Height: 40,
            InputType: "Password"
        }),
        this._saveCheckBox = new e.CheckBox({
            Label: "Save password",
            Key: "cModileSavePassword",
            LabelPosition: "Right"
        }),
        this._signInBtn = new e.Button({
            Class: "DButton BigButton GreenButton",
            Text: "Sign in",
            Key: "cMobileLogIn",
            Width: 220,
            Height: 48,
            Click: e.Delegate(this, this._onSignInClick)
        });
        var t = [this._loginInput, this._passwordInput, this._saveCheckBox, this._signInBtn];
        this._authPackage.setItems(t)
    },
    t.prepareRegPackage = function() {
        this._regPackage = new e.Container({
            Class: "AuthPackage",
            CreateLabel: !1,
            Id: "RegPackage"
        }),
        this._emailInput = new e.Input({
            Placeholder: "E-mail",
            Picture: "res/img/MobileImg/buttons/email.png",
            Width: 220,
            Height: 40,
            KeyDown: e.Delegate(this, this.restoreInputBackground)
        }),
        this._regPasswordInput = new e.Input({
            Placeholder: "Password",
            PlaceholderKey: "cLPFPAss",
            Picture: "res/img/MobileImg/buttons/key.png",
            Width: 220,
            Height: 40,
            InputType: "Password",
            KeyDown: e.Delegate(this, this.restoreInputBackground)
        }),
        this._regPasswordConfirmInput = new e.Input({
            Placeholder: "Confirmation",
            PlaceholderKey: "cCPFconfirmation",
            Picture: "res/img/MobileImg/buttons/key.png",
            Width: 220,
            Height: 40,
            InputType: "Password",
            KeyDown: e.Delegate(this, this.restoreInputBackground)
        }),
        this._firstNameInput = new e.Input({
            Placeholder: "Name",
            PlaceholderKey: "cWCTAccountListFormName",
            Picture: "res/img/MobileImg/buttons/rect.png",
            Width: 220,
            Height: 40,
            KeyDown: e.Delegate(this, this.restoreInputBackground)
        }),
        this._secondNameInput = new e.Input({
            Placeholder: "Surname",
            PlaceholderKey: "cWCTAccountListFormSurname",
            Picture: "res/img/MobileImg/buttons/rect.png",
            Width: 220,
            Height: 40,
            KeyDown: e.Delegate(this, this.restoreInputBackground)
        }),
        this._phoneInput = new e.Input({
            Placeholder: "Phone",
            PlaceholderKey: "cWCTAccountListFormTelephone",
            Picture: "res/img/MobileImg/buttons/phone.png",
            Width: 220,
            Height: 40,
            KeyPress: e.Delegate(this, this.phoneCheck),
            KeyDown: e.Delegate(this, this.restoreInputBackground)
        }),
        this._regBtn = new e.Button({
            Class: "DButton BigButton GreenButton",
            Text: "Register",
            Key: "cBTNNAdd",
            Width: 220,
            Height: 48,
            Click: e.Delegate(this, this._onRegClick)
        });
        var t = [this._emailInput, this._regPasswordInput, this._regPasswordConfirmInput, this._firstNameInput, this._secondNameInput, this._phoneInput, this._regBtn];
        this._regPackage.setItems(t),
        e.Config.BrokersSettings.AdditionalRegFields && e.Config.BrokersSettings.AdditionalRegFields.length > 0 && this.prepareAdditionalRegPackage()
    },
    t.prepareAdditionalRegPackage = function() {
        this._additionalRegPackage = new e.Container({
            Class: "AuthPackage",
            CreateLabel: !1,
            Id: "AdditionalRegPackage"
        });
        for (var t = [], i = 0; i < e.Config.BrokersSettings.AdditionalRegFields.length; i++) {
            var s = e.Config.BrokersSettings.AdditionalRegFields[i];
            this["_" + s.parameter + "Input"] = new e.Input({
                Placeholder: s.name,
                PlaceholderKey: s.key,
                Id: s.parameter,
                Picture: "res/img/MobileImg/buttons/rect.png",
                Width: 220,
                Height: 40,
                KeyDown: e.Delegate(this, this.restoreInputBackground)
            }),
            t.push(this["_" + s.parameter + "Input"])
        }
        this._additionalRegPackage.setItems(t)
    },
    t.prepareRecoveryPackage = function() {
        this._recoveryPackage = new e.Container({
            Class: "AuthPackage",
            CreateLabel: !1,
            Id: "RecoveryPackage"
        }),
        this._recoveryDescription = document.createElement("div"),
        this._recoveryDescription.className = "RecoveryDescription",
        this._recoveryDescription.innerHTML = e.LangManager.getStringByKey("cMobileSentNewPassword") || "To your E-Mail will be sent a new password",
        this._recoveryInput = new e.Input({
            Placeholder: "E-mail",
            Picture: "res/img/MobileImg/buttons/email.png",
            Width: 220,
            Height: 40,
            KeyDown: e.Delegate(this, this.restoreInputBackground)
        }),
        this._recoverBtn = new e.Button({
            Class: "DButton BigButton GreenButton",
            Text: "Recover",
            Key: "cRARecover",
            Width: 220,
            Height: 48,
            Click: e.Delegate(this, this._onRecoverClick)
        });
        var t = [this._recoveryDescription, this._recoveryInput, this._recoverBtn];
        this._recoveryPackage.setItems(t)
    },
    t.appendAuthPackage = function() {
        this.unpressSelectors(),
        this._authSelectBtn.setPressed(!0),
        this.clearSubject(),
        this.removeCurrentPackage(),
        this._authPackage || this.prepareAuthPackage(),
        this._authPackage.addToNode(this._centerBlock),
        this.setTitle("cJRNLAuthorization", "Authorization"),
        this._currentPackage = this._authPackage
    },
    t.appendRegPackage = function() {
        this.unpressSelectors(),
        this._regSelectBtn.setPressed(!0),
        this.clearSubject(),
        this.removeCurrentPackage(),
        this._regPackage || this.prepareRegPackage(),
        this._regPackage.addToNode(this._centerBlock),
        this.setTitle("cMobileRegistration", "Registration"),
        this._currentPackage = this._regPackage,
        this._additionalRegPackage && (e.addCSSClass(this._centerBlock, "NoRightBorder"), this._additionalRegPackage.addToNode(this._centerBlock2), e.addCSSClass(this._centerBlock2, "Attached"), this.tuneAdditionalRegPackView(), this.tunePosition())
    },
    t.appendRecoveryPackage = function() {
        this.unpressSelectors(),
        this._recoverySelectBtn.setPressed(!0),
        this.clearSubject(),
        this.removeCurrentPackage(),
        this._recoveryPackage || this.prepareRecoveryPackage(),
        this._recoveryPackage.addToNode(this._centerBlock),
        this.setTitle("cMobilePasswordRecovery", "Password recovery"),
        this._currentPackage = this._recoveryPackage
    },
    t.removeCurrentPackage = function() {
        this._currentPackage && this._currentPackage.removeFromDom(),
        this._additionalRegPackage && (this._additionalRegPackage.removeFromDom(), e.removeCSSClass(this._title, "Relative"), e.removeCSSClass(this._centerBlock, "NoRightBorder"), e.removeCSSClass(this._centerBlock2, "Attached"), this.setSecondaryTitle("", ""), this.tunePosition())
    },
    t.clearSubject = function() {
        this._helpText.innerHTML = "",
        this._subjectNode.style.display = "none"
    },
    t.setTitle = function(t, i) {
        this._title.innerHTML = e.LangManager.getStringByKey(t) || i
    },
    t.updateTitle = function() {
        switch (this._currentPackage) {
        case this._authPackage:
            this.setTitle("cJRNLAuthorization", "Authorization");
            break;
        case this._regPackage:
            this.setTitle("cMobileRegistration", "Registration");
            break;
        case this._recoveryPackage:
            this.setTitle("cMobilePasswordRecovery", "Password recovery")
        }
    },
    t.setSecondaryTitle = function(t, i) {
        this._secondaryTitle.innerHTML = e.LangManager.getStringByKey(t) || i
    },
    t.tuneAdditionalRegPackView = function() {
        var t = this._centerBlock.clientWidth + this._centerBlock2.clientWidth,
        i = this._centerBlock.clientHeight,
        s = this._regBtn.getDomNode().clientWidth,
        n = this._regBtn.getDomNode().clientHeight;
        this._regBtn.getDomNode().style.left = (t - s) / 2 + "px",
        this._regBtn.addCSSClass("Absolute");
        var o = this._centerBlock.querySelector(".AuthPackage").getBoundingClientRect().top - this._centerBlock.getBoundingClientRect().top;
        this._regBtn.getDomNode().style.top = i - o - n - 10 + "px";
        var a = this._title.clientWidth;
        this._title.style.left = (t - a) / 2 + "px",
        e.addCSSClass(this._title, "Relative")
    },
    t.setSubjectTitle = function(e, t) {
        t ? this._subjectImg.src = "res/img/notice.png": this._subjectImg.src = "res/img/error_yellow.png",
        this._subjectTitle.innerHTML = e,
        this._subjectNode.style.display = "block"
    },
    t.setHelpText = function(e) {
        this._helpText.innerHTML = e
    },
    t.restoreInputBackground = function(e) {
        e.sender.getInputNode().style.background = "#ffffff"
    },
    t.phoneCheck = function(e) {
        if (32 == e.event.charCode && 0 == e.sender.getValue().length && e.event.preventDefault(), e.sender === this._phoneInput) {
            var t = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 40, 41, 43, 45];
            t.indexOf(e.event.charCode) == -1 && 8 != e.event.keyCode || !(e.sender.getValue().length < 20 || 8 == e.event.keyCode) ? e.event.preventDefault() : (40 == e.event.charCode && e.sender.getValue().indexOf("(") != -1 && e.event.preventDefault(), 41 != e.event.charCode || e.sender.getValue().indexOf("(") != -1 && e.sender.getValue().indexOf(")") == -1 || e.event.preventDefault(), 45 == e.event.charCode && e.sender.getValue().length < 1 && e.event.preventDefault(), 43 == e.event.charCode && e.sender.getValue().length > 0 && e.event.preventDefault())
        }
    },
    t.validateRegistration = function() {
        return this._firstNameInput.getValue() ? this._secondNameInput.getValue() ? this.isValidEmail(this._emailInput.getValue()) ? !(!this._regPasswordInput.getValue() || !this._regPasswordConfirmInput.getValue() || this._regPasswordInput.getValue() != this._regPasswordConfirmInput.getValue()) || (this.setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"), this.setHelpText(this._regPasswordInput.getPlaceholder() + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter"), this._regPasswordInput.getInputNode().style.background = "#fedbdb", this._regPasswordConfirmInput.getInputNode().style.background = "#fedbdb", this._regBtn.setEnabled(!0), !1) : (this.setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"), this.setHelpText(e.LangManager.getStringByKey("cWCTAccountListFormErrormail") || "Invalid email address"), this._emailInput.getInputNode().style.background = "#fedbdb", this._regBtn.setEnabled(!0), !1) : (this.setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"), this.setHelpText(this._secondNameInput.getPlaceholder() + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter"), this._secondNameInput.getInputNode().style.background = "#fedbdb", this._regBtn.setEnabled(!0), !1) : (this.setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"), this.setHelpText(this._firstNameInput.getPlaceholder() + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter"), this._firstNameInput.getInputNode().style.background = "#fedbdb", this._regBtn.setEnabled(!0), !1)
    },
    t.isValidEmail = function(e) {
        return /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(e)
    },
    t.isValidPhone = function() {
        var e = /^(?!([^-]*-){5})(\+\d+)?\s*(\(\d+\))?[- \d]+$/gi;
        return e.test(this._phoneInput.getValue())
    },
    t._onSignInClick = function() {
        this._signInBtn.setEnabled(!1),
        e.WebOfficeController.sendHashCredentials(this._loginInput.getValue(), this._passwordInput.getValue(), this._saveCheckBox.getChecked())
    },
    t._onRegClick = function() {
        if (this._regBtn.setEnabled(!1), this.validateRegistration()) {
            var t = "";
            if (this._additionalRegPackage) for (var i = 0; i < this._additionalRegPackage._Items.length; i++) {
                if (1 == e.Config.BrokersSettings.AdditionalRegFields[i].required && "" == this._additionalRegPackage._Items[i].getValue()) return this.setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"),
                this.setHelpText(this._additionalRegPackage._Items[i].getPlaceholder() + " " + e.LangManager.getStringByKey("cWCTAccountListFormError") || "Invalid parameter"),
                this._additionalRegPackage._Items[i].getInputNode().style.background = "#fedbdb",
                !1;
                t += "&" + this._additionalRegPackage._Items[i].getId() + "=" + this._additionalRegPackage._Items[i].getValue()
            }
            e.WebOfficeController.sendWebOfficeRegistration(this._emailInput.getValue(), this._regPasswordInput.getValue(), this._regPasswordConfirmInput.getValue(), this._firstNameInput.getValue(), this._secondNameInput.getValue(), this._phoneInput.getValue(), t)
        }
    },
    t._onRecoverClick = function() {
        this._recoverBtn.setEnabled(!1),
        this.isValidEmail(this._recoveryInput.getValue()) ? e.WebOfficeController.passwordRecovery(this._recoveryInput.getValue()) : (this.setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"), this.setHelpText(e.LangManager.getStringByKey("cWCTAccountListFormErrormail") || "Invalid email address"), this._recoveryInput.getInputNode().style.background = "#fedbdb", this._recoverBtn.setEnabled(!0))
    },
    t.unblockActionButtons = function() {
        this._signInBtn && this._signInBtn.setEnabled(!0),
        this._regBtn && this._regBtn.setEnabled(!0),
        this._recoverBtn && this._recoverBtn.setEnabled(!0)
    },
    t.hideAuthContainer = function() {
        this._DomNode.style.display = "none",
        e.removeEvent(this._DomNode, "keydown", this._onKeyDown.bind(this)),
        e.removeEvent(window, "resize", this.tunePosition.bind(this)),
        e.removeCSSClass(e.TerminalContainer, "AuthState")
    },
    t.showAuthContainer = function() {
        e.addEvent(this._DomNode, "keydown", this._onKeyDown.bind(this)),
        e.addEvent(window, "resize", this.tunePosition.bind(this)),
        this._DomNode.style.display = "inline-block",
        e.TerminalContainer.className.indexOf("AuthState") == -1 && e.addCSSClass(e.TerminalContainer, "AuthState")
    },
    t._onKeyDown = function(e) {
        if (e && e.keyCode && 13 === e.keyCode) switch (e.preventDefault(), this._currentPackage) {
        case this._authPackage:
            this._onSignInClick()
        }
    },
    t = null,
    e.getAuthContainer = function(t) {
        return e._authContainer || (e._authContainer = new e.AuthContainer(t)),
        e._authContainer
    },
    e
});
var CryptoJS = CryptoJS ||
function(e, t) {
    var i = {},
    s = i.lib = {},
    n = function() {},
    o = s.Base = {
        extend: function(e) {
            n.prototype = this;
            var t = new n;
            return e && t.mixIn(e),
            t.hasOwnProperty("init") || (t.init = function() {
                t.$super.init.apply(this, arguments)
            }),
            t.init.prototype = t,
            t.$super = this,
            t
        },
        create: function() {
            var e = this.extend();
            return e.init.apply(e, arguments),
            e
        },
        init: function() {},
        mixIn: function(e) {
            for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
            e.hasOwnProperty("toString") && (this.toString = e.toString)
        },
        clone: function() {
            return this.init.prototype.extend(this)
        }
    },
    a = s.WordArray = o.extend({
        init: function(e, i) {
            e = this.words = e || [],
            this.sigBytes = i != t ? i: 4 * e.length
        },
        toString: function(e) {
            return (e || l).stringify(this)
        },
        concat: function(e) {
            var t = this.words,
            i = e.words,
            s = this.sigBytes;
            if (e = e.sigBytes, this.clamp(), s % 4) for (var n = 0; n < e; n++) t[s + n >>> 2] |= (i[n >>> 2] >>> 24 - 8 * (n % 4) & 255) << 24 - 8 * ((s + n) % 4);
            else if (65535 < i.length) for (n = 0; n < e; n += 4) t[s + n >>> 2] = i[n >>> 2];
            else t.push.apply(t, i);
            return this.sigBytes += e,
            this
        },
        clamp: function() {
            var t = this.words,
            i = this.sigBytes;
            t[i >>> 2] &= 4294967295 << 32 - 8 * (i % 4),
            t.length = e.ceil(i / 4)
        },
        clone: function() {
            var e = o.clone.call(this);
            return e.words = this.words.slice(0),
            e
        },
        random: function(t) {
            for (var i = [], s = 0; s < t; s += 4) i.push(4294967296 * e.random() | 0);
            return new a.init(i, t)
        }
    }),
    r = i.enc = {},
    l = r.Hex = {
        stringify: function(e) {
            var t = e.words;
            e = e.sigBytes;
            for (var i = [], s = 0; s < e; s++) {
                var n = t[s >>> 2] >>> 24 - 8 * (s % 4) & 255;
                i.push((n >>> 4).toString(16)),
                i.push((15 & n).toString(16))
            }
            return i.join("")
        },
        parse: function(e) {
            for (var t = e.length,
            i = [], s = 0; s < t; s += 2) i[s >>> 3] |= parseInt(e.substr(s, 2), 16) << 24 - 4 * (s % 8);
            return new a.init(i, t / 2)
        }
    },
    h = r.Latin1 = {
        stringify: function(e) {
            var t = e.words;
            e = e.sigBytes;
            for (var i = [], s = 0; s < e; s++) i.push(String.fromCharCode(t[s >>> 2] >>> 24 - 8 * (s % 4) & 255));
            return i.join("")
        },
        parse: function(e) {
            for (var t = e.length,
            i = [], s = 0; s < t; s++) i[s >>> 2] |= (255 & e.charCodeAt(s)) << 24 - 8 * (s % 4);
            return new a.init(i, t)
        }
    },
    d = r.Utf8 = {
        stringify: function(e) {
            try {
                return decodeURIComponent(escape(h.stringify(e)))
            } catch(e) {
                throw Error("Malformed UTF-8 data")
            }
        },
        parse: function(e) {
            return h.parse(unescape(encodeURIComponent(e)))
        }
    },
    c = s.BufferedBlockAlgorithm = o.extend({
        reset: function() {
            this._data = new a.init,
            this._nDataBytes = 0
        },
        _append: function(e) {
            "string" == typeof e && (e = d.parse(e)),
            this._data.concat(e),
            this._nDataBytes += e.sigBytes
        },
        _process: function(t) {
            var i = this._data,
            s = i.words,
            n = i.sigBytes,
            o = this.blockSize,
            r = n / (4 * o),
            r = t ? e.ceil(r) : e.max((0 | r) - this._minBufferSize, 0);
            if (t = r * o, n = e.min(4 * t, n), t) {
                for (var l = 0; l < t; l += o) this._doProcessBlock(s, l);
                l = s.splice(0, t),
                i.sigBytes -= n
            }
            return new a.init(l, n)
        },
        clone: function() {
            var e = o.clone.call(this);
            return e._data = this._data.clone(),
            e
        },
        _minBufferSize: 0
    });
    s.Hasher = c.extend({
        cfg: o.extend(),
        init: function(e) {
            this.cfg = this.cfg.extend(e),
            this.reset()
        },
        reset: function() {
            c.reset.call(this),
            this._doReset()
        },
        update: function(e) {
            return this._append(e),
            this._process(),
            this
        },
        finalize: function(e) {
            return e && this._append(e),
            this._doFinalize()
        },
        blockSize: 16,
        _createHelper: function(e) {
            return function(t, i) {
                return new e.init(i).finalize(t)
            }
        },
        _createHmacHelper: function(e) {
            return function(t, i) {
                return new u.HMAC.init(e, i).finalize(t)
            }
        }
    });
    var u = i.algo = {};
    return i
} (Math); !
function() {
    var e = CryptoJS,
    t = e.lib.WordArray;
    e.enc.Base64 = {
        stringify: function(e) {
            var t = e.words,
            i = e.sigBytes,
            s = this._map;
            e.clamp(),
            e = [];
            for (var n = 0; n < i; n += 3) for (var o = (t[n >>> 2] >>> 24 - 8 * (n % 4) & 255) << 16 | (t[n + 1 >>> 2] >>> 24 - 8 * ((n + 1) % 4) & 255) << 8 | t[n + 2 >>> 2] >>> 24 - 8 * ((n + 2) % 4) & 255, a = 0; 4 > a && n + .75 * a < i; a++) e.push(s.charAt(o >>> 6 * (3 - a) & 63));
            if (t = s.charAt(64)) for (; e.length % 4;) e.push(t);
            return e.join("")
        },
        parse: function(e) {
            var i = e.length,
            s = this._map,
            n = s.charAt(64);
            n && (n = e.indexOf(n), -1 != n && (i = n));
            for (var n = [], o = 0, a = 0; a < i; a++) if (a % 4) {
                var r = s.indexOf(e.charAt(a - 1)) << 2 * (a % 4),
                l = s.indexOf(e.charAt(a)) >>> 6 - 2 * (a % 4);
                n[o >>> 2] |= (r | l) << 24 - 8 * (o % 4),
                o++
            }
            return t.create(n, o)
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    }
} (),
function(e) {
    function t(e, t, i, s, n, o, a) {
        return e = e + (t & i | ~t & s) + n + a,
        (e << o | e >>> 32 - o) + t
    }
    function i(e, t, i, s, n, o, a) {
        return e = e + (t & s | i & ~s) + n + a,
        (e << o | e >>> 32 - o) + t
    }
    function s(e, t, i, s, n, o, a) {
        return e = e + (t ^ i ^ s) + n + a,
        (e << o | e >>> 32 - o) + t
    }
    function n(e, t, i, s, n, o, a) {
        return e = e + (i ^ (t | ~s)) + n + a,
        (e << o | e >>> 32 - o) + t
    }
    for (var o = CryptoJS,
    a = o.lib,
    r = a.WordArray,
    l = a.Hasher,
    a = o.algo,
    h = [], d = 0; 64 > d; d++) h[d] = 4294967296 * e.abs(e.sin(d + 1)) | 0;
    a = a.MD5 = l.extend({
        _doReset: function() {
            this._hash = new r.init([1732584193, 4023233417, 2562383102, 271733878])
        },
        _doProcessBlock: function(e, o) {
            for (var a = 0; 16 > a; a++) {
                var r = o + a,
                l = e[r];
                e[r] = 16711935 & (l << 8 | l >>> 24) | 4278255360 & (l << 24 | l >>> 8)
            }
            var a = this._hash.words,
            r = e[o + 0],
            l = e[o + 1],
            d = e[o + 2],
            c = e[o + 3],
            u = e[o + 4],
            g = e[o + 5],
            p = e[o + 6],
            m = e[o + 7],
            _ = e[o + 8],
            y = e[o + 9],
            S = e[o + 10],
            f = e[o + 11],
            v = e[o + 12],
            C = e[o + 13],
            b = e[o + 14],
            T = e[o + 15],
            P = a[0],
            D = a[1],
            I = a[2],
            w = a[3],
            P = t(P, D, I, w, r, 7, h[0]),
            w = t(w, P, D, I, l, 12, h[1]),
            I = t(I, w, P, D, d, 17, h[2]),
            D = t(D, I, w, P, c, 22, h[3]),
            P = t(P, D, I, w, u, 7, h[4]),
            w = t(w, P, D, I, g, 12, h[5]),
            I = t(I, w, P, D, p, 17, h[6]),
            D = t(D, I, w, P, m, 22, h[7]),
            P = t(P, D, I, w, _, 7, h[8]),
            w = t(w, P, D, I, y, 12, h[9]),
            I = t(I, w, P, D, S, 17, h[10]),
            D = t(D, I, w, P, f, 22, h[11]),
            P = t(P, D, I, w, v, 7, h[12]),
            w = t(w, P, D, I, C, 12, h[13]),
            I = t(I, w, P, D, b, 17, h[14]),
            D = t(D, I, w, P, T, 22, h[15]),
            P = i(P, D, I, w, l, 5, h[16]),
            w = i(w, P, D, I, p, 9, h[17]),
            I = i(I, w, P, D, f, 14, h[18]),
            D = i(D, I, w, P, r, 20, h[19]),
            P = i(P, D, I, w, g, 5, h[20]),
            w = i(w, P, D, I, S, 9, h[21]),
            I = i(I, w, P, D, T, 14, h[22]),
            D = i(D, I, w, P, u, 20, h[23]),
            P = i(P, D, I, w, y, 5, h[24]),
            w = i(w, P, D, I, b, 9, h[25]),
            I = i(I, w, P, D, c, 14, h[26]),
            D = i(D, I, w, P, _, 20, h[27]),
            P = i(P, D, I, w, C, 5, h[28]),
            w = i(w, P, D, I, d, 9, h[29]),
            I = i(I, w, P, D, m, 14, h[30]),
            D = i(D, I, w, P, v, 20, h[31]),
            P = s(P, D, I, w, g, 4, h[32]),
            w = s(w, P, D, I, _, 11, h[33]),
            I = s(I, w, P, D, f, 16, h[34]),
            D = s(D, I, w, P, b, 23, h[35]),
            P = s(P, D, I, w, l, 4, h[36]),
            w = s(w, P, D, I, u, 11, h[37]),
            I = s(I, w, P, D, m, 16, h[38]),
            D = s(D, I, w, P, S, 23, h[39]),
            P = s(P, D, I, w, C, 4, h[40]),
            w = s(w, P, D, I, r, 11, h[41]),
            I = s(I, w, P, D, c, 16, h[42]),
            D = s(D, I, w, P, p, 23, h[43]),
            P = s(P, D, I, w, y, 4, h[44]),
            w = s(w, P, D, I, v, 11, h[45]),
            I = s(I, w, P, D, T, 16, h[46]),
            D = s(D, I, w, P, d, 23, h[47]),
            P = n(P, D, I, w, r, 6, h[48]),
            w = n(w, P, D, I, m, 10, h[49]),
            I = n(I, w, P, D, b, 15, h[50]),
            D = n(D, I, w, P, g, 21, h[51]),
            P = n(P, D, I, w, v, 6, h[52]),
            w = n(w, P, D, I, c, 10, h[53]),
            I = n(I, w, P, D, S, 15, h[54]),
            D = n(D, I, w, P, l, 21, h[55]),
            P = n(P, D, I, w, _, 6, h[56]),
            w = n(w, P, D, I, T, 10, h[57]),
            I = n(I, w, P, D, p, 15, h[58]),
            D = n(D, I, w, P, C, 21, h[59]),
            P = n(P, D, I, w, u, 6, h[60]),
            w = n(w, P, D, I, f, 10, h[61]),
            I = n(I, w, P, D, d, 15, h[62]),
            D = n(D, I, w, P, y, 21, h[63]);
            a[0] = a[0] + P | 0,
            a[1] = a[1] + D | 0,
            a[2] = a[2] + I | 0,
            a[3] = a[3] + w | 0
        },
        _doFinalize: function() {
            var t = this._data,
            i = t.words,
            s = 8 * this._nDataBytes,
            n = 8 * t.sigBytes;
            i[n >>> 5] |= 128 << 24 - n % 32;
            var o = e.floor(s / 4294967296);
            for (i[(n + 64 >>> 9 << 4) + 15] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8), i[(n + 64 >>> 9 << 4) + 14] = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), t.sigBytes = 4 * (i.length + 1), this._process(), t = this._hash, i = t.words, s = 0; 4 > s; s++) n = i[s],
            i[s] = 16711935 & (n << 8 | n >>> 24) | 4278255360 & (n << 24 | n >>> 8);
            return t
        },
        clone: function() {
            var e = l.clone.call(this);
            return e._hash = this._hash.clone(),
            e
        }
    }),
    o.MD5 = l._createHelper(a),
    o.HmacMD5 = l._createHmacHelper(a)
} (Math),
function() {
    var e = CryptoJS,
    t = e.lib,
    i = t.Base,
    s = t.WordArray,
    t = e.algo,
    n = t.EvpKDF = i.extend({
        cfg: i.extend({
            keySize: 4,
            hasher: t.MD5,
            iterations: 1
        }),
        init: function(e) {
            this.cfg = this.cfg.extend(e)
        },
        compute: function(e, t) {
            for (var i = this.cfg,
            n = i.hasher.create(), o = s.create(), a = o.words, r = i.keySize, i = i.iterations; a.length < r;) {
                l && n.update(l);
                var l = n.update(e).finalize(t);
                n.reset();
                for (var h = 1; h < i; h++) l = n.finalize(l),
                n.reset();
                o.concat(l)
            }
            return o.sigBytes = 4 * r,
            o
        }
    });
    e.EvpKDF = function(e, t, i) {
        return n.create(i).compute(e, t)
    }
} (),
CryptoJS.lib.Cipher ||
function(e) {
    var t = CryptoJS,
    i = t.lib,
    s = i.Base,
    n = i.WordArray,
    o = i.BufferedBlockAlgorithm,
    a = t.enc.Base64,
    r = t.algo.EvpKDF,
    l = i.Cipher = o.extend({
        cfg: s.extend(),
        createEncryptor: function(e, t) {
            return this.create(this._ENC_XFORM_MODE, e, t)
        },
        createDecryptor: function(e, t) {
            return this.create(this._DEC_XFORM_MODE, e, t)
        },
        init: function(e, t, i) {
            this.cfg = this.cfg.extend(i),
            this._xformMode = e,
            this._key = t,
            this.reset()
        },
        reset: function() {
            o.reset.call(this),
            this._doReset()
        },
        process: function(e) {
            return this._append(e),
            this._process()
        },
        finalize: function(e) {
            return e && this._append(e),
            this._doFinalize()
        },
        keySize: 4,
        ivSize: 4,
        _ENC_XFORM_MODE: 1,
        _DEC_XFORM_MODE: 2,
        _createHelper: function(e) {
            return {
                encrypt: function(t, i, s) {
                    return ("string" == typeof i ? p: g).encrypt(e, t, i, s)
                },
                decrypt: function(t, i, s) {
                    return ("string" == typeof i ? p: g).decrypt(e, t, i, s)
                }
            }
        }
    });
    i.StreamCipher = l.extend({
        _doFinalize: function() {
            return this._process(!0)
        },
        blockSize: 1
    });
    var h = t.mode = {},
    d = function(t, i, s) {
        var n = this._iv;
        n ? this._iv = e: n = this._prevBlock;
        for (var o = 0; o < s; o++) t[i + o] ^= n[o]
    },
    c = (i.BlockCipherMode = s.extend({
        createEncryptor: function(e, t) {
            return this.Encryptor.create(e, t)
        },
        createDecryptor: function(e, t) {
            return this.Decryptor.create(e, t)
        },
        init: function(e, t) {
            this._cipher = e,
            this._iv = t
        }
    })).extend();
    c.Encryptor = c.extend({
        processBlock: function(e, t) {
            var i = this._cipher,
            s = i.blockSize;
            d.call(this, e, t, s),
            i.encryptBlock(e, t),
            this._prevBlock = e.slice(t, t + s)
        }
    }),
    c.Decryptor = c.extend({
        processBlock: function(e, t) {
            var i = this._cipher,
            s = i.blockSize,
            n = e.slice(t, t + s);
            i.decryptBlock(e, t),
            d.call(this, e, t, s),
            this._prevBlock = n
        }
    }),
    h = h.CBC = c,
    c = (t.pad = {}).Pkcs7 = {
        pad: function(e, t) {
            for (var i = 4 * t,
            i = i - e.sigBytes % i,
            s = i << 24 | i << 16 | i << 8 | i,
            o = [], a = 0; a < i; a += 4) o.push(s);
            i = n.create(o, i),
            e.concat(i)
        },
        unpad: function(e) {
            e.sigBytes -= 255 & e.words[e.sigBytes - 1 >>> 2]
        }
    },
    i.BlockCipher = l.extend({
        cfg: l.cfg.extend({
            mode: h,
            padding: c
        }),
        reset: function() {
            l.reset.call(this);
            var e = this.cfg,
            t = e.iv,
            e = e.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) var i = e.createEncryptor;
            else i = e.createDecryptor,
            this._minBufferSize = 1;
            this._mode = i.call(e, this, t && t.words)
        },
        _doProcessBlock: function(e, t) {
            this._mode.processBlock(e, t)
        },
        _doFinalize: function() {
            var e = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
                e.pad(this._data, this.blockSize);
                var t = this._process(!0)
            } else t = this._process(!0),
            e.unpad(t);
            return t
        },
        blockSize: 4
    });
    var u = i.CipherParams = s.extend({
        init: function(e) {
            this.mixIn(e)
        },
        toString: function(e) {
            return (e || this.formatter).stringify(this)
        }
    }),
    h = (t.format = {}).OpenSSL = {
        stringify: function(e) {
            var t = e.ciphertext;
            return e = e.salt,
            (e ? n.create([1398893684, 1701076831]).concat(e).concat(t) : t).toString(a)
        },
        parse: function(e) {
            e = a.parse(e);
            var t = e.words;
            if (1398893684 == t[0] && 1701076831 == t[1]) {
                var i = n.create(t.slice(2, 4));
                t.splice(0, 4),
                e.sigBytes -= 16
            }
            return u.create({
                ciphertext: e,
                salt: i
            })
        }
    },
    g = i.SerializableCipher = s.extend({
        cfg: s.extend({
            format: h
        }),
        encrypt: function(e, t, i, s) {
            s = this.cfg.extend(s);
            var n = e.createEncryptor(i, s);
            return t = n.finalize(t),
            n = n.cfg,
            u.create({
                ciphertext: t,
                key: i,
                iv: n.iv,
                algorithm: e,
                mode: n.mode,
                padding: n.padding,
                blockSize: e.blockSize,
                formatter: s.format
            })
        },
        decrypt: function(e, t, i, s) {
            return s = this.cfg.extend(s),
            t = this._parse(t, s.format),
            e.createDecryptor(i, s).finalize(t.ciphertext)
        },
        _parse: function(e, t) {
            return "string" == typeof e ? t.parse(e, this) : e
        }
    }),
    t = (t.kdf = {}).OpenSSL = {
        execute: function(e, t, i, s) {
            return s || (s = n.random(8)),
            e = r.create({
                keySize: t + i
            }).compute(e, s),
            i = n.create(e.words.slice(t), 4 * i),
            e.sigBytes = 4 * t,
            u.create({
                key: e,
                iv: i,
                salt: s
            })
        }
    },
    p = i.PasswordBasedCipher = g.extend({
        cfg: g.cfg.extend({
            kdf: t
        }),
        encrypt: function(e, t, i, s) {
            return s = this.cfg.extend(s),
            i = s.kdf.execute(i, e.keySize, e.ivSize),
            s.iv = i.iv,
            e = g.encrypt.call(this, e, t, i.key, s),
            e.mixIn(i),
            e
        },
        decrypt: function(e, t, i, s) {
            return s = this.cfg.extend(s),
            t = this._parse(t, s.format),
            i = s.kdf.execute(i, e.keySize, e.ivSize, t.salt),
            s.iv = i.iv,
            g.decrypt.call(this, e, t, i.key, s)
        }
    })
} (),
function() {
    function e() {
        for (var e = this._S,
        t = this._i,
        i = this._j,
        s = 0,
        n = 0; 4 > n; n++) {
            var t = (t + 1) % 256,
            i = (i + e[t]) % 256,
            o = e[t];
            e[t] = e[i],
            e[i] = o,
            s |= e[(e[t] + e[i]) % 256] << 24 - 8 * n
        }
        return this._i = t,
        this._j = i,
        s
    }
    var t = CryptoJS,
    i = t.lib.StreamCipher,
    s = t.algo,
    n = s.RC4 = i.extend({
        _doReset: function() {
            for (var e = this._key,
            t = e.words,
            e = e.sigBytes,
            i = this._S = [], s = 0; 256 > s; s++) i[s] = s;
            for (var n = s = 0; 256 > s; s++) {
                var o = s % e,
                n = (n + i[s] + (t[o >>> 2] >>> 24 - 8 * (o % 4) & 255)) % 256,
                o = i[s];
                i[s] = i[n],
                i[n] = o
            }
            this._i = this._j = 0
        },
        _doProcessBlock: function(t, i) {
            t[i] ^= e.call(this)
        },
        keySize: 8,
        ivSize: 0
    });
    t.RC4 = i._createHelper(n),
    s = s.RC4Drop = n.extend({
        cfg: n.cfg.extend({
            drop: 192
        }),
        _doReset: function() {
            n._doReset.call(this);
            for (var t = this.cfg.drop; 0 < t; t--) e.call(this)
        }
    }),
    t.RC4Drop = i._createHelper(s)
} (),
define("rc4",
function() {}),
define("inputPassword", ["input"],
function(e) {
    e.InputPassword = function(t) {
        e.InputPassword.base.constructor.apply(this, arguments)
    },
    e.initClass(e.InputPassword, e.Input);
    var t = e.InputPassword.prototype;
    return t._render = function() {
        this._Template = e._Templates.InputPassword,
        e.InputPassword.base._render.apply(this, arguments),
        this._showPass = !1;
        var t = this._DomNode.querySelector(".PasswordEye");
        e.addEvent(t, "mousedown", this._passwordEyeClick.bind(this)),
        e.addEvent(t, "mouseup", this._passwordEyeClick.bind(this)),
        e.addEvent(t, "mouseout", this._passwordEyeClick.bind(this)),
        e.addEvent(t, "touchstart", this._passwordEyeClick.bind(this)),
        e.addEvent(t, "touchcancel", this._passwordEyeClick.bind(this)),
        e.Browser.IsMobile && e.addCSSClass(t, "icon-SignIn-eye")
    },
    t._passwordEyeClick = function(t) {
        this._showPass = !this._showPass,
        "mouseout" !== t.type && "touchcancel" !== t.type || (this._showPass = !1),
        this.setInputType(1 == this._showPass ? "text": "password");
        var i = e.Browser.IsMobile ? "icon-SignIn-eyePresed": "Pressed";
        this._showPass ? e.addCSSClass(t.target, i) : e.removeCSSClass(t.target, i),
        "ontouchstart" in window && (t.preventDefault(), t.stopPropagation())
    },
    t = null,
    e
}),
define("mobile/mobileDialogServersSearch", ["dialog"],
function(e) {
    e.MobileDialogServersSearch = function(t) {
        e.MobileDialogServersSearch.base.constructor.apply(this, arguments),
        e.Resizer.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileDialogServersSearch, e.Dialog);
    var t = e.MobileDialogServersSearch.prototype;
    return t._render = function() {
        this.serversList = [],
        this._Width = parseInt(window.innerWidth),
        this._Height = parseInt(window.innerHeight),
        this._Top = 0,
        this._Left = 0,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.DialogServersSearchContent);
        var t = this._Content;
        this.headPanelNode = this._Content.querySelector(".HeadPanel"),
        this.touchmovefunc = this.touchmove.bind(this),
        this._searchInput = new e.Input({
            Template: e._Templates.SearchField,
            ParentNode: this.headPanelNode,
            Width: window.innerWidth - 110,
            LabelPosition: "Template",
            PlaceholderKey: "cMobileInputServerName",
            Placeholder: "Input server name",
            ChangeValue: e.Delegate(this, this._onSearchBtnClick)
        }),
        this._cancelBtn = new e.Button({
            ParentNode: this.headPanelNode,
            Class: "CancelButton",
            Text: "Cancel",
            Key: "CNMRcansel",
            Click: e.Delegate(this, this._onGoBack)
        }),
        this._serversTable = new e.DivTable({
            ParentNode: t,
            Template: e._Templates.MobileTableServers,
            RowTemplates: [e._Templates.MobileTableServersRow]
        }),
        this._serversTable.ClickRow.add(e.Delegate(this, this._onRowClick)),
        e.MobileDialogServersSearch.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogServersSearch");
        var i = this._searchInput._DomNode.querySelector(".Magnifier"),
        s = this._searchInput._DomNode.querySelector(".ClearCross");
        e.addEvent(i, "click", this._onSearchBtnClick.bind(this)),
        e.addEvent(s, "click", this._clearSearchField.bind(this)),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this.onDialogTouchMove.bind(this)),
        e.addEvent(this.getDomNode().querySelector(".DControls"), "touchmove", this.touchmovefunc)
    },
    t.touchmove = function(t) {
        var i = this._DomNode.querySelector(".DControls");
        e.preventDefaultMoveNode(i, i, t)
    },
    t.dispose = function() {
        e.removeEvent(this.getDomNode().querySelector(".DControls"), "touchmove", this.touchmovefunc),
        e.Resizer.unRegister(this),
        e.LangManager.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        e._serversSearchDialog = null;
        var t = this.getDomNode(),
        i = t.parentNode;
        i && i.removeChild(t)
    },
    t.show = function(t) {
        e.addCSSClass(document.body, "serversSearchDialog"),
        this._source = t,
        this.loadSelectedServers(),
        e.MobileDialogServersSearch.base.show.apply(this, arguments),
        this.tuneTable(),
        this._clearSearchField(),
        this.getServersList()
    },
    t.hide = function() {
        e.removeCSSClass(document.body, "serversSearchDialog"),
        e.MobileDialogServersSearch.base.hide.apply(this, arguments)
    },
    t.filterServers = function(t) {
        for (var i = [], s = 0; s < this.serversList.length; s++) this.serversList[s].Name.toLowerCase().indexOf(t.toLowerCase()) != -1 && i.push(this.serversList[s]);
        return i = e.UtipFunctions.filterOnlyBinaryServersIOS(i)
    },
    t.showFilteredServers = function(e) {
        this._serversTable.resetTable();
        for (var t = [], i = 0; i < e.length; i++) t.push({
            templateIndex: 0,
            rowId: e[i].Name,
            cellValues: {
                ImgServer: this.getServerImg(),
                ServerInfo: this.getServerNameAndCompany(e[i].Name, e[i].CompanyName),
                ServerObject: e[i]
            }
        });
        this._serversTable.setData(t)
    },
    t.saveSelectedServers = function(t) {
        for (var i = [], s = 0; s < t.length; s++) {
            for (var n = !1,
            o = 0; o < e.savedServers.length; o++) t[s].Name == e.savedServers[o].Name && (e.savedServers[o] = t[s], n = !0);
            n || i.push(t[s])
        }
        e.savedServers = e.savedServers.concat(i);
        var a = JSON.stringify({
            Servers: e.savedServers
        });
        localStorage.setItem("SavedServers", a)
    },
    t.updateLocallySavedServers = function() {
        for (var t = 1; t < e.savedServers.length; t++) {
            for (var i = !1,
            s = 0; s < this.serversList.length; s++) this.serversList[s].Name == e.savedServers[t].Name && (e.savedServers[t] = this.serversList[s], i = !0);
            i || e.savedServers.splice(t, 1)
        }
        var n = JSON.stringify({
            Servers: e.savedServers
        });
        localStorage.setItem("SavedServers", n),
        this.loadSelectedServers()
    },
    t.loadSelectedServers = function() {
        this._serversTable.resetTable();
        for (var t = [], i = e.UtipFunctions.filterOnlyBinaryServersIOS(e.savedServers), s = 0; s < i.length; s++) t.push({
            templateIndex: 0,
            rowId: i[s].Name,
            cellValues: {
                ImgServer: this.getServerImg(),
                ServerInfo: this.getServerNameAndCompany(i[s].Name, i[s].CompanyName),
                ServerObject: i[s]
            }
        });
        this._serversTable.setData(t)
    },
    t.getServersList = function() {
        showPreloaderCircle(),
        e.requester.getServersList()
    },
    t.onServersListLoaded = function() {
        hidePreloader(),
        this.updateLocallySavedServers(),
        e.getMobileSignInDialog().getSignInButton().setEnabled(!0)
    },
    t.onServersListUnavailable = function() {
        hidePreloader();
        var t = e.getDialogConfirm({
            ImageList: null,
            Left: (window.innerWidth - 260) / 2,
            Top: (window.innerHeight - 194) / 2,
            Width: 260,
            Height: 224,
            Class: "Mini Confirm",
            Confirm: e.Delegate(this, this.getServersList),
            Closed: e.Delegate(e.DialogConfirm,
            function(t) {
                e._dialogConfirm.dispose()
            })
        });
        t._YesButton.setPressed(!1),
        t._NoButton.setPressed(!1);
        var i = e.LangManager.getStringByKey("cMobileServerListError") || "Unable to download servers list. Repeat?";
        document.getElementById("WTDialogsContainer").style.position = "static",
        t.show(i);
        var s = e.getMobileSignInDialogWithoutInit();
        s && s.getSignInButton().setEnabled(!0);
        var n = document.getElementById("WTDialogBlockscreen");
        n && (n.style.background = "")
    },
    t._onSearchBtnClick = function() {
        var e = this._searchInput.getValue();
        if ("" != e && null != e) {
            var t = this.filterServers(e);
            this.showFilteredServers(t)
        } else this.loadSelectedServers()
    },
    t._clearSearchField = function() {
        this._searchInput.setValue(""),
        this._onSearchBtnClick()
    },
    t._onRowClick = function(t) {
        this._searchInput.getInputNode().blur();
        var i = t.rowID;
        if (i) {
            var s = this._serversTable.getRowById(i).getValue("ServerObject");
            this.saveSelectedServers([s]);
            var n = this._source || e.getMobileSignInDialog(),
            o = document.getElementById("WTDialogsContainer");
            e.patch_mobileKeyboardUp({
                width: parseInt(o.offsetWidth),
                height: parseInt(o.offsetHeight)
            },
            function(e) {
                e.d.updateServers(e.name),
                this.hide(),
                this.dispose()
            }.bind(this), null, {
                d: n,
                name: i
            })
        }
        return null
    },
    t.getServerImg = function() {
        var e = '<div style="background-image: url(res/img/mobileImg/buttons/comp.png);"></div>';
        return e
    },
    t.getServerNameAndCompany = function(e, t) {
        var i = "";
        return i += '<div class="ServerName">' + e + "</div><br />",
        i += '<div class="CompanyName">' + t + "</div>"
    },
    t.setWidth = function(e) {
        this._Width = Math.max(0, e);
        var t = Math.max(0, this._Width);
        this._DomNode.style.width = t + "px"
    },
    t.setHeight = function(e) {
        this._Height = Math.max(e, 0);
        var t = Math.max(0, this._Height);
        this._DomNode && (this._DomNode.style.height = t + "px", this._contentNode && (this._contentNode.style.height = t + "px"))
    },
    t.tuneTable = function() {
        this._serversTable.setHeight(window.innerHeight - this.headPanelNode.clientHeight),
        this._serversTable.getDomNode().style.marginTop = this.headPanelNode.clientHeight + "px"
    },
    t._onWindowResize = function(e) {
        this.setWidth(window.innerWidth),
        this.setHeight(window.innerHeight),
        this._searchInput.setWidth(window.innerWidth - 110),
        this.tuneTable()
    },
    t._onGoBack = function() {
        var t = this._source || e.getMobileSignInDialog(),
        i = document.getElementById("WTDialogsContainer");
        e.patch_mobileKeyboardUp({
            width: parseInt(i.offsetWidth),
            height: parseInt(i.offsetHeight)
        },
        function(e) {
            var t = e.d;
            t.updateServers(t.getLastSelectedServerIndex()),
            this.hide(),
            this.dispose()
        }.bind(this), null, {
            d: t
        })
    },
    t._onChangeLang = function() {
        var t = e.LangManager.getStringByKey("cMobileInputServerName") || "Input server name";
        this._searchInput.setPlaceholder(t)
    },
    t = null,
    e.getMobileDialogServersSearch = function(t) {
        return e._serversSearchDialog || (e._serversSearchDialog = new e.MobileDialogServersSearch(t)),
        e._serversSearchDialog
    },
    e.getMobileDialogServersSearchWithoutInit = function() {
        return e._serversSearchDialog
    },
    e
}),
define("mobile/mobileDialogOpenDemo", ["dialog", "input", "container", "ajax", "dialogOpenDemo", "swiper", "mobile/mobileDialogSignIn"],
function(t) {
    t.MobileDialogOpenDemo = function(e) {
        t.MobileDialogOpenDemo.base.constructor.apply(this, arguments),
        t.Resizer.register(this),
        t.LangManager.register(this)
    },
    t.initClass(t.MobileDialogOpenDemo, t.Dialog);
    var i = t.MobileDialogOpenDemo.prototype;
    return i._render = function() {
        this._message = "",
        this._Width = parseInt(window.innerWidth),
        this._Height = 934,
        this._Top = 0,
        this._Left = 0,
        this._buttonsTextHeight = 22,
        this._WithBlock = !1,
        this._Content = t.htmlToDOM(t._Templates.MobileDialogOpenDemoContent),
        this.otherServer = t.LangManager.getStringByKey("cMobileServerSearch") || "Search servers";
        var e = this._Content.querySelector(".DControls");
        this.setTitle(),
        this._renderControls(e),
        this._loadDemoGroups(this._serverInput.getValue()),
        this._loadDemoData(),
        t.DialogOpenDemo.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogOpenDemo"),
        t.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        t.addEvent(this._DomNode, "touchmove", this._onDialogTouchMove.bind(this)),
        t.addCSSClass(this._serverInput.getDomNode().querySelector(".WTInputSelectArrowImg"), "icon-drop_down_shaded_arrow"),
        t.addCSSClass(this._accountTypeInput.getDomNode().querySelector(".WTInputSelectArrowImg"), "icon-drop_down_shaded_arrow"),
        this._orientationChangeFunctor = this._onOrientationChange.bind(this),
        window.addEventListener("orientationchange", this._orientationChangeFunctor, !1),
        this._onWindowResize()
    },
    i._renderControls = function(e) {
        var i = t.Delegate(this, this._onFieldChangeValue),
        s = t.Delegate(this, this._phoneCheck),
        n = t.Delegate(this, this._canUseOnlyDigits),
        o = t.Delegate(this, this._onInputFocus);
        this._backBtn = new t.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: t.FontIcons.m_GoToBack,
                Color: "#FFFFFF",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: t.Delegate(this, this._onGoBack)
        }),
        this._nameInput = new t.Input({
            ParentNode: e,
            Width: 248,
            Label: "Name:",
            Key: "cWCTAccountListFormName",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: t.LangManager.getStringByKey("cWCTAccountListFormName") || "Name",
            ChangeValue: i,
            Click: o,
            Focus: o
        }),
        this._surnameInput = new t.Input({
            ParentNode: e,
            Width: 248,
            Label: "Surname:",
            Key: "cWCTAccountListFormSurname",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: t.LangManager.getStringByKey("cWCTAccountListFormSurname") || "Surname",
            ChangeValue: i,
            Click: o,
            Focus: o
        }),
        this._emailInput = new t.Input({
            ParentNode: e,
            Width: 248,
            Label: "E-mail",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: "E-mail",
            ChangeValue: i,
            Click: o,
            Focus: o,
            MaxLength: 255
        }),
        this._countryInput = new t.Input({
            ParentNode: e,
            Width: 248,
            Label: "Country:",
            Key: "cWCTAccountListFormCountry",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: t.LangManager.getStringByKey("cWCTAccountListFormCountry") || "Country",
            ChangeValue: i,
            Click: o,
            Focus: o
        }),
        this._cityInput = new t.Input({
            ParentNode: e,
            Width: 248,
            Label: "City:",
            Key: "cWCTAccountListFormCity",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: t.LangManager.getStringByKey("cWCTAccountListFormCity") || "City",
            ChangeValue: i,
            Click: o,
            Focus: o
        }),
        this._phoneInput = new t.Input({
            ParentNode: e,
            Width: 248,
            Label: "Phone:",
            Key: "cWCTAccountListFormTelephone",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: t.LangManager.getStringByKey("cWCTAccountListFormTelephone") || "Phone",
            ChangeValue: i,
            Click: o,
            Focus: o,
            KeyPress: s
        }),
        this._accountTypeInput = new t.InputSelect({
            ParentNode: e,
            Width: 248,
            Edit: !1,
            NeedNotEditedStyle: !1,
            Options: t.AccountManager.getGroupNames(),
            Label: "Type:",
            Key: "cWCTAccountListFormAccountType",
            LabelPosition: "Top",
            LabelPostfix: "",
            MenuClass: "ServerSelect",
            Placeholder: t.LangManager.getStringByKey("cWCTAccountListFormAccountType") || "Type",
            Click: o,
            Focus: o
        }),
        this._needUseDepositInput() ? this._depositInput = new t.Input({
            ParentNode: e,
            Width: 248,
            Label: "Deposit:",
            Key: "cNCFDeposte",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: t.LangManager.getStringByKey("cNCFDeposte") || "Deposit",
            ChangeValue: i,
            Click: o,
            Focus: o,
            KeyPress: n
        }) : this._removeDepositInput(),
        this._serverInput = new t.InputSelect({
            ParentNode: e,
            Width: 248,
            Options: t.AccountManager.getServerNames(),
            Label: "Server:",
            Key: "cCFServer",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: t.LangManager.getStringByKey("cCFServer") || "Server",
            Click: o,
            Focus: o,
            Edit: !1,
            NeedNotEditedStyle: !1,
            MenuClass: "ServerSelect",
            ChangedValue: t.Delegate(this, this._serverChanged),
            DropDown: t.Delegate(this, this._onServerInputDropDown)
        }),
        this._openDemoBtn = new t.Button({
            ParentNode: e,
            Width: 248,
            Class: "OpenDemoBtn",
            Text: window.UtipConfig.BrokersSettings.OpenDemoAccountCaption[t.LangManager.getLang()] || t.LangManager.getStringByKey("cCFOpendemo") || "Open a demo account",
            Click: t.Delegate(this, this._onOpenDemoBtnClick)
        })
    },
    i._onFieldChangeValue = function(e) {
        e.sender === this._incorrentInput && (this._incorrentInput.hideValueIsIncorrect(), this._incorrentInput = null)
    },
    i._loadDemoGroups = function(e) {
        var i = t.AccountManager,
        s = i.isConfigServersMode === !0,
        n = [],
        o = {},
        a = {},
        r = i.groupsCount() || 0;
        s === !1 && (e = t.valueIsEmpty(e) || !isFinite(e) ? this._serverInput.getSelectedOption() : e, n = t.savedServers, o = n[e], a = o.Groups, r = a.length, i.setGroups(a)),
        this._needUseTypeAccountInput() && 0 !== r ? (this._showTypeAccountSelectInput(), this._accountTypeInput.setOptions(i.getGroupNames()), this._accountTypeInput.setSelectedOption(0)) : this._removeTypeAccountSelectInput(),
        this._openDemoBtn.setEnabled(s === !0 || 0 !== r)
    },
    i._needUseTypeAccountInput = function() {
        var e = UtipConfig.BrokersSettings.Default_GroupId;
        return ! isFinite(e) || !t.AccountManager.containsGroup(e)
    },
    i._needUseDepositInput = function() {
        var e = UtipConfig.BrokersSettings.Default_FirstDeposit,
        t = !(isFinite(e) || e > -1);
        return t
    },
    i._removeDepositInput = function() {
        if (t.addCSSClass(this._Content, "WithoutDeposit"), this._depositInput) {
            var e = this._depositInput.getDomNode(),
            i = e.parentNode;
            i && i.removeChild(e),
            this._depositInput = null
        }
    },
    i._removeTypeAccountSelectInput = function() {
        t.addCSSClass(this._Content, "WithoutAccountType"),
        this._accountTypeInput && (this._accountTypeInput.getDomNode().style.display = "none")
    },
    i._showTypeAccountSelectInput = function() {
        t.removeCSSClass(this._Content, "WithoutAccountType"),
        this._accountTypeInput && (this._accountTypeInput.getDomNode().style.display = "block")
    },
    i._loadDemoData = function() {
        var e = t.AccountManager,
        i = e.isConfigServersMode === !0,
        s = e.getDemoAccount() || {},
        n = s.server || s.serverName,
        o = this._serverInput.indexOfText(n);
        if (o !== -1 && this._serverInput.setSelectedOption(o), i === !1 && this._loadDemoGroups(o === -1 ? 0 : o), this._accountTypeInput) {
            var a = s.type;
            t.valueIsEmpty(a) || o === -1 ? this._accountTypeInput.setSelectedOption(0) : this._accountTypeInput.setValue(a)
        }
        this._depositInput && this._depositInput.setValue(s.deposit),
        this._nameInput.setValue(s.name),
        this._surnameInput.setValue(s.surname),
        this._emailInput.setValue(s.email),
        this._phoneInput.setValue(s.phone),
        this._countryInput.setValue(s.country),
        this._cityInput.setValue(s.city)
    },
    i._phoneCheck = function(t) {
        e = t.event || t,
        32 == e.charCode && 0 == e.target.value.length && e.preventDefault();
        var i = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 40, 41, 43, 45];
        i.indexOf(e.charCode) == -1 && 8 != e.keyCode || !(e.target.value.length < 20 || 8 == e.keyCode) ? e.preventDefault() : (40 == e.charCode && e.target.value.indexOf("(") != -1 && e.preventDefault(), 41 != e.charCode || e.target.value.indexOf("(") != -1 && e.target.value.indexOf(")") == -1 || e.preventDefault(), 45 == e.charCode && e.target.value.length < 1 && e.preventDefault(), 43 == e.charCode && e.target.value.length > 0 && e.preventDefault())
    },
    i._canUseOnlyDigits = function(t) {
        e = t.event || t;
        var i = [8, 9, 35, 36, 37, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57],
        s = e.charCode,
        n = e.keyCode;
        return 0 !== s && i.indexOf(s) === -1 ? (e.preventDefault(), e.stopPropagation(), !1) : 0 !== n && i.indexOf(n) === -1 ? (e.preventDefault(), e.stopPropagation(), !1) : void 0
    },
    i._onInputFocus = function(e) {
        var i = e.sender.getDomNode();
        t.removeCSSClass(i, "HiddenLabel")
    },
    i.dispose = function() {
        window.removeEventListener("orientationchange", this._orientationChangeFunctor, !1),
        t.Resizer.unRegister(this),
        t.LangManager.unRegister(this),
        t._dialogMasterObject.unRegister(this),
        t._mobileOpenDemoDialog = null
    },
    i._onOrientationChange = function(e) {
        if (e.preventDefault(), e.stopPropagation(), document.activeElement && "input" == document.activeElement.tagName.toLowerCase()) {
            document.activeElement.blur();
            var i = document.getElementById("WTDialogsContainer");
            t.patch_mobileKeyboardUp({
                width: i.offsetWidth,
                height: i.offsetHeight
            },
            this.adaptiveSize, this, null)
        }
    },
    i.updateServers = function(e) {
        t.AccountManager.updateServers(!1),
        this._serverInput.setOptions(t.AccountManager.getServerNames()),
        e !== !1 && ("number" == typeof e ? this._serverInput.setSelectedOption(e) : this._serverInput.setSelectedOptionByValue(e)),
        this._serverChanged()
    },
    i._onServerInputDropDown = function() {
        t.serversMode == t.serversModes.fromLocalStorage && this._serverInput.getOptions().length <= 1 && this._serverChanged()
    },
    i._serverChanged = function() { ! t.AccountManager.isConfigServersMode && this._serverInput.isLastSelected() ? t.getMobileDialogServersSearch().show(this) : this._loadDemoGroups()
    },
    i._validateData = function() {
        var e = t.AccountManager,
        i = e.isConfigServersMode === !0,
        s = UtipConfig.BrokersSettings,
        n = t.LangManager,
        o = e.getGroupById(s.Default_GroupId);
        i || (o = this._accountTypeInput ? e.getGroupByName(this._accountTypeInput.getInputNode().value) : e.getGroups()[0]),
        o || (o = {
            Id: s.Default_GroupId,
            Name: ""
        });
        var a = s.Default_FirstDeposit;
        a = isFinite(a) ? a: window.UtipConfig.TradeSettings.DefaultDeposit || 5e3;
        var r = this._serverInput.getInputNode(),
        l = this._serverInput.getSelectedOption(),
        h = this._accountTypeInput ? this._accountTypeInput.getInputNode() : {
            value: o.Name
        },
        d = this._depositInput ? this._depositInput.getInputNode() : {
            value: a
        },
        c = this._nameInput.getInputNode(),
        u = this._surnameInput.getInputNode(),
        g = this._emailInput.getInputNode(),
        p = this._phoneInput.getInputNode(),
        m = this._countryInput.getInputNode(),
        _ = this._cityInput.getInputNode(),
        y = s.Default_Leverage || 100,
        S = {},
        f = {},
        v = null,
        C = !1,
        b = !1,
        T = null,
        P = n.getStringByKey("cWCTAccountListFormError") || "Invalid parameter";
        return y = isFinite(y) && 0 !== y ? y.toString() : "100",
        c.value ? u.value ? g.value ? this._validEmail(g.value) ? m.value ? _.value ? this._validPhone(p.value) ? this._depositInput && !isFinite(d.value) ? (b = !0, T = n.getStringByKey("cWCTDeposit") || "Deposit", v = d, f = this._depositInput) : (S.serverIndex = l, S.server = r.value, S.type = h.value, S.groupID = o.Id, S.deposit = d.value, S.name = c.value, S.surname = u.value, S.email = g.value, S.phone = p.value, S.country = m.value, S.city = _.value, S.leverage = y, C = !0) : (b = !0, T = n.getStringByKey("cWCTAccountListFormTelephone") || "Phone", v = p, f = this._phoneInput) : (b = !0, T = n.getStringByKey("cWCTAccountListFormCity") || "City", v = _, f = this._cityInput) : (b = !0, T = n.getStringByKey("cWCTAccountListFormCountry") || "Country", v = m, f = this._countryInput) : (P = n.getStringByKey("cWCTAccountListFormErrormail") || "Invalid email address", v = g, f = this._emailInput) : (b = !0, T = n.getStringByKey("cWCTAccountListFormEmail") || "E-mail", v = g, f = this._emailInput) : (b = !0, T = n.getStringByKey("cWCTAccountListFormSurname") || "Surname", v = u, f = this._surnameInput) : (b = !0, T = n.getStringByKey("cWCTAccountListFormName") || "Name", v = c, f = this._nameInput),
        b && (P = '"' + T + '" ' + P),
        {
            result: C,
            demoAccountModel: S || null,
            error: {
                message: {
                    title: n.getStringByKey("cMFInvalidParameter") || "Invalid parameter",
                    description: P
                },
                errorType: 1,
                messageType: 2,
                sender: v,
                senderObject: f
            }
        }
    },
    i._validEmail = function(e) {
        var t = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
        return t.test(e)
    },
    i._validPhone = function(e) {
        var t = /^(?!([^-]*-){5})(\+\d+)?\s*(\(\d+\))?[- \d]+$/gi;
        return t.test(e)
    },
    i._blockButtons = function() {
        this._openDemoBtn.setEnabled(!1),
        this.setProgressView()
    },
    i.unblockButton = function() {
        this._openDemoBtn.setEnabled(!0)
    },
    i.setProgressView = function() {
        var e = t._dialogMasterObject.getBlockscreen(!0);
        e.style.display = "inline",
        e.classList.add("RestartMode"),
        showPreloaderCircle()
    },
    i._onOpenDemoBtnClick = function() {
        t._menuMasterObject.hideAll(),
        this._incorrentInput && (this._incorrentInput.hideValueIsIncorrect(), this._incorrentInput = null);
        var e = this._validateData();
        e.result === !0 ? (this.openDemo(e.demoAccountModel), this._blockButtons()) : (this._openDemoBtn.setEnabled(!0), this._incorrentInput = e.error.senderObject, e.error.senderObject.showValueIsIncorrect())
    },
    i.openDemo = function(e) {
        t.AccountManager.updateDemoAccount(e);
        var i = t.getTerminal(),
        s = {
            serverIndex: e.serverIndex,
            groupName: e.type,
            groupID: e.groupID,
            deposit: e.deposit,
            leverage: e.leverage,
            name: e.name,
            surname: e.surname,
            email: e.email,
            phone: e.phone,
            country: e.country,
            city: e.city
        };
        i && i.saveSettings(),
        t.requester.sendTerminalVersion(t.requester.openDemoAccount, [s], !0),
        t._menuMasterObject.hideAll()
    },
    i.setTitle = function() {
        var e = this._Content.querySelector(".dialogLabel");
        e.innerHTML = window.UtipConfig.BrokersSettings.OpenDemoAccountCaption[t.LangManager.getLang()] || t.LangManager.getStringByKey("cCFOpendemo") || "Open a demo account"
    },
    i.setWidth = function() {},
    i.setHeight = function() {},
    i._onWindowResize = function(e) {
        this.lastResizeEvent = e,
        "Safari" === t.Browser.Browser && document.activeElement.blur()
    },
    i.show = function(e) {
        this._nameInput.getValue() || this._nameInput.addCSSClass("HiddenLabel"),
        this._surnameInput.getValue() || this._surnameInput.addCSSClass("HiddenLabel"),
        this._emailInput.getValue() || this._emailInput.addCSSClass("HiddenLabel"),
        this._phoneInput.getValue() || this._phoneInput.addCSSClass("HiddenLabel"),
        this._countryInput.getValue() || this._countryInput.addCSSClass("HiddenLabel"),
        this._cityInput.getValue() || this._cityInput.addCSSClass("HiddenLabel"),
        this._depositInput && !this._depositInput.getValue() && this._depositInput.addCSSClass("HiddenLabel"),
        this._accountTypeInput && !this._accountTypeInput.getValue() && this._accountTypeInput.addCSSClass("HiddenLabel"),
        t.DialogOpenDemo.base.show.apply(this, arguments),
        t.getMobileDialogStart().hide(),
        document.getElementById("container").style.display = "none",
        void 0 != t.getMobileDialogStart().getDomNode() && (t.getMobileDialogStart().getDomNode().style.display = "none"),
        document.querySelector("html").scrollTop = 0,
        document.body.scrollTop = 0
    },
    i._onDialogTouchMove = function(e) {
        WT_Device.iphone() && document.activeElement.blur(),
        t.DialogOpenDemo.base.onDialogTouchMove.apply(this, arguments)
    },
    i._onGoBack = function(e) {
        t.getTerminal() && t.Auth._checkAuth ? (history.go(1), this.hide(), t.getTerminal().redrawTerminal(), this.dispose()) : (this.hide(), t.getMobileDialogStart().show())
    },
    i.getLastSelectedServerIndex = function() {
        return this._serverInput.previousIndex
    },
    i._updatePlaceholders = function() {
        this._nameInput.setPlaceholder(t.LangManager.getStringByKey("cWCTAccountListFormName") || "Name"),
        this._surnameInput.setPlaceholder(t.LangManager.getStringByKey("cWCTAccountListFormSurname") || "Surname"),
        this._countryInput.setPlaceholder(t.LangManager.getStringByKey("cWCTAccountListFormCountry") || "Country"),
        this._cityInput.setPlaceholder(t.LangManager.getStringByKey("cWCTAccountListFormCity") || "City"),
        this._phoneInput.setPlaceholder(t.LangManager.getStringByKey("cWCTAccountListFormTelephone") || "Phone"),
        this._accountTypeInput && this._accountTypeInput.setPlaceholder(t.LangManager.getStringByKey("cWCTAccountListFormAccountType") || "Type"),
        this._depositInput && this._depositInput.setPlaceholder(t.LangManager.getStringByKey("cNCFDeposte") || "Deposit"),
        this._openDemoBtn.setText(window.UtipConfig.BrokersSettings.OpenDemoAccountCaption[t.LangManager.getLang()] || t.LangManager.getStringByKey("cCFOpendemo") || "Open a demo account")
    },
    i._onChangeLang = function() {
        if (this.setTitle(), this._updatePlaceholders(), this.otherServer = t.LangManager.getStringByKey("cMobileServerSearch") || "Search servers", t.serversMode == t.serversModes.fromLocalStorage) {
            var e = this._serverInput.getOptions();
            e[e.length - 1] = this.otherServer,
            this._serverInput.setOptions(e),
            this._serverInput.setSelectedOption(0)
        }
        this._incorrentInput && this._incorrentInput.incorrectValueChangeLang()
    },
    i = null,
    t.getMobileOpenDemoDialog = function(e) {
        return t._mobileOpenDemoDialog || (t._mobileOpenDemoDialog = new t.MobileDialogOpenDemo(e)),
        t._mobileOpenDemoDialog
    },
    t.getMobileOpenDemoDialogWithoutInit = function() {
        return t._mobileOpenDemoDialog
    },
    t
}),
define("mobile/mobileDialogSignIn", ["dialog", "inputSelect", "rc4", "dialogLoginPassword", "inputPassword", "mobile/mobileDialogServersSearch", "mobile/mobileDialogOpenDemo"],
function(e) {
    e.MobileDialogSignIn = function(t) {
        e.MobileDialogSignIn.base.constructor.apply(this, arguments),
        e.Resizer.register(this),
        e.LangManager.register(this),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.MobileDialogSignIn, e.Dialog);
    var t = e.MobileDialogSignIn.prototype;
    return t._onClosed = function() {
        this.dispose()
    },
    t.getLoginsByServer = function(e) {
        var t = [];
        if (e) for (var i = 0; i < e.length; i++) {
            var s = e[i];
            t.push(s.Login)
        }
        return t
    },
    t._render = function() {
        this._Width = parseInt(window.innerWidth),
        this._Height = parseInt(window.innerHeight) >= 580 ? parseInt(window.innerHeight) : 580,
        this._Title = "Authorization",
        this._Key = "cJRNLAuthorization",
        this._Top = 0,
        this._Left = 0,
        this._buttonsTextHeight1 = 22,
        this._buttonsTextHeight2 = 17,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.DialogSignInContent);
        var t = this._Content.querySelector(".DControls");
        this.otherServer = e.LangManager.getStringByKey("cMobileServerSearch") || "Search servers",
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "#FFFFFF",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this._onGoBack)
        }),
        this._loginInput = new e.InputSelect({
            ParentNode: t,
            Width: 248,
            Label: "Login",
            Key: "cLPFLOgin",
            Options: e.AccountManager.getAccountsByCurrentAccountServer(),
            LabelPosition: "Top",
            LabelPostfix: "",
            MenuClass: "ServerSelect",
            Placeholder: e.LangManager.getStringByKey("cLPFLOgin") || "Login",
            Click: e.Delegate(this, this._onInputFocus),
            Focus: e.Delegate(this, this._onInputFocus),
            ChangeValue: e.Delegate(this, this._loginChanged),
            ChangedValue: e.Delegate(this, this._loginChanged)
        }),
        this._passInput = new e.InputPassword({
            ParentNode: t,
            Width: 248,
            Label: "Password",
            Key: "cLPFPAss",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: e.LangManager.getStringByKey("cLPFPAss") || "Password",
            InputType: "Password",
            Click: e.Delegate(this, this._onInputFocus),
            ChangeValue: e.Delegate(this, this._onFieldChangeValue),
            Focus: e.Delegate(this, this._onInputFocus)
        }),
        this._serverInput = new e.InputSelect({
            ParentNode: t,
            Class: "Server",
            Width: 248,
            Options: e.AccountManager.getServerNames(),
            LabelPosition: "Top",
            LabelPostfix: "",
            Edit: !1,
            NeedNotEditedStyle: !1,
            MenuClass: "ServerSelect",
            ChangedValue: e.Delegate(this, this._serverChanged),
            DropDown: e.Delegate(this, this._onServerInputDropDown)
        }),
        this._signInBtn = new e.Button({
            ParentNode: t,
            Class: "SignInButton",
            Text: "Sign in",
            Key: "cMobileLogIn",
            Click: e.Delegate(this, this._onSignInClick)
        }),
        this.PressEnter.add(e.Delegate(this, this._onSignInClick)),
        e.MobileDialogSignIn.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogSignIn"),
        e.addCSSClass(this._loginInput.getDomNode().querySelector(".WTInputSelectArrowImg"), "icon-drop_down_shaded_arrow"),
        e.addCSSClass(this._serverInput.getDomNode().querySelector(".WTInputSelectArrowImg"), "icon-drop_down_shaded_arrow"),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this._onDialogTouchMove.bind(this)),
        e.addEvent(this.getDomNode().querySelector(".BackBtnPlace"), "click", this._onGoBack.bind(this)),
        this._onWindowResize(null)
    },
    t.setTitle = function() {
        this._titleNode = this._Content.querySelector(".dialogLabel"),
        this._titleNode.innerHTML = e.LangManager.getStringByKey("cJRNLAuthorization") || "Authorization"
    },
    t.getSignInButton = function() {
        return this._signInBtn
    },
    t._blockButtons = function() {
        this._signInBtn.setEnabled(!1);
        var t = e._dialogMasterObject.getBlockscreen(!0);
        t.style.display = "inline",
        t.classList.add("RestartMode"),
        showPreloaderCircle()
    },
    t._onSignInClick = function(t) {
        e._menuMasterObject.hideAll(),
        this._incorrentInput && (this._incorrentInput.hideValueIsIncorrect(), this._incorrentInput = null);
        var i = this._validateData(),
        s = i.error.sender;
        i.result === !0 ? (this._signIn(), this._blockButtons()) : (s.showValueIsIncorrect(), this._incorrentInput = s, this._signInBtn.setEnabled(!0))
    },
    t.show = function(t, i) {
        this._signInBtn.setEnabled(!0),
        i ? this._fillAccountData(i) : this._getAndFillAccountData(),
        this._checkInputValuesForAddLabels(),
        e.MobileDialogSignIn.base.show.apply(this, arguments),
        e.Auth.resetAttempt(),
        this._onWindowResize(null),
        document.querySelector("html").scrollTop = 0,
        document.body.scrollTop = 0
    },
    t._fillAccountData = function(e) {
        try {
            var t = e.serverName || e.Server.Name,
            i = e.login || e.Login;
            e.Password;
            this._serverInput.setSelectedOptionByValue(t);
            var s = this._loginInput.setSelectedOptionByValue(i);
            s ? this._loginInput.ChangedValue.fire({
                event: null,
                sender: this._loginChanged
            }) : this._getAndFillAccountData()
        } catch(e) {
            console.log("the error in authorization module when updating data")
        }
    },
    t._getAndFillAccountData = function() {
        var t = e.AccountManager,
        i = t.getCurrentAccount(),
        s = i.Login || "",
        n = i.Server;
        if (s && n) {
            var o = t.getServers(),
            a = t.getServerIndexByName(n.Name),
            r = t.getDataByAccountNumber(s, n),
            l = r.accountArray,
            h = r.index;
            a !== -1 ? (this._serverInput.setSelectedOption(a), this._serverInput.ChangedValue.fire({
                event: null,
                sender: this._serverInput
            }), h !== -1 ? this._loginInput.setSelectedOption(h) : 0 !== l.length && this._loginInput.setSelectedOption(0), this._loginInput.ChangedValue.fire({
                event: null,
                sender: this._loginInput
            })) : 0 !== o.length && (this._serverInput.setSelectedOption(0), this._serverInput.ChangedValue.fire({
                event: null,
                sender: this._serverInput
            }))
        }
    },
    t._checkInputValuesForAddLabels = function() {
        this._loginInput.getValue() || this._loginInput.addCSSClass("HiddenLabel"),
        this._passInput.getValue() || this._passInput.addCSSClass("HiddenLabel")
    },
    t._signIn = function(t, i) {
        var s = e.Auth,
        n = e.requester,
        o = e._menuMasterObject,
        a = e._dialogMasterObject,
        r = e.AccountManager;
        if (r.setConnectionInfoByArguments({
            SaveChecked: !0
        }), r.updateAuthAccount({
            login: this._authAccountModel.login,
            password: this._authAccountModel.password,
            serverIndex: this._authAccountModel.serverIndex
        }), s.getCheckAuth()) {
            var l = e.getTerminal();
            l.wantToReconnect = !0,
            l.showChartsAs == e.chartsMode.windows && e.saveChartWindows(l.chartDialogs),
            e.Charts2.saveOpenedCharts(),
            o.hideAll(),
            a.hideAll(!0),
            s.setCheckAuth(!1);
            var h = e.Socket;
            3 === h.getSocketState() && (clearTimeout(s.timeout), delete s.timeout, n.sendTerminalVersion(n.authorization, [r.getCurrentAccount(), !1, !1, !1], !0)),
            h.close(),
            r.clearToken(),
            l.setRestart(!1)
        } else e.activeChart = null,
        o.hideAll(),
        a.hideAll(!0),
        s.resetAttempt(),
        n.sendTerminalVersion(n.authorization, [r.getCurrentAccount(), !1, !1, !1], !0)
    },
    t._validateData = function() {
        var t = this._serverInput.getSelectedOption(),
        i = this._loginInput.getInputNode(),
        s = this._passInput.getInputNode(),
        n = e.LangManager,
        o = null,
        a = !1,
        r = !1,
        l = null,
        h = n.getStringByKey("cWCTAccountListFormError") || "Invalid parameter";
        return i.value ? s.value ? (this._authAccountModel = {},
        this._authAccountModel.serverIndex = t, this._authAccountModel.login = i.value, this._authAccountModel.password = s.value, this._authAccountModel.remember = !0, e.AccountManager.setConnectionInfoByArguments({
            SaveChecked: !0
        }), e.AccountManager.updateAuthAccount({
            login: i.value,
            password: s.value,
            serverIndex: t
        }), a = !0) : (r = !0, l = n.getStringByKey("cLPFPAss") || "Password", o = this._passInput) : (r = !0, l = n.getStringByKey("cLPFLOgin") || "Login", o = this._loginInput),
        r && (h = '"' + l + '" ' + h),
        {
            result: a,
            error: {
                message: {
                    title: n.getStringByKey("cMFInvalidParameter") || "Invalid parameter",
                    description: h
                },
                errorType: 1,
                messageType: 2,
                sender: o
            }
        }
    },
    t._onFieldChangeValue = function(e) {
        e.sender === this._incorrentInput && (this._incorrentInput.hideValueIsIncorrect(), this._incorrentInput = null)
    },
    t.getLastSelectedServerIndex = function() {
        return this._serverInput.previousIndex
    },
    t.updateServers = function(t) {
        e.AccountManager.updateServers(!1),
        this._serverInput.setOptions(e.AccountManager.getServerNames()),
        t !== !1 && ("number" == typeof t ? this._serverInput.setSelectedOption(t) : this._serverInput.setSelectedOptionByValue(t)),
        this._serverChanged()
    },
    t._serverChanged = function(t) { ! e.AccountManager.isConfigServersMode && this._serverInput.isLastSelected() && e.getMobileDialogServersSearch().show(this);
        var i = e.AccountManager.isConfigServersMode === !0,
        s = e.AccountManager;
        if (i !== !1 || this._serverInput.getSelectedOption() !== this._serverInput.lastOptionIndex) {
            var n = s.getAccountNamesByServerName(this._serverInput.getValue()),
            o = null,
            a = null;
            this._loginInput.setOptions(o = n),
            a = o.length,
            a ? this._loginInput.setSelectedOption(0) : (this._loginInput.setValue(""), this._passInput.setValue("")),
            this._loginChanged(),
            this._loginInput.hideValueIsIncorrect(),
            this._passInput.hideValueIsIncorrect(),
            this._signInBtn.setEnabled(!0),
            this._incorrentInput = null
        }
    },
    t._loginChanged = function(t) {
        this._incorrentInput && (this._incorrentInput.hideValueIsIncorrect(), this._incorrentInput = null);
        var i = e.AccountManager,
        s = i.getServerIndexByName(this._serverInput.getValue()),
        n = i.getServers(),
        o = n[s],
        a = this._loginInput.getValue(),
        r = i.getDataByAccountNumber(a, o),
        l = r.index;
        if (l > -1) {
            var h = r.accountArray[l].Password,
            d = CryptoJS.RC4.decrypt(h, e.SecretString);
            this._passInput.setValue(d.toString(CryptoJS.enc.Utf8))
        } else this._passInput.setValue("");
        "" === a && this._loginInput.unselect()
    },
    t._onInputFocus = function(t) {
        var i = t.sender.getDomNode();
        e.removeCSSClass(i, "HiddenLabel")
    },
    t._onServerInputDropDown = function() {
        e.serversMode == e.serversModes.fromLocalStorage && this._serverInput.getOptions().length <= 1 && this._serverChanged()
    },
    t.sendTerminalVersion = function(t, i, s) {
        e.requester.sendTerminalVersion(t || e.requester.authorization, i, s)
    },
    t.setWidth = function() {},
    t.setHeight = function() {},
    t._onWindowResize = function(t) {
        "Safari" === e.Browser.Browser && document.activeElement.blur()
    },
    t._onDialogTouchMove = function(t) {
        WT_Device.iphone() && document.activeElement.blur(),
        e.MobileDialogSignIn.base.onDialogTouchMove.apply(this, arguments)
    },
    t._onGoBack = function(t) {
        e.getTerminal() && e.Auth._checkAuth ? (history.go(1), this.hide(), e.getTerminal().redrawTerminal()) : (this.hide(), e.getMobileDialogStart().show())
    },
    t.dispose = function() {
        e.Resizer.unRegister(this),
        e.LangManager.unRegister(this),
        e.Socket.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        this.removeFromDom(),
        e._signInDialog = null
    },
    t._onChangeLang = function() {
        if (this.otherServer = e.LangManager.getStringByKey("cMobileServerSearch") || "Search servers", e.serversMode == e.serversModes.fromLocalStorage) {
            var t = this._serverInput.getOptions();
            t[t.length - 1] = this.otherServer,
            this._serverInput.setOptions(t),
            this._serverInput.setSelectedOption(0)
        }
        this._loginInput.getDomNode().querySelector(".WTInputField").placeholder = e.LangManager.getStringByKey("cLPFLOgin"),
        this._passInput.getDomNode().querySelector(".WTInputField").placeholder = e.LangManager.getStringByKey("cLPFPAss"),
        this.setTitle(),
        this._incorrentInput && this._incorrentInput.incorrectValueChangeLang()
    },
    t.isShow = function() {
        var e = this._DomNode,
        t = !!e && document.body.contains(e);
        return t
    },
    t = null,
    e.getMobileSignInDialog = function(t) {
        return e._signInDialog || (e._signInDialog = new e.MobileDialogSignIn(t)),
        e._signInDialog
    },
    e.getMobileSignInDialogWithoutInit = function() {
        return e._signInDialog
    },
    e
}),
define("resizer", ["listener"],
function(e) {
    e.Resizer = function(t) {
        return this instanceof e.Resizer ? (t = t || {},
        this._baseLink = e.Resizer.base, e.Resizer.base.constructor.apply(this, arguments), this._binds = {
            onresize: this._onWindowResize.bind(this)
        },
        void(document.body.onresize = this._binds.onresize)) : new e.Resizer(t)
    },
    e.initClass(e.Resizer, e.Listener);
    var t = e.Resizer.prototype;
    return t.setHeight = function() {
        var t = document.getElementsByTagName("html")[0];
        t.style.height = e.getAppHeight() + "px"
    },
    t._onWindowResize = function(t) {
        e.getMobileOpenDemoDialogWithoutInit() || e.getMobileSignInDialogWithoutInit() || e.getMobileChangePassDialogWithoutInit() || e.getMobileLoginPasswordDialogWithoutInit() || e.getMobileDialogStartWithoutInit() || (document.documentElement.scrollTop = 0, document.body.scrollLeft = 0, document.body.scrollTop = 0),
        e._menuMasterObject.hideAll(),
        this.setHeight(),
        this.notifyFollowers("_onWindowResize", t)
    },
    t.notifyFollowers = function(t, i) {
        if (document.activeElement && document.activeElement instanceof HTMLInputElement && WT_Device.iphone()) {
            var s = 0,
            n = this._Followers.length;
            if (e._dialogMasterObject.isAnyDialogOpen()) for (s = 0; s < n; s++) {
                var o = this._Followers[s];
                o[t] && this.delayNotify(o, t, i, 1100)
            } else for (s = 0; s < n; s++) this._Followers[s][t] && this._Followers[s][t].apply(this._Followers[s], [i]);
            this.normalizeFollowersArray()
        } else this._baseLink.notifyFollowers.apply(this, arguments)
    },
    t.delayNotify = function(e, t, i, s) {
        setTimeout(function() {
            e[t].apply(e, [i])
        },
        s)
    },
    t = null,
    e.Resizer = e.Resizer(),
    e
}),
define("mobile/mobileTableQuotes", ["control", "divTable"],
function(e) {
    e.MobileTableQuotes = function(t) {
        this._Symbols = e.SymbolsData.getSelectedSymbols(),
        e.MobileTableQuotes.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.OptionsSettings.register(this),
        e.Resizer.register(this),
        this.setterRowsDelegate = function() {},
        this.setterQuotesDelegate = function() {},
        this.terminal = e.getTerminal()
    },
    e.initClass(e.MobileTableQuotes, e.DivTable);
    var t = e.MobileTableQuotes.prototype,
    i = {
        Direction: 15,
        SymbolName: 32,
        Bid: 26.5,
        Ask: 26.5,
        Name: 34,
        Price: 33,
        Profit: 18
    };
    return t._render = function() {
        this._Template = e._Templates.MobileTableQuotes,
        this._RowTemplates = [e._Templates.MobileTableQuotesRow],
        this._SetterOverride = this.setValue.bind(this),
        e.MobileTableQuotes.base._render.apply(this, arguments),
        e.addEvent(this._DomNode, "touchstart", this._onRowClick.bind(this))
    },
    t._onRowClick = function(t) {
        e._menuMasterObject.hideAll()
    },
    t.setSymbols = function(t, i) {
        if (this.gotSymbols === !0) {
            for (var s = [], n = t.length, o = 0; o < n; ++o) {
                var a = t[o],
                r = e.SymbolsData.getSymbols()[a],
                l = !!e.valueIsEmpty(r) || !r.canUse();
                if (l !== !0) {
                    var h = r.getDigits() || "";
                    s.push({
                        templateIndex: 0,
                        rowId: a,
                        cellValues: {
                            Direction: this.getDirectionImg(r.getBidDirection()),
                            SymbolName: a,
                            Bid: e.numberFormat(r.getBid(), h, ".", " "),
                            Ask: e.numberFormat(r.getAsk(), h, ".", " ")
                        }
                    })
                } else t.splice(o, 1),
                --o,
                --n
            }
            this._Symbols = t,
            this.resetTable(),
            this.updateSetterRowsDelegate(),
            this.updateSetterQuotesDelegate(),
            this.setData(s),
            this.terminal.checkSymbolsData()
        }
    },
    t.getMaxProfit = function(t) {
        for (var i = t._optionParams,
        s = i.length,
        n = 0,
        o = null,
        a = null,
        r = 0; r < s; r++) a = i[r],
        o = e.parseFloat(a.payoutPercentage),
        n = n < o ? o: n;
        return n ? n: null
    },
    t.setOnlyOptions = function() {
        this.renderBinaryOptions()
    },
    t.renderBinaryOptions = function() {
        for (var t = e.OptionsSettings.getSelectedOptionType(), i = e.OptionsSettings.getFavoritesByType(t), s = [], n = 0; n < i.length; n++) {
            var o = i[n],
            a = o.getOptionPeriodCaptions(),
            r = o.lastSelectedValue,
            l = o.getFirstPeriod(),
            h = (o._name, e.SymbolsData.getSymbols()[o._symbolName]),
            d = h ? h._BidDirection: "none";
            r != -1 && (l = r),
            !h || h && !h.canUse() || s.push({
                templateIndex: 0,
                rowId: o.getName(),
                cellValues: {
                    Name: o.getName(),
                    SymbolName: o.getSymbolName(),
                    Price: o.getPrice(),
                    Period: a,
                    Profit: this.getMaxProfit(o) + "%",
                    Direction: this.getDirectionImg(d),
                    Type: o.getType()
                }
            })
        }
        this.addCSSClass("Options"),
        this._RowTemplates = [e._Templates.MobileOnlyOptionsTableQuotesRow],
        this.resetTable(),
        this.updateSetterRowsDelegate(),
        this.updateSetterQuotesDelegate(),
        this.setData(s),
        this.terminal.checkSymbolsData()
    },
    t.changeFavoriteSymbols = function(t) {
        for (var i = e.OptionsSettings.getFavoritesByType(e.OptionsSettings.getSelectedOptionType()), s = 0; s < i.length; s++) t.indexOf(i[s]._symbolName) === -1 && (i[s].isShowOption = !1);
        this.setOnlyOptions()
    },
    t._onGetSymbols = function() {
        this.resetTable(),
        this.gotSymbols = !0,
        e.Browser.IsMobile && this.terminal.useOnlyOptions || this.refreshRows()
    },
    t.refreshRows = function() {
        this.terminal.useOnlyOptions ? this.renderBinaryOptions() : this.setSymbols(e.SymbolsData.getSelectedSymbols())
    },
    t._onGetOptionsSettings = function() {
        var e = this.terminal;
        e.useOnlyOptions && (e.updateOptionTypesMenu(), this.setOnlyOptions())
    },
    t.getDirectionImg = function(e) {
        switch (e) {
        case ! 0 : return '<div class="icon-TableQuotes-arrow-up"></div>';
        case ! 1 : return '<div class="icon-TableQuotes-arrow-down"></div>';
        default:
            return '<div class="icon-TableQuotes-empty_quotes"></div>'
        }
    },
    t.setValue = function(e, t, i) {
        var s = e.getDomNode(),
        n = s.querySelector("." + t);
        n ? (this.calculateFontSize(t, n, i), n.innerHTML = i, t in e._CellValues && (e._CellValues[t] = i)) : console.log("No such field " + t)
    },
    t._onRefreshSymbols = function(t) {
        wt.getTerminal().mainSwiper && wt.getTerminal().mainSwiper.getSelectedPageIndex() == e.MobileTerminalPage.QuotesPage && t && e.SymbolsData.getSelectedSymbols().forEach(function(i) {
            var s = e.SymbolsData.getSymbols()[i];
            this.setQuote(s, t)
        },
        this)
    },
    t._onGetQuote = function(e) {
        e.updateQuoteAllowed && this.setQuote(e, !0)
    },
    t._getPriceRowColor = function(e, t) {
        function i(e) {
            switch (e) {
            case ! 0 : return "#52bf31";
            case ! 1 : return "#e84444";
            default:
                return "#000000"
            }
        }
        return i("bid" === t ? e.getBidDirection() : e.getAskDirection())
    },
    t.setQuote = function(e, t) {
        e && this.setterQuotesDelegate(e, e.getSymbolName(), t)
    },
    t.updateSetterQuotesDelegate = function() {
        this.setterQuotesDelegate = this.terminal.useOnlyOptions ? this.refreshBinaryRowByQuote.bind(this) : this.refreshForexRowByQuote.bind(this)
    },
    t.refreshForexRowByQuote = function(e, t, i) {
        var s = this._Rows[t],
        n = e.needToRefreshGrids || i;
        s && n && this.setterRowsDelegate(s, e, t)
    },
    t.refreshBinaryRowByQuote = function(e, t, i) {
        var s, n = this._Rows;
        for (var o in n) n.hasOwnProperty(o) && (s = n[o], s.getCellValues().SymbolName === t && this.setterRowsDelegate(s, e, t))
    },
    t.setData = function(t) {
        e.MobileTableQuotes.base.setData.apply(this, arguments);
        var i, s = e.SymbolsData.getSymbols(),
        n = this._Rows,
        o = e.getTerminal().useOnlyOptions ?
        function(e, t) {
            return s[e.getCellValues().SymbolName]
        }: function(e, t) {
            return s[t]
        },
        a = this.setterRowsDelegate.bind(this);
        this.afterDataSet = !0;
        for (var r in n) if (n.hasOwnProperty(r)) {
            var l = n[r];
            i = o(l, r),
            i.generalBidDidChange = !0,
            i.generalAskDidChange = !0,
            a(l, i, r),
            i.getBid(i.getBid()),
            i.setAsk(i.getAsk()),
            i.generalBidDidChange = !1,
            i.generalAskDidChange = !1
        }
        this.afterDataSet = !1
    },
    t.updateSetterRowsDelegate = function() {
        this.setterRowsDelegate = this.terminal.useOnlyOptions ? this.refreshBinaryRow.bind(this) : this.refreshForexRow.bind(this)
    },
    t.refreshForexRow = function(t, i, s) {
        var n = t.setValue.bind(t),
        o = e.numberFormat,
        a = this._getPriceRowColor.bind(this),
        r = i.getDigits();
        this.afterDataSet ? (this.refreshFontSize = !0, n("SymbolName", s), n("Bid", o(i.getBid(), r, ".", " "), !0, a(i, "bid")), n("Ask", o(i.getAsk(), r, ".", " "), !0, a(i, "ask"))) : (i.hasBidChanges() && (this.refreshFontSize = i.hasBidDigitCountChanges(), n("Bid", o(i.getBid(), r, ".", " "), !0, a(i, "bid"))), i.hasAskChanges() && (this.refreshFontSize = i.hasAskDigitCountChanges(), n("Ask", o(i.getAsk(), r, ".", " "), !0, a(i, "ask")))),
        this.refreshFontSize = !1,
        i.needToRefreshGrids = !1,
        n("Direction", this.getDirectionImg(i.getBidDirection()))
    },
    t.refreshBinaryRow = function(t, i, s, n) {
        var o = t.setValue.bind(t),
        a = i.getDigits();
        this.afterDataSet ? (this.refreshFontSize = !0, o("Name", s), o("Price", e.numberFormat(i.getBid(), a, ".", " "), !0), o("Profit", t.getCellValues().Profit, !0)) : i.hasBidChanges() && (this.refreshFontSize = i.hasBidDigitCountChanges(), o("Price", e.numberFormat(i.getBid(), a, ".", " "), !0, this._getPriceRowColor(i, "bid"))),
        this.refreshFontSize = !1,
        o("Direction", this.getDirectionImg(i.getBidDirection()))
    },
    t.calculateFontSize = function(t, s, n) {
        if (this.refreshFontSize) {
            var o = e.isPortraitOrientation() ? 0 : parseFloat(this.terminal.getTabWidthAndHeight().width),
            a = window.innerWidth - o,
            r = 18,
            l = a * (i[t] / 100),
            h = l / n.length / .5625;
            if (h >= r) return void(s.style.fontSize = "");
            s.style.fontSize = h + "px"
        }
    },
    t._onRefreshDataBySymbolDigitCount = function() {
        this.refreshRows()
    },
    t._onWindowResize = function(e) {
        this.refreshRows()
    },
    t._onContextMenu = function(t) {
        if (!e.investorAccount) {
            var i, s, n, o, a = this.terminal,
            r = t.sender,
            l = r.getId();
            if (a.useOnlyOptions) {
                var h = r.getCellValues();
                i = !1,
                n = e.getMobileDialogBuyOption(),
                s = n.showByNameAndType.bind(n),
                o = [l, h.Type]
            } else i || (i = "index" === e.SymbolsData.getSymbols()[l].getCalculationTypeName(), i || (n = e.getMobileDialogNewOrder(), s = n.show.bind(n), o = [l]));
            o.unshift(null),
            i || s.apply(n, o)
        }
    },
    t._onChangeSelectedSymbols = function() {
        this.setSymbols(e.SymbolsData.getSelectedSymbols())
    },
    t = null,
    e
}),
define("mobile/mobileStatusPanel", ["control"],
function(e) {
    e.MobileStatusPanel = function(t) {
        this._Template = e._Templates.StatusPanel,
        this._lastUpdateTime = 0,
        this._statusCollapsed = !1,
        this.terminal = e.getTerminal(),
        e.Socket.register(this),
        e.MobileStatusPanel.base.constructor.apply(this, arguments),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileStatusPanel, e.BaseControl);
    var t = e.MobileStatusPanel.prototype;
    return t._render = function() {
        this.touchStartEvent = null,
        e.MobileStatusPanel.base._render.apply(this, arguments);
        var t = this.getDomNode(),
        i = this.statusHeader = t.querySelector(".header"),
        s = this.container = t.querySelector(".container"),
        n = this.statusValues = t.querySelector(".status"),
        o = i.children;
        this.caption = o[0],
        this.buttonNode = o[1],
        this.button = new e.Button({
            ParentNode: this.buttonNode,
            Width: 22,
            Height: 22,
            investorModeDependency: e.investorAccount,
            FontIcon: {
                Content: e.FontIcons.m_tableTradePlus,
                Measurement: "pt",
                Color: "#a79585",
                Size: 17.1
            },
            ImgWidth: "22px",
            ImgHeight: "22px",
            Menu: this.prepareMenu()
        });
        var a = n.querySelector(".equity").children;
        this.equityCaption = a[0],
        this.equityValue = a[1];
        var r = n.querySelector(".profit").children;
        this.profitCaption = r[0],
        this.profitValue = r[1];
        var l = n.querySelector(".balance").children;
        this.balanceCaption = l[0],
        this.balanceValue = l[1];
        var h = n.querySelector(".level").children;
        this.levelCaption = h[0],
        this.levelValue = h[1];
        var d = n.querySelector(".margin").children;
        this.marginCaption = d[0],
        this.marginValue = d[1];
        var c = n.querySelector(".free").children;
        this.freeCaption = c[0],
        this.freeValue = c[1],
        this.drawLabels(),
        this.tuneTextPositions(),
        this.refresh(),
        this.collapseBtnContainer = this._DomNode.querySelector(".collapse-btn");
        var u = this;
        s.addEventListener("touchstart",
        function(t) {
            e._menuMasterObject.hideAll(),
            u.touchStartEvent = t
        }),
        s.addEventListener("touchmove", this.touchstartStopPropagation.bind(this)),
        s.addEventListener("scroll", this.afterScroll.bind(this))
    },
    t.prepareMenu = function() {
        var t = e.Delegate;
        return this.menu = new e.Menu({
            BeforeOpen: t(this, this.menuBeforeOpen),
            Items: [{
                Text: "New market order",
                Id: "New_market_order",
                Key: "cMFNewMarketOrder"
            },
            {
                Text: "New pending order",
                Id: "New_pending_order",
                Key: "cMFNewPendingOrder"
            },
            {
                Text: "Buy option",
                Id: "Buy_option",
                Key: "cMFBuyOption"
            }],
            ItemClick: t(this, this.menuItemClick),
            CheckedType: "NoChecked",
            Class: "tableTradeMenu"
        }),
        this.menu
    },
    t.menuBeforeOpen = function(t) {
        var i = this.terminal,
        s = this.menu,
        n = s.getItemById.bind(s),
        o = i.useOptions,
        a = e.SymbolsData,
        r = 0 !== e.UtipFunctions.getPropertyCount(a.getSymbolsExceptForbidden()) && 0 !== a.getSelectedSymbols().length;
        if (r) {
            var l = !i.useOnlyOptions;
            n("New_market_order").setVisible(l),
            n("New_pending_order").setVisible(l),
            o && (e.OptionsSettings.checkAreOptionsEnabledExceptForbidden() ? n("Buy_option").setEnabled(o) : n("Buy_option").setEnabled(!1)),
            n("Buy_option").setVisible(o)
        } else n("New_market_order").setEnabled(!1),
        n("New_pending_order").setEnabled(!1),
        n("Buy_option").setEnabled(!1)
    },
    t.menuItemClick = function(t) {
        var i = t.Item.getId();
        switch (i) {
        case "New_market_order":
            e.getMobileDialogNewOrder().show();
            break;
        case "New_pending_order":
            e.getMobileDialogPendingOrder().show();
            break;
        case "Buy_option":
            e.getMobileDialogBuyOption().show()
        }
    },
    t.touchstartStopPropagation = function(e) {
        var t = this.touchStartEvent;
        t && (t.stopPropagation(), t = null, delete this.touchStartEvent)
    },
    t.afterScroll = function(e) {
        var t;
        e ? (e.stopPropagation(), t = e.target.scrollTop) : t = this.container.scrollTop,
        t > 1 ? this.statusHeader.style.borderBottom = "1px solid #e5dfcb": this.statusHeader.style.borderBottom = "",
        this.touchstartStopPropagation()
    },
    t.drawLabels = function() {
        var t = e.LangManager,
        i = t.getStringByKey.bind(t);
        this.caption.innerHTML = i("cMFTrade") || "Trade",
        this.profitCaption.innerHTML = i("cWCTTradePositionsFormProfitByPosition") || "Profit",
        this.equityCaption.innerHTML = i("cWCTAccountListFormEquity") || "Equity",
        this.balanceCaption.innerHTML = i("cWCTBalance") || "Balance",
        this.levelCaption.innerHTML = i("cLRLevel") || "Level",
        this.marginCaption.innerHTML = i("cWCTQuoteMargin") || "Margin",
        this.freeCaption.innerHTML = i("cLRFree") || "Free"
    },
    t.tuneTextPositions = function() {
        var t = this.statusHeader.querySelector(".EquityRow");
        if (t) {
            var i = e.LangManager.getLang();
            WT_Device.iphone() ? WT_Device.iphone() && ("gr" === i ? (t.style.verticalAlign = "top", t.style.lineHeight = "20px") : "ar" == i || "fa" == i ? (t.style.verticalAlign = "top", t.style.lineHeight = "10px") : "zh" == i ? (t.style.verticalAlign = "top", t.style.lineHeight = "12px") : (t.style.verticalAlign = "", t.style.lineHeight = "")) : "gr" === i ? (t.style.verticalAlign = "top", t.style.lineHeight = "20px") : "ar" == i || "fa" == i ? (t.style.verticalAlign = "top", t.style.lineHeight = "10px") : (t.style.verticalAlign = "", t.style.lineHeight = "")
        }
    },
    t._onSocketMessage = function(t) {
        function i() {
            var t = e.SymbolsData;
            return 0 !== e.UtipFunctions.getPropertyCount(t.getSymbolsExceptForbidden()) && 0 !== t.getSelectedSymbols().length
        }
        t = t || {};
        var s, n = t.msgType,
        o = "quote" === n;
        switch ((o || "positions" == n || "pendingOrders" === n || "optionsPositions" === n || "allMT4OpenOrders" == n) && this.refresh(!o), n) {
        case "symbols":
            s = i(),
            s || this.menu.hide(),
            this.button.setEnabled(s);
            break;
        case "addedSymbol":
        case "deletedSymbol":
        case "addOptionSettings":
        case "changeOptionSettings":
        case "deleteOptionSettings":
            var a = this.menu,
            r = this.terminal;
            s = i(),
            s ? r.useOnlyOptions && (e.OptionsSettings.checkAreOptionsEnabledExceptForbidden() || a.getIsOpen() && a.hide()) : a.getIsOpen() && a.hide()
        }
    },
    t.refresh = function(t) {
        var i = e.TraderData,
        s = e.SymbolsData,
        n = s.getLastChangedTime();
        if (Math.abs(n - this._lastUpdateTime) > 250 || t === !0) {
            var o = i.getPositionsMargin(),
            a = i.getEquity();
            this.setEquity(a),
            this.setProfit(i.getPositionsProfit()),
            this.setFree(i.getFreeEquity()),
            this.setMargin(o + i.optionsInvestments()),
            this.setLevel(i.getPositions().length ? 100 * a / o: 0),
            this.setBalance(i.getBalance()),
            this._lastUpdateTime = n
        }
    },
    t.setEquity = function(t) {
        if (void 0 !== t) {
            if (this._Equity == t) return;
            this._Equity = t;
            var i = this.equityValue;
            i && (i.innerHTML = e.numberFormat(t, 2, ".", " "))
        }
    },
    t.setProfit = function(t) {
        if (void 0 !== t) {
            if (this._Profit == t) return;
            this._Profit = t;
            var i = this.profitValue;
            i && (e.parseFloat(t) >= 0 ? i.classList.remove("down") : (i.classList.add("down"), i.style.color = "#FF311B"), i.innerHTML = e.numberFormat(t, 2, ".", " "))
        }
    },
    t.setFree = function(t) {
        if (void 0 !== t) {
            if (this._Free == t) return;
            this._Free = t;
            var i = this.freeValue;
            i && (i.innerHTML = e.numberFormat(t, 2, ".", " "))
        }
    },
    t.setMargin = function(t) {
        if (void 0 !== t) {
            if (this._Margin == t) return;
            this._Margin = t;
            var i = this.marginValue;
            i && (i.innerHTML = e.numberFormat(t, 2, ".", " "))
        }
    },
    t.setLevel = function(t) {
        if (void 0 !== t) {
            if (this._Level == t) return;
            this._Level = t;
            var i = this.levelValue;
            i && (i.innerHTML = e.numberFormat(t, 2, ".", " ") + "%")
        }
    },
    t.setBalance = function(t) {
        if (void 0 !== t) {
            if (this._Balance == t) return;
            this._Balance = t;
            var i = this.balanceValue;
            i && (i.innerHTML = e.numberFormat(t, 2, ".", " "))
        }
    },
    t.calculateContainerSize = function() {
        setTimeout(function() {
            var t = 60,
            i = 0,
            s = 0;
            e.isPortraitOrientation() ? s = parseInt(this.terminal.getTabWidthAndHeight().height) : i = parseInt(this.terminal.getTabWidthAndHeight().width),
            this.container.style.height = e.getAppHeight() - (t + s) + "px",
            this.afterScroll()
        }.bind(this), 10)
    },
    t._onChangeLang = function() {
        this.drawLabels(),
        this.tuneTextPositions()
    },
    t = null,
    e
}),
define("mobile/mobileDialogModifyPosition", ["dialog", "mobile/mobileTerminal"],
function(e) {
    e.MobileDialogModifyPosition = function(t) {
        this._Position = null,
        e.MobileDialogModifyPosition.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.SymbolsData.register(this),
        e.Socket.register(this),
        e.Resizer.register(this)
    },
    e.initClass(e.MobileDialogModifyPosition, e.Dialog);
    var t = e.MobileDialogModifyPosition.prototype;
    return t._render = function() {
        this._WithBlock = !0,
        this._Template = e._Templates.MiniDialogModifyPosition,
        this._ImageList = null,
        this._Width = 260,
        this._Height = 340,
        this._Left = (window.innerWidth - 260) / 2,
        this._Top = (window.innerHeight - 340) / 2,
        e.MobileDialogModifyPosition.base._render.apply(this, arguments),
        this.addCSSClass("modifyPosition");
        var t = this._DomNode.querySelector(".WTDialogHeader");
        t.innerHTML = e.LangManager.getStringByKey("cPPCEditPositions") || "Modify position",
        this._symbolNameNode = this._DomNode.querySelector(".SymbolName");
        var i = this._DomNode.querySelector(".TPRow"),
        s = this._DomNode.querySelector(".SLRow");
        this._tpCheck = new e.CheckBox({
            ParentNode: i,
            ChangedValue: e.Delegate(this, this._onTPCheck)
        }),
        this._takeProfitNumEdit = new e.InputNumber({
            ParentNode: i,
            Width: this._Width - 170,
            Id: "TakeProfitNumEdit",
            Label: "TP",
            LabelPosition: "Template",
            MaxValue: 21e3,
            Class: "TPField",
            IsMobile: !0,
            Focus: e.Delegate(this, this._onTPFocus),
            BeforeChange: e.Delegate(this, this.beforeTPChange),
            ChangedValue: e.Delegate(this, this.setCheckBoxes),
            ChangeValue: e.Delegate(this, this.setCheckBoxes)
        }),
        this._slCheck = new e.CheckBox({
            ParentNode: s,
            ChangedValue: e.Delegate(this, this._onSLCheck)
        }),
        this._stopLossNumEdit = new e.InputNumber({
            ParentNode: s,
            Width: this._Width - 170,
            Id: "StopLossNumEdit",
            Label: "SL",
            LabelPosition: "Template",
            MaxValue: 21e3,
            Class: "SLField",
            IsMobile: !0,
            Focus: e.Delegate(this, this._onSLFocus),
            BeforeChange: e.Delegate(this, this.beforeSLChange),
            ChangedValue: e.Delegate(this, this.setCheckBoxes),
            ChangeValue: e.Delegate(this, this.setCheckBoxes)
        });
        var n = e.htmlToDOM(e._Templates.ModifyPositionCurrentQuote);
        this._quoteNodeCaption = n.querySelector(".Caption"),
        this._quoteNodeCaption.innerHTML = e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current Price",
        this._currentPriceNode = n.querySelector(".CurrentPrice"),
        this._statusNode = n.querySelector(".Status"),
        this._statusNode.innerHTML = "",
        this._contentNode.appendChild(n),
        this._ModifyPositionButton = new e.Button({
            ParentNode: this._contentNode,
            Text: "Modify",
            Key: "cWCTTradePositionsFormChange",
            Class: "DButton BigButton",
            Width: this._Width - 150,
            Height: 20,
            Click: e.Delegate(this, this._onModifyPositionButtonClick)
        }),
        this.setHeight(this._Height)
    },
    t.show = function(t) {
        this._quoteNodeCaption.innerHTML = e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current Price",
        this.setEnabled(!0),
        e.MobileDialogModifyPosition.base.show.apply(this, arguments),
        this.tuneIPhoneControls(),
        t && (this._Position = e.TraderData.getPositionById(t), this.setPosition(), 0 == e.parseFloat(this._Position.takeProfit) ? (this._tpCheck.setChecked(!1), this._takeProfitNumEdit.setValue("")) : (this._tpCheck.setChecked(!0), this._takeProfitNumEdit.setValue(this._Position.takeProfit)), 0 == e.parseFloat(this._Position.stopLoss) ? (this._slCheck.setChecked(!1), this._stopLossNumEdit.setValue("")) : (this._slCheck.setChecked(!0), this._stopLossNumEdit.setValue(this._Position.stopLoss))),
        this.validate(),
        this.saveDialogVars(),
        this.setButtonVisibility(!1)
    },
    t._onGetQuote = function(t) {
        t && t._SymbolName == this._Position.symbolName && this._Enabled && (this._currentPriceNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? t._Ask: t._Bid, t._Digits, ".", " "), this.validate())
    },
    t.setPosition = function() {
        if (this._Position) {
            var t = e.SymbolsData.getSymbols()[this._Position.symbolName];
            this._currentSymbol = t,
            "0" != this._Position.takeProfit && this._tpCheck.setChecked(!0),
            "0" != this._Position.stopLoss && this._slCheck.setChecked(!0),
            this._onTPCheck(),
            this._onSLCheck(),
            this._symbolNameNode.innerHTML = this._Position.symbolName,
            this._onGetQuote(this._currentSymbol)
        }
    },
    t._onTPCheck = function() {
        this._tpCheck.getChecked() ? (this._takeProfitNumEdit.setDecimals(this._currentSymbol._Digits), 0 != e.parseFloat(this._Position.takeProfit) && 0 == e.parseFloat(this._takeProfitNumEdit.getValue()) ? this._takeProfitNumEdit.setValue(e.numberFormat(1 * this._Position.takeProfit, this._currentSymbol._Digits, ".", " ")) : (this._takeProfitNumEdit.setValue(0), this.setDefaultTP()), this._takeProfitNumEdit.setStep(this._currentSymbol.getFormattedPrecision()), this._takeProfitNumEdit.setDecimals(this._currentSymbol._Digits)) : this._takeProfitNumEdit.setValue(""),
        this.validate()
    },
    t._onSLCheck = function() {
        this._slCheck.getChecked() ? (this._stopLossNumEdit.setDecimals(this._currentSymbol._Digits), 0 != e.parseFloat(this._Position.stopLoss) && 0 == e.parseFloat(this._stopLossNumEdit.getValue()) ? this._stopLossNumEdit.setValue(e.numberFormat(1 * this._Position.stopLoss, this._currentSymbol._Digits, ".", " ")) : (this._stopLossNumEdit.setValue(0), this.setDefaultSL()), this._stopLossNumEdit.setStep(this._currentSymbol.getFormattedPrecision()), this._stopLossNumEdit.setDecimals(this._currentSymbol._Digits)) : this._stopLossNumEdit.setValue(""),
        this.validate()
    },
    t._onTPFocus = function() {
        this._tpCheck.getChecked() || (this._tpCheck.setChecked(!0), this.setDefaultTP())
    },
    t._onSLFocus = function() {
        this._slCheck.getChecked() || (this._slCheck.setChecked(!0), this.setDefaultSL())
    },
    t.setCheckBoxes = function() {
        this._takeProfitNumEdit.getValue() && this._tpCheck.setChecked(!0),
        this._stopLossNumEdit.getValue() && this._slCheck.setChecked(!0),
        this.validate()
    },
    t.saveDialogVars = function() {
        this.dialogVars = [this._takeProfitNumEdit.getValue().toString(), this._stopLossNumEdit.getValue().toString()]
    },
    t.stateChanged = function() {
        return !! this.dialogVars && (this._takeProfitNumEdit.getValue().toString() != this.dialogVars[0] || this._stopLossNumEdit.getValue().toString() != this.dialogVars[1])
    },
    t.validate = function() {
        var e, t = !this.stopLevelCheck();
        this.stateChanged() && this.stopLevelCheck() ? (this.setButtonVisibility(!0), e = !1) : (e = t, this.setButtonVisibility(!1)),
        this.getDomNode().classList[e === !0 ? "add": "remove"]("Disabled")
    },
    t.stopLevelCheck = function() {
        var t = parseInt(e.SymbolsData.getSymbols()[this._Position.symbolName].getStopLevel()),
        i = this.calcPipsByPrice(this._takeProfitNumEdit.getValue(), !0),
        s = this.calcPipsByPrice(this._stopLossNumEdit.getValue(), !1);
        return (i > t || !this._tpCheck.getChecked()) && (s > t || !this._slCheck.getChecked())
    },
    t.calcPipsByPrice = function(t, i) {
        var s = 0,
        n = this._Position.positionType == e._TraderData.positionType.buy ? 1 : -1,
        o = e.parseFloat(this._currentPriceNode.innerHTML);
        return t = e.parseFloat(t),
        s = parseInt(Math.round(Math.abs(t - o) * Math.pow(10, this._currentSymbol._Digits))),
        s *= t > o ? i ? n: -n: i ? -n: n
    },
    t._onModifyPositionButtonClick = function() {
        var t = e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent!!!";
        this._currentPriceNode.innerHTML = t,
        this.showQueryStatus(t),
        this.setEnabled(!1);
        var i = {
            traderID: e.TraderData._TraderInfo.id,
            positionID: this._Position.id,
            takeProfit: this._takeProfitNumEdit.getValue() || 0,
            stopLoss: this._stopLossNumEdit.getValue() || 0
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.changePosition(i);
            break;
        case e.PlatformTypes.ptMT:
            e.requester.changeMTPosition(i)
        }
    },
    t.setButtonVisibility = function(e) {
        this._ModifyPositionButton.setEnabled(e)
    },
    t._onClosed = function() {
        this.removeFromDom(),
        delete this
    },
    t._onWindowResize = function(e) {
        this._Left = (window.innerWidth - 260) / 2,
        this._Top = (window.innerHeight - 340) / 2,
        this._DomNode.style.left = this._Left + "px",
        this._DomNode.style.top = this._Top + "px"
    },
    t.tuneIPhoneControls = function() { (e.Browser.IsIPhone || e.Browser.IsIPad) && (this._takeProfitNumEdit._fieldNode.style.height = "18px", this._stopLossNumEdit._fieldNode.style.height = "18px")
    },
    t._onSocketMessage = function(e) {
        if (e) {
            var t = e.msgType;
            switch (t) {
            case "positions":
            case "allMT4OpenOrders":
                this.enabled() || this.hide();
                break;
            case "changePosition":
            case "changeMT4Position":
                e.msgResult.toUpperCase() != "Success".toUpperCase() && (this.setEnabled(!0), this.showQueryStatus(""))
            }
        }
    },
    t.showQueryStatus = function(t) {
        t ? (this._quoteNodeCaption.innerHTML = t, this._currentPriceNode.innerHTML = "") : (this._quoteNodeCaption.innerHTML = (e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price") + ":", this._currentSymbol && this._currentSymbol._SymbolName == this._Position.symbolName && this._Enabled && (this._currentPriceNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? this._currentSymbol._Ask: this._currentSymbol._Bid, this._currentSymbol._Digits, ".", " ")))
    },
    t.setHeight = function(e) {
        this._Height = Math.max(e, 0),
        this._DomNode && (this._DomNode.style.height = this._Height + "px"),
        this._contentNode && (this._contentNode.style.height = "")
    },
    t = null,
    e.getMobileDialogModifyPosition = function() {
        return e._dialogModifyPosition || (e._dialogModifyPosition = new e.MobileDialogModifyPosition),
        e._dialogModifyPosition
    },
    e
}),
define("mobile/mobileDialogClosePartially", ["dialog", "mobile/mobileTerminal"],
function(e) {
    e.MobileDialogClosePartially = function(t) {
        this._Position = null,
        e.MobileDialogClosePartially.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.SymbolsData.register(this),
        e.Socket.register(this),
        e.Resizer.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileDialogClosePartially, e.Dialog);
    var t = e.MobileDialogClosePartially.prototype;
    return t._render = function() {
        this._WithBlock = !0,
        this._Template = e._Templates.MiniDialogClosePartially,
        this._ImageList = null,
        this._Width = 260,
        this._Height = 290,
        this._Left = (window.innerWidth - 260) / 2,
        this._Top = (window.innerHeight - 290) / 2,
        e.MobileDialogClosePartially.base._render.apply(this, arguments),
        this.addCSSClass("modifyPosition"),
        this.setTitle(),
        this._symbolNameNode = this._DomNode.querySelector(".SymbolName"),
        this._volumeCombo = new e.InputSelectNumber({
            ParentNode: this._contentNode,
            Template: e._Templates.MobileInputSelect,
            Options: e.UtipFunctions.getVolumesList(e.SymbolsData.getSymbols()[this._Position.symbolName]),
            Width: this._Width - 40,
            Label: "Volume:",
            Key: "cWCTTradePositionsFormVolume",
            Edit: !0,
            LabelPosition: "Inside",
            Class: "InnerLabel",
            MenuClass: "VolumeSelect",
            DropDown: e.Delegate(this, this._onVolumeDropDown),
            ChangeValue: e.Delegate(this, this._onVolumeSelectChange),
            OnlyNumbers: !0,
            Decimals: e.TraderData.getDecimalCount()
        });
        var t = e.htmlToDOM(e._Templates.ModifyPositionCurrentQuote);
        this._quoteNodeCaption = t.querySelector(".Caption"),
        this._quoteNodeCaption.innerHTML = e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current Price",
        this._currentPriceNode = t.querySelector(".CurrentPrice"),
        this._statusNode = t.querySelector(".Status"),
        this._statusNode.innerHTML = "",
        this._contentNode.appendChild(t),
        this._ClosePositionButton = new e.Button({
            ParentNode: this._contentNode,
            Text: "Close",
            Key: "cWCTTradePositionsFormClose",
            Class: "DButton BigButton",
            Width: this._Width - 150,
            Height: 20,
            Click: e.Delegate(this, this._onClosePositionButtonClick)
        }),
        this.setHeight(this._Height),
        this._volumeCombo.DropDown.fire(this._volumeCombo),
        this._volumeCombo.setSelectedOption(0)
    },
    t._onChangeLang = function() {
        this.setTitle()
    },
    t.setTitle = function() {
        var t = this._DomNode.querySelector(".WTDialogHeader");
        t.innerHTML = e.LangManager.getStringByKey("cClPFCaption") || "Close position"
    },
    t.show = function(t) {
        this._quoteNodeCaption.innerHTML = e.LangManager.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current Price",
        this.setEnabled(!0),
        e.MobileDialogModifyPosition.base.show.apply(this, arguments),
        t && (this._Position = e.TraderData.getPositionById(t), this.setPosition())
    },
    t.setPosition = function() {
        if (this._Position) {
            var t = e.SymbolsData.getSymbols()[this._Position.symbolName];
            this._currentSymbol = t,
            this._symbolNameNode.innerHTML = this._Position.symbolName,
            this._onGetQuote(this._currentSymbol)
        }
    },
    t._onGetQuote = function(t) {
        if (t && t._SymbolName == this._Position.symbolName && this._Enabled) {
            this._currentPriceNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? t._Ask: t._Bid, t._Digits, ".", " ");
            var i = this._Position,
            s = "Sell" == i.positionType,
            n = s ? t._Ask: t._Bid,
            o = t.getPrecision(),
            a = e.parseFloat(t.getStopLevel()) / o,
            r = parseFloat(i.takeProfit),
            l = parseFloat(i.stopLoss);
            null != e.UtipFunctions.canClosePosition(r, l, n, a) ? this._contentNode.classList.add("Disabled") : this._contentNode.classList.remove("Disabled")
        }
    },
    t._onVolumeDropDown = function() {
        var t = e.SymbolsData.getSymbols()[this._Position.symbolName],
        i = e.UtipFunctions.getVolumesList(t, this._Position.volume);
        this._volumeCombo.setOptions(i)
    },
    t._onClosePositionButtonClick = function() {
        var t = e.parseFloat(this._volumeCombo.getValue()),
        i = e.UtipFunctions.isVolumeValid(t, e.TraderData.getPositionStep());
        if (!i || t > e.parseFloat(this._Position.volume)) return void e.showErrorDialog(e.LangManager.getStringByKey("cSMSInvalidVolume") || "Invalid volume");
        var s = e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent!!!!";
        this.showQueryStatus(s),
        this.setEnabled(!1);
        var n = e.SymbolsData.getSymbols()[this._Position.symbolName],
        o = {
            ID: this._Position.id,
            symbolName: this._Position.symbolName,
            traderID: e.TraderData._TraderInfo.id,
            operationType: e.requestPositionType[this._Position.positionType],
            volume: t,
            price: "Sell" == this._Position.positionType ? n._Ask: n._Bid,
            takeProfit: this._Position.takeProfit,
            stopLoss: this._Position.stopLoss
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.closePosition(o);
            break;
        case e.PlatformTypes.ptMT:
            o.operationType = e.TraderData.convertOrderTypeToMTFormat(o.operationType),
            e.requester.closeMTPosition(o)
        }
    },
    t._onVolumeSelectChange = function() {},
    t._onSocketMessage = function(e) {
        if (e) {
            var t = e.msgType;
            switch (t) {
            case "positions":
            case "allMT4OpenOrders":
                this.enabled() || this.hide();
                break;
            case "closePosition":
            case "closeMT4Position":
                e.msgResult.toUpperCase() != "Success".toUpperCase() && (this.setEnabled(!0), this.showQueryStatus(""))
            }
        }
    },
    t._onClosed = function() {
        this.removeFromDom(),
        delete this
    },
    t.showQueryStatus = function(t) {
        if (t) this._quoteNodeCaption.innerHTML = t,
        this._currentPriceNode.innerHTML = "";
        else {
            var i = e.SymbolsData.getSymbols()[this._Position.symbolName];
            i && i._SymbolName == this._Position.symbolName && this._Enabled && (this._currentPriceNode.innerHTML = e.numberFormat("Sell" == this._Position.positionType ? i._Ask: i._Bid, i._Digits, ".", " "))
        }
    },
    t._onWindowResize = function(e) {
        this._Left = (window.innerWidth - 260) / 2,
        this._Top = (window.innerHeight - 194) / 2,
        this._DomNode.style.left = this._Left + "px",
        this._DomNode.style.top = this._Top + "px"
    },
    t.setHeight = function(e) {
        this._Height = Math.max(e, 0),
        this._DomNode && (this._DomNode.style.height = this._Height + "px"),
        this._contentNode && (this._contentNode.style.height = "")
    },
    t = null,
    e.getMobileDialogClosePartially = function(t) {
        return e._dialogClosePosition || (e._dialogClosePosition = new e.MobileDialogClosePartially(t)),
        e._dialogClosePosition
    },
    e
}),
define("mobile/mobileDialogOrderMenu", ["dialog", "mobile/mobileTerminal", "mobile/mobileDialogModifyPosition", "mobile/mobileDialogClosePartially"],
function(e) {
    e.MobileDialogOrderMenu = function(t) {
        this._IsPendingOrder = !1,
        this._IsOption = !1,
        this._RowId = null,
        e.MobileDialogOrderMenu.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.Resizer.register(this),
        e.SymbolsData.register(this)
    },
    e.initClass(e.MobileDialogOrderMenu, e.Dialog);
    var t = e.MobileDialogOrderMenu.prototype;
    return t._render = function() {
        this._WithBlock = !0,
        this._Template = e._Templates.MiniDialog,
        this._ImageList = null,
        this._Width = 260,
        this._Height = 200,
        this._Left = (window.innerWidth - this._Width) / 2,
        this._Top = (window.innerHeight - this._Height) / 2,
        e.MobileDialogOrderMenu.base._render.apply(this, arguments),
        this._Height = 158,
        this._IsOption ? (this._Height = ["en", "fr", "pl", "ru"].indexOf(e.UserSettings.Lang) != -1 ? 212 : 222, this.attachOptionControls()) : this._IsPendingOrder ? this.attachPendingOrderControls() : (this._Height = 200, this.attachMarketOrderControls()),
        this.setHeight(this._Height),
        this.updateControls(null),
        e.addCSSClass(this.getDomNode(), "orderMenu")
    },
    t.updateControls = function(t) {
        var i, s = e.getTerminal(),
        n = this._IsOption,
        o = this._IsPendingOrder;
        if (i = n ? e.TraderData.getOptionPositionById(this._RowId.split("_")[0]) : o ? e.TraderData.getPendingOrderByID(this._RowId.split("_")[0]) : e.TraderData.getPositionById(this._RowId.split("_")[0]), t = t || e.SymbolsData.getSymbols()[i.symbolName], !e.valueIsEmpty(i) && t === e.SymbolsData.getSymbols()[i.symbolName]) {
            var a = "Sell" == i.positionType || i.pendingOrderType == e.requestPendingOrderType.BuyLimit || i.pendingOrderType == e.requestPendingOrderType.BuyStop,
            r = a ? t._Ask: t._Bid,
            l = t.getPrecision(),
            h = e.parseFloat(t.getStopLevel()) / l,
            d = !0;
            if (n) this._earlyCloseBtn.setEnabled( !! e.UtipFunctions.canCloseOptionPosition(i));
            else if (o) d = !!e.UtipFunctions.canClosePendingOrder(i, r, h),
            this._deletePendingOrderBtn.setEnabled(d),
            this._modifyPendingOrderBtn.setEnabled(d);
            else {
                var c = parseFloat(i.takeProfit),
                u = parseFloat(i.stopLoss);
                d = !e.UtipFunctions.canClosePosition(c, u, r, h),
                this._closeCompletelyBtn.setEnabled(d),
                this._closePartiallyBtn.setEnabled(d),
                this._modifyMarketOrderBtn.setEnabled(d)
            }
            var g = s.verificationTradeAccess(i.symbolName);
            if (g !== e.VERIFICATION_RESULTS.NO_ERRORS) if (n);
            else if (o) {
                var p = this._createNewPendingOrderBtn;
                p && p.setEnabled(!1)
            } else {
                var m = this._createNewMarketOrderBtn;
                m && m.setEnabled(!1)
            }
        }
    },
    t._onGetQuote = function(e) {
        this.updateControls(e)
    },
    t.attachMarketOrderControls = function() {
        this._closeCompletelyBtn = new e.Button({
            Text: "Close position",
            Key: "cClPFClose",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onCloseCompletelyBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        }),
        this._closePartiallyBtn = new e.Button({
            Text: "Close partially",
            Key: "cMobileClosePartially",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onClosePartiallyBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        }),
        this._modifyMarketOrderBtn = new e.Button({
            Text: "Modify position",
            Key: "cPPCEditPositions",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onModifyMarketOrderBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        }),
        e.getTerminal().useOnlyOptions ? this._createNewMarketOrderBtn = null: this._createNewMarketOrderBtn = new e.Button({
            Text: "New market order",
            Key: "cMFNewMarketOrder",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onCreateNewMarketOrderBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        })
    },
    t.attachPendingOrderControls = function() {
        this._deletePendingOrderBtn = new e.Button({
            Text: "Delete order",
            Key: "cPPCDelOrder",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onDeletePendingBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        }),
        this._modifyPendingOrderBtn = new e.Button({
            Text: "Modify order",
            Key: "cPPCEditOrder",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onModifyPendingOrderBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        }),
        e.getTerminal().useOnlyOptions ? this._createNewPendingOrderBtn = null: this._createNewPendingOrderBtn = new e.Button({
            Text: "New pending order",
            Key: "cMFNewPendingOrder",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onCreateNewPendingOrderBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        })
    },
    t.attachOptionControls = function() {
        e.getTerminal().useOnlyOptions || (this._createNewMarketOrderBtn = new e.Button({
            Text: "New market order",
            Key: "cMFNewMarketOrder",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onCreateNewMarketOrderBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        }), this._createNewPendingOrderBtn = new e.Button({
            Text: "New pending order",
            Key: "cMFNewPendingOrder",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onCreateNewPendingOrderBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        })),
        e.getTerminal().useOptions === !0 && (this._createNewOptionOrder = new e.Button({
            Text: "Buy option",
            Key: "cMFBuyOption",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onCreateNewOptionOrderBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        })),
        this._earlyCloseBtn = new e.Button({
            Text: "Close Early",
            Key: "cMobileCloseEarly",
            ParentNode: this._contentNode,
            Click: e.Delegate(this, this._onCreateEarlyCloseBtnClick),
            TouchStart: e.Delegate(this, e.getTerminal()._onButtonTouchStart)
        });
        var t = e.TraderData.getOptionPositionByKey(this._RowId);
        e.UtipFunctions.canCloseOptionPosition(t) || this._earlyCloseBtn.setEnabled(!1)
    },
    t.show = function(t) {
        e.MobileDialogOrderMenu.base.show.apply(this, t);
        var i;
        i = this._IsOption ? this._earlyCloseBtn: this._IsPendingOrder ? this._createNewPendingOrderBtn || this._modifyPendingOrderBtn: this._createNewMarketOrderBtn || this._modifyMarketOrderBtn,
        i._DomNode.offsetTop + i._DomNode.offsetHeight !== this._Height - 14 && (this._Height = i._DomNode.offsetTop + i._DomNode.offsetHeight + 14, this._Top = (window.innerHeight - this._Height) / 2, this._DomNode.style.top = this._Top + "px", this._DomNode.style.height = this._Height + "px")
    },
    t._onClosed = function() {
        this.removeFromDom(),
        e.SymbolsData.unRegister(this),
        delete this
    },
    t._onCloseCompletelyBtnClick = function() {
        this.hide();
        var t = new e.getDialogConfirm({
            ImageList: null,
            Left: (window.innerWidth - 260) / 2,
            Top: (window.innerHeight - 194) / 2,
            Width: 260,
            Height: 224,
            Title: "",
            Class: "Mini Confirm",
            Confirm: e.Delegate(this, this._onConfirmDeletePosition),
            Closed: e.Delegate(e.DialogConfirm,
            function(t) {
                e._dialogConfirm.dispose()
            })
        });
        t.setTitle(e.LangManager.getStringByKey("cClPFCaption"));
        var i = e.LangManager.getStringByKey("cClPFCaption") || "Close position";
        t.show(i + " #" + this._RowId.split("_")[0] + "?", this._RowId)
    },
    t._onClosePartiallyBtnClick = function() {
        this.hide();
        var t = e.TraderData.getPositionById(this._RowId.split("_")[0]);
        e.getMobileDialogClosePartially({
            Position: t
        }).show(this._RowId.split("_")[0])
    },
    t._onModifyMarketOrderBtnClick = function() {
        this.hide();
        var t = e.TraderData.getPositionById(this._RowId.split("_")[0]);
        e.getMobileDialogModifyPosition({
            Position: t
        }).show(this._RowId.split("_")[0])
    },
    t._onCreateNewMarketOrderBtnClick = function() {
        this.hide(),
        e.getTerminal().onMarketOrderBtnClick()
    },
    t._onDeletePendingBtnClick = function() {
        this.hide();
        var t = new e.getDialogConfirm({
            ImageList: null,
            Left: (window.innerWidth - 260) / 2,
            Top: (window.innerHeight - 194) / 2,
            Width: 260,
            Height: 224,
            Class: "Mini Confirm",
            Confirm: e.Delegate(this, this._onConfirmDeletePendingOrder),
            Closed: e.Delegate(e.DialogConfirm,
            function(t) {
                e._dialogConfirm.dispose()
            })
        });
        t.setTitle(e.LangManager.getStringByKey("cPPCDelOrder"));
        var i = e.LangManager.getStringByKey("cPPCDelOrder") || "Delete order";
        t.show(i + " #" + this._RowId.split("_")[0] + "?", this._RowId)
    },
    t._onModifyPendingOrderBtnClick = function() {
        this.hide();
        var t = e.TraderData.getPendingOrderByID(this._RowId.split("_")[0]);
        e.getMobileDialogModifyPendingOrder().show(t)
    },
    t._onCreateNewPendingOrderBtnClick = function() {
        this.hide(),
        e.getTerminal().onPendingOrderBtnClick()
    },
    t._onCreateNewOptionOrderBtnClick = function() {
        this.hide(),
        e.getTerminal().onBuyOptionBtnClick()
    },
    t._onCreateEarlyCloseBtnClick = function() {
        this.hide();
        var t = new e.getDialogConfirm({
            ImageList: null,
            Left: (window.innerWidth - 260) / 2,
            Top: (window.innerHeight - 194) / 2,
            Width: 270,
            Height: 224,
            Class: "Mini Confirm",
            Confirm: e.Delegate(this, this._onConfirmEarlyCloseOption),
            Closed: e.Delegate(e.DialogConfirm,
            function(t) {
                e._dialogConfirm.dispose()
            })
        }),
        i = e.TraderData.getOptionPositionByKey(this._RowId),
        s = parseInt(i.investmentSum) / 100 * parseInt(i.earlyClosing),
        n = e.LangManager.getStringByKey("cClPFClose") || "Close position",
        o = (e.LangManager.getStringByKey("cPPCCloseOptionPositionFee") || "The fee per transaction") + " " + e.numberFormat(s, 2, ".");
        t.show(n + " #" + this._RowId.split("_")[0] + "?\n" + o, this._RowId)
    },
    t._onConfirmEarlyCloseOption = function(t) {
        var i = t.data.split("_")[0],
        s = {
            ID: i,
            traderID: e.TraderData._TraderInfo.id
        };
        e.requester.closeOptionPosition(s)
    },
    t._onConfirmDeletePendingOrder = function() {
        var t = {
            ID: this._RowId.split("_")[0],
            traderID: e.TraderData._TraderInfo.id
        },
        i = e.TraderData.getPendingOrderByID(this._RowId.split("_")[0]);
        if (!i || i.isExecuting || this._orderOnDelete) this._orderOnDelete && e.showErrorDialog(e.LangManager.getStringByKey("cSMTQueryProcessing") || "Order is already in progress");
        else switch (i.isExecuting = !0, e.getTerminal()._TableTrade._orderOnDelete = i, e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.deletePendingOrder(t);
            break;
        case e.PlatformTypes.ptMT:
            switch (parseInt(i.pendingOrderType)) {
            case e.requestPendingOrderType.BuyLimit:
            case e.requestPendingOrderType.BuyStop:
                t.closePrice = e.SymbolsData.getSymbols()[i.symbolName]._Ask;
                break;
            case e.requestPendingOrderType.SellLimit:
            case e.requestPendingOrderType.SellStop:
                t.closePrice = e.SymbolsData.getSymbols()[i.symbolName]._Bid
            }
            e.requester.deleteMTPendingOrder(t)
        }
    },
    t._onConfirmDeletePosition = function() {
        var t = e.TraderData.getPositionById(this._RowId.split("_")[0]);
        this.setEnabled(!1);
        var i = e.SymbolsData.getSymbols()[t.symbolName],
        s = {
            ID: t.id,
            symbolName: t.symbolName,
            traderID: e.TraderData._TraderInfo.id,
            operationType: e.requestPositionType[t.positionType],
            volume: t.volume,
            price: "Sell" == t.positionType ? i._Ask: i._Bid,
            takeProfit: t.takeProfit,
            stopLoss: t.stopLoss
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.closePosition(s);
            break;
        case e.PlatformTypes.ptMT:
            s.operationType = e.TraderData.convertOrderTypeToMTFormat(s.operationType),
            e.requester.closeMTPosition(s)
        }
    },
    t._onWindowResize = function(e) {
        this._Left = (window.innerWidth - this._Width) / 2,
        this._Top = (window.innerHeight - this._Height) / 2,
        this._DomNode.style.left = this._Left + "px",
        this._DomNode.style.top = this._Top + "px"
    },
    e.getMobileDialogOrderMenu = function(t) {
        return e._mobileDialogOrderMenu || (e._mobileDialogOrderMenu = new e.MobileDialogOrderMenu(t)),
        e._mobileDialogOrderMenu
    },
    t = null,
    e
}),
define("mobile/mobileStopOrderControl", ["base", "control"],
function(e) {
    e.MobileStopOrderControl = function(t) {
        void 0 !== t.Width ? this.totalWidth = t.Width: this.totalWidth = window.innerWidth,
        void 0 !== t.inputMarginLeft ? this.inputMarginLeft = t.inputMarginLeft: this.inputMarginLeft = "",
        this._FontSize = t.FontSize,
        this.type = null,
        this._Height = null,
        this._Value = 0,
        this._MaxValue = 1e3,
        this._MinValue = 0,
        void 0 !== t.Step ? this._Step = t.Step: this._Step = 1,
        this._Decimals = e.UtipFunctions.getStepDecimals(this._Step),
        void 0 !== t.InputLabel ? this.inputLabel = t.InputLabel: this.inputLabel = "",
        void 0 !== t.Label ? this.label = t.Label: this.label = "",
        this._TumblerOn = null,
        this._defineEvents(["BeforeChange", "TumblerChanged"]),
        e.MobileStopOrderControl.base.constructor.apply(this, [t]),
        this.KeyDown.add(e.Delegate(this, this.keyDown))
    },
    e.STOP_ORDER_TYPES = {
        TAKE_PROFIT: 0,
        STOP_LOSS: 1
    },
    e.initClass(e.MobileStopOrderControl, e.Input);
    var t = e.MobileStopOrderControl.prototype,
    i = e._Templates,
    s = e.STOP_ORDER_TYPES,
    n = {
        TAKE_PROFIT: "take-profit",
        STOP_LOSS: "stop-loss"
    };
    return t._render = function() {
        this._Template = i.MobileStopOrderControl,
        e.MobileStopOrderControl.base._render.apply(this, arguments);
        var t = this.type,
        o = this.node = this.getDomNode(),
        a = this.tumblerBlockNode = o.querySelector(".tumbler-block"),
        r = this.lineNode = a.querySelector(".line"),
        l = this.tumblerNode = a.querySelector(".tumbler"),
        h = o.querySelector(".caption"),
        d = o.querySelector(".down"),
        c = o.querySelector(".up"),
        u = this.inputControlNode = o.querySelector(".input-control"),
        g = this._fieldNode = u.querySelector(".WTInputField"),
        p = this.inputIncrementerWrapper = o.querySelector(".inputIncrementer");
        if ("" !== this.inputLabel) {
            var m = document.createElement("label");
            m.innerHTML = this.inputLabel,
            p.insertBefore(m, p.firstChild)
        }
        this.setWidth(this.totalWidth),
        void 0 !== this._FontSize && (g.style.fontSize = this._FontSize + "px");
        var _ = e.LangManager.getStringByKey(this._Key),
        y = "";
        switch (t) {
        case s.TAKE_PROFIT:
            a.classList.add(n.TAKE_PROFIT),
            y = "TP";
            break;
        case s.STOP_LOSS:
            a.classList.add(n.STOP_LOSS),
            y = "SL"
        }
        _ ? this.caption = _: "" != this.label ? this.caption = this.label: this.caption = y,
        h.innerHTML = this.caption,
        r.addEventListener("touchend", this.tumblerTouchend.bind(this)),
        l.addEventListener("touchend", this.tumblerTouchend.bind(this)),
        d.addEventListener("touchstart", this.downTouchstart.bind(this)),
        d.addEventListener("touchcancel", this.downTouchend.bind(this)),
        d.addEventListener("touchend", this.downTouchend.bind(this)),
        c.addEventListener("touchstart", this.upTouchstart.bind(this)),
        c.addEventListener("touchcancel", this.upTouchend.bind(this)),
        c.addEventListener("touchend", this.upTouchend.bind(this)),
        o.addEventListener("touchmove", this.nodeTouchmove.bind(this), !0),
        o.addEventListener("touchend", this.nodeTouchend.bind(this), !0),
        g.min = this._MinValue,
        g.max = this._MaxValue,
        this.refresh(!this._TumblerOn)
    },
    t.nodeTouchmove = function(e) {
        this.moved = !0
    },
    t.nodeTouchend = function(e) {
        this.moved && (this.upTouchend(e), this.downTouchend(e), e.stopPropagation()),
        this.moved = !1
    },
    t.downTouchstart = function(e) {
        var t = this._fieldNode;
        t.blur(),
        clearInterval(this.downInterval),
        this.BeforeChange.fire({
            sender: this,
            direction: "down"
        }),
        this.down(),
        this.downInterval = setInterval(this.down.bind(this), 100),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.downTouchend = function(e) {
        clearInterval(this.downInterval),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.upTouchstart = function(e) {
        var t = this._fieldNode;
        t.blur(),
        clearInterval(this.upInterval),
        this.BeforeChange.fire({
            sender: this,
            direction: "up"
        }),
        this.up(),
        this.upInterval = setInterval(this.up.bind(this), 100),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.upTouchend = function(e) {
        clearInterval(this.upInterval),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.up = function() {
        var e = this.validNumber((this.getValue() || 0) + this._Step);
        this._Value !== e && this.setValue(e),
        this.ChangedValue.fire({
            event: event,
            sender: this,
            changeDirection: "up"
        })
    },
    t.down = function() {
        var e = this.validNumber((this.getValue() || 0) - this._Step);
        this._Value !== e && this.setValue(e),
        this.ChangedValue.fire({
            event: event,
            sender: this,
            changeDirection: "down"
        })
    },
    t.refresh = function(t) {
        t = e.valueIsEmpty(t) ? 0 : e.parseFloat(t),
        this._TumblerOn = !t,
        this.update({
            tumblerChanged: this._TumblerOn
        })
    },
    t.tumblerTouchend = function(e) {
        this.update(e)
    },
    t.update = function(e) {
        var t = this._TumblerOn;
        this._TumblerOn ? this.off(e) : this.on(e),
        this._TumblerOn = e.tumblerChanged = !t,
        this.TumblerChanged.fire({
            event: e,
            sender: this
        })
    },
    t.on = function(e) {
        this.node.classList.add("on")
    },
    t.off = function(e) {
        this.node.classList.remove("on")
    },
    t.shown = function() {
        return this._TumblerOn
    },
    t.block = function(e) {
        e = !!e,
        e === !0 ? this.inputControlNode.classList.add("disabled") : this.inputControlNode.classList.remove("disabled")
    },
    t.validNumber = function(t) {
        if ("" === t) return "";
        var i = void 0 == t ? this.getValue() : t,
        s = this._MinValue,
        n = this._MaxValue;
        return i = "string" == typeof i ? e.parseFloat(i) : i,
        i < s ? i = s: i > n && (i = n),
        i
    },
    t.setValue = function(t) {
        var i = this._Value = this.validNumber(t);
        this._fieldNode.value = "" === i || isNaN(i) ? "": e.numberFormat(i, this._Decimals, ".", "")
    },
    t.getValue = function() {
        return e.parseFloat(this._fieldNode.value) || 0
    },
    t.setStep = function(e) {
        this._Step = e
    },
    t.getStep = function() {
        return this._Step
    },
    t.setMinValue = function(e) {
        this._fieldNode.min = this._MinValue = e
    },
    t.setMaxValue = function(e) {
        this._fieldNode.max = this._MaxValue = e
    },
    t.setDecimals = function(t) {
        this._Decimals = t,
        this.setValue(e.numberFormat(this._Value, t, ".", ""))
    },
    t.changedValue = function(e) {
        var t = this.validNumber();
        this._Value !== t && (this.setValue(t), this.ChangedValue.fire({
            event: event,
            sender: this
        }))
    },
    t._onTouchStart = function(t) {
        e.InputSelect.base._onTouchStart.apply(this, arguments),
        this._fieldNode.startTouchX = t.targetTouches[0].screenX,
        this._fieldNode.startTouchY = t.targetTouches[0].screenY
    },
    t.setWidth = function(e) {
        if (void 0 !== this.inputIncrementerWrapper && void 0 !== this._fieldNode) {
            var t = .62 * e - this.inputMarginLeft,
            i = Math.floor(t - 52);
            this.inputIncrementerWrapper.style.width = t + "px",
            this.inputIncrementerWrapper.style.marginLeft = this.inputMarginLeft + "px",
            this._fieldNode.style.width = i + "px",
            this._Width = i + 30
        }
    },
    t._onChangeLang = function() {
        this.setCaption(e.LangManager.getStringByKey(this._Key) || (this.type === s.TAKE_PROFIT ? "TP": "SL"))
    },
    t.setCaption = function(e) {
        var t = this.getDomNode().querySelector(".caption");
        t && (t.innerHTML = e)
    },
    t.keyDown = function(t) {
        var i = this._fieldNode,
        s = t.event,
        n = s.charCode,
        o = s.keyCode,
        a = s.which,
        r = n ? n: o ? o: a ? a: 0,
        l = e.UtipFunctions.getDecimalIndex(i.value),
        h = 0;
        this.oldValue = s.target.value,
        l > -1 && (h = i.value.substr(l + 1, 100).length),
        this._Decimals > 0 && h >= this._Decimals && 8 != r && 46 != r && 37 != r && 39 != r && 190 != r && 188 != r && s.preventDefault()
    },
    t = null,
    e
}),
define("mobile/mobileClosePositionPackages", ["base", "symbolsData", "socket", "mobile/mobileStopOrderControl"],
function(e) {
    var t;
    e.MobileClosePositionPackages = function(t) {
        this.type = null,
        this.symbol = null,
        this.position = null,
        this.freeze = !1,
        this.confirmButton = null,
        this.notConfirmButton = null,
        e.MobileClosePositionPackages.base.constructor.apply(this, [t])
    },
    e.initClass(e.MobileClosePositionPackages, e.Container);
    var i = e.MobileClosePositionPackages.prototype,
    s = e._TraderData.positionType,
    n = e.LangManager,
    o = e.SymbolsData,
    a = e.OptionsSettings,
    r = e.UtipFunctions,
    l = e.Socket,
    h = e.POSITION_PACKAGE_TYPES = {
        CLOSE_POSITION: 0,
        CLOSE_POSITION_PARTIALLY: 1,
        MODIFY_POSITION: 2,
        CLOSE_EARLY: 3
    };
    return i.subscribe = function() {
        n.register(this),
        l.register(this),
        o.register(this),
        a.register(this)
    },
    i.dropOutOfFollowers = function() {
        n.unRegister(this),
        l.unRegister(this),
        o.unRegister(this),
        a.unRegister(this)
    },
    i.updateProperties = function(t) {
        var i = e.valueIsEmpty,
        s = t.type,
        n = t.position,
        a = t.confirmButton,
        r = this.position = i(n) ? r: n;
        this.type = i(s) ? this.type: s,
        this.symbol = i(r) ? this.symbol: o.getSymbols()[r.symbolName],
        this.confirmButton = a,
        this.refreshVolumeControl(),
        this.UPDATE_SYMBOL_NAME_ELEMENT(),
        this.UPDATE_STOP_ORDERS(),
        this.UPDATE_ORDER_CONTROLS()
    },
    i._render = function() {
        this.packages = {},
        this.symbol = o.getSymbols()[this.position.symbolName],
        this.CREATE_CONTAINER(),
        this.ATTACH_SYMBOL_CAPTION_ELEMENT(),
        this.ATTACH_CURRENT_PRICE_ELEMENT(),
        this.ATTACH_CLOSE_POSITION_PACKAGE(),
        this.ATTACH_CLOSE_POSITION_PARTIALLY_PACKAGE(),
        this.ATTACH_MODIFY_POSITION_PACKAGE(),
        this.ATTACH_EARLY_CLOSE_POSITION_PACKAGE(),
        this.UPDATE_STOP_ORDERS(),
        this.UPDATE_COMMISSION(),
        this.subscribe()
    },
    i.UPDATE_ORDER_CONTROLS = function() {
        var e = this.packages,
        t = e.closePositionPartiallyPackage,
        i = t.volumeControl;
        i.setSelectedOption(0),
        i.ChangedValue.fire({
            event: null,
            sender: i
        })
    },
    i.changeCaptions = function() {
        var e = n.getStringByKey.bind(n),
        t = this.packages;
        t.currentPrice.caption.innerHTML = e("cWCTTradePositionsFormCurrentPrice") || "Current price",
        t.closePositionPartiallyPackage.volumeCaption.innerHTML = e("cWCTTradePositionsFormVolume") || "Volume",
        t.closeEarlyPositionPackage.commissionCaption.innerHTML = e("cPPCCloseOptionPositionFee") || "The fee per transaction"
    },
    i.updateCurrentPrice = function() {
        var t = this.symbol,
        i = this.position;
        switch (i.positionType) {
        case s.buy:
            return void(this.packages.currentPrice.value.innerHTML = e.numberFormat(t.getBid(), t.getDigits(), ".", " "));
        case s.sell:
            return void(this.packages.currentPrice.value.innerHTML = e.numberFormat(t.getAsk(), t.getDigits(), ".", " "));
        default:
            this.packages.currentPrice.value.innerHTML = e.numberFormat(t.getBid(), t.getDigits(), ".", " ")
        }
    },
    i._onGetQuote = function(e) {
        this.symbol === e && (this.updateCurrentPrice(), this.freeze || (this.closePositionAvailable(), this.modifyPositionAvailable(), this.closeEarlyPositionAvailable()))
    },
    i._onChangeLang = function() {
        this.changeCaptions()
    },
    i.createVolumeControl = function(t) {
        var i = e._Templates,
        s = new e.InputSelectNumber({
            ParentNode: t,
            Template: i.MobileInputSelect,
            Options: e.UtipFunctions.getVolumesList(this.symbol, this.position.volume),
            Edit: !0,
            Width: 204,
            Height: 30,
            Class: "",
            MenuClass: "volume",
            DropDown: e.Delegate(this, this.volumeDropDown),
            OnlyNumbers: !0,
            Decimals: e.TraderData.getDecimalCount()
        }),
        n = s.getInputNode();
        return n.addEventListener("blur",
        function() {
            setTimeout(function() {
                document.querySelector("html").scrollTop = 0,
                document.body.scrollTop = 0
            },
            400)
        }.bind(this), !0),
        s
    },
    i.refreshVolumeControl = function() {
        var e = this.packages.closePositionPartiallyPackage.volumeControl;
        e.DropDown.fire({}),
        e.setValue("0.00"),
        e.setSelectedOption(0)
    },
    i.volumeDropDown = function() {
        var t = e.UtipFunctions.getVolumesList(this.symbol, this.position.volume);
        this.packages.closePositionPartiallyPackage.volumeControl.setOptions(t)
    },
    i.closePositionAvailable = function() {
        var t = this.type;
        if (t === h.CLOSE_POSITION || t === h.CLOSE_POSITION_PARTIALLY) try {
            var i = this.symbol,
            s = this.position,
            n = !r.canClosePosition(parseFloat(s.takeProfit), parseFloat(s.stopLoss), "Sell" === s.positionType ? i.getAsk() : i.getBid(), e.parseFloat(i.getStopLevel()) / i.getPrecision()),
            o = n ? "remove": "add";
            this.packages.modifyPositionPackage.own.classList[o]("disabled"),
            this.confirmButton.setEnabled(n)
        } catch(e) {
            var a = "";
            switch (e.name) {
            case "TypeError":
                a = "package is not ready"
            }
            return a
        }
    },
    i.createStopOrderControl = function(t, i, s) {
        var n = e.Delegate,
        o = this.position,
        a = {
            ParentNode: t,
            Width: 204,
            Height: 34,
            FontSize: 19,
            MaxValue: 999999,
            Class: "stop-order",
            type: i,
            Key: i === e.STOP_ORDER_TYPES.TAKE_PROFIT ? "cTOTP": "cTOSL",
            TumblerChanged: n(this, this.tumblerChanged.bind(this)),
            BeforeChange: n(this, s.beforeChange.bind(this)),
            ChangedValue: n(this, s.changedValue.bind(this)),
            ChangeValue: n(this, s.changedValue.bind(this))
        };
        return i === e.STOP_ORDER_TYPES.TAKE_PROFIT ? a.TumblerOn = 0 !== e.parseFloat(o.takeProfit) : a.TumblerOn = 0 !== e.parseFloat(o.stopLoss),
        new e.MobileStopOrderControl(a)
    },
    i.tumblerChanged = function(t) {
        var i = t.event.tumblerChanged,
        s = this.symbol,
        n = s.getDigits(),
        o = this.position,
        a = t.sender,
        r = a.type,
        l = r === e.STOP_ORDER_TYPES.TAKE_PROFIT,
        h = e.parseFloat;
        if (i) {
            if (l) {
                var d = o.takeProfit;
                0 != h(d) ? a.setValue(e.numberFormat(1 * d, n, ".", " ")) : 0 == h(a.getValue()) && (a.setValue(0), this.stopOrderSetDefaultValue(r))
            } else {
                var c = o.stopLoss;
                0 != h(c) ? a.setValue(e.numberFormat(1 * c, n, ".", " ")) : 0 == h(a.getValue()) && (a.setValue(0), this.stopOrderSetDefaultValue(r))
            }
            a.setStep(s.getFormattedPrecision()),
            a.setDecimals(n)
        } else a.setValue(0);
        this.modifyPositionAvailable()
    },
    i.takeProfitBeforeChange = function(t) {
        var i = t.sender,
        s = i.getValue(); ("" === s || e.valueIsEmpty(s) || 0 === e.parseFloat(s) || isNaN(s)) && this.stopOrderSetDefaultValue(e.STOP_ORDER_TYPES.TAKE_PROFIT)
    },
    i.stopLossBeforeChange = function(t) {
        var i = t.sender,
        s = i.getValue(); ("" === s || e.valueIsEmpty(s) || 0 === e.parseFloat(s) || isNaN(s)) && this.stopOrderSetDefaultValue(e.STOP_ORDER_TYPES.STOP_LOSS)
    },
    i.stopOrderSetDefaultValue = function(t) {
        var i, s, n, o = e.STOP_ORDER_TYPES,
        a = this.position,
        r = a.positionType === e._TraderData.positionType.buy,
        l = this.symbol,
        h = l.getDigits(),
        d = l.getGPipsCount() * l.getStopLevel(),
        c = Math.pow(10, h);
        switch (t) {
        case o.TAKE_PROFIT:
            n = this.packages.modifyPositionPackage.takeProfitControl,
            r ? (i = l.getBid(), s = e.parseFloat(i) + d / c) : (i = l.getAsk(), s = e.parseFloat(i) - d / c);
            break;
        case o.STOP_LOSS:
            n = this.packages.modifyPositionPackage.stopLossControl,
            r ? (i = l.getBid(), s = e.parseFloat(i) - d / c) : (i = l.getAsk(), s = e.parseFloat(i) + d / c)
        }
        n.setValue(s),
        n.setStep(l.getFormattedPrecision()),
        n.setDecimals(h)
    },
    i.isModifyOrderEqualData = function() {
        var e = this.packages.modifyPositionPackage,
        t = e.takeProfitControl,
        i = e.stopLossControl,
        s = parseFloat(t.getValue() || 0),
        n = parseFloat(i.getValue() || 0),
        o = this.position,
        a = parseFloat(o.takeProfit || 0),
        r = parseFloat(o.stopLoss || 0);
        return s === a && n === r
    },
    i.isNotStopLevel = function() {
        var t = e.STOP_ORDER_TYPES,
        i = this.packages.modifyPositionPackage,
        s = i.takeProfitControl,
        n = i.stopLossControl,
        o = s.getValue() || 0,
        a = n.getValue() || 0,
        r = parseInt(this.symbol.getStopLevel()),
        l = this.calcPipsByPrice(o, t.TAKE_PROFIT),
        h = this.calcPipsByPrice(a, t.STOP_LOSS);
        return (l > r || !s.shown()) && (h > r || !n.shown())
    },
    i.calcPipsByPrice = function(t, i) {
        var s, n = this.symbol,
        o = this.position.positionType === e._TraderData.positionType.buy,
        a = o ? 1 : -1,
        r = o ? n.getBid() : n.getAsk();
        s = parseInt(Math.round(Math.abs(t - r) * Math.pow(10, n.getDigits())));
        var l = -1;
        return t > r && (l = 1),
        s *= i === e.STOP_ORDER_TYPES.TAKE_PROFIT ? a * l: -a * l
    },
    i.modifyPositionAvailable = function() {
        if (this.type === h.MODIFY_POSITION) try {
            var e = this.isNotStopLevel(),
            t = this.isModifyOrderEqualData(),
            i = e ? "remove": "add";
            this.packages.modifyPositionPackage.own.classList[i]("disabled"),
            t ? this.confirmButton.setEnabled(!1) : this.confirmButton.setEnabled(e)
        } catch(e) {
            var s = "";
            switch (e.name) {
            case "TypeError":
                s = "package is not ready"
            }
            return s
        }
    },
    i.calculateCommission = function() {
        var t = this.position,
        i = parseInt(t.investmentSum) / 100 * parseInt(t.earlyClosing);
        return e.numberFormat(i, 2, ".", " ")
    },
    i.closeEarlyPositionAvailable = function() {
        if (this.type === h.CLOSE_EARLY) try {
            var e = !!r.canCloseOptionPosition(this.position),
            t = e ? "remove": "add";
            this.packages.closeEarlyPositionPackage.own.classList[t]("disabled"),
            this.confirmButton.setEnabled(e)
        } catch(e) {
            var i = "";
            switch (e.name) {
            case "TypeError":
                i = "package is not ready"
            }
            return i
        }
    },
    i.CREATE_CONTAINER = function() {
        var e = document.createElement("div");
        e.classList.add("container"),
        this.container = e
    },
    i.ATTACH_SYMBOL_CAPTION_ELEMENT = function() {
        var e = document.createElement("div"),
        t = document.createElement("div"),
        i = document.createElement("div");
        e.classList.add("content"),
        t.classList.add("content-symbol-name"),
        i.classList.add("content-description"),
        e.appendChild(t),
        e.appendChild(i),
        this.packages.symbolCaption = {
            own: e,
            symbolName: t,
            description: i
        },
        this.UPDATE_SYMBOL_NAME_ELEMENT()
    },
    i.UPDATE_SYMBOL_NAME_ELEMENT = function() {
        var e = this.packages.symbolCaption;
        e.symbolName.innerHTML = this.position.symbolName,
        e.description.innerHTML = this.symbol.getDescription()
    },
    i.UPDATE_STOP_ORDERS = function() {
        if (this.type === h.MODIFY_POSITION) {
            var e = this.position,
            t = this.packages.modifyPositionPackage,
            i = t.takeProfitControl,
            s = t.stopLossControl;
            i.refresh(e.takeProfit),
            s.refresh(e.stopLoss)
        }
    },
    i.ATTACH_CURRENT_PRICE_ELEMENT = function() {
        var e = document.createElement("div"),
        t = document.createElement("div"),
        i = document.createElement("div");
        e.classList.add("current-price"),
        t.classList.add("current-price-caption"),
        i.classList.add("current-price-value"),
        t.innerHTML = n.getStringByKey("cWCTTradePositionsFormCurrentPrice") || "Current price",
        e.appendChild(t),
        e.appendChild(i),
        this.packages.currentPrice = {
            own: e,
            caption: t,
            value: i
        }
    },
    i.ATTACH_CLOSE_POSITION_PACKAGE = function() {},
    i.ATTACH_CLOSE_POSITION_PARTIALLY_PACKAGE = function() {
        var e = document.createElement("div"),
        t = document.createElement("div"),
        i = document.createElement("div"),
        s = this.createVolumeControl(i);
        e.classList.add("content"),
        t.classList.add("content-volume-caption"),
        i.classList.add("content-volume-control"),
        t.innerHTML = n.getStringByKey("cWCTTradePositionsFormVolume") || "Volume",
        e.appendChild(t),
        e.appendChild(i),
        this.packages.closePositionPartiallyPackage = {
            own: e,
            volumeCaption: t,
            volumeControl: s
        }
    },
    i.ATTACH_MODIFY_POSITION_PACKAGE = function() {
        var t = e.STOP_ORDER_TYPES,
        i = document.createElement("div"),
        s = document.createElement("div"),
        n = document.createElement("div"),
        o = document.createElement("div"),
        a = document.createElement("div"),
        r = this.createStopOrderControl(n, t.TAKE_PROFIT, {
            beforeChange: this.takeProfitBeforeChange,
            changedValue: this.modifyPositionAvailable
        }),
        l = this.createStopOrderControl(a, t.STOP_LOSS, {
            beforeChange: this.stopLossBeforeChange,
            changedValue: this.modifyPositionAvailable
        });
        i.classList.add("content"),
        n.classList.add("content-take-profit-block"),
        a.classList.add("content-stop-loss-block"),
        s.classList.add("content-take-profit"),
        o.classList.add("content-stop-loss"),
        s.appendChild(n),
        o.appendChild(a),
        i.appendChild(s),
        i.appendChild(o),
        this.packages.modifyPositionPackage = {
            own: i,
            takeProfitControl: r,
            stopLossControl: l
        }
    },
    i.ATTACH_EARLY_CLOSE_POSITION_PACKAGE = function() {
        var e = document.createElement("div"),
        t = document.createElement("div"),
        i = document.createElement("div");
        e.classList.add("content"),
        t.classList.add("content-commission-caption"),
        i.classList.add("content-commission-value"),
        t.innerHTML = n.getStringByKey("cPPCCloseOptionPositionFee") || "The fee per transaction",
        i.innerHTML = this.calculateCommission(),
        e.appendChild(t),
        e.appendChild(i),
        this.packages.closeEarlyPositionPackage = {
            own: e,
            commissionCaption: t,
            commissionValue: i
        }
    },
    i.UPDATE_COMMISSION = function() {
        this.type === h.CLOSE_EARLY && (this.packages.closeEarlyPositionPackage.commissionValue.innerHTML = this.calculateCommission())
    },
    i.REMOVE_CONTAINER_PACKAGE = function() {
        for (var e = this.container; e.firstChild;) e.removeChild(e.firstChild)
    },
    i.toFreeze = function() {
        this.freeze = !0
    },
    i.unfreeze = function() {
        this.freeze = !1
    },
    i.setAdditionalAttributes = function(e) {
        for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t])
    },
    i.getVolumeControl = function() {
        return this.packages.closePositionPartiallyPackage.volumeControl
    },
    i.getTakeProfitControl = function() {
        return this.packages.modifyPositionPackage.takeProfitControl
    },
    i.getStopLossControl = function() {
        return this.packages.modifyPositionPackage.stopLossControl
    },
    i.get = function() {
        this.REMOVE_CONTAINER_PACKAGE();
        var e = this.container,
        t = this.packages;
        switch (this.type) {
        case h.CLOSE_POSITION:
            break;
        case h.CLOSE_POSITION_PARTIALLY:
            e.appendChild(t.symbolCaption.own),
            e.appendChild(t.closePositionPartiallyPackage.own);
            break;
        case h.MODIFY_POSITION:
            e.appendChild(t.symbolCaption.own),
            e.appendChild(t.modifyPositionPackage.own),
            this.modifyPositionAvailable();
            break;
        case h.CLOSE_EARLY:
            return e.appendChild(t.closeEarlyPositionPackage.own),
            this.changeCaptions(),
            this.updateCurrentPrice(),
            this.UPDATE_COMMISSION(),
            e
        }
        return e.appendChild(t.currentPrice.own),
        this.changeCaptions(),
        this.updateCurrentPrice(),
        e
    },
    i = null,
    e.getMobileClosePositionPackages = function(i) {
        return t ? t.updateProperties(i) : e.mobileClosePositionPackages = t = new e.MobileClosePositionPackages(i),
        t
    },
    e
}),
define("mobile/mobileMenuMarketPosition", ["menu", "mobile/mobileClosePositionPackages"],
function(e) {
    e.MobileMenuMarketPosition = function(t) {
        this._RowId = null,
        e.MobileMenuMarketPosition.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.MobileMenuMarketPosition, e.Menu);
    var t = e.MobileMenuMarketPosition.prototype;
    return t.dispose = function() {
        e.SymbolsData.unRegister(this),
        this.removeFromDom()
    },
    t._onClosed = function(e) {
        this.dispose()
    },
    t._render = function() {
        var t = e.getTerminal(),
        i = t.useOnlyOptions,
        s = 0 !== e.SymbolsData.getSelectedSymbols().length;
        this.BeforeOpen = e.Delegate(this, this._onContextMenuBeforeOpen),
        this.ItemClick = e.Delegate(this, this._onContextMenuItemClick),
        this._CheckedType = "NoChecked",
        this._Items = [{
            Text: "Close position",
            Id: "Close_position",
            Key: "cClPFClose"
        },
        {
            Text: "Close partially",
            Id: "Close_partially",
            Key: "cMobileClosePartially"
        },
        {
            Text: "Modify position",
            Id: "Modify_position",
            Key: "cPPCEditPositions"
        },
        {
            Text: "New market order",
            Id: "New_market_order",
            Key: "cMFNewMarketOrder",
            Visible: !i && s
        }],
        e.MobileMenuMarketPosition.base._render.apply(this, arguments),
        e.addCSSClass(this.getDomNode(), "tableTradeMenu")
    },
    t._onGetQuote = function(e) {
        this.updateMenuItems(e)
    },
    t.updateMenuItems = function(t) {
        var i = e.TraderData.getPositionById(this._RowId.split("_")[0]);
        if (i) {
            var s = e.SymbolsData.getSymbols[i.symbolName];
            if (s === t) {
                var n, o = "Sell" == i.positionType,
                a = o ? t.getAsk() : t.getBid(),
                r = t.getPrecision(),
                l = e.parseFloat(t.getStopLevel()) / r,
                h = parseFloat(i.takeProfit),
                d = parseFloat(i.stopLoss);
                n = !e.UtipFunctions.canClosePosition(h, d, a, l),
                this.getItemById("Close_position").setEnabled(n),
                this.getItemById("Close_partially").setEnabled(n),
                this.getItemById("Modify_position").setEnabled(n)
            }
        } else this.hide()
    },
    t._onContextMenuBeforeOpen = function(t) {
        e.SymbolsData.register(this),
        this.updateMenuItems(e.SymbolsData.getSymbols()[e.TraderData.getPositionById(this._RowId.split("_")[0]).symbolName])
    },
    t._onContextMenuItemClick = function(t) {
        t.preventDefault(),
        t.stopPropagation();
        var i = t.Item.getId(),
        s = this._RowId,
        n = s.split("_")[0],
        o = e.TraderData.getPositionById(n),
        a = o.symbolName;
        this.hide();
        var r = e.LangManager,
        l = r.getStringByKey.bind(r);
        switch (i) {
        case "Close_position":
            var h = e.getMobileClosePositionPackages({
                position: o,
                type: e.POSITION_PACKAGE_TYPES.CLOSE_POSITION
            }),
            d = new e.getDialogConfirm({
                Width: 300,
                Class: "Mini Confirm",
                YesButtonKey: "cRAClose",
                YesButtonText: "Close",
                positionPackage: h,
                Confirm: e.Delegate(this, this._onConfirmCloseFullyPosition)
            }),
            c = l("cClPFClose") || "Close position";
            d.setTitle(c + " #" + n + "?"),
            d.show(null, {
                rowId: s,
                volume: o.volume
            });
            break;
        case "Close_partially":
            var u = e.getMobileClosePositionPackages({
                position: o,
                type: e.POSITION_PACKAGE_TYPES.CLOSE_POSITION_PARTIALLY
            }),
            g = new e.getDialogConfirm({
                Width: 300,
                Class: "Mini Confirm",
                YesButtonKey: "cRAClose",
                YesButtonText: "Close",
                positionPackage: u,
                Confirm: e.Delegate(this, this._onConfirmClosePartiallyPosition)
            }),
            p = l("cClPFClose") || "Close position";
            g.setTitle(p + " #" + n + "?"),
            g.show(null, {
                rowId: s,
                volumeControl: u.getVolumeControl()
            });
            break;
        case "Modify_position":
            var m = e.getMobileClosePositionPackages({
                position: o,
                type: e.POSITION_PACKAGE_TYPES.MODIFY_POSITION
            }),
            _ = new e.getDialogConfirm({
                dynamicContent: !0,
                Width: 300,
                Class: "Mini Confirm",
                YesButtonKey: "cCDModify",
                YesButtonText: "Modify",
                positionPackage: m,
                Confirm: e.Delegate(this, this._onConfirmModifyPosition)
            }),
            y = l("cPPCEditPositions") || "Modify position";
            _.setTitle(y + " #" + n + "?"),
            _.show(null, {
                rowId: s,
                takeProfitControl: m.getTakeProfitControl(),
                stopLossControl: m.getStopLossControl()
            });
            break;
        case "New_market_order":
            e.getMobileDialogNewOrder().show(null, a)
        }
    },
    t.closePosition = function(t) {
        var i = e.TraderData,
        s = i.getPositionById(this._RowId.split("_")[0]),
        n = s.symbolName,
        o = e.SymbolsData.getSymbols()[n],
        a = {
            ID: s.id,
            symbolName: n,
            traderID: i.getTraderInfo().id,
            operationType: e.requestPositionType[s.positionType],
            volume: t,
            price: "Sell" == s.positionType ? o.getAsk() : o.getBid(),
            takeProfit: s.takeProfit,
            stopLoss: s.stopLoss
        },
        r = e.getTerminal(),
        l = r.platformType,
        h = e.PlatformTypes;
        switch (l) {
        case h.ptUTIP:
            e.requester.closePosition(a);
            break;
        case h.ptMT:
            a.operationType = i.convertOrderTypeToMTFormat(a.operationType),
            e.requester.closeMTPosition(a)
        }
    },
    t.modifyPosition = function(t, i) {
        var s = e.TraderData,
        n = s.getPositionById(this._RowId.split("_")[0]),
        o = {
            traderID: s.getTraderInfo().id,
            positionID: n.id,
            takeProfit: t.toString(),
            stopLoss: i.toString()
        },
        a = e.getTerminal(),
        r = a.platformType,
        l = e.PlatformTypes;
        switch (r) {
        case l.ptUTIP:
            e.requester.changePosition(o);
            break;
        case l.ptMT:
            o.operationType = s.convertOrderTypeToMTFormat(o.operationType),
            e.requester.changeMTPosition(o)
        }
    },
    t._onConfirmCloseFullyPosition = function(e) {
        this.closePosition(e.data.volume)
    },
    t._onConfirmClosePartiallyPosition = function(e) {
        this.closePosition(e.data.volumeControl.getValue())
    },
    t._onConfirmModifyPosition = function(e) {
        var t = e.data,
        i = t.takeProfitControl.getValue() || 0,
        s = t.stopLossControl.getValue() || 0;
        this.modifyPosition(i, s)
    },
    t = null,
    e
}),
define("mobile/mobileMenuPendingOrder", ["menu"],
function(e) {
    e.MobileMenuPendingOrder = function(t) {
        this._RowId = null,
        e.MobileMenuPendingOrder.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.MobileMenuPendingOrder, e.Menu);
    var t = e.MobileMenuPendingOrder.prototype;
    return t.dispose = function() {
        e.SymbolsData.unRegister(this),
        this.removeFromDom()
    },
    t._onClosed = function(e) {
        this.dispose()
    },
    t._render = function() {
        var t = e.getTerminal(),
        i = t.useOnlyOptions,
        s = 0 !== e.SymbolsData.getSelectedSymbols().length;
        this.BeforeOpen = e.Delegate(this, this._onContextMenuBeforeOpen),
        this.ItemClick = e.Delegate(this, this._onContextMenuItemClick),
        this._CheckedType = "NoChecked",
        this._Items = [{
            Text: "Delete order",
            Id: "Delete_order",
            Key: "cPPCDelOrder"
        },
        {
            Text: "Modify order",
            Id: "Modify_order",
            Key: "cPPCEditOrder"
        },
        {
            Text: "New pending order",
            Id: "New_pending_order",
            Key: "cMFNewPendingOrder",
            Visible: !i && s
        }],
        e.MobileMenuPendingOrder.base._render.apply(this, arguments),
        e.addCSSClass(this.getDomNode(), "tableTradeMenu")
    },
    t._onGetQuote = function(e) {
        this.updateMenuItems(e)
    },
    t.updateMenuItems = function(t) {
        var i = e.TraderData.getPendingOrderByID(this._RowId.split("_")[0]);
        if (i) {
            var s = e.SymbolsData.getSymbols()[i.symbolName];
            if (s === t) {
                var n = e.requestPendingOrderType,
                o = i.pendingOrderType,
                a = o == n.BuyLimit || o == n.BuyStop,
                r = a ? t.getAsk() : t.getBid(),
                l = t.getPrecision(),
                h = e.parseFloat(t.getStopLevel()) / l,
                d = !!e.UtipFunctions.canClosePendingOrder(i, r, h);
                this.getItemById("Delete_order").setEnabled(d),
                this.getItemById("Modify_order").setEnabled(d)
            }
        } else this.hide()
    },
    t._onContextMenuBeforeOpen = function(t) {
        e.SymbolsData.register(this),
        this.updateMenuItems(e.SymbolsData.getSymbols()[e.TraderData.getPendingOrderByID(this._RowId.split("_")[0]).symbolName])
    },
    t._onContextMenuItemClick = function(t) {
        t.preventDefault(),
        t.stopPropagation();
        var i = t.Item.getId(),
        s = this._RowId,
        n = s.split("_")[0],
        o = e.TraderData.getPendingOrderByID(n),
        a = o.symbolName;
        switch (this.hide(), i) {
        case "Delete_order":
            var r = new e.getDialogConfirm({
                ImageList: null,
                Left: (window.innerWidth - 260) / 2,
                Top: (window.innerHeight - 194) / 2,
                Width: 260,
                Title: "",
                Class: "Mini Confirm",
                positionPackage: {
                    position: o
                },
                Confirm: e.Delegate(this, this._onConfirmDeletePendingOrder)
            }),
            l = e.LangManager,
            h = l.getStringByKey.bind(l),
            d = h("cPPCDelOrder") || "Delete order";
            r.setTitle(h("cPPCDelOrder")),
            r.show(d + " #" + n + "?", s);
            break;
        case "Modify_order":
            e.getMobileDialogModifyPendingOrder().show(null, o);
            break;
        case "New_pending_order":
            e.getMobileDialogPendingOrder().show(null, a)
        }
    },
    t._onConfirmDeletePendingOrder = function() {
        var t = e.TraderData,
        i = e.getTerminal(),
        s = {
            ID: this._RowId.split("_")[0],
            traderID: t._TraderInfo.id
        },
        n = t.getPendingOrderByID(this._RowId.split("_")[0]);
        if (n && !n.isExecuting) {
            n.isExecuting = !0;
            var o = i.platformType,
            a = e.PlatformTypes,
            r = e.requestPendingOrderType;
            switch (o) {
            case a.ptUTIP:
                e.requester.deletePendingOrder(s);
                break;
            case a.ptMT:
                switch (parseInt(n.pendingOrderType)) {
                case r.BuyLimit:
                case r.BuyStop:
                    s.closePrice = e.SymbolsData.getSymbols()[n.symbolName].getAsk();
                    break;
                case r.SellLimit:
                case r.SellStop:
                    s.closePrice = e.SymbolsData.getSymbols()[n.symbolName].getBid()
                }
                e.requester.deleteMTPendingOrder(s)
            }
        }
    },
    t = null,
    e
}),
define("mobile/mobileMenuBinaryPosition", ["menu"],
function(e) {
    e.MobileMenuBinaryPosition = function(t) {
        this._RowId = null,
        e.MobileMenuBinaryPosition.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.MobileMenuBinaryPosition, e.Menu);
    var t = e.MobileMenuBinaryPosition.prototype;
    return t.dispose = function() {
        e.SymbolsData.unRegister(this),
        this.removeFromDom()
    },
    t._onClosed = function(e) {
        this.dispose()
    },
    t._render = function() {
        var t = e.getTerminal(),
        i = t.useOnlyOptions,
        s = 0 !== e.SymbolsData.getSelectedSymbols().length,
        n = e.OptionsSettings.checkAreOptionsEnabledExceptForbidden();
        this.BeforeOpen = e.Delegate(this, this._onContextMenuBeforeOpen),
        this.ItemClick = e.Delegate(this, this._onContextMenuItemClick),
        this._CheckedType = "NoChecked",
        this._Items = [{
            Text: "New market order",
            Id: "New_market_order",
            Key: "cMFNewMarketOrder",
            Visible: !i && s
        },
        {
            Text: "New pending order",
            Id: "New_pending_order",
            Key: "cMFNewPendingOrder",
            Visible: !i && s
        },
        {
            Text: "Buy option",
            Id: "Buy_option",
            Key: "cMFBuyOption",
            Visible: t.useOptions && s && n
        },
        {
            Text: "Close Early",
            Id: "Close_early",
            Key: "cMobileCloseEarly"
        }],
        e.MobileMenuBinaryPosition.base._render.apply(this, arguments),
        e.addCSSClass(this.getDomNode(), "tableTradeMenu")
    },
    t._onGetQuote = function(e) {
        this.updateMenuItems(e)
    },
    t.updateMenuItems = function(t) {
        var i = e.TraderData.getOptionPositionById(this._RowId.split("_")[0]);
        if (i) {
            var s = e.SymbolsData.getSymbols()[i.symbolName];
            if (s === t) {
                var n = !!e.UtipFunctions.canCloseOptionPosition(i);
                this.getItemById("Close_early").setEnabled(n)
            }
        } else this.hide()
    },
    t._onContextMenuBeforeOpen = function(t) {
        e.SymbolsData.register(this),
        this.updateMenuItems(e.SymbolsData.getSymbols()[e.TraderData.getOptionPositionById(this._RowId.split("_")[0]).symbolName])
    },
    t._onContextMenuItemClick = function(t) {
        t.preventDefault(),
        t.stopPropagation();
        var i = t.Item.getId(),
        s = this._RowId,
        n = s.split("_")[0],
        o = e.TraderData.getOptionPositionById(n),
        a = o.symbolName;
        switch (this.hide(), i) {
        case "New_market_order":
            e.getMobileDialogNewOrder().show(null, a);
            break;
        case "New_pending_order":
            e.getMobileDialogPendingOrder().show(null, a);
            break;
        case "Buy_option":
            e.getMobileDialogBuyOption().showByNameAndType(null, o.settingName, parseInt(o.optionType));
            break;
        case "Close_early":
            var r = e.getMobileClosePositionPackages({
                position: o,
                type: e.POSITION_PACKAGE_TYPES.CLOSE_EARLY
            }),
            l = new e.getDialogConfirm({
                Width: 300,
                Class: "Mini Confirm",
                YesButtonKey: "cRAClose",
                YesButtonText: "Close",
                positionPackage: r,
                Confirm: e.Delegate(this, this._onConfirmEarlyCloseOption)
            }),
            h = e.LangManager.getStringByKey("cClPFClose") || "Close position";
            l.setTitle(h + " #" + n + "?"),
            l.show(null, s)
        }
    },
    t._onConfirmEarlyCloseOption = function(t) {
        var i = t.data.split("_")[0],
        s = {
            ID: i,
            traderID: e.TraderData.getTraderInfo().id
        };
        e.requester.closeOptionPosition(s)
    },
    t = null,
    e
}),
define("mobile/mobileTableTrade", ["control", "divTable", "mobile/mobileDialogOrderMenu", "mobile/mobileMenuMarketPosition", "mobile/mobileMenuPendingOrder", "mobile/mobileMenuBinaryPosition"],
function(e) {
    e.MobileTableTrade = function(t) {
        e.MobileTableTrade.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.TraderData.register(this),
        e.Socket.register(this),
        e.Resizer.register(this),
        this.terminal = e.getTerminal()
    },
    e.initClass(e.MobileTableTrade, e.DivTable);
    var t, i = e.MobileTableTrade.prototype,
    s = e._Templates,
    n = s.MobileInformationRow;
    i._render = function() {
        t = this,
        this._Template = s.MobileTableTrade,
        this._RowTemplates = [s.MobileTableTradeRow],
        this._SetterOverride = this.setValue,
        this.fontSize = "100%",
        e.MobileTableTrade.base._render.apply(this, arguments),
        this.refreshData()
    },
    i.setData = function(t) {
        e.MobileTableTrade.base.setData.apply(this, arguments);
        var i = e.SymbolsData.getSymbols(),
        s = e.TraderData,
        n = s.getPositions().concat(s.getPendingOrders()).concat(s.getOptionPositions()).reduce(function(e, t) {
            var s = t.symbolName;
            return e.hasOwnProperty(s) ? e: (e[s] = i[s], e)
        },
        {}),
        o = this.refreshRowBySymbol.bind(this);
        this.afterDataSet = !0;
        for (var a in n) if (n.hasOwnProperty(a)) {
            var r = n[a];
            r.generalBidDidChange = !0,
            r.generalAskDidChange = !0,
            o(r),
            r.getBid(r.getBid()),
            r.setAsk(r.getAsk()),
            r.generalBidDidChange = !1,
            r.generalAskDidChange = !1
        }
        this.afterDataSet = !1
    },
    i.getInfo = function(t, i, s, o, a) {
        for (var r = document.createElement("div"), l = e.htmlToDOM(n, !0, null); 0 !== l.length;) r.appendChild(l[0]);
        var h = r.children,
        d = h[0],
        c = d.children[0].children,
        u = c[0],
        g = c[1],
        p = g.children,
        m = p[0],
        _ = p[1],
        y = h[1],
        S = y.children[0],
        f = h[2],
        v = f.children[0].children,
        C = v[0].children,
        b = C[0];
        return u.innerHTML = t,
        m.innerHTML = i,
        _.innerHTML = s,
        S.innerHTML = o,
        b.innerHTML = a,
        r.innerHTML
    },
    i.buildOrderInfo = function(t, i) {
        var s, n = e.parseFloat,
        o = e.numberFormat,
        a = t.positionType,
        r = t.pendingOrderType,
        l = n(t.openPrice),
        h = i.getBid(),
        d = i.getAsk(),
        c = i.getDigits();
        if (l = l ? o(n(l), c, ".", " ") : "", a) s = "Buy" === a ? h: d;
        else {
            var u = e.requestPendingOrderType;
            s = r == u.BuyLimit || r === u.BuyStop ? h: d
        }
        s = n(s);
        var g = t.symbolName,
        p = o(n(t.volume), 2, ".", " "),
        m = s ? o(s, c, ".", " ") : "",
        _ = e.LangManager.getStringByKey("cOFLot") || "lot";
        return this.getInfo(g, _, p, l, m)
    },
    i.buildOptionInfo = function(t) {
        var i = e.parseFloat,
        s = e.numberFormat,
        n = t.symbolName,
        o = e.SymbolsData.getSymbols()[n],
        a = i(o.getBid()),
        r = i(t.openPrice),
        l = s(i(t.investmentSum), 0, ".", " "),
        h = a ? s(a, o.getDigits(), ".", " ") : "",
        d = e.TraderData.getGroup().depositCurrency;
        return this.getInfo(n, d, l, r, h)
    },
    i.refreshData = function() {
        function t(e, t) {
            return m(e, t)
        }
        var i, s = e.TraderData,
        n = e.SymbolsData,
        o = n.getSymbols(),
        a = this.buildOrderInfo.bind(this),
        r = this.buildOptionInfo.bind(this),
        l = s.getPositions(),
        h = s.getPendingOrders(),
        d = s.getOptionPositions();
        if (l && h) {
            this.resetTable();
            var c, u, g, p, m = e.investorAccount ?
            function(e, t) {
                return e
            }: function(e, t) {
                return e.cellValues.action = t,
                e
            },
            _ = [],
            y = l.length;
            for (i = 0; i < y; ++i) {
                var S = l[i];
                if (u = S.symbolName, g = S.positionType, c = o[u]) {
                    var f = "Sell" === S.positionType,
                    v = new e.Button({
                        onClicked: this._onTableButtonClicked,
                        ImgWidth: "25px",
                        ImgHeight: "25px",
                        Menu: new e.MobileMenuMarketPosition({
                            RowId: S.id + "_" + g
                        }),
                        FontIcon: {
                            Content: e.FontIcons.m_Params,
                            Color: "#bcafa2",
                            Size: 110,
                            Measurement: "%"
                        },
                        Class: "params",
                        TouchStart: e.Delegate(this, this._onButtonTouchStart)
                    });
                    _.push(t({
                        templateIndex: 0,
                        rowId: S.id + "_" + g,
                        symbolName: u,
                        positionType: g,
                        cellValues: {
                            image: '<div class="' + (f ? "sell": "buy") + '">' + (f ? e.FontIcons.SellLine: e.FontIcons.BuyLine) + "</div>",
                            information: a(S, c),
                            symbolName: u,
                            positionType: g,
                            Type: g
                        }
                    },
                    v))
                }
            }
            var C = h.length;
            for (i = 0; i < C; ++i) {
                var b = h[i];
                if (u = b.symbolName, p = b.pendingOrderType, c = o[u]) {
                    var T, P, D = e.requestPendingOrderType,
                    I = new e.Button({
                        onClicked: this._onTableButtonClicked,
                        ImgWidth: "25px",
                        ImgHeight: "25px",
                        Menu: new e.MobileMenuPendingOrder({
                            RowId: b.id + "_" + p
                        }),
                        FontIcon: {
                            Content: e.FontIcons.m_Params,
                            Color: "#bcafa2",
                            Size: 110,
                            Measurement: "%"
                        },
                        Class: "params",
                        TouchStart: e.Delegate(this, this._onButtonTouchStart)
                    });
                    switch (parseInt(p)) {
                    case D.BuyLimit:
                        P = e.FontIcons.BuyLimitLine,
                        T = !1;
                        break;
                    case D.SellLimit:
                        P = e.FontIcons.SellLimitLine,
                        T = !0;
                        break;
                    case D.BuyStop:
                        P = e.FontIcons.BuyStopLine,
                        T = !1;
                        break;
                    case D.SellStop:
                        P = e.FontIcons.SellStopLine,
                        T = !0
                    }
                    _.push(t({
                        templateIndex: 0,
                        rowId: b.id + "_" + p,
                        symbolName: u,
                        positionType: p,
                        cellValues: {
                            image: '<div class="' + (T ? "sell": "buy") + '">' + P + "</div>",
                            information: a(b, c),
                            symbolName: u,
                            pendingOrderType: p
                        }
                    },
                    I))
                }
            }
            var w = d.length,
            M = {
                onClicked: this._onTableButtonClicked,
                ImgWidth: "25px",
                ImgHeight: "25px",
                FontIcon: {
                    Content: e.FontIcons.m_Params,
                    Color: "#bcafa2",
                    Size: 110,
                    Measurement: "%"
                },
                Class: "params",
                TouchStart: e.Delegate(this, this._onButtonTouchStart)
            };
            for (i = 0; i < w; ++i) {
                var O = d[i],
                L = O.settingName;
                if (u = O.symbolName, c = e.SymbolsData.getSymbols()[u]) {
                    M.Menu = new e.MobileMenuBinaryPosition({
                        RowId: O.id + "_option"
                    });
                    var k, B, N = e.OptionPositionTypes,
                    x = parseInt(O.direction),
                    A = new e.Button(M);
                    switch (x) {
                    case N.highExpress:
                        B = e.FontIcons.HighOptionLine,
                        k = !1;
                        break;
                    case N.lowExpress:
                        B = e.FontIcons.LowOptionLine,
                        k = !0;
                        break;
                    case N.highClassic:
                        B = e.FontIcons.HighOptionLine,
                        k = !1;
                        break;
                    case N.lowClassic:
                        B = e.FontIcons.LowOptionLine,
                        k = !0;
                        break;
                    case N.top:
                        B = e.FontIcons.TopOneTouchLine,
                        k = !1;
                        break;
                    case N.bottom:
                        B = e.FontIcons.BottomOneTouchLine,
                        k = !0;
                        break;
                    case N.inside:
                        B = e.FontIcons.InsideRangeLine,
                        k = !1;
                        break;
                    case N.outside:
                        B = e.FontIcons.OutsideRangeLine,
                        k = !0
                    }
                    _.push(t({
                        templateIndex: 0,
                        rowId: O.id + "_option",
                        symbolName: L,
                        cellValues: {
                            image: '<div class="' + (k ? "down": "up") + '">' + B + "</div>",
                            information: r(O),
                            Type: x,
                            symbolName: u
                        }
                    },
                    A))
                }
            }
            _.sort(function(e, t) {
                var i = e.symbolName,
                s = t.symbolName;
                return i <= s ? -1 : 1
            }),
            this.setData(_),
            _ = this._Data;
            var V = _.length;
            for (i = 0; i < V; ++i) this.refreshRow(i)
        }
    },
    i.refreshRowBySymbol = function(t) {
        var i = e.getTerminal().mainSwiper;
        if (i && i.getSelectedPageIndex() == e.MobileTerminalPage.TradePage) for (var s = this._Data,
        n = s.length,
        o = t.getSymbolName(), a = this.refreshRow.bind(this), r = 0; r < n; ++r) {
            var l = s[r].cellValues.symbolName;
            o == l && a(r)
        }
    },
    i.refreshRow = function(t) {
        var i, s, n, o = e.TraderData,
        a = e.numberFormat,
        r = this._Data[t],
        l = r.cellValues,
        h = this._Data[t].rowId,
        d = this.getRowById(h),
        c = d.setValue.bind(d),
        u = h.indexOf("option") !== -1;
        if (u) {
            if (i = o.getOptionPositionByKey(h)) if (s = e.SymbolsData.getSymbols()[i.symbolName], n = s.getDigits(), this.afterDataSet) this.easyRefreshFontSizeNeeded = !0,
            this.hardRefreshFontSizeNeeded = !0,
            c("current-price", a(s.getBid(), n, ".", " ")),
            c("profit", a(o.calcOptionPositionProfit(i.id), 2, ".", " ")),
            c("investments", i.investmentSum),
            c("first-price", a(i.openPrice, n, ".", " ")),
            c("symbol-name", i.symbolName);
            else {
                this.easyRefreshFontSizeNeeded = !1;
                var g = s.hasBidDigitCountChanges();
                s.hasBidChanges() && (this.easyRefreshFontSizeNeeded = g, c("current-price", a(s.getBid(), n, ".", " ")));
                var p = a(o.calcOptionPositionProfit(i.id), 2, ".", " "),
                m = l.profit || {};
                p !== l.profit && (this.hardRefreshFontSizeNeeded = p.length !== m.length, c("profit", p)),
                g && c("first-price", a(i.openPrice, n, ".", " "))
            }
        } else if (i = o.getOrderByKey(h, l.Type)) {
            s = e.SymbolsData.getSymbols()[i.symbolName],
            n = s.getDigits();
            var _ = e.requestPendingOrderType,
            y = i.positionType,
            S = i.pendingOrderType,
            f = "Sell" == y || S == _.BuyLimit || S == _.BuyStop;
            if (this.afterDataSet) this.easyRefreshFontSizeNeeded = !0,
            this.hardRefreshFontSizeNeeded = !0,
            c("current-price", a(f ? s.getAsk() : s.getBid(), n, ".", " ")),
            c("first-price", a(i.openPrice, n, ".", " ")),
            y && c("profit", a(o.calcProfit(i.id), 2, ".", " ")),
            c("investments", i.volume),
            c("symbol-name", i.symbolName);
            else {
                if (this.easyRefreshFontSizeNeeded = !1, f) {
                    var v = s.hasAskDigitCountChanges();
                    this.easyRefreshFontSizeNeeded = v,
                    s.hasAskChanges() && c("current-price", a(s.getAsk(), n, ".", " ")),
                    v && c("first-price", a(i.openPrice, n, ".", " "))
                } else {
                    var C = s.hasBidDigitCountChanges();
                    this.easyRefreshFontSizeNeeded = C,
                    s.hasBidChanges() && c("current-price", a(s.getBid(), n, ".", " ")),
                    C && c("first-price", a(i.openPrice, n, ".", " "))
                }
                if (y) {
                    var b = a(o.calcProfit(i.id), 2, ".", " "),
                    T = l.profit || {};
                    this.hardRefreshFontSizeNeeded = b.length !== T.length,
                    b !== T && c("profit", b)
                }
            }
        }
        this.easyRefreshFontSizeNeeded = !1,
        this.hardRefreshFontSizeNeeded = !1
    },
    i.setValue = function(t, i, s) {
        var n = t.getDomNode().querySelector("." + i);
        if (n) {
            var o = t._Parent,
            a = s;
            switch (i) {
            case "investments":
                return void o.hardCalculateFontSize(i, n, n.querySelector(".unit"), null, n.querySelector(".value"), 5, s);
            case "profit":
                var r = n.querySelector(".char"),
                l = n.querySelector(".currency"),
                h = e.parseFloat(s);
                h >= 0 ? (r.innerHTML = "", n.classList.remove("down")) : (r.innerHTML = "-", s = s.replace("-", ""), n.classList.add("down"));
                var d = n.querySelector(".value");
                return l.innerHTML = e.FontIcons.getIconByDepositCurrency(e),
                this._CellValues[i] = a,
                d.innerHTML = s,
                void o.hardCalculateFontSize(i, n, r, l, d, 0, s);
            case "first-price":
                o.easyCalculateFontSize(i, n.querySelector(".value"), s),
                n = n.querySelector(".value");
                break;
            case "current-price":
                o.easyCalculateFontSize(i, n, s),
                n = n.querySelector(".price");
                break;
            case "symbol-name":
                o.easyCalculateFontSize(i, n, s)
            }
            this._CellValues[i] = a,
            n.innerHTML = s
        } else console.log("No such field " + i)
    },
    i.easyCalculateFontSize = function(t, i, s) {
        if (this.easyRefreshFontSizeNeeded) {
            var n = e.getAppWidth(),
            o = 16,
            a = .7 * n * .32,
            r = a / s.length / .5625,
            l = i.style,
            h = o,
            d = 19.55,
            c = 5.1;
            if (r < o) {
                var u = (o - r) / 1.4523 + .5;
                h = r,
                d += u,
                c -= u
            }
            l.fontSize = h + "px",
            l.paddingTop = d + "px",
            "current-price" === t && (i.parentNode.children[1].style.paddingTop = c + "px")
        }
    },
    i.hardCalculateFontSize = function(t, i, s, n, o, a, r) {
        if (this.hardRefreshFontSizeNeeded) {
            var l = {
                offsetWidth: 0
            };
            s = s || l,
            n = n || l,
            o = o || l,
            r = r.replace(".", "");
            var h = e.getAppWidth(),
            d = 85,
            c = s.offsetWidth + n.offsetWidth + a + 8.62125 * (r.length + 1),
            u = .7 * h * .32;
            u < c ? i.style.fontSize = 85 - (105 - u / c * 100) + "%": i.style.fontSize = d + "%"
        }
    },
    i._onButtonTouchStart = function(e) {
        e.Event.stopPropagation()
    },
    i._onContextMenu = function(e) {
        this.showMenuByPositionId(e.sender.getId(), e.event)
    },
    i.showMenuByPositionId = function(t, i) {
        if (!e.investorAccount) {
            var s = this.getRowById(t),
            n = s.getCellValues(),
            o = n.action.getMenu();
            if (o) {
                var a = i.touches[0];
                o.show(a.pageX, a.pageY)
            }
        }
    },
    i._onSocketMessage = function(e) {
        e = e || {};
        var t = e.msgType;
        "positions" !== t && "allMT4OpenOrders" !== t && "pendingOrders" !== t && "optionsPositions" !== t || this.refreshData()
    },
    i._onGetQuote = function(e) {
        this.refreshRowBySymbol(e)
    },
    i._onChangePositions = function() {
        this.refreshData()
    },
    i._onWindowResize = function(e) {
        var t = document.getElementById("container"),
        i = t.currentStyle ? t.currentStyle.display: getComputedStyle(t, null).display;
        "none" !== i && (this.terminal.statusPanel.calculateContainerSize(), this.fillTable(this.getData()))
    },
    i._onTableButtonClicked = function(i) {
        i.stopPropagation();
        var s = this._Menu,
        n = e._menuMasterObject;
        n._AnyOpened && n.hideAll(),
        s.setMenuSource(this),
        n._AnyOpened = !0,
        e.patch_mobileKeyboardUp({
            width: screen.width,
            height: screen.height
        },
        function(i) {
            var n = e.getTerminal().statusPanel.container.scrollTop,
            o = this.getDomNode(),
            a = o.offsetLeft,
            r = t.getDomNode().offsetTop - n + o.offsetTop - 1;
            s.show(a, r),
            this.adjustMenuPosition(null, r)
        },
        this, null),
        this.Click.fire({
            Event: i,
            Sender: this
        })
    }
}),
define("mobile/mobileTableReport", ["control", "divTable", "dialogReport"],
function(e) {
    e.MobileTableReport = function(t) {
        this._Symbols = e.SymbolsData.getSelectedSymbols(),
        e.MobileTableReport.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.Socket.register(this),
        e.Resizer.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileTableReport, e.DivTable);
    var t = e.MobileTableReport.prototype;
    return t._render = function() {
        this._Template = e._Templates.MobileTableReport,
        this._RowTemplates = [e._Templates.MobileTableReportTradeRow, e._Templates.MobileTableReportDepositRow, e._Templates.MobileTableReportDateRow, e._Templates.MobileTableReportGroupRow],
        e.MobileTableReport.base._render.apply(this, arguments),
        e.getTerminal()._periodSelect.DropDown.add(e.Delegate(this, this._onReportInputSelectDropDown));
        var t = e.getTerminal()._periodSelect;
        if (t) {
            t.DropDown.add(e.Delegate(this, this._onReportInputSelectDropDown));
            var i = t._DomNode.querySelector(".InputSelectButton");
            i && (i.style.paddingRight = "0")
        }
        var s = this._ParentNode,
        n = this.touchendHandler.bind(this);
        s.addEventListener("touchend", n, !0),
        s.classList.add("subScrollingContainer"),
        s.previousElementSibling.addEventListener("touchend", n, !0)
    },
    t.touchendHandler = function(t) {
        e._menuMasterObject.hideAll()
    },
    t.downloadData = function() {
        var t = {
            startDate: this.dateRange.startDate,
            finishDate: this.dateRange.finishDate
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.getDeals(t.startDate, t.finishDate),
            e.requester.getDeposits(),
            e.requester.getOptionDeals(t.startDate, t.finishDate),
            e.requester.getExecutedOrders();
            break;
        case e.PlatformTypes.ptMT:
            e.requester.getMTDeals(t.startDate, t.finishDate),
            e.requester.getMTDeposits(t.startDate, t.finishDate),
            e.requester.getMTExecutedOrders(t.startDate, t.finishDate)
        }
    },
    t.refreshData = function(t) {
        if ("executedOrders" === t || "mt4ExecutedOrders" == t) {
            var i = 0,
            s = 0,
            n = 0,
            o = 0,
            a = 0,
            r = 0,
            l = 0,
            h = 0,
            d = 0;
            this.resetTable(),
            this._DomNode.parentNode.scrollTop = 0;
            var c = e.TraderData._Deals,
            u = e.TraderData._Deposits,
            g = e.TraderData.getOptionDeals(),
            p = {
                startDate: this.dateRange.startDate,
                finishDate: this.dateRange.finishDate
            },
            m = [];
            if (c.length > 0) for (var _ = 0; _ < c.length; _++) {
                var y = c[_],
                S = parseInt(y.closeDate);
                S >= p.startDate && S <= p.finishDate && (m.push({
                    templateIndex: 0,
                    rowId: y.id,
                    DateForSort: parseInt(y.closeDate),
                    cellValues: {
                        image: this.getDealIconBlock(y.operationType, "deal"),
                        SymbolName: this.getSymbolBlock(y.symbolName, y.operationType, 1 * y.volume),
                        Open: this.getOpenBlock(y.openDate, y.openPrice, y.symbolName),
                        Close: this.getCloseBlock(y.closeDate, y.closePrice, y.symbolName, 1 * y.profit),
                        CloseDate: this.getCloseDateBlock(y.closeDate)
                    }
                }), i += 1 * y.profit, 1 * y.profit > 0 ? s += 1 * y.profit: 1 * y.profit < 0 && (n += 1 * y.profit), r = i, r > d && (d = r), l = d - r, l > h && (h = l))
            }
            if (u.length > 0) for (var f = 0; f < u.length; f++) {
                var v = u[f],
                C = new Date(parseInt(v.operationDate));
                C >= p.startDate && C <= p.finishDate && m.push({
                    templateIndex: 1,
                    rowId: "deposit" + f,
                    DateForSort: parseInt(v.operationDate),
                    cellValues: {
                        Operation: this.getOperationInfo(v.operationDate),
                        Comment: v.comment,
                        Profit: this.getProfit(v.equity, !0),
                        CloseDate: this.getCloseDateBlock(v.operationDate)
                    }
                })
            }
            if (g.length > 0) for (var b = 0; b < g.length; b++) {
                var T = g[b],
                P = parseInt(T.closeDate);
                P >= p.startDate && P <= p.finishDate && (m.push({
                    templateIndex: 0,
                    rowId: T.id + "_" + b,
                    DateForSort: parseInt(T.closeDate),
                    cellValues: {
                        image: this.getDealIconBlock(T.direction, "option"),
                        SymbolName: this.getSymbolBlock(T.symbolName, this.getOptionType(1 * (T.optionType || -1)), 1 * T.investmentSum, !0),
                        Open: this.getOpenBlock(T.openDate, T.openPrice, T.symbolName),
                        Close: this.getCloseBlock(T.closeDate, T.closePrice, T.symbolName, 1 * T.profit),
                        CloseDate: this.getCloseDateBlock(T.closeDate)
                    }
                }), i += 1 * T.profit, 1 * T.profit > 0 ? s += 1 * T.profit: 1 * T.profit < 0 && (n += 1 * T.profit), r = i, r > d && (d = r), l = d - r, l > h && (h = l))
            }
            m.sort(function(e, t) {
                var i = new Date(e.DateForSort),
                s = new Date(t.DateForSort),
                n = 0;
                return i < s ? n = -1 : i > s && (n = 1),
                delete i,
                delete s,
                n
            }),
            this._rowsCount = m.length;
            var p = [];
            if (m.length > 0) {
                for (var D, I = 0,
                w = 0; w < m.length; w++) if (0 == w || D !== m[w].cellValues.CloseDate) {
                    D = m[w].cellValues.CloseDate;
                    var M = document.createElement("div");
                    M.className = "WTMobileTableReportDateRow",
                    M.id = "dateRow" + I,
                    M.innerHTML = '<div class="image"><div class="Arrow">' + e.FontIcons.m_ArrowDown + '</div></div><div class="Date">' + D + "</div>",
                    this._DomNode.appendChild(M),
                    M = document.createElement("div"),
                    M.className = "WTMobileTableReportForHideRow",
                    M.id = "hideRow" + I,
                    this._DomNode.appendChild(M);
                    var O = this._DomNode.querySelector("#dateRow" + I);
                    e.addEvent(O, "click", this._onReportTableDateClickRow.bind(this), !0),
                    I++,
                    p.push(D)
                }
                for (var w = 0; w < p.length; w++) {
                    var L = m.filter(function(e) {
                        return e.cellValues.CloseDate === p[w]
                    }),
                    k = this._DomNode.querySelector("#hideRow" + w);
                    this.setData(L, k, !0);
                    var B = window.getComputedStyle(k.childNodes[0]),
                    N = parseInt(B.getPropertyValue("height"));
                    k.style.height = N * k.childNodes.length + "px"
                }
                o = 0 == n ? "": s / (n * -1),
                a = i / (_ + 0),
                this.totalPackage = {
                    profit: i,
                    overallProfit: s,
                    overallLoss: n,
                    profitFactor: o,
                    operationExpectation: a,
                    maxDD: h
                },
                this.attachTotalPanel(),
                this.modifyFontSize(),
                e.getTerminal().recalcTableReportGeometry(),
                e.getTerminal().recalcSwiperDimensions()
            }
            e.getTerminal().downloadBtn.setEnabled(!0)
        }
    },
    t.modifyFontSize = function() {
        var t, i, s = this.getRows();
        if (e.isPortrait()) {
            var n, o;
            for (var a in s) if (s.hasOwnProperty(a) && (t = s[a], i = t.getDomNode(), !t.getCellValues().Operation)) {
                var r = i.querySelector(".SymbolName .Name");
                r.innerHTML.length > 9 && r.classList.add("small"),
                n = i.querySelector(".Open .OpenPrice"),
                o = i.querySelector(".Close .OpenPrice");
                var l = n.innerHTML.replace(".", "").length - 8;
                l > 0 && (o.style.fontSize = n.style.fontSize = 15 - 2 * l + "px", o.style.paddingTop = n.style.paddingTop = l / 2 + "px")
            }
        } else for (var a in s) s.hasOwnProperty(a) && (t = s[a], i = t.getDomNode(), t.getCellValues().Operation || (i.querySelector(".SymbolName .Name").classList.remove("small"), n = i.querySelector(".Open .OpenPrice"), o = i.querySelector(".Close .OpenPrice"), o.style.fontSize = n.style.fontSize = "", o.style.paddingTop = n.style.paddingTop = ""))
    },
    t.getDealIconBlock = function(t, i) {
        var s, n;
        switch (i) {
        case "deal":
            switch (t) {
            case "Buy":
                n = e.FontIcons.BuyLine,
                s = "buy";
                break;
            case "Sell":
                n = e.FontIcons.SellLine,
                s = "sell"
            }
            break;
        case "option":
            switch (parseInt(t)) {
            case e.OptionPositionTypes.highClassic:
            case e.OptionPositionTypes.highExpress:
                n = e.FontIcons.BuyLine,
                s = "buy";
                break;
            case e.OptionPositionTypes.lowClassic:
            case e.OptionPositionTypes.lowExpress:
                n = e.FontIcons.SellLine,
                s = "sell";
                break;
            case e.OptionPositionTypes.top:
                n = e.FontIcons.TopOneTouchLine,
                s = "buy";
                break;
            case e.OptionPositionTypes.bottom:
                n = e.FontIcons.BottomOneTouchLine,
                s = "sell";
                break;
            case e.OptionPositionTypes.outside:
                n = e.FontIcons.OutsideRangeLine,
                s = "sell";
                break;
            case e.OptionPositionTypes.inside:
                n = e.FontIcons.InsideRangeLine,
                s = "buy"
            }
        }
        var o = '<div class="' + (s || "sell") + '">' + (n || "") + "</div>";
        return o
    },
    t.getOptionType = function(t) {
        var i = Object.keys(e.OptionTypeAliases);
        switch (t) {
        case e.OptionSettingsType.express:
            return i[0] || "Express";
        case e.OptionSettingsType.classic:
            return i[1] || "Classic";
        case e.OptionSettingsType.oneTouch:
            return i[2] || "OneTouch";
        case e.OptionSettingsType.range:
            return i[3] || "Range";
        default:
            return ""
        }
    },
    t.getSymbolBlock = function(t, i, s, n) {
        var o = n ? e.TraderData.getGroup().depositCurrency: e.LangManager.getStringByKey("cOFLot") || "lot",
        a = '<div class="Name">' + t + '</div><br><div class="Type">' + i + '</div><br><div class="VolumePostfix">' + o + " " + e.numberFormat(1 * s, n ? 0 : 2, ".", " ") + "</div>";
        return a
    },
    t.getProfit = function(t, i) {
        var s = "#FF311B",
        n = "-";
        null != t && t >= 0 && (s = "#20B001", n = "");
        var o = '<div class="ProfitValue" style="color: ' + s + '; display: inline-block"><div class="sign">' + n + '</div> <div class="icon">' + e.FontIcons.getIconByDepositCurrency(e) + '</div> <div class="value">' + e.numberFormat(Math.abs(t), i ? 0 : 2, ".", " ") + "</div> </div>";
        return o
    },
    t.getOpenBlock = function(t, i, s, n) {
        var o = e.UtipFunctions.getUTCDate(parseInt(t)).toLocaleFormat("%H:%M"),
        a = e.UtipFunctions.historyNumberFormat(i, s, "."),
        r = '<div class="OpenPrice">' + a + '</div><br><div class="OpenDate">' + o + "</div>";
        return r
    },
    t.getCloseBlock = function(t, i, s, n) {
        var o = e.UtipFunctions.getUTCDate(parseInt(t)).toLocaleFormat("%H:%M"),
        a = e.UtipFunctions.historyNumberFormat(i, s, "."),
        r = '<div class="OpenPrice">' + a + '</div><br><div class="OpenDate">' + o + "</div><br>" + this.getProfit(n);
        return r
    },
    t.getCloseDateBlock = function(t) {
        return e.UtipFunctions.getUTCDate(parseInt(t)).toLocaleFormat("%d %n %Y")
    },
    t.getOperationInfo = function(t) {
        var i = e.UtipFunctions.getUTCDate(parseInt(t)).toLocaleFormat("%d.%m.%y"),
        s = '<div class="Type">Deposit</div><br><div class="Date">' + i + "</div>";
        return s
    },
    t.attachTotalPanel = function() {
        this.totalBlock || (this.totalBlock = e.htmlToDOM(e._Templates.ReportTotals)),
        this.drawTotalLabels();
        var t = this.totalBlock.querySelector(".ResultRow .Value"),
        i = this.totalBlock.querySelector(".OverallProfitValue"),
        s = this.totalBlock.querySelector(".OverallLossValue"),
        n = this.totalBlock.querySelector(".ProfitFactorValue"),
        o = this.totalBlock.querySelector(".OperationExpectationValue"),
        a = this.totalBlock.querySelector(".MaxDrawdownValue");
        t.innerHTML = e.numberFormat(this.totalPackage.profit, 2, ".", ""),
        t.style.color = this.totalPackage.profit < 0 ? "#FF311B": "#20B001",
        i.innerHTML = e.numberFormat(this.totalPackage.overallProfit, 2, ".", ""),
        i.style.color = this.totalPackage.overallProfit < 0 ? "#FF311B": "black",
        s.innerHTML = e.numberFormat(this.totalPackage.overallLoss, 2, ".", ""),
        s.style.color = this.totalPackage.overallLoss < 0 ? "#FF311B": "black",
        n.innerHTML = e.numberFormat(this.totalPackage.profitFactor, 2, ".", ""),
        n.style.color = this.totalPackage.profitFactor < 0 ? "#FF311B": "black",
        o.innerHTML = e.numberFormat(this.totalPackage.operationExpectation, 2, ".", ""),
        o.style.color = this.totalPackage.operationExpectation < 0 ? "#FF311B": "black",
        a.innerHTML = e.numberFormat(this.totalPackage.maxDD, 2, ".", ""),
        a.style.color = this.totalPackage.maxDD < 0 ? "#FF311B": "black",
        this._ParentNode.appendChild(this.totalBlock)
    },
    t.drawTotalLabels = function() {
        if (this.totalBlock) {
            var t = this.totalBlock.querySelector(".ResultRow .Label"),
            i = this.totalBlock.querySelector(".ResultCaption"),
            s = this.totalBlock.querySelector(".OverallProfitLabel"),
            n = this.totalBlock.querySelector(".OverallLossLabel"),
            o = this.totalBlock.querySelector(".ProfitFactorLabel"),
            a = this.totalBlock.querySelector(".OperationExpectationLabel"),
            r = this.totalBlock.querySelector(".MaxDrawdownLabel");
            t.innerHTML = e.LangManager.getStringByKey("cWCTTradePositionsFormProfitByPosition") || "Profit",
            i.innerHTML = e.LangManager.getStringByKey("cWCTTradePositionsFormResult") || "Result",
            s.innerHTML = e.LangManager.getStringByKey("cRMWholeProfit") || "Overall profit",
            n.innerHTML = e.LangManager.getStringByKey("cRMWholeLoss") || "Overall loss",
            o.innerHTML = e.LangManager.getStringByKey("cRMProfitFactor") || "Profit factor",
            a.innerHTML = e.LangManager.getStringByKey("cRMExpectation") || "Operation expectation",
            r.innerHTML = e.LangManager.getStringByKey("cRMMaxDrawdown") || "Max drawdown"
        }
    },
    t._onReportInputSelectDropDown = function(e) {
        var t = e._inputNode.getBoundingClientRect();
        e._inputNode._offsetHeight = t.height * -1
    },
    t._onReportTableDateClickRow = function(e) {
        for (var t, i, s = 0; s < this._DomNode.childNodes.length; s += 2) e.currentTarget.id === this._DomNode.childNodes[s].id && (t = this._DomNode.childNodes[s], i = this._DomNode.childNodes[s + 1]);
        if (i && t) {
            var n = t.querySelector(".Arrow");
            n && n.classList && n.classList.toggle("Arrow-rotated"),
            i && i.classList && i.classList.toggle("hided"),
            this._rowsCount > 50 && ("none" !== i.style.display ? i.style.display = "none": i.style.display = "block")
        }
    },
    t.setLabels = function() {
        var t = e.LangManager.getStringByKey("cMFReportContentLabel") || "To view the report, please, download the data",
        i = this._DomNode.parentNode.querySelector(".ReportContentLabel") || document.createElement("div");
        i.className = "ReportContentLabel",
        i.innerHTML = t,
        this._DomNode.parentNode.appendChild(i);
        var s = e.LangManager.getStringByKey("cMFReport") || "Report",
        n = this._DomNode.parentNode.parentNode.querySelector(".HeadPanel").querySelector(".ReportLabel") || document.createElement("div");
        n.className = "ReportLabel",
        n.innerHTML = s,
        this._DomNode.parentNode.parentNode.querySelector(".HeadPanel").appendChild(n)
    },
    t._onChangeLang = function() {
        this.setLabels(),
        this.refreshData("executedOrders"),
        this.drawTotalLabels()
    },
    t.getDatesFromCombobox = function(t) {
        var i = 0,
        s = e.SymbolsData.getLastChangedTime() + 6e4,
        n = e.UtipFunctions.getUTCDate(e.SymbolsData.getLastChangedTime()),
        t = e.getTerminal()._periodSelect.getSelectedOption();
        switch (t) {
        case e.DialogReport.perionds.Today:
            n.setHours(0),
            n.setMinutes(0),
            n.setSeconds(0),
            i = Date.parse(n.toString());
            break;
        case e.DialogReport.perionds.LastWeek:
            i = Date.parse(n.toString()) - 6048e5;
            break;
        case e.DialogReport.perionds.LastMonth:
            n.setMonth(n.getMonth() - 1),
            i = Date.parse(n.toString());
            break;
        case e.DialogReport.perionds.Last3Months:
            n.setMonth(n.getMonth() - 3),
            i = Date.parse(n.toString());
            break;
        case e.DialogReport.perionds.AllOperations:
            i = 0
        }
        delete n,
        this.dateRange = {
            startDate: i,
            finishDate: s
        }
    },
    t._onSocketMessage = function(e) {
        if (e) {
            var t = e.msgType;
            if ("success" == e.msgResult.toLowerCase()) switch (t) {
            case "deposits":
            case "executedOrders":
            case "deals":
            case "mt4Deals":
            case "mt4Deposits":
            case "mt4ExecutedOrders":
                this.refreshData(t)
            }
        }
    },
    t._onWindowResize = function(t) {
        e.getTerminal().recalcTableReportGeometry(),
        e.getTerminal().recalcSwiperDimensions(),
        this.modifyFontSize()
    },
    t = null,
    e
}),
define("dialogAccountInfo", ["dialog", "authorization", "traderData"],
function(e) {
    e.DialogAccountInfo = function() {
        e.DialogAccountInfo.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogAccountInfo, e.Dialog);
    var t = e.DialogAccountInfo.prototype;
    return t._onClosed = function() {
        delete e._accountInfoDialog
    },
    t.setTitle = function() {
        e.DialogAccountInfo.base.setTitle.apply(this, arguments),
        this._titleNode && (this._titleNode.innerHTML = this._Title + " - " + e.TraderData._TraderInfo.id)
    },
    t._render = function() {
        this._Width = 370,
        this._Title = "Account information",
        this._Key = "cCIFCaption",
        this._ImageList = e.MainImageList,
        this._ImageListRow = 1,
        this._ImageListCol = 16,
        this._Class = "dialogAccountInfo",
        this._Content = e.htmlToDOM(e._Templates.DialogAccountInfoContent),
        this._closeBtn = new e.Button({
            ParentNode: this._Content.querySelector(".DFooterControls"),
            Class: "DButton",
            Width: 75,
            Text: "Close",
            Key: "cCDClose",
            Click: e.Delegate(this, this.hide)
        }),
        this.refreshData(),
        this.displayData(),
        e.DialogAccountInfo.base._render.apply(this, arguments)
    },
    t.refreshData = function() {
        var t = e.TraderData._TraderInfo;
        if (this._Data = {
            Trade: {
                Currency: {
                    value: e.TraderData._TraderGroup.depositCurrency,
                    label: e.LangManager.getStringByKey("cWCTAccountListFormCurrencyOfDeposit") || "Currency"
                },
                Leverage: {
                    value: "1:" + t.leverage,
                    label: e.LangManager.getStringByKey("cNCFPladge") || "Leverage"
                },
                "Stop-out": {
                    value: t.stopout,
                    label: e.LangManager.getStringByKey("cNCBFStopOut") || "Stop-out"
                }
            }
        },
        !e.investorAccount) {
            var i = {
                Name: {
                    value: (t.surname || "") + (" " + t.name || "") + " " + (t.patronymic || ""),
                    label: e.LangManager.getStringByKey("cWCTAccountListFormFIO") || "Name"
                },
                "E-mail": {
                    value: t.email,
                    label: e.LangManager.getStringByKey("cWCTAccountListFormEmail") || "E-mail"
                },
                Phone: {
                    value: t.phoneNumber,
                    label: e.LangManager.getStringByKey("cWCTAccountListFormTelephone") || "Phone"
                },
                "Registration date": {
                    value: t.registrationDate.split(" ")[0].replace(/\//g, "."),
                    label: e.LangManager.getStringByKey("cCIFDateRegistration") || "Registration date"
                }
            };
            this._Data.Personal = i
        }
    },
    t.displayData = function() {
        var t = this._Data.Personal;
        if (t) {
            if (this._personalInfoNode = this._personalInfoNode || this._Content.querySelector(".DPersonalInfoControls"), this._personalInfoNode) {
                this._personalInfoNode.style.display = "";
                var i = this._personalInfoNode.querySelector(".WTHeadLabel");
                i && (i.innerHTML = e.LangManager.getStringByKey("cCIFPersonalInfo") + ":" || "Personal Information:"),
                this._personalInfoBlock = this._personalInfoBlock || this._personalInfoNode.querySelector(".DInfoBlock");
                var s;
                for (s in t) this._personalInfoBlock.appendChild(e.htmlToDOM('<div class="DInfoRow"><div class="DInfoLabel">' + (t[s].label + ":") + '</div><div class="DInfoVal">' + (t[s].value || "") + "</div></div>"))
            }
        } else this._personalInfoNode && (this._personalInfoNode.style.display = "none", this._personalInfoNode.innerHTML = "");
        if (t = this._Data.Trade) {
            if (this._tradeInfoNode = this._tradeInfoNode || this._Content.querySelector(".DTradeInfoControls"), this._tradeInfoNode) {
                this._tradeInfoNode.style.display = "";
                var i = this._tradeInfoNode.querySelector(".WTHeadLabel");
                i && (i.innerHTML = e.LangManager.getStringByKey("cCIFTradeInfo") + ":" || "Trade Information:"),
                this._tradeInfoBlock = this._tradeInfoBlock || this._tradeInfoNode.querySelector(".DInfoBlock");
                var s;
                for (s in t) this._tradeInfoBlock.appendChild(e.htmlToDOM('<div class="DInfoRow"><div class="DInfoLabel">' + (t[s].label + ":") + '</div><div class="DInfoVal">' + (t[s].value || "") + "</div></div>"))
            }
        } else this._tradeInfoNode && (this._tradeInfoNode.innerHTML = "", this._tradeInfoNode.style.display = "none")
    },
    t.show = function() {
        if (e.getTerminal().useOnlyOptions ? (this._tradeInfoBlock.childNodes[1].style.display = "none", this._tradeInfoBlock.childNodes[2].style.display = "none") : (this._tradeInfoBlock.childNodes[1].style.display = "", this._tradeInfoBlock.childNodes[2].style.display = ""), e.investorAccount) {
            var t = this._DomNode.querySelector(".DPersonalInfoControls");
            if (t.parentNode.removeChild(t), !e.Browser.IsMobile) {
                var i = this._DomNode.querySelector(".WTHorisontalSeparator");
                i.parentNode.removeChild(i)
            }
        }
        e.DialogAccountInfo.base.show.apply(this, arguments)
    },
    e.getAccountInfoDialog = function() {
        return e._accountInfoDialog || (e._accountInfoDialog = new e.DialogAccountInfo),
        e._accountInfoDialog
    },
    t = null,
    e
}),
define("mobile/mobileDialogAccountInfo", ["dialog", "dialogAccountInfo"],
function(e) {
    e.MobileDialogAccountInfo = function(t) {
        e.MobileDialogAccountInfo.base.constructor.apply(this, arguments),
        e.Resizer.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileDialogAccountInfo, e.DialogAccountInfo);
    var t = e.MobileDialogAccountInfo.prototype;
    return t._render = function() {
        this._Width = window.innerWidth,
        this._Height = Math.max(window.innerHeight, 450),
        this._Title = "Account information",
        this._Key = "cCIFCaption",
        this._Top = 0,
        this._Left = 0,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.DialogAccountInfoContent),
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "rgb(167, 149, 133)",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this.hide)
        }),
        e.addEvent(this._Content.querySelector(".HeadPanel"), "click", this.hide.bind(this)),
        this._onWindowResize(),
        this.refreshData(),
        this.displayData(),
        e.DialogAccountInfo.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogAccountInfo"),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this.onDialogTouchMove.bind(this))
    },
    t.displayData = function() {
        var t = this._Data.Personal;
        if (t) {
            if (this._personalInfoNode = this._personalInfoNode || this._Content.querySelector(".DPersonalInfoControls"), this._personalInfoNode) {
                this._personalInfoNode.style.display = "";
                var i = this._personalInfoNode.querySelector(".WTHeadLabel");
                i && (i.innerHTML = e.LangManager.getStringByKey("cCIFPersonalInfo") || "Personal Information:"),
                this._personalInfoBlock = this._personalInfoBlock || this._personalInfoNode.querySelector(".DInfoBlock");
                var s;
                for (s in t) this._personalInfoBlock.appendChild(e.htmlToDOM('<div class="DInfoRow"><div class="InfoRowLabel">' + (t[s].label + ":") + '</div><div class="InfoRowValue">' + (t[s].value || "") + "</div></div>"))
            }
        } else this._personalInfoNode && (this._personalInfoNode.style.display = "none", this._personalInfoNode.innerHTML = "");
        if (t = this._Data.Trade) {
            if (this._tradeInfoNode = this._tradeInfoNode || this._Content.querySelector(".DTradeInfoControls"), this._tradeInfoNode) {
                this._tradeInfoNode.style.display = "";
                var i = this._tradeInfoNode.querySelector(".WTHeadLabel");
                i && (i.innerHTML = e.LangManager.getStringByKey("cCIFTradeInfo") || "Trade Information:"),
                this._tradeInfoBlock = this._tradeInfoBlock || this._tradeInfoNode.querySelector(".DInfoBlock");
                var s;
                for (s in t) this._tradeInfoBlock.appendChild(e.htmlToDOM('<div class="DInfoRow"><div class="InfoRowLabel">' + (t[s].label + ":") + '</div><div class="InfoRowValue">' + (t[s].value || "") + "</div></div>"))
            }
        } else this._tradeInfoNode && (this._tradeInfoNode.innerHTML = "", this._tradeInfoNode.style.display = "none")
    },
    t.setTitle = function() {
        this._titleNode = this._Content.querySelector(".dialogLabel"),
        this._titleNode.innerHTML = this._Title + " - " + e.TraderData._TraderInfo.id
    },
    t._onWindowResize = function(t) {
        this.setHeight(e.getAppHeight())
    },
    t.setWidth = function() {},
    t = null,
    e.getMobileAccountInfoDialog = function() {
        return e._accountInfoDialog || (e._accountInfoDialog = new e.MobileDialogAccountInfo),
        e._accountInfoDialog
    },
    e
}),
define("dialogAbout", ["dialog"],
function(e) {
    e.DialogAbout = function(t) {
        this._Data = null,
        e.DialogAbout.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.DialogAbout, e.Dialog);
    var t = e.DialogAbout.prototype;
    return t.dispose = function() {
        e._aboutDialog = null
    },
    t._onClosed = function(e) {
        this.dispose()
    },
    t._render = function() {
        this._Width = 380,
        this._Key = "cMFAbout",
        this._ImageList = e.MainImageList,
        this._ImageListRow = this._ImageListRow || 6,
        this._ImageListCol = this._ImageListCol || 15,
        this._Class = "DialogAbout",
        this._Content = e.htmlToDOM(e._Templates.DialogAboutContent);
        var t = this._Content.querySelector(".DVersionInfo");
        this.getBrokerSettings(),
        this.displayInfo(t),
        e.addEvent(this._Content, "contextmenu", this._onContextMenu),
        e.DialogAbout.base._render.apply(this, arguments),
        this.brokerSettings.CopyrightsSite || e.addCSSClass(this.getDomNode(), "no-copyrights-site")
    },
    t.getBrokerSettings = function() {
        this.brokerSettings = {},
        null == e.Config.BrokersSettings ? this.brokerSettings = {
            TerminalName: e.Browser.IsMobile ? "UTIP Mobile": "UTIP Trader",
            CompanyName: "UTIP Technologies Ltd.",
            CompanySite: "www.bzza.com",
            CompanyMail: "info@bzza.com",
            Copyrights: "&copy; 2006-2017, UTIP Technologies Ltd.",
            CopyrightsSite: "www.bzza.com"
        }: this.brokerSettings = {
            TerminalName: e.Config.BrokersSettings.TerminalName || "",
            CompanyName: e.Config.BrokersSettings.CompanyName || "",
            CompanySite: e.Config.BrokersSettings.CompanySite || "",
            CompanyMail: e.Config.BrokersSettings.CompanyMail || "",
            Copyrights: e.Config.BrokersSettings.Copyrights || "",
            CopyrightsSite: e.Config.BrokersSettings.CopyrightsSite || ""
        }
    },
    t.displayInfo = function(t) {
        if (t) {
            t.appendChild(e.htmlToDOM('<div><div class="mainHeader">' + this.brokerSettings.TerminalName + '</div><div class="version">Version ' + terminalVersion + '</div><div class="company">' + this.brokerSettings.CompanyName + '</div><div><a class="companySite">' + this.brokerSettings.CompanySite + '</a></div><div><a class="companySite" href="mailto://' + this.brokerSettings.CompanyMail + '">' + this.brokerSettings.CompanyMail + '</a></div><div class="copyright">' + this.brokerSettings.Copyrights + '</div><div class="copyrightLink"><a href="http://' + this.brokerSettings.CopyrightsSite + '" onClick="this.target=\'_blank\';">' + this.brokerSettings.CopyrightsSite + "</a></div></div>"));
            var i = "http://" + this.brokerSettings.CompanySite;
            e.Browser.IsTablet ? (t.querySelector(".companySite").addEventListener("click",
            function(e) {
                window.open(i, "_system"),
                this.classList.add("visited")
            }), t.querySelector(".copyrightLink").addEventListener("click",
            function(e) {
                this.classList.add("visited")
            })) : (t.querySelector(".companySite").addEventListener("click",
            function(e) {
                window.open(i)
            }), t.querySelector(".companySite").addEventListener("mouseover",
            function(e) {
                t.querySelector(".companySite").style.cursor = "pointer"
            }))
        }
    },
    t.show = function() {
        e.DialogAbout.base.show.apply(this, arguments),
        this.setAutoWidth()
    },
    t._onContextMenu = function(e) {
        e.stopPropagation()
    },
    t = null,
    e.getAboutDialog = function() {
        return e._aboutDialog || (e._aboutDialog = new e.DialogAbout),
        e._aboutDialog
    },
    e
}),
define("mobile/mobileDialogAbout", ["dialog", "dialogAbout"],
function(e) {
    e.MobileDialogAbout = function(t) {
        e.MobileDialogAbout.base.constructor.apply(this, arguments),
        e.Resizer.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileDialogAbout, e.DialogAbout);
    var t = e.MobileDialogAbout.prototype;
    return t._render = function() {
        this._Width = window.innerWidth,
        this._Height = window.innerHeight,
        this._Title = "About",
        this._Key = "cMFAbout",
        this._Top = 0,
        this._Left = 0,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.DialogAboutContent),
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "rgb(167, 149, 133)",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this.hide)
        }),
        e.addEvent(this._Content.querySelector(".HeadPanel"), "click", this.hide.bind(this)),
        this.getBrokerSettings(),
        this.displayInfo(),
        e.DialogAbout.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogAbout"),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this.onDialogTouchMove.bind(this))
    },
    t.dispose = function() {
        e.Resizer.unRegister(this),
        e.LangManager.unRegister(this),
        e.MobileDialogAbout.base.dispose.apply(this, [])
    },
    t.displayInfo = function(e) {
        var t = this._Content.querySelector(".Info");
        t.querySelector(".mainHeader").innerHTML = this.brokerSettings.TerminalName,
        t.querySelector(".version").innerHTML = "Version " + terminalVersion,
        t.querySelector(".company").innerHTML = this.brokerSettings.CompanyName,
        t.querySelector(".companySite").innerHTML = "<a>" + this.brokerSettings.CompanySite + "</a>",
        t.querySelector(".copyrightSite").innerHTML = '<a href="mailto:' + this.brokerSettings.CompanyMail + '">' + this.brokerSettings.CompanyMail + "</a>",
        this._Content.querySelector(".Copyright").innerHTML = this.brokerSettings.Copyrights;
        var i = "http://" + this.brokerSettings.CompanySite;
        t.querySelector(".companySite > a").addEventListener("click",
        function(e) {
            window.open(i, "_system"),
            this.classList.add("visited")
        }),
        t.querySelector(".copyrightSite > a").addEventListener("click",
        function(e) {
            this.classList.add("visited")
        })
    },
    t.show = function() {
        e.DialogAbout.base.show.apply(this, arguments),
        this.tuneInfo()
    },
    t.setTitle = function() {
        this._titleNode = this._Content.querySelector(".dialogLabel"),
        this._titleNode.innerHTML = e.LangManager.getStringByKey("cMFAbout") || "About"
    },
    t._onWindowResize = function(t) {
        this.setHeight(e.getAppHeight()),
        this.tuneInfo()
    },
    t._onChangeLang = function() {
        this.setTitle()
    },
    t.tuneInfo = function() {
        var e = this._Content,
        t = 30,
        i = e.querySelector(".Info"),
        s = e.querySelector(".Copyright"),
        n = i.clientHeight,
        o = window.innerHeight,
        a = e.querySelector(".HeadPanel").offsetHeight,
        r = s.clientHeight;
        if (n + a + r < o - t) {
            var l = o - n - a - r,
            h = l / 2;
            i.style.marginTop = h + "px",
            s.style.marginTop = l - h + "px"
        } else i.style.marginTop = "",
        s.style.marginTop = ""
    },
    t.setWidth = function() {},
    t = null,
    e.getMobileAboutDialog = function() {
        return e._aboutDialog || (e._aboutDialog = new e.MobileDialogAbout),
        e._aboutDialog
    },
    e
}),
define("mobile/mobileSettingsPage", ["control", "mobile/mobileDialogAccountInfo", "mobile/mobileDialogAbout"],
function(e) {
    e.MobileSettingsPage = function(t) {
        e.MobileSettingsPage.base.constructor.apply(this, arguments),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileSettingsPage, e.BaseControl);
    var t = e.MobileSettingsPage.prototype;
    return t._render = function() {
        this._Template = e._Templates.SettingsPageContent,
        e.MobileSettingsPage.base._render.apply(this, arguments),
        this.writeSettingsNames(),
        this._signInBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".ConnectRow"),
            ImageUrl: "res/img/mobileImg/buttons/arrow_right_brown.png",
            ImgWidth: "13px",
            ImgHeight: "20px",
            Class: "RightBtn",
            Click: e.Delegate(this, this._onSignInBtnClick)
        });
        var t = this._DomNode.querySelector(".OpenDemoRow");
        if (UtipConfig.BrokersSettings.isVisibleOpenDemo ? this._openDemoBtn = new e.Button({
            ParentNode: t,
            ImageUrl: "res/img/mobileImg/buttons/arrow_right_brown.png",
            ImgWidth: "13px",
            ImgHeight: "20px",
            Class: "RightBtn",
            Click: e.Delegate(this, this._onOpenDemoBtnClick)
        }) : e.addCSSClass(t.parentNode, "Disabled"), this._signOutBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".DisconnectRow"),
            ImageUrl: "res/img/mobileImg/buttons/arrow_right_brown.png",
            ImgWidth: "13px",
            ImgHeight: "20px",
            Class: "RightBtn",
            Click: e.Delegate(this, this._onSignOutBtnClick)
        }), this._accountInfoBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".AccountInfoRow"),
            ImageUrl: "res/img/mobileImg/buttons/arrow_right_brown.png",
            ImgWidth: "13px",
            ImgHeight: "20px",
            Class: "RightBtn",
            Click: e.Delegate(this, this._onAccountInfoBtnClick)
        }), this._aboutBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".AboutRow"),
            ImageUrl: "res/img/mobileImg/buttons/arrow_right_brown.png",
            ImgWidth: "13px",
            ImgHeight: "20px",
            Class: "RightBtn",
            Click: e.Delegate(this, this._onAboutBtnClick)
        }), this._changePasswoerBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".ChangePasswordRow"),
            ImageUrl: "res/img/mobileImg/buttons/arrow_right_brown.png",
            ImgWidth: "13px",
            ImgHeight: "20px",
            Class: "RightBtn",
            Click: e.Delegate(this, this._onChangePasswordBtnClick)
        }), this._changeLanguageBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".LanguageRow"),
            ImageUrl: "res/img/mobileImg/buttons/arrow_right_brown.png",
            ImgWidth: "13px",
            ImgHeight: "20px",
            Class: "RightBtn",
            Click: e.Delegate(this, this._changeLanguageBtnClick)
        }), this.bindClickHandlers(), this._changePasswoerBtn.investorModeAdiction = !0, e.investorAccount) {
            var i = this._DomNode.querySelector(".ChangePasswordRow");
            this._changePasswoerBtn.setVisible(!1),
            e.addCSSClass(i.parentNode, "Disabled")
        }
    },
    t.bindClickHandlers = function() {
        var t = this._DomNode.querySelector(".ConnectRow"),
        i = this._DomNode.querySelector(".OpenDemoRow"),
        s = this._DomNode.querySelector(".ChangePasswordRow"),
        n = this._DomNode.querySelector(".AccountInfoRow"),
        o = this._DomNode.querySelector(".AboutRow"),
        a = this._DomNode.querySelector(".LanguageRow"),
        r = this._DomNode.querySelector(".DisconnectRow");
        e.addEvent(t, "click", this._onSignInBtnClick, !0),
        e.addEvent(i, "click", this._onOpenDemoBtnClick, !0),
        e.addEvent(n, "click", this._onAccountInfoBtnClick, !0),
        e.addEvent(o, "click", this._onAboutBtnClick, !0),
        e.addEvent(s, "click", this._onChangePasswordBtnClick, !0),
        e.addEvent(a, "click", this._changeLanguageBtnClick, !0),
        e.addEvent(r, "click", this._onSignOutBtnClick, !0)
    },
    t.writeSettingsNames = function() {
        var t = this._DomNode.querySelector(".HeadPanel");
        t.innerHTML = e.LangManager.getStringByKey("cBTNSettings") || "Settings";
        var i = this._DomNode.querySelector(".ConnectLabel");
        i.innerHTML = e.LangManager.getStringByKey("cBTNConnect") || "Sign in";
        var s = this._DomNode.querySelector(".OpenDemoLabel");
        s.innerHTML = window.UtipConfig.BrokersSettings.OpenDemoAccountCaption[e.LangManager.getLang()] || e.LangManager.getStringByKey("cCFOpendemo") || "Open a demo account";
        var n = this._DomNode.querySelector(".ChangePasswordLabel");
        n.innerHTML = e.LangManager.getStringByKey("cMFEditPAssword") || "Change password";
        var o = this._DomNode.querySelector(".AccountInfoLabel");
        o.innerHTML = e.LangManager.getStringByKey("cWNDNInfo") || "Account information";
        var a = this._DomNode.querySelector(".LanguageLabel");
        a.innerHTML = "Language";
        var r = this._DomNode.querySelector(".AboutLabel");
        r.innerHTML = e.LangManager.getStringByKey("cMFAbout") || "About";
        var l = this._DomNode.querySelector(".DisconnectLabel");
        l.innerHTML = e.LangManager.getStringByKey("cBTNDisconnect") || "Sign out"
    },
    t._onSignInBtnClick = function() {
        e.getMobileSignInDialog().show()
    },
    t._onSignOutBtnClick = function() {
        e.getTerminal().signOut()
    },
    t._onChangePasswordBtnClick = function() {
        e.getMobileChangePassDialog().show(null, e.TraderData._TraderInfo.id, "")
    },
    t._changeLanguageBtnClick = function() {
        e.getMobileDialogChangeLang().show()
    },
    t._onAccountInfoBtnClick = function() {
        e.getMobileAccountInfoDialog().show()
    },
    t._onAboutBtnClick = function() {
        e.getMobileAboutDialog().show()
    },
    t._onOpenDemoBtnClick = function() {
        e.getMobileOpenDemoDialog().show()
    },
    t._onLanguageChanged = function() {
        var t = this._languageInput.getValue(),
        i = "en";
        switch (t) {
        case "Русский":
            i = "ru";
            break;
        case "English":
            i = "en";
            break;
        case "Français":
            i = "fr";
            break;
        case "العربية":
            i = "ar";
            break;
        case "Polski":
            i = "pl";
            break;
        case "ქართული":
            i = "gr";
            break;
        case "中文":
            i = "zh";
            break;
        case "Español":
            i = "es";
            break;
        case "فارسی":
            i = "fa";
            break;
        case "Deutsch":
            i = "de";
            break;
        case "한국어":
            i = "ko";
            break;
        default:
            i = "en"
        }
        e.LangManager.setLang(i),
        e._menuMasterObject.hideAll(),
        e.saveUserSettings()
    },
    t._onChangeLang = function() {
        this.writeSettingsNames()
    },
    t = null,
    e
}),
define("mobile/mobileMenuTimeFrame", ["menu", "menuTimeFrame"],
function(e) {
    e.MobileMenuTimeFrame = function() {
        e.MobileMenuTimeFrame.base.constructor.apply(this, arguments)
    },
    e.initClass(e.MobileMenuTimeFrame, e.TimeFrameMenu);
    var t = e.MobileMenuTimeFrame.prototype;
    return t._onTimeFrameItemClick = function(t) {
        var i = t.Item.getText(),
        s = e.getPeriodCodeByName(i);
        if (s) {
            var n = e.activeChart;
            n.setPeriod(e.allPeriods[s]);
            var o = n.getPeriod();
            e.activeChart.options.period = o,
            e.UserSettings.WindowsTemplates.period = o,
            e._menuMasterObject.hideAll()
        }
        var a = e.getTerminal();
        a.tuneChartOverlayButtons(i),
        a.timeFrameOverlayBtn.setText(i),
        a.saveSettings()
    },
    t.reRender = function() {
        this.unregisterItems(),
        e.MobileMenuTimeFrame.base.reRender.apply(this, arguments)
    },
    t = null,
    e.getMobileTimeFrameMenu = function() {
        return e._timeFrameMenu && delete e._timeFrameMenu,
        e._timeFrameMenu = new e.MobileMenuTimeFrame,
        e._timeFrameMenu
    },
    e
}),
define("mobile/mobileDialogIndicatorSettings", ["dialog", "dialogIndicatorSettings", "inputImage"],
function(e) {
    e.MobileDialogIndicatorSettings = function(t) {
        e.MobileDialogIndicatorSettings.base.constructor.apply(this, arguments),
        this._object = t.object,
        this._graphicArea = t.graphicArea,
        this._graphicWindows = t.graphicWindows,
        this._isNewIndicator = t.isNewIndicator,
        this.parameterHeight = 64,
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.Resizer.register(this)
    },
    e.initClass(e.MobileDialogIndicatorSettings, e.DialogIndicatorSettings);
    var t = e.MobileDialogIndicatorSettings.prototype;
    return t._onClosed = function() {
        this.removeFromDom(),
        delete e._mobileDialogIndicatorSettings
    },
    t._render = function() {
        e.MobileDialogIndicatorSettings.base._render.apply(this, arguments),
        this._Width = window.innerWidth,
        this._Height = Math.max(window.innerHeight, 200),
        this._Top = 0,
        this._Left = 0,
        this._Content = e.htmlToDOM(e._Templates.MobileDialogIndicatorSettingsContent),
        this.addCSSClass("mobileDialogIndicatorSettings"),
        this._DomNode.removeChild(this._DomNode.querySelector("div")),
        this._DomNode.appendChild(this._Content),
        this._Content.querySelector(".HeadPanel").addEventListener("touchmove", e.stopCustomAndNativeEvents, !0),
        this.writeLabel(),
        "ontouchmove" in window && e.addEvent(this._DomNode, "touchmove", this._onTouchMove.bind(this)),
        "ontouchstart" in window && e.addEvent(this._DomNode, "touchstart", this._onTouchStart.bind(this)),
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "#A79585",
                Size: 15
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this.hide)
        }),
        this._saveBtn = new e.Button({
            ParentNode: this._DomNode.querySelector(".Footer"),
            Class: "SaveBtn",
            Width: "",
            Key: this._isNewIndicator ? "cMFSave": "cCDModify",
            Text: this._isNewIndicator ? "Save": "Modify",
            Click: e.Delegate(this, this._onSaveIndicator)
        })
    },
    t.writeLabel = function() {
        var e = this._DomNode.querySelector(".dialogLabel");
        e.innerHTML = this._caption.replace("/", "/\r\n")
    },
    t.show = function() {
        e.DialogIndicatorSettings.base.show.apply(this, arguments),
        jscolor.bind(),
        this.addParameters()
    },
    t._onTouchStart = function(e) {
        this.startTouchY = e.targetTouches[0].screenY
    },
    t._onTouchMove = function(t) {
        e._menuMasterObject.hideAll();
        var i = t.targetTouches[0].screenY,
        s = i - this.startTouchY,
        n = this._DomNode.querySelector(".WTDialogContent");
        t.preventDefault(),
        n.scrollTop = n.scrollTop - s,
        this.startTouchY = t.targetTouches[0].screenY
    },
    t.addParameters = function() {
        var t = this._object.getParameters().length - 1; (this._object.getMAUsing() || this._object instanceof e.PivotPoints || this._object instanceof e.ZigZag) && t--;
        var i = (this.getDomNode().querySelector(".HeadPanel").offsetHeight, this._DomNode.querySelector(".WTDialogContent"));
        if (this._installParameterIndicator(i, t), t = this._addComboBoxWithSettings(i, t), t = this._installAllPossibleSource(i, t), 0 == t) return void this._onSaveIndicator();
        var s = this._DomNode.querySelector("div .WTDialogContent .SourceParent");
        s.removeChild(s.querySelector("div:first-child"));
        var n = s.querySelector("div:first-child");
        if (n) {
            var o = n.querySelector("div:first-child");
            o && (o.innerHTML = e.activeChart.charts[0]._symbolName)
        }
    },
    t.setWidth = function() {},
    t.setHeight = function() {},
    t._onWindowResize = function(e) {
        var t = window.innerHeight,
        i = this.getDomNode(),
        s = i.querySelector(".WTDialogContent"),
        n = i.querySelector(".Footer"),
        o = 53,
        a = 71,
        r = t - a;
        s.style.height = r - o + "px",
        n.style.top = r + "px"
    },
    t = null,
    e.getMobileDialogIndicatorSettings = function(t, i, s, n, o) {
        return e._mobileDialogIndicatorSettings || (e._mobileDialogIndicatorSettings = new e.MobileDialogIndicatorSettings({
            object: t,
            caption: i,
            graphicArea: s,
            graphicWindows: n,
            isNewIndicator: o
        })),
        e._mobileDialogIndicatorSettings
    },
    e
}),
define("mobile/mobileMenuIndicators", ["menu", "menuIndicators", "mobile/mobileDialogIndicatorSettings"],
function(e) {
    e.MobileMenuIndicators = function() {
        e.MobileMenuIndicators.base.constructor.apply(this, arguments)
    },
    e.initClass(e.MobileMenuIndicators, e.IndicatorsMenu);
    var t = e.MobileMenuIndicators.prototype;
    return t._onIndicatorsItemClick = function(t) {
        var i = t.Item;
        if (e.activeChart) {
            var s = e.activeChart,
            n = i.getData(),
            o = null,
            a = new n(o);
            a.getDrawInExistsGraphicArea() && (o = s.graphicAreas[0]);
            var r = e.getMobileDialogIndicatorSettings(a, i.getText(), o, s, !0);
            r.show()
        }
        e._menuMasterObject.hideAll()
    },
    t = null,
    e.getMobileIndicatorsMenu = function() {
        return e._indicatorsMenu || (e._indicatorsMenu = new e.MobileMenuIndicators),
        e._indicatorsMenu
    },
    e
}),
define("mobile/mobileMenuChartStyle", ["menu", "menuChartStyle"],
function(e) {
    e.MobileMenuChartStyle = function() {
        e.MobileMenuChartStyle.base.constructor.apply(this, arguments)
    },
    e.initClass(e.MobileMenuChartStyle, e.ChartStyleMenu);
    var t = e.MobileMenuChartStyle.prototype;
    return t._render = function() {
        this._CheckedType = "Checked",
        this.ItemClick = e.Delegate(this, this._onStyleItemClick),
        this.BeforeOpen = e.Delegate(this, this._onStyleMenuOpen),
        this._Items = [{
            Id: "candlesticks",
            Data: e.barStyles.jCandle,
            Class: "CandleSticks",
            Height: 48,
            Width: 88
        },
        {
            Id: "bar_chart",
            Data: e.barStyles.gBar,
            Class: "BarChart",
            Height: 48,
            Width: 88
        },
        {
            Id: "chart_line",
            Data: e.barStyles.line,
            Class: "ChartLine",
            Height: 48,
            Width: 88
        }],
        e.ChartStyleMenu.base._render.apply(this, arguments),
        e.addCSSClass(this.getDomNode(), "menuChartStyle")
    },
    t.show = function(t, i) {
        t -= 31,
        i -= 42,
        e.ChartStyleMenu.base.show.apply(this, arguments)
    },
    t = null,
    e.getMobileMenuChartStyle = function() {
        return e._chartStyleMenu && delete e._chartStyleMenu,
        e._chartStyleMenu = new e.MobileMenuChartStyle,
        e._chartStyleMenu
    },
    e
}),
define("mobile/mobileTradePanel", ["button", "inputSelectNumber", "inputNumber", "symbolsData", "optionsSettingsData"],
function(e) {
    function t() {
        var t = e.TraderData.getTraderGroup().depositCurrency.toLowerCase();
        switch (t) {
        case "usd":
            return e.FontIcons.Usd;
        case "eur":
            return e.FontIcons.Eur;
        case "gbp":
            return e.FontIcons.Gbp;
        case "rub":
            return e.FontIcons.Rub;
        case "jpy":
            return e.FontIcons.Jpy;
        case "chf":
            return e.FontIcons.Chf
        }
    }
    function i(t) {
        var i = e.getTerminal(),
        s = t.data,
        n = e.PANEL_TYPES_ENUM,
        o = this._panelType,
        a = this._waitPosition;
        switch (t.socketMessage) {
        case "positions":
            if (o === n.newOrder && a) {
                this.block(!1);
                var r = t.data.reduce(function(e, t) {
                    return parseInt(e.openDate) > parseInt(t.openDate) ? e: t
                });
                this.showConfirmDialog(r),
                this._waitPosition = !1
            }
            break;
        case "optionsPositions":
            console.log("a7a2_11");
            if (o < n.newOrder && a) {
                this.unblockOptionsButtons();
                var r = t.data.reduce(function(e, t) {
                    return parseInt(e.openDate) > parseInt(t.openDate) ? e: t
                });
                this.showConfirmDialog(r),
                this._waitPosition = !1
            }
            break;
        case "changeOptionSettings":
        case "deleteOptionSettings":
            if (o !== n.newOrder || i.useOnlyOptions) {
                var l = e._tradePanelMenu,
                h = this._currentOptionSettings;
                e.activeChart.getMainSymbolName() === s.symbolName && i.isChartPage() && l.getIsOpen() && "changeOptionSettings" !== t.socketMessage && l.hide();
                var d = l.hasItems();
                if (!d) {
                    var c = i.getHeaderPanel();
                    c.blockTradePanelButtonControl(!0),
                    l.hide()
                }
                if (d) {
                    if (h.getID() === parseInt(s.id)) {
                        var u = s.isUseSetting;
                        if (e.valueIsEmpty(u) || "0" === u) {
                            l.hide();
                            var g, p = e.activeChart.getMainSymbolName(),
                            m = e.SymbolsData.getSymbols()[p],
                            _ = e.UtipFunctions.availableToolTypesBySymbol(m),
                            y = _.binary && _.binary.length > 0,
                            S = e.getTerminal().useOnlyOptions;
                            y ? (g = _.binary[0], e._tradePanelMenu.showTradePanel(g)) : S ? this.dispose() : e._tradePanelMenu.showTradePanel(e.PANEL_TYPES_ENUM.newOrder)
                        } else this.updatePeriodSelect()
                    }
                } else this.dispose()
            }
            break;
        case "openOptionPosition":
            o !== n.newOrder && this.checkTradeAllowed()
        }
        t.msgResult && "success" !== t.msgResult.toLowerCase() && (this._waitPosition = !1)
    }
    function s(t, i) {
        if (e.valueIsEmpty(t) || !(t instanceof e.InputSelectNumber)) throw new Error("Combobox volume is not defined");
        t.setOptions(e.UtipFunctions.getVolumesList(i))
    }
    function n(t, i) {
        if (e.valueIsEmpty(t) || !(t instanceof e.InputSelectNumber)) throw new Error("Combobox volume is not defined");
        t.setOptions(i)
    }
    function o(t) {
        var i = e.UtipFunctions,
        s = this._currentSymbol,
        n = t.getValue(),
        o = t.indexOfText(n);
        t.setOptions(i.getVolumesList(s)),
        t.setDecimals(i.getDecimalCount(s)),
        t.setSelectedOption(o !== -1 ? o: 0)
    }
    function a() {
        var t = !0,
        i = !0,
        s = 0,
        n = 0,
        o = this._currentSymbol._StopLevel / Math.pow(10, this._currentSymbol._Digits),
        a = !0;
        if (e.getTerminal().platformType == e.PlatformTypes.ptUTIP) {
            var l = e.tradeFunctions.maxVolumeOnType(e.TraderData, this._currentSymbol, e._TraderData.positionType.buy, {
                volume: e.parseFloat(this._volumeCombo.getValue()) || 0
            }),
            h = e.tradeFunctions.maxVolumeOnType(e.TraderData, this._currentSymbol, e._TraderData.positionType.sell, {
                volume: e.parseFloat(this._volumeCombo.getValue()) || 0
            });
            l < e.parseFloat(this._volumeCombo.getValue()) && (t = !1, r(this._buyBtn, t), a = !1),
            h < e.parseFloat(this._volumeCombo.getValue()) && (i = !1, r(this._sellBtn, i), a = !1)
        }
        return 0 == e.parseFloat(this._volumeCombo.getValue() || 0) ? (r(this._sellBtn, !1), void r(this._buyBtn, !1)) : (a && (t = (!n || n < e.parseFloat(e.numberFormat(this._currentSymbol._Bid - o, this._currentSymbol._Digits, "."))) && (!s || s > e.parseFloat(e.numberFormat(this._currentSymbol._Bid + o, this._currentSymbol._Digits, "."))), i = (!n || n > e.parseFloat(e.numberFormat(this._currentSymbol._Ask + o, this._currentSymbol._Digits, "."))) && (!s || s < e.parseFloat(e.numberFormat(this._currentSymbol._Ask - o, this._currentSymbol._Digits, "."))), e.UtipFunctions.isAllowTrade(e.UtipFunctions.setServerFormatDate(e.SymbolsData._LastChangedTime), this._currentSymbol) || (t = !1, i = !1)), r(this._sellBtn, i), void r(this._buyBtn, t))
    }
    function r(t, i) { ! e.valueIsEmpty(t) && t instanceof HTMLElement && (i = !!i, i ? t.classList.remove("Disabled") : t.classList.add("Disabled"))
    }
    const l = 80,
    h = 138;
    e.PANEL_TYPES_ENUM = {
        express: 0,
        classic: 1,
        oneTouch: 2,
        range: 3,
        newOrder: 4
    },
    e.MobileTradePanel = function(t) {
        this._panelType = e.valueIsEmpty(t.panelType) ? e.PANEL_TYPES_ENUM.newOrder: t.panelType,
        this._currentPosition = null,
        this._Template = this._panelType === e.PANEL_TYPES_ENUM.newOrder ? e._Templates.MobileTradePanelMarketOrder: e._Templates.MobileTradePanelOptions,
        this._ParentNode = document.querySelector(".WTSwiper .WTSwiperContent .WTChartPage"),
        this._Width = window.innerWidth,
        e.MobileTradePanel.base.constructor.apply(this, arguments),
        e.LangManager.register(this),
        e.Resizer.register(this),
        e.SymbolsData.register(this),
        e.Socket.register(this)
    },
    e.initClass(e.MobileTradePanel, e.BaseControl);
    var d = e.MobileTradePanel.prototype;
    return d._render = function() {
        e.MobileTradePanel.base._render.apply(this, arguments),
        this._DomNode.style.backgroundColor = e.activeChart.options.colorScheme.innerBackground,
        this._panelType === e.PANEL_TYPES_ENUM.newOrder ? this.setMarketOrderControls() : this.setOptionsControls()
    },
    d._onSocketMessage = function(e) {
        var t, s = e ? e.msgType: "",
        n = e.msgResult.toLowerCase();
        "success" !== n && "quote is changed" !== n && (a.apply(this, []), this.unblockOptionsButtons()),
        t = e.msgData ? e.msgData: e.optionPositionsArray ? e.optionPositionsArray: e.positionsArray ? e.positionsArray: {};
        var o = {
            msgResult: e.msgResult,
            socketMessage: s,
            data: t
        };
        i.call(this, o)
    },
    d.setOptionsControls = function() {
        var t, i = function(t, i) {
            var s = document.createElement("div");
            return s.classList.add("WTButton"),
            s.classList.add(t),
            s.innerHTML = '<div class="WTButtonText">' + e.LangManager.getStringByKey(i) + '</div><div class="Value"></div>',
            s
        };
        this._panelType === e.PANEL_TYPES_ENUM.express || this._panelType === e.PANEL_TYPES_ENUM.classic ? t = ["cWCTOptionLow", "cWCTOptionHigh"] : this._panelType === e.PANEL_TYPES_ENUM.oneTouch ? t = ["cOPTBottom", "cOPTTop"] : this._panelType === e.PANEL_TYPES_ENUM.range && (t = ["cOPTOutside", "cOPTInside"]),
        this._sellBtn = i("Sell", t[0]),
        this._buyBtn = i("Buy", t[1]),
        this._DomNode.querySelector(".MobileTradePanel .Buttons").appendChild(this._sellBtn),
        this._DomNode.querySelector(".MobileTradePanel .Buttons").appendChild(this._buyBtn),
        this._buyBtn.addEventListener("click", this._onHighBtnClick.bind(this)),
        this._sellBtn.addEventListener("click", this._onLowBtnClick.bind(this)),
        this._sumSelect = new e.InputSelectNumber({
            Template: e._Templates.MobileInputSelect,
            ParentNode: this._DomNode.querySelector(".MobileTradePanel .Params"),
            Class: "Sum Option",
            MenuClass: "VolumeSelect",
            Caption: e.LangManager.getStringByKey("cWCTOptionSum"),
            OnlyNumbers: !0,
            Edit: !0,
            Options: [e.TraderData.getTraderGroup().optionSumLevel1, e.TraderData.getTraderGroup().optionSumLevel2, e.TraderData.getTraderGroup().optionSumLevel3],
            LabelPosition: "Inside",
            IsMobile: !0,
            Width: window.innerWidth / 2 - 10,
            Height: 58,
            MinValue: e.TraderData.getTraderGroup().minOptionSum,
            MaxValue: e.TraderData.getTraderGroup().maxOptionSum,
            MaxLength: e.TraderData.getTraderGroup().maxOptionSum.toString().length,
            ChangeValue: e.Delegate(this, this._onSumSelectChanged),
            ChangedValue: e.Delegate(this, this._onSumSelectChanged)
        }),
        this._periodSelect = new e.InputSelectNumber({
            Template: e._Templates.MobileInputSelect,
            ParentNode: this._DomNode.querySelector(".MobileTradePanel .Params"),
            Caption: e.LangManager.getStringByKey("cICPeriod"),
            Edit: !0,
            LabelPosition: "Inside",
            Class: "InnerLabel Option Periods",
            MenuClass: "VolumeSelect",
            Width: window.innerWidth / 2 - 10,
            Height: 58,
            OnlyNumbers: !0,
            Disabled: !0,
            ReadOnly: !0,
            IsMobile: !0,
            ChangedValue: e.Delegate(this, this._periodSelectChanged)
        }),
        this.updatePeriodSelect()
    },
    d.setMarketOrderControls = function() {
        var t = function(t, i) {
            var s = document.createElement("div");
            return s.classList.add("WTButton"),
            s.classList.add(t),
            s.innerHTML = '<div class="WTButtonText">' + e.LangManager.getStringByKey(i) + '</div><div class="Value"></div>',
            s
        },
        i = this._DomNode.querySelector(".Content");
        this._sellBtn = t("Sell", "cMDSell"),
        this._sellBtn.addEventListener("click", this._onSellBtnClick.bind(this)),
        i.appendChild(this._sellBtn),
        this._volumeCombo = new e.InputSelectNumber({
            ParentNode: i,
            Template: e._Templates.MobileTradePanelInputSelect,
            Width: window.innerWidth / 3,
            Height: 64,
            Caption: e.LangManager.getStringByKey("cWCTTradePositionsFormVolume"),
            Edit: !0,
            LabelPosition: "Inside",
            Class: "InnerLabel",
            MenuClass: "VolumeSelectTradePanel",
            DropDown: e.Delegate(this, o.bind(this)),
            ChangeValue: e.Delegate(this, a.bind(this)),
            ChangedValue: e.Delegate(this, a.bind(this)),
            OnlyNumbers: !0,
            Decimals: e.UtipFunctions.getDecimalCount()
        }),
        this._buyBtn = t("Buy", "cMDBuy"),
        this._buyBtn.addEventListener("click", this._onBuyBtnClick.bind(this)),
        i.appendChild(this._buyBtn),
        this.updateVolumesForSymbol(),
        this._volumeCombo.setSelectedOption(0)
    },
    d.updateVolumesForSymbol = function(t) {
        if (e.valueIsEmpty(t)) return void this.updateVolumesForSymbol(e.activeChart.charts[0]._symbolName);
        "string" == typeof t ? t = this._currentSymbol = e.SymbolsData.getSymbols()[t] : t instanceof e.Symbol && (this._currentSymbol = t);
        try {
            s(this._volumeCombo, t),
            this._volumeCombo.setSelectedOption(0)
        } catch(e) {
            console.error(e.message)
        }
    },
    d._periodSelectChanged = function(t) {
        var i = this._checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + t.sender.getSelectedData().period);
        i ? this._tradingAvailable(!0, t.event) : this._tradingAvailable(!1, t.event),
        this.checkTradeAllowed()
    },
    d._tradingAvailable = function(e, t) {
        e || 0 == e ? this.unblockOptionsButtons() : (this._periodSelect._showMenu(), this.blockOptionsButtons(), t && t instanceof Event && (t.preventDefault(), t.stopPropagation()))
    },
    d._onSumSelectChanged = function(e) {
        this.checkTradeAllowed()
    },
    d.checkTradeAllowed = function() {
        if (this._waitPosition !== !0) {
            var t = !1,
            i = this._sumSelect.getValue(),
            s = parseInt(i);
            if ("" != i) {
                var n = e.TraderData.getTraderGroup();
                t = s >= n.minOptionSum && s <= n.maxOptionSum
            }
            return ! e.UtipFunctions.binaryEquityEnough(i) || !t || this._isOptionOpening || this._isTerminalOffline || this.optionListIsEmpty || this.isThereEmptyFields() || !this.isTradingTime() ? (this.blockOptionsButtons(), !1) : (this.unblockOptionsButtons(), !0)
        }
    },
    d.blockOptionsButtons = function() {
        this._sellBtn.classList.add("Disabled"),
        this._buyBtn.classList.add("Disabled")
    },
    d.unblockOptionsButtons = function() {
        this._sellBtn.classList.remove("Disabled"),
        this._buyBtn.classList.remove("Disabled")
    },
    d.isThereEmptyFields = function() {
        return "" == this._sumSelect.getValue() || "" == this._periodSelect.getValue()
    },
    d.addToNode = function(e) {
        this._ParentNode && this._DomNode && this._ParentNode.insertBefore(this._DomNode, this._ParentNode.querySelector(".ChartContainer"))
    },
    d.showConfirmDialog = function(i) {
        if (!e.valueIsEmpty(i)) {
            var s = "";
            s += this._panelType === e.PANEL_TYPES_ENUM.newOrder ? e.LangManager.getStringByKey("cMobilePosition") + " #" + i.id + ", " + i.symbolName + ", " + i.positionType + ", " + i.volume + " " + e.LangManager.getStringByKey("cMobileLots") + ", " + e.LangManager.getStringByKey("cMobileAtPrice") + " " + i.openPrice + " " + e.LangManager.getStringByKey("cMobileIsOpen") : e.LangManager.getStringByKey("cMobileOptionPosition") + " #" + i.id + ", " + e.OptionTypeNames[i.optionType] + ", " + i.symbolName + ', <span class="currencyLabel">' + t() + "</span>" + i.investmentSum + " " + e.LangManager.getStringByKey("cMobileIsOpen"),
            e.showErrorDialog(s),
            e._errorDialog.getDomNode().querySelector(".WTDialogTitle").style.display = "none",
            e._errorDialog.getDomNode().querySelector(".DFooterControls").style.borderTop = "none",
            e._errorDialog.getDomNode().style.height = "136px"
        }
    },
    d.isTradingTime = function() {
        return ! this._currentSymbol || e.UtipFunctions.isAllowTrade(e.UtipFunctions.setServerFormatDate(e.SymbolsData._LastChangedTime), this._currentSymbol)
    },
    d.setSymbol = function(t) {
        "string" == typeof t && "" !== t ? this._currentSymbol = e.SymbolsData.getSymbols()[t] : "object" == typeof t && t instanceof e.Symbol ? this._currentSymbol = t: this._currentSymbol = e.SymbolsData.getSymbols()[e.activeChart.charts[0]._symbolName]
    },
    d._onGetQuote = function(e) {
        this.updateQuoteAndButtons(e)
    },
    d.updateQuoteAndButtons = function(t) {
        if (t && this._currentSymbol && t._SymbolName === this._currentSymbol.getSymbolName() && (this.setCurrentQuote(this._currentSymbol), this._waitPosition !== !0)) if (this._panelType === e.PANEL_TYPES_ENUM.newOrder) a.apply(this, []);
        else {
            var i = this._checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + this._periodSelect.getSelectedData().period);
            i ? this._tradingAvailable(!0, {}) : this._tradingAvailable(!1, {}),
            this.checkTradeAllowed()
        }
    },
    d.initOptionPosition = function() {
        if (!this._currentOptionSettings) return null;
        var t = this._periodSelect.getSelectedData().paramID,
        i = this._currentOptionSettings.getParamsByID(t);
        return {
            settingName: this._currentOptionSettings._name,
            optionType: this._panelType,
            openPrice: e.parseFloat(this._currentOptionSettings.getPrice()),
            investmentSum: this._sumSelect.getValue(),
            symbolName: this._currentOptionSettings.getSymbolName(),
            stopLine: i.stopLine,
            payoutPercentage: i.payoutPercentage,
            earlyClosing: i.earlyClosing,
            interval: i.interval,
            period: i.period
        }
    },
    d._onLowBtnClick = function() {
        var t = this.initOptionPosition();
        if (this.checkIsOptionEnabled(t)) {
            switch (this._panelType) {
            case e.PANEL_TYPES_ENUM.express:
                t.direction = e.OptionPositionTypes.lowExpress;
                break;
            case e.PANEL_TYPES_ENUM.classic:
                t.direction = e.OptionPositionTypes.lowClassic;
                break;
            case e.PANEL_TYPES_ENUM.oneTouch:
                t.direction = e.OptionPositionTypes.bottom;
                break;
            case e.PANEL_TYPES_ENUM.range:
                t.direction = e.OptionPositionTypes.outside
            }
            this.openOptionPosition(t),
            this._waitPosition = !0
        }
    },
    d.checkIsOptionEnabled = function(t) {
        return !! t || (e.showErrorDialog(e.LangManager.getStringByKey("cWCTOptionIsDisabled") || "This option is disabled"), document.getElementById("WTDialogBlockscreen").style.display = "inline", !1)
    },
    d._onHighBtnClick = function() {
        var t = this.initOptionPosition();
        if (this.checkIsOptionEnabled(t)) {
            switch (this._panelType) {
            case e.PANEL_TYPES_ENUM.express:
                t.direction = e.OptionPositionTypes.highExpress;
                break;
            case e.PANEL_TYPES_ENUM.classic:
                t.direction = e.OptionPositionTypes.highClassic;
                break;
            case e.PANEL_TYPES_ENUM.oneTouch:
                t.direction = e.OptionPositionTypes.top;
                break;
            case e.PANEL_TYPES_ENUM.range:
                t.direction = e.OptionPositionTypes.inside
            }
            this.openOptionPosition(t),
            this._waitPosition = !0
        }
    },
    d.openOptionPosition = function(t) {
        this.blockOptionsButtons(),
        e.requester.openOptionPosition(t)
    },
    d.setCurrentQuote = function(t) {
        this.setSymbol(t.getSymbolName());
        var i = e.numberFormat,
        s = e.parseFloat,
        n = e.PANEL_TYPES_ENUM,
        o = this._panelType,
        a = this._buyBtn.querySelector(".Value"),
        r = this._sellBtn.querySelector(".Value"),
        l = "",
        h = "",
        d = t.getDigits();
        switch (o) {
        case n.oneTouch:
        case n.range:
            var c = t.getPrecision(),
            u = this._currentOptionSettings,
            g = this._periodSelect.getSelectedData(),
            p = g.paramID,
            m = u.getParamsByID(p),
            _ = m.interval,
            y = u.getPrice(),
            S = parseInt(_) / c;
            l = i(s(y) + S, d, ".", ""),
            h = i(s(y) - S, d, ".", "");
            break;
        default:
            l = i(t.getAsk(), d, ".", ""),
            h = i(t.getBid(), d, ".", "")
        }
        a.innerHTML = l,
        r.innerHTML = h
    },
    d.calcControlsSize = function() {
        var t = this.getDomNode(),
        i = document.querySelector(".WTSwiperContent .WTHeaderPanel");
        if (i) {
            var s = document.body.querySelector(".ChartContainer");
            if (s) {
                var n = s.classList;
                if (e.isPortraitOrientation()) {
                    t.classList.remove("cls");
                    document.querySelector(".WTSwiper.Compact .WTSwiperContent").offsetHeight,
                    i.offsetHeight;
                    if (this._panelType === e.PANEL_TYPES_ENUM.newOrder) {
                        this._volumeCombo.setWidth(window.innerWidth / 3);
                        var o = l
                    } else {
                        n.add("binary");
                        var o = h;
                        this._sumSelect.setWidth(window.innerWidth / 2 - 10),
                        this._periodSelect.setWidth(window.innerWidth / 2 - 10)
                    }
                    n.add("trade-panel-mode"),
                    this.setHeight(o)
                } else {
                    t.classList.add("cls");
                    var a = this._DomNode.offsetWidth;
                    document.querySelector(".WTSwiper.Compact .WTSwiperContent").offsetWidth;
                    this._panelType === e.PANEL_TYPES_ENUM.newOrder ? this._volumeCombo.setWidth(a - 10) : (n.remove("binary"), this._sumSelect.setWidth(a - 10), this._periodSelect.setWidth(a - 10)),
                    n.remove("trade-panel-mode");
                    var r = window.innerHeight - i.offsetHeight;
                    this.setHeight(r)
                }
            }
        }
    },
    d._onWindowResize = function() {
        setTimeout(function() {
            this.calcControlsSize()
        }.bind(this), 50)
    },
    d._onBuyBtnClick = function() {
        return this._currentSymbol && this.checkIsSymbolSelected(this._currentSymbol._SymbolName) ? (this.openPosition(e._TraderData.positionType.buy), this.block(!0), void(this._waitPosition = !0)) : void e.showErrorDialog(e.LangManager.getStringByKey("cWCTSymbolIsDisabled") || "This symbol is not available")
    },
    d._onSellBtnClick = function() {
        return this._currentSymbol && this.checkIsSymbolSelected(this._currentSymbol._SymbolName) ? (this.openPosition(e._TraderData.positionType.sell), this.block(!0), void(this._waitPosition = !0)) : void e.showErrorDialog(e.LangManager.getStringByKey("cWCTSymbolIsDisabled") || "This symbol is not available")
    },
    d.block = function(t) {
        t = !!t;
        var i;
        i = this._panelType === e.PANEL_TYPES_ENUM.newOrder ? this.getDomNode().querySelector(".Content") : this.getDomNode(),
        t ? Array.prototype.forEach.call(i.childNodes,
        function(e) {
            e.classList.add("Disabled")
        }) : Array.prototype.forEach.call(i.childNodes,
        function(e) {
            e.classList.remove("Disabled")
        })
    },
    d.openPosition = function(t) {
        var i = {
            symbolName: this._currentSymbol._SymbolName,
            traderID: e.TraderData._TraderInfo.id,
            operationType: e.requestPositionType[t],
            volume: e.parseFloat(this._volumeCombo.getValue()),
            price: t == e._TraderData.positionType.buy ? this._currentSymbol._Ask: this._currentSymbol._Bid,
            takeProfit: 0,
            stopLoss: 0,
            takeProfitByPips: 0,
            stopLossByPips: 0
        };
        switch (e.getTerminal().platformType) {
        case e.PlatformTypes.ptUTIP:
            e.requester.openPosition(i);
            break;
        case e.PlatformTypes.ptMT:
            i.operationType = e.TraderData.convertOrderTypeToMTFormat(i.operationType),
            e.requester.openMTPosition(i)
        }
    },
    d.checkIsSymbolSelected = function(t) {
        var i = e.SymbolsData.getSelectedSymbols();
        return i.indexOf(t) !== -1
    },
    d.updatePeriodSelect = function(t) {
        if (e.valueIsEmpty(t)) return void this.updatePeriodSelect(e.activeChart.charts[0]._symbolName);
        "string" == typeof t ? t = this._currentSymbol = e.SymbolsData.getSymbols()[t] : t instanceof e.Symbol && (this._currentSymbol = t);
        var i = this;
        this._currentOptionSettings = e.OptionsSettings.getOptionSettingsByOptionTypeAndSymbolName(this._panelType, this._currentSymbol._SymbolName);
        var s = this._currentOptionSettings.getOptionPeriodCaptions().map(function(t) {
            var s = t.Data.period,
            n = e.SymbolsData.getLastChangedTime();
            return i._checkAvailabilityPeriodForThePurchase(n + s) || (t.Text += " (" + (e.LangManager.getStringByKey("cOPClosed") || "closed") + ")"),
            t
        });
        try {
            n(this._periodSelect, s),
            this._periodSelect.setSelectedOption(0),
            this._currentParamID = this._periodSelect.getSelectedData().paramID
        } catch(e) {
            console.error(e.message)
        }
    },
    d._checkAvailabilityPeriodForThePurchase = function(t) {
        return !! this._currentSymbol && !(e.UtipFunctions.isHoliday(t, this._currentSymbol) || !e.UtipFunctions.isTradeTime(t, this._currentSymbol))
    },
    d.initDefault = function() {
        this._currentSymbol = e.SymbolsData.getSymbols()[e.activeChart.charts[0]._symbolName]
    },
    d.initData = function(t) {
        return t && "object" == typeof t ? (this._currentSymbol = t.symbol, this._volumeCombo.setOptions(e.UtipFunctions.getVolumesList(e.SymbolsData.getSymbols()[this._currentSymbol]))) : this.initDefault(),
        this.setCurrentQuote(this._currentSymbol),
        this
    },
    d.show = function() {
        this.calcControlsSize(),
        this.updateQuoteAndButtons(this._currentSymbol)
    },
    d.dispose = function() {
        e.LangManager.unRegister(this),
        e.Resizer.unRegister(this),
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this);
        var t = e.getTerminal().mainSwiper,
        i = !!t && t.getPages()[e.MobileTerminalPage.ChartPage].getContent(),
        s = !!e.activeChart && e.activeChart.getParentNode();
        if (!s) {
            var n = this._ParentNode;
            return n && n.removeChild(this.getDomNode()),
            void delete e._tradePanel
        }
        var o = s.classList;
        i && (o.remove("binary"), o.remove("trade-panel-mode"));
        var n = this._ParentNode;
        n && n.removeChild(this.getDomNode()),
        delete e._tradePanel
    },
    d.setTitle = function(e) {
        e && "string" == typeof e || (e = "Trade Panel Title"),
        this._DomNode.querySelector(".Title").innerHTML = e
    },
    d._onChangeLang = function() {
        console.log("a7a2_4");
        function t(t, i) {
            var s = t.querySelector(".WTButtonText");
            s && !e.valueIsEmpty(i) && (s.innerHTML = i)
        }
        var i = e.LangManager,
        s = i.getStringByKey.bind(i),
        n = "",
        o = "",
        a = e.PANEL_TYPES_ENUM,
        r = this._panelType;
        switch (r) {
        case a.newOrder:
            this._volumeCombo.setCaptionText(s("cWCTTradePositionsFormVolume") || "Volume"),
            o = s("cMDBuy") || "Buy",
            n = s("cMDSell") || "Sell";
            break;
        case a.express:
        case a.classic:
            o = s("cWCTOptionHigh") || "Low",
            n = s("cWCTOptionLow") || "High";
            break;
        case a.oneTouch:
            o = s("cOPTTop") || "Top",
            n = s("cOPTBottom") || "Bottom";
            break;
        case a.range:
            o = s("cOPTInside") || "Inside",
            n = s("cOPTOutside") || "Outside"
        }
        t(this._buyBtn, o),
        t(this._sellBtn, n),
        r !== a.newOrder && (this._sumSelect.setCaptionText(s("cWCTOptionSum") || "Sum"), this._periodSelect.setCaptionText(s("cICPeriod") || "Period"))
    },
    d.getType = function() {
        return this._panelType
    },
    d.getHeight = function() {
        switch (this.getType()) {
        case e.PANEL_TYPES_ENUM.newOrder:
            return l;
        default:
            return h
        }
    },
    d = null,
    e.getMobileTradePanel = function(t) {
        return e._tradePanel || (e._tradePanel = new e.MobileTradePanel(t)),
        e._tradePanel
    },
    e.getMobileTradePanelWithoutInit = function() {
        return e._tradePanel
    },
    e
}),
define("mobile/mobileMenuTradePanel", ["menu", "mobile/mobileTradePanel"],
function(e) {
    e.MobileMenuTradePanel = function(t) {
        e.MobileMenuTradePanel.base.constructor.apply(this, arguments)
    };
    const t = 4,
    i = 5;
    e.initClass(e.MobileMenuTradePanel, e.Menu);
    var s = e.MobileMenuTradePanel.prototype;
    return s._render = function() {
        this._CheckedType = "Multi",
        this.ItemClick = e.Delegate(this, this._onMenuItemClick),
        this.BeforeOpen = e.Delegate(this, this.updateItemsList),
        this.Opened.add(e.Delegate(this, this.updateItemsListChecked)),
        e.MobileMenuTradePanel.base._render.apply(this, arguments),
        e.addCSSClass(this.getDomNode(), "menuTradePanel")
    },
    s.updateItemsList = function() {
        this.clear();
        var s = e.getTerminal(),
        n = e.activeChart.getMainSymbolName();
        return s.useOnlyOptions ? this._Items = this.getOptionsTypesBySymbolName(n) : (this._Items = [{
            Class: "MarketOrder",
            Key: "cMTPMarketOrder",
            Text: "Market Order",
            Data: t
        }], s.useOptions && (this._Items = this._Items.concat(this.getOptionsTypesBySymbolName(n)))),
        this._Items.push({
            Key: "cMTPDontShow",
            Text: "Don't show",
            Data: i
        }),
        this.updateMenuItems(),
        this
    },
    s.updateItemsListChecked = function() {
        this.uncheckAll();
        var t = e.getMobileTradePanelWithoutInit();
        if (t) for (var i = t.getType(), s = 0; s < this._Items.length; s++) this._Items[s].getData() === i && this._Items[s].setChecked(!0);
        else {
            var n = this._Items.length - 1;
            this._Items[n].setChecked(!0)
        }
    },
    s.hasItems = function() {
        return this._Items.length > 1
    },
    s.getOptionsTypesBySymbolName = function(t) {
        return e.valueIsEmpty(t) || "string" != typeof t ? [] : e.OptionsSettings.getOptionsTypesBySymbolName(t, !0).sort(function(e, t) {
            return e > t ? 1 : -1
        }).map(function(t) {
            return {
                Class: e.OptionTypeNames[t].replace(" ", ""),
                Text: e.OptionTypeNames[t],
                Data: t
            }
        })
    },
    s.show = function() {
        e.Socket.register(this),
        e.MobileMenuTradePanel.base.show.apply(this, arguments)
    },
    s.hide = function() {
        e.Socket.unRegister(this),
        e.MobileMenuTradePanel.base.hide.apply(this, arguments)
    },
    s._onSocketMessage = function(t) {
        var i = t.msgType,
        s = e.activeChart.getMainSymbolName();
        switch (i) {
        case "symbols":
            var n = e.SymbolsData.getSymbols()[s];
            n.allowTrade() || this.hide();
            break;
        case "deletedSymbol":
            s === t.symbolName && this.hide();
            break;
        case "addOptionSettings":
        case "changeOptionSettings":
        case "deleteOptionSettings":
            this.hide()
        }
    },
    s.showTradePanel = function(i) {
        i = e.valueIsEmpty(i) ? t: i,
        e._tradePanel && e.getMobileTradePanel().dispose(),
        e.getMobileTradePanel({
            panelType: i
        }).initData().show()
    },
    s._onMenuItemClick = function(t) {
        var s = t.Item._Data;
        s !== i ? this.showTradePanel(s) : e._tradePanel && e._tradePanel instanceof e.MobileTradePanel && e._tradePanel.dispose(),
        e._menuMasterObject.hideAll()
    },
    s = null,
    e.getMobileTradePanelMenu = function() {
        return e._tradePanelMenu && delete e._tradePanelMenu,
        e._tradePanelMenu = new e.MobileMenuTradePanel,
        e._tradePanelMenu
    },
    e
}),
define("mobile/mobileHeaderPanel", ["headerPanel", "mobile/mobileMenuTimeFrame", "mobile/mobileMenuIndicators", "mobile/mobileMenuChartStyle", "mobile/mobileMenuTradePanel"],
function(e) {
    function t(t) {
        return ! e.valueIsEmpty(t) && !t
    }
    e.MobileHeaderPanel = function(t) {
        this._Indicators = e.getMobileIndicatorsMenu().getItems(),
        e.MobileHeaderPanel.base.constructor.apply(this, arguments),
        e.OptionsSettings.register(this),
        e.SymbolsData.register(this)
    },
    e.initClass(e.MobileHeaderPanel, e.HeaderPanel);
    var i = e.MobileHeaderPanel.prototype;
    return i._render = function() {
        if (e.HeaderPanel.base._render.apply(this, arguments), this.addCSSClass("WTHeaderPanel"), this._chartMenuBtn = new e.Button({
            ParentNode: this._DomNode,
            investorModeDependency: !0,
            FontIcon: {
                Content: e.FontIcons.m_Params,
                Color: "#A79585",
                Size: 20
            },
            ImgWidth: "36px",
            ImgHeight: "36px",
            Class: "chartMenuBtn",
            Click: e.Delegate(this, this._onChartMenuBtnClick)
        }), this._tradePanelBtn = new e.Button({
            ParentNode: this._DomNode,
            FontIcon: {
                Content: e.FontIcons.m_TradePanel,
                Color: "#A79585",
                Size: 24
            },
            ImgWidth: "36px",
            ImgHeight: "36px",
            Class: "tradePanel",
            investorModeDependency: !0,
            Menu: e.getMobileTradePanelMenu()
        }), this._chartStyleBtn = new e.Button({
            ParentNode: this._DomNode,
            ImgWidth: "36px",
            ImgHeight: "36px",
            FontIcon: {
                Content: e.FontIcons.m_BullCandle,
                Color: "#A79585",
                Size: 24
            },
            Class: "chartStyleBtn",
            Menu: e.getMobileMenuChartStyle()
        }), this._selectIndicatorsBtn = new e.Button({
            ParentNode: this._DomNode,
            FontIcon: {
                Content: e.FontIcons.m_Indicators,
                Color: "#A79585",
                Size: 24
            },
            ImgWidth: "36px",
            ImgHeight: "36px",
            Class: "indicatorsBtn",
            Click: e.Delegate(this,
            function(t) {
                e.getMobileDialogIndicators().show()
            })
        }), e.getTerminal().useOnlyOptions) var t = e.OptionsSettings.getAllFavoriteSymbolsNames();
        else var t = e.SymbolsData.getSelectedSymbols();
        this._chartSelect = new e.InputSelect({
            ParentNode: this._DomNode,
            Width: 122,
            LabelPosition: "Inside",
            Class: "ChartSelect",
            MenuClass: "SymbolSelect",
            Edit: !1,
            Options: t,
            ChangedValue: e.Delegate(this, this.onChartSelectValueChanged)
        }),
        e.getMobileChartSelect = function() {
            return this._chartSelect
        }.bind(this)
    },
    i.onChartSelectValueChanged = function(t) {
        var i = e.getTerminal();
        i.changeChart(t);
        var s = i.verificationTradeAccess(),
        n = e.VERIFICATION_RESULTS;
        switch (s) {
        case n.NO_SYMBOL:
            var o = i.mainSwiper,
            a = o.getPages(),
            r = a[1];
            o.getSelectedPageIndex() === e.MobileTerminalPage.ChartPage && o.setSelectedPage(e.MobileTerminalPage.QuotesPage),
            r.setEnabled(!1);
            break;
        case n.HAS_ERRORS:
        }
    },
    i.setChartSelectValue = function(e) {
        this._chartSelect.setValue(e)
    },
    i.getSelectedSymbolName = function() {
        return this._chartSelect.getValue()
    },
    i.blockSymbolChartSelectControl = function(e) {
        this._chartSelect.setEnabled(t(e))
    },
    i.blockIndicatorButtonControl = function(e) {
        this._selectIndicatorsBtn.setEnabled(t(e))
    },
    i.blockChartStyleButtonControl = function(e) {
        this._chartStyleBtn.setEnabled(t(e))
    },
    i.blockTradePanelButtonControl = function(e) {
        this._tradePanelBtn.setEnabled(t(e))
    },
    i.blockChartMenuButtonControl = function(e) {
        this._chartMenuBtn.setEnabled(t(e))
    },
    i.updateChartSelect = function() {
        if (e.getTerminal().useOnlyOptions) for (var t, i, s = e.OptionsSettings.getAllFavorites(), n = [], o = 0; o < s.length; o++) t = s[o].getSymbolName(),
        i = e.SymbolsData.getSymbols()[t],
        n.indexOf(t) === -1 && i && i.allowTrade() && s[o].canUse() && n.push(t);
        else var n = e.SymbolsData.getSelectedSymbols();
        this._chartSelect.setOptions(n)
    },
    i._onAutoScrollClick = function() {
        var t = e.activeChart;
        t.options.userTurnOffAutoScroll = t.options.autoScroll === !0 || t.options.userTurnOffAutoScroll === !1,
        0 !== t.options.offset ? t.setAutoScroll(!t.options.autoScroll) : t.setAutoScroll(!1),
        t.updateOffsetAfterMouseMove(),
        this._tradePanelBtn.setPressed(!this._tradePanelBtn._Pressed)
    },
    i.setProfileData = function() {},
    i._onChartMenuBtnClick = function(t) {
        if (t.Sender && t.Sender.getDomNode()) if (e.getMobileMenuTapToGraphic().getIsOpen()) e.getMobileMenuTapToGraphic().hide();
        else {
            var i = t.Sender.getDomNode().offsetLeft,
            s = t.Sender.getDomNode().offsetTop,
            n = e.activeChart,
            o = e.SymbolsData.getSymbols()[n.getMainSymbolName()],
            a = o.getCalculationTypeName(),
            r = n.getIndicators().length > 0; (o.allowTrade() && "index" !== a || r) && e.getMobileMenuTapToGraphic().show(i, s)
        }
    },
    i._onGetOptionsSettings = function() {
        var t, i;
        this.updateChartSelect(),
        this._chartSelect.getOptions().indexOf(this._chartSelect.getValue()) === -1 ? (this._chartSelect.setSelectedOption(0), t = e.OptionsSettings.getOptionSettingsBySymbolName(this._chartSelect.getValue()), i = e.SymbolsData.getSymbols()[this._chartSelect.getValue()], t && t.canUse() && i && i.allowTrade() ? (e.getTerminal().changeChart(null, this._chartSelect.getValue()), this.blockTradePanelButtonControl(!1), this.blockChartMenuButtonControl(!1)) : i ? (this.blockTradePanelButtonControl(!0), this.blockChartMenuButtonControl(!0), e.getTerminal().changeChart(null, this._chartSelect.getValue())) : this.evacuateFromChartTab()) : (t = e.OptionsSettings.getOptionSettingsBySymbolName(this._chartSelect.getValue()), i = e.SymbolsData.getSymbols()[this._chartSelect.getValue()], t && t.canUse() && i && i.allowTrade() && (this.blockTradePanelButtonControl(!1), this.blockChartMenuButtonControl(!1)))
    },
    i._onGetSymbols = function(t) {
        this.updateChartSelect();
        var i = e.SymbolsData.getSymbols()[this._chartSelect.getValue()];
        if (0 === this._chartSelect.getOptions().length) return this.blockTradePanelButtonControl(!0),
        this.blockChartMenuButtonControl(!0),
        void(e._tradePanel && e._tradePanel instanceof e.MobileTradePanel && (e._tradePanel.dispose(), i || this.evacuateFromChartTab()));
        this._chartSelect.getOptions().indexOf(this._chartSelect.getValue()) === -1 && (this._chartSelect.setSelectedOption(0), e._tradePanel && e.getTerminal().mainSwiper && e.getTerminal().mainSwiper.getSelectedPageIndex() !== e.MobileTerminalPage.ChartPage && e._tradePanel.dispose(), e.getTerminal().changeChart(null, this._chartSelect.getValue()));
        var s = e.SymbolsData.getSymbols()[this._chartSelect.getValue()],
        n = s && s.canUse();
        n && (this.blockTradePanelButtonControl(!1), this.blockChartMenuButtonControl(!1))
    },
    i.evacuateFromChartTab = function() {
        var t = e.getTerminal().mainSwiper,
        i = t.getPages()[1];
        t.getSelectedPageIndex() === e.MobileTerminalPage.ChartPage && (e._tradePanel && e._tradePanel.dispose(), t.setSelectedPage(e.MobileTerminalPage.QuotesPage)),
        i.setEnabled(!1)
    },
    i = null,
    e
}),
define("mobile/mobileMenuOptionTypes", ["menu"],
function(e) {
    e.MobileMenuOptionTypes = function(t) {
        e.MobileMenuOptionTypes.base.constructor.apply(this, arguments)
    },
    e.initClass(e.MobileMenuOptionTypes, e.Menu);
    var t = e.MobileMenuOptionTypes.prototype;
    return t._render = function() {
        this._CheckedType = "Checked",
        this._Items = e.getTerminal().getTypesOptions(),
        this.ItemClick = e.Delegate(this, this._onItemClick),
        e.MobileMenuOptionTypes.base._render.apply(this, arguments),
        e.addCSSClass(this.getDomNode(), "menuOptionTypes"),
        e.getTerminal().useOnlyOptions && this.update()
    },
    t._onItemClick = function(e) {
        e.preventDefault(),
        e.stopPropagation(),
        this.selectOptionType(e.Item.getId())
    },
    t.selectOptionType = function(t) {
        e.OptionsSettings.setSelectedOptionType(t);
        var i = e.getTerminal(),
        s = i.getTableQuotes();
        s && s.renderBinaryOptions(),
        e._menuMasterObject.hideAll(),
        e.saveUserSettings()
    },
    t.update = function() {
        var t = this._Items;
        if (t.length > 0) {
            var i = e.OptionsSettings.getSelectedOptionType(),
            s = t.some(function(e, t, s) {
                return e.getId() === i
            });
            s || (i = t[0].getId()),
            this.selectOptionType(i)
        }
    },
    t.show = function(t, i) {
        this.uncheckAll();
        for (var s = e.OptionsSettings.getSelectedOptionType(), n = 0; n < this._Items.length; n++) this._Items[n].getData() === s && this._Items[n].setChecked(!0);
        e.MobileMenuOptionTypes.base.show.apply(this, arguments)
    },
    t = null,
    e.getMobileMenuOptionTypes = function() {
        return e._mobileMenuOptionTypes && delete e._mobileMenuOptionTypes,
        e._mobileMenuOptionTypes = new e.MobileMenuOptionTypes,
        e._mobileMenuOptionTypes
    },
    e.getMobileMenuOptionTypesWithoutInit = function() {
        return e._mobileMenuOptionTypes
    },
    e
}),
define("mobile/mobileImageForPositionDialog", ["base", "container", "symbolsData"],
function(e) {
    function t(t) {
        e.isPortrait() ? (this.packages.main.own.classList.remove("album"), this.updateCurrentTriangle(), this.UPDATE_IMAGE_SIZE(t)) : this.packages.main.own.classList.add("album")
    }
    function i(e) {
        return void 0 === e
    }
    function s(t, i) {
        if (!i || e.valueIsEmpty(t)) return null;
        var s = e.requestPendingOrderType,
        n = e._TraderData.positionType;
        switch (t) {
        case s.BuyLimit:
        case s.BuyStop:
        case n.Buy:
            return i.getAsk();
        case s.SellLimit:
        case s.SellStop:
        case n.Sell:
            return i.getBid()
        }
    }
    var n;
    e.MobileImageForPositionDialog = function(t) {
        this.type = null,
        this.symbol = null,
        this.pendingOrderType = null,
        this.binaryOptionName = null,
        this.binaryOptionType = null,
        this.position = null,
        e.MobileImageForPositionDialog.base.constructor.apply(this, [t])
    },
    e.initClass(e.MobileImageForPositionDialog, e.Container);
    var o = e.MobileImageForPositionDialog.prototype,
    a = e.SymbolsData,
    r = e.OptionsSettings,
    l = e.POSITION_IMAGE_PACKAGE_TYPES = {
        MARKET_ORDER: 0,
        PENDING_ORDER: 1,
        BINARY_OPTION: 2
    };
    return e.getCurrentPriceByOrderType = function(e, t) {
        return s(e, t)
    },
    o.updateProperties = function(t) {
        function i(e) {
            for (var i, s, n, o, a, r, l = 0,
            h = e.length; l < h; ++l) i = e[l],
            s = i.mainPropName,
            n = i.propName1,
            o = i.propValue1,
            a = i.propName2,
            r = i.propValue2,
            s && (o || r) && (t[s] = {},
            o ? t[s][n] = o: delete t[s][n], r ? t[s][a] = r: delete t[s][a])
        }
        function n(e) {
            i.apply(h, [[{
                mainPropName: "prices",
                currentPrice: s.apply(h, [parseInt(m), this.symbol]),
                openPrice: e.openPrice
            },
            {
                mainPropName: "borders",
                takeProfit: e.takeProfit,
                stopLoss: e.stopLoss
            }]])
        }
        function o(e) {
            if (e) {
                var t = l.apply(h, [e]);
                i.apply(h, [[{
                    mainPropName: "prices",
                    currentPrice: h.symbol.getBid()
                },
                {
                    mainPropName: "borders",
                    top: t.top,
                    bottom: t.bottom
                }]])
            }
        }
        function l(i) {
            var s = e.TypesBinaryOption,
            n = i.getType();
            if (n === s.express || n === s.classic) return {
                top: 0,
                bottom: 0
            };
            var o = e.numberFormat,
            a = e.parseFloat(i.getPrice()),
            r = i.getParamsByID(t.borders.paramId);
            if (!r) return {
                top: 0,
                bottom: 0
            };
            var l = parseInt(r.interval),
            d = h.symbol,
            c = d.getPrecision(),
            u = d.getDigits();
            return {
                top: o(a + l / c, u, ".", ""),
                bottom: o(a - l / c, u, ".", "")
            }
        }
        var h = this,
        d = e.valueIsEmpty,
        c = t.symbol,
        u = t.type,
        g = t.position,
        p = h.position = d(g) ? p: g;
        h.type = d(u) ? h.type: u,
        h.symbol = d(c) ? h.symbol: c;
        var m, _, y, S = t.prices || {},
        f = t.borders || {};
        p ? (h.symbol = a.getSymbols()[p.symbolName], m = p.pendingOrderType, y = p.optionType, d(m) ? d(y) ? (h.pendingOrderType = null, h.binaryOptionType = null, n.apply(h, [p])) : (h.pendingOrderType = null, h.binaryOptionType = parseInt(y)) : (h.pendingOrderType = parseInt(m), h.binaryOptionType = null, n.apply(h, [p]))) : (m = this.pendingOrderType, _ = this.binaryOptionName, y = this.optionType, d(m) ? d(y) ? (h.pendingOrderType = null, h.binaryOptionName = null, h.binaryOptionType = null, n.apply(h, [{
            openPrice: S.openPrice,
            takeProfit: f.takeProfit,
            stopLoss: f.stopLoss
        }])) : (h.pendingOrderType = null, h.binaryOptionType = parseInt(y), o.apply(h, [r.getOptionSettingsByNameAndType(_, y)])) : (h.pendingOrderType = parseInt(m), this.binaryOptionName = null, h.binaryOptionType = null, n.apply(h, [{
            openPrice: S.openPrice,
            takeProfit: f.takeProfit,
            stopLoss: f.stopLoss
        }]))),
        h.UPDATE_IMAGE(),
        h.renderBullets(),
        h.render(S, f)
    },
    o._render = function() {
        this.packages = {},
        this.CREATE_CONTAINER(),
        this.ATTACH_MARKET_PACKAGE(),
        this.ATTACH_PENDING_PACKAGE(),
        this.ATTACH_BINARY_PACKAGE(),
        this.UPDATE_IMAGE(),
        this.UPDATE_STOP_ORDERS(),
        this.renderBullets(),
        this.updateCurrentTriangle(),
        t.apply(this, []),
        window.addEventListener("resize", t.bind(this))
    },
    o.CREATE_CONTAINER = function() {
        var e = this,
        t = document.createElement("div"),
        i = document.createElement("img"),
        s = document.createElement("div");
        t.classList.add("image-container"),
        i.classList.add("image"),
        s.classList.add("bullets-container"),
        i.addEventListener("load",
        function(t) {
            e.UPDATE_IMAGE_SIZE.apply(e, [t])
        }),
        t.appendChild(i),
        t.appendChild(s),
        this.container = t,
        this.packages.main = {
            own: t,
            image: i,
            bulletsContainer: s
        },
        this._DomNode = t
    },
    o.UPDATE_IMAGE = function() {
        switch (this.type) {
        case l.MARKET_ORDER:
            var e = "./res/img/imageForPositionDialogs";
            this.packages.main.image.src = e + "/marketOrder.png";
            break;
        case l.PENDING_ORDER:
            this.UPDATE_PENDING_IMAGE();
            break;
        case l.BINARY_OPTION:
            this.UPDATE_BINARY_IMAGE()
        }
    },
    o.UPDATE_IMAGE_SIZE = function(t) {
        var i = this.packages.main,
        s = i.own;
        s.style.height = e.getAppWidth() / 100 * 44.6875 + "px",
        this.renderBullets(),
        this.updateCurrentTriangle()
    },
    o.UPDATE_PENDING_IMAGE = function() {
        var t = e.requestPendingOrderType,
        i = "./res/img/imageForPositionDialogs";
        switch (parseInt(this.pendingOrderType)) {
        case t.BuyLimit:
            this.packages.main.image.src = i + "/buyLimit.png";
            break;
        case t.SellLimit:
            this.packages.main.image.src = i + "/sellLimit.png";
            break;
        case t.BuyStop:
            this.packages.main.image.src = i + "/buyStop.png";
            break;
        case t.SellStop:
            this.packages.main.image.src = i + "/sellStop.png"
        }
    },
    o.UPDATE_BINARY_IMAGE = function() {
        var t = e.OptionSettingsType,
        i = "./res/img/imageForPositionDialogs";
        switch (this.binaryOptionType) {
        case t.express:
            this.packages.main.image.src = i + "/express.png";
            break;
        case t.classic:
            this.packages.main.image.src = i + "/classic.png";
            break;
        case t.oneTouch:
            this.packages.main.image.src = i + "/oneTouch.png";
            break;
        case t.range:
            this.packages.main.image.src = i + "/range.png"
        }
    },
    o.UPDATE_PRICES = function(t) {
        t = t || {};
        var s, n = e.valueIsEmpty,
        o = e.numberFormat,
        a = this.symbol.getDigits();
        switch (this.type) {
        case l.MARKET_ORDER:
            s = this.packages.marketPackage;
            break;
        case l.PENDING_ORDER:
            s = this.packages.pendingPackage;
            var r = s.values.openPrice = i(t.openPrice) ? s.values.openPrice: t.openPrice || 0;
            s.openPrice.querySelector(".rectangle").innerHTML = n(r) ? "": '<div class="caption">Pr</div><div class="value">' + o(r, a, ".", "") + "</div>";
            break;
        case l.BINARY_OPTION:
            s = this.packages.binaryPackage
        }
        var h = s.values.currentPrice = i(t.currentPrice) ? s.values.currentPrice: t.currentPrice || 0;
        s.currentPrice.querySelector(".rectangle").innerHTML = n(h) ? "": o(h, a, ".", "")
    },
    o.UPDATE_STOP_ORDERS = function(t) {
        var s, n, o = this,
        a = {
            hasPosition: function(t, i, s) {
                var n = o.symbol.getDigits(),
                a = e.valueIsEmpty,
                r = e.numberFormat;
                a(s) || !s || 0 === parseFloat(s) || isNaN(s) ? this.hasNotPosition(t) : (t.querySelector(".rectangle").innerHTML = '<div class="caption">' + i + '</div><div class="value">' + r(s, n, ".", "") + "</div>", t.classList.remove("off"))
            },
            hasNotPosition: function(e) {
                e.querySelector(".rectangle").innerHTML = "",
                e.classList.add("off")
            }
        },
        r = this.position,
        h = r || t || {},
        d = h.takeProfit,
        c = h.stopLoss;
        try {
            switch (this.type) {
            case l.MARKET_ORDER:
                n = this.packages.marketPackage;
                break;
            case l.PENDING_ORDER:
                n = this.packages.pendingPackage;
                break;
            default:
                return
            }
            var u = n.values.takeProfit = i(d) ? n.values.takeProfit: d || 0,
            g = n.values.stopLoss = i(c) ? n.values.stopLoss: c || 0;
            s = r || u || g ? a.hasPosition.bind(a) : a.hasNotPosition.bind(a),
            s(n.takeProfit, "TP", u),
            s(n.stopLoss, "SL", g)
        } catch(e) {}
    },
    o.UPDATE_BINARY_BORDERS = function(t) {
        var s, n = this,
        o = {
            hasBorders: function(t, i, s) {
                var o = n.symbol.getDigits(),
                a = e.valueIsEmpty,
                r = e.numberFormat;
                a(s) || !s || isNaN(s) ? this.hasNotBorders(t) : (t.querySelector(".rectangle").innerHTML = '<div class="caption">' + i + '</div> <div class="value">' + r(s, o, ".", "") + "</div>", t.classList.remove("off"))
            },
            hasNotBorders: function(e) {
                e.querySelector(".rectangle").innerHTML = "",
                e.classList.add("off")
            }
        };
        s = t ? o.hasBorders.bind(o) : o.hasNotBorders.bind(o);
        try {
            switch (this.type) {
            case l.MARKET_ORDER:
            case l.PENDING_ORDER:
                return;
            default:
                var a = this.packages.binaryPackage,
                r = a.values.top = i(t.top) ? a.values.top: t.top || 0,
                h = a.values.bottom = i(t.bottom) ? a.values.bottom: t.bottom || 0,
                d = this.binaryOptionType;
                2 !== d && 3 !== d || (a.values.top = r = 0, a.values.top = h = 0),
                s(a.top, "Tp", r),
                s(a.bottom, "Bt", h)
            }
        } catch(e) {}
    },
    o.CREATE_BULLET = function() {
        var e = document.createElement("div"),
        t = document.createElement("div"),
        i = document.createElement("div"),
        s = document.createElement("div"),
        n = document.createElement("div"),
        o = document.createElement("div");
        return e.classList.add("bullet-control"),
        t.classList.add("line"),
        i.classList.add("bullet"),
        n.classList.add("triangle"),
        o.classList.add("rectangle"),
        s.classList.add("backgCont"),
        i.appendChild(n),
        s.appendChild(o),
        i.appendChild(s),
        e.appendChild(t),
        e.appendChild(i),
        e
    },
    o.CREATE_PSEUDO_BULLET = function() {
        var e = document.createElement("div"),
        t = document.createElement("div");
        return e.classList.add("pseudo-bullet"),
        t.classList.add("rectangle"),
        e.appendChild(t),
        e
    },
    o.ATTACH_MARKET_PACKAGE = function() {
        var e = document.createDocumentFragment(),
        t = this.CREATE_BULLET(),
        i = this.CREATE_BULLET(),
        s = this.CREATE_PSEUDO_BULLET();
        t.classList.add("take-profit"),
        i.classList.add("stop-loss"),
        s.classList.add("current-price"),
        this.packages.marketPackage = {
            own: e,
            takeProfit: t,
            stopLoss: i,
            currentPrice: s,
            values: {
                takeProfit: 0,
                stopLoss: 0,
                currentPrice: 0
            }
        }
    },
    o.ATTACH_PENDING_PACKAGE = function() {
        var e = document.createDocumentFragment(),
        t = this.CREATE_BULLET(),
        i = this.CREATE_BULLET(),
        s = this.CREATE_PSEUDO_BULLET(),
        n = this.CREATE_PSEUDO_BULLET();
        t.classList.add("take-profit"),
        i.classList.add("stop-loss"),
        s.classList.add("open-price"),
        n.classList.add("current-price"),
        this.packages.pendingPackage = {
            own: e,
            takeProfit: t,
            stopLoss: i,
            openPrice: s,
            currentPrice: n,
            values: {
                takeProfit: 0,
                stopLoss: 0,
                openPrice: 0,
                currentPrice: 0
            }
        }
    },
    o.ATTACH_BINARY_PACKAGE = function() {
        var e = document.createDocumentFragment(),
        t = this.CREATE_PSEUDO_BULLET(),
        i = this.CREATE_PSEUDO_BULLET(),
        s = this.CREATE_PSEUDO_BULLET();
        t.classList.add("high"),
        i.classList.add("low"),
        s.classList.add("current-price"),
        this.packages.binaryPackage = {
            own: e,
            top: t,
            bottom: i,
            currentPrice: s,
            values: {
                top: 0,
                bottom: 0
            }
        }
    },
    o.REMOVE_CONTAINER_PACKAGE = function() {
        for (var e = this.container,
        t = this.packages.main.bulletsContainer; e.firstChild;) e.removeChild(e.firstChild);
        for (; t.firstChild;) t.removeChild(t.firstChild)
    },
    o.render = function(e, t) {
        var i = this;
        requestAnimationFrame(function() {
            function s(e, t, s) {
                var n = i.packages.main.bulletsContainer,
                o = n.offsetHeight,
                a = .25 * o,
                r = 3 * a;
                parseFloat(t) > parseFloat(s) ? e.style.top = a + "px": e.style.top = r + "px"
            }
            switch (i.UPDATE_PRICES(e), i.type) {
            case l.MARKET_ORDER:
                i.UPDATE_STOP_ORDERS(t);
                var n = i.packages.marketPackage;
                s(n.takeProfit, n.values.takeProfit || 0, n.values.currentPrice || 0, n),
                s(n.stopLoss, n.values.stopLoss || 0, n.values.currentPrice || 0, n);
                break;
            case l.PENDING_ORDER:
                i.UPDATE_STOP_ORDERS(t);
                break;
            case l.BINARY_OPTION:
                i.UPDATE_BINARY_BORDERS(t)
            }
        })
    },
    o.renderBullets = function() {
        function t(e) {
            var t = e.values,
            i = n.packages.main.bulletsContainer,
            s = i.offsetHeight,
            o = .12498 * s,
            a = .61917 * o + "px",
            r = e.currentPrice,
            l = r.querySelector(".rectangle").style,
            h = e.takeProfit.querySelector(".rectangle").style,
            d = e.stopLoss.querySelector(".rectangle").style;
            h.fontSize = l.fontSize = d.fontSize = a,
            r.style.top = .5115 * s + "px",
            n.render({
                currentPrice: t.currentPrice
            },
            {
                takeProfit: t.takeProfit,
                stopLoss: t.stopLoss
            })
        }
        function i(t, i) {
            var s = e.requestPendingOrderType,
            o = n.packages.main.bulletsContainer,
            a = o.offsetHeight,
            r = .12498 * a,
            l = .15665 * a,
            h = .32866 * a,
            d = .5055 * a,
            c = .679 * a,
            u = .85425 * a,
            g = i.takeProfit,
            p = g.querySelector(".rectangle").style,
            m = i.currentPrice,
            _ = m.querySelector(".rectangle").style,
            y = i.openPrice,
            S = y.querySelector(".rectangle").style,
            f = i.stopLoss,
            v = f.querySelector(".rectangle").style,
            C = .61917 * r + "px";
            switch (p.fontSize = v.fontSize = _.fontSize = S.fontSize = C, t) {
            case s.BuyLimit:
                g.style.top = l + "px",
                m.style.top = h + "px",
                y.style.top = c + "px",
                f.style.top = u + "px";
                break;
            case s.BuyStop:
                g.style.top = h + "px",
                y.style.top = d + "px",
                f.style.top = c + "px",
                m.style.top = u + "px";
                break;
            case s.SellLimit:
                f.style.top = l + "px",
                y.style.top = h + "px",
                m.style.top = c + "px",
                g.style.top = u + "px";
                break;
            case s.SellStop:
                m.style.top = l + "px",
                f.style.top = h + "px",
                y.style.top = d + "px",
                g.style.top = c + "px"
            }
        }
        function s(e) {
            var t = n.packages.main.bulletsContainer,
            i = t.offsetHeight,
            s = .12498 * i,
            o = .257 * i,
            a = .5099 * i,
            r = .753 * i,
            l = e.top,
            h = l.querySelector(".rectangle").style,
            d = e.currentPrice,
            c = d.querySelector(".rectangle").style,
            u = e.bottom,
            g = u.querySelector(".rectangle").style,
            p = .61917 * s + "px";
            h.fontSize = c.fontSize = g.fontSize = p,
            l.style.top = o + "px",
            d.style.top = a + "px",
            u.style.top = r + "px"
        }
        var n = this;
        switch (n.type) {
        case l.MARKET_ORDER:
            t(n.packages.marketPackage);
            break;
        case l.PENDING_ORDER:
            i(n.pendingOrderType, n.packages.pendingPackage);
            break;
        case l.BINARY_OPTION:
            s(n.packages.binaryPackage)
        }
    },
    o.updateCurrentTriangle = function() {
        var e = this.type,
        t = l.MARKET_ORDER,
        i = 8.434,
        s = 22.133,
        n = 12.498,
        o = this.packages,
        a = o.main.bulletsContainer,
        r = a.offsetHeight;
        0 === r && (r = window.innerWidth / 100 * 44.6875);
        var h = r / 100 * n / 2,
        d = h,
        c = window.innerWidth / 100 * s / 100 * i + .5;
        switch (e) {
        case t:
        case l.PENDING_ORDER:
            var u = e === t ? o.marketPackage: o.pendingPackage;
            u.stopLoss.querySelector(".triangle").style.borderWidth = u.takeProfit.querySelector(".triangle").style.borderWidth = h + "px " + c + "px " + d + "px 0px"
        }
    },
    o.get = function() {
        this.REMOVE_CONTAINER_PACKAGE();
        var e = this.packages,
        t = this.container,
        i = e.main,
        s = i.bulletsContainer;
        switch (this.type) {
        case l.MARKET_ORDER:
            var n = e.marketPackage;
            n.own.appendChild(n.takeProfit),
            s.appendChild(n.currentPrice),
            n.own.appendChild(n.stopLoss),
            s.appendChild(n.own);
            break;
        case l.PENDING_ORDER:
            var o = e.pendingPackage;
            o.own.appendChild(o.takeProfit),
            s.appendChild(o.currentPrice),
            s.appendChild(o.openPrice),
            o.own.appendChild(o.stopLoss),
            s.appendChild(o.own);
            break;
        case l.BINARY_OPTION:
            var a = e.binaryPackage;
            a.own.appendChild(a.top),
            s.appendChild(a.currentPrice),
            a.own.appendChild(a.bottom),
            s.appendChild(a.own)
        }
        return t.appendChild(i.image),
        t.appendChild(s),
        t
    },
    o = null,
    e.getMobileImageForPositionDialog = function(t) {
        return n ? n.updateProperties(t) : e.mobileImageForPositionDialog = n = new e.MobileImageForPositionDialog(t),
        n
    },
    e
}),
define("mobile/mobileDialogBuyOption", ["swiper", "container", "dialogBuyOption", "mobile/mobileImageForPositionDialog"],
function(e) {
    function t(t) {
        var i = e.valueIsEmpty,
        s = t instanceof Array;
        if (i(t) || !s) return ! 1;
        for (var n = t.length,
        o = 0; o < n; ++o) if (i(t[o])) return ! 0;
        return ! 1
    }
    function i() {
        this.setPayout()
    }
    e.MobileDialogBuyOption = function(t) {
        e.MobileDialogBuyOption.base.constructor.apply(this, arguments),
        e.Resizer.register(this)
    },
    e.initClass(e.MobileDialogBuyOption, e.DialogBuyOption);
    var s = e.MobileDialogBuyOption.prototype;
    return s._onChangeLang = function() {
        e.DialogNewOrder.base._onChangeLang.apply(this, arguments)
    },
    s._render = function() {
        this._Width = parseInt(window.innerWidth),
        this._Height = parseInt(window.innerHeight),
        this._Top = 0,
        this._Left = 0,
        this._buttonsTextHeight = 19,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.DialogBinaryOptionContent);
        var t = this._Content.querySelector(".dialogLabel");
        t.innerHTML = e.LangManager.getStringByKey("cMFBuyOption") || "Buy option",
        this._optionsSettingsSelect = new e.InputSelect({
            Template: e._Templates.MobileInputSelect,
            Width: window.innerWidth,
            Edit: !1,
            Class: "SymbolSelect",
            MenuClass: "SymbolSelect",
            ChangedValue: e.Delegate(this, this._onOptionSettingsSelectChanged)
        }),
        this._sumSelect = new e.InputSelectNumber({
            Template: e._Templates.MobileInputSelect,
            Class: "InnerLabel",
            MenuClass: "VolumeSelect",
            Caption: e.LangManager.getStringByKey("cWCTOptionSum") || "Sum",
            OnlyNumbers: !0,
            Edit: !0,
            Options: [e.TraderData.getTraderGroup().optionSumLevel1, e.TraderData.getTraderGroup().optionSumLevel2, e.TraderData.getTraderGroup().optionSumLevel3],
            IsMobile: !0,
            MinValue: e.TraderData.getTraderGroup().minOptionSum,
            MaxValue: e.TraderData.getTraderGroup().maxOptionSum,
            MaxLength: e.TraderData.getTraderGroup().maxOptionSum.toString().length,
            ChangeValue: e.Delegate(this, this._onSumSelectChanged),
            ChangedValue: e.Delegate(this, this._onSumSelectChanged)
        }),
        this._periodSelect = new e.InputSelectNumber({
            Template: e._Templates.MobileInputSelect,
            Edit: !0,
            Class: "InnerLabel",
            MenuClass: "VolumeSelect",
            Caption: e.LangManager.getStringByKey("cICPeriod") || "Expiry",
            OnlyNumbers: !0,
            Disabled: !0,
            ReadOnly: !0,
            IsMobile: !0,
            ChangedValue: e.Delegate(this, this._periodSelectChanged)
        }),
        this._lowButton = new e.Button({
            Class: "WTButton SellBtn",
            Text: "Low",
            Price: "",
            Key: "cWCTOptionLow",
            Color: "#e84444",
            Click: e.Delegate(this, this._onLowBtnClick)
        }),
        this._highButton = new e.Button({
            Class: "WTButton BuyBtn",
            Text: "High",
            Price: "",
            Key: "cWCTOptionHigh",
            Color: "#52bf31",
            Click: e.Delegate(this, this._onHighBtnClick)
        }),
        this._pages = this.getPages();
        var i, s, n, o = [];
        for (i = 0; i < this._pages.length; i++) s = this._pages[i].name,
        n = this._getPageTitle(s),
        o.push({
            Title: n.Title,
            Key: n.Key,
            Id: s,
            Content: this._getPageContent(s),
            PreContent: this._getPreContent(s, this._pages[i].type)
        });
        this._swiper = new e.Swiper({
            ParentNode: this._Content,
            Template: e._Templates.SwiperPendingOrder,
            TabMode: "Normal",
            Class: "DPOSettsContent InsideDialog MobileSwiper",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            Pages: o
        }),
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "rgb(167, 149, 133)",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this.hide)
        }),
        e.addEvent(this._Content.querySelector(".HeadPanel"), "click", this.hide.bind(this)),
        e.DialogBuyOption.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogBuyOption"),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this.onDialogTouchMove.bind(this)),
        this._onOptionSettingsSelectChanged(),
        this._onWindowResize()
    },
    s.getPages = function() {
        var t = [];
        return this._defaultOptions = [],
        e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.express, !0).length > 0 && t.push({
            name: e.OptionTypeNames[e.OptionSettingsType.express],
            type: e.OptionSettingsType.express
        }),
        e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.classic, !0).length > 0 && t.push({
            name: e.OptionTypeNames[e.OptionSettingsType.classic],
            type: e.OptionSettingsType.classic
        }),
        e.getTerminal().useNewOptions && (e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.oneTouch, !0).length > 0 && t.push({
            name: e.OptionTypeNames[e.OptionSettingsType.oneTouch],
            type: e.OptionSettingsType.oneTouch
        }), e.OptionsSettings.getOptionsByTypeExceptForbidden(e.OptionSettingsType.range, !0).length > 0 && t.push({
            name: e.OptionTypeNames[e.OptionSettingsType.range],
            type: e.OptionSettingsType.range
        })),
        t
    },
    s._onGetQuote = function(e) {
        e && this._currentOptionSettings && this._currentOptionSettings.getSymbolName() == e._SymbolName && this.setCurrentQuote()
    },
    s.setCurrentQuote = function() {
        if (this._swiper && this._currentOptionSettings) {
            var t = this["_" + this._swiper.getSelectedPage().getId()];
            if (t._statusNode.innerHTML == (e.LangManager.getStringByKey("cWCMQuerySent") || "Order sent!!!!!")) return;
            var i = this._currentSymbol;
            if (i) {
                switch (this._currentOptionSettings._type) {
                case e.OptionSettingsType.express:
                case e.OptionSettingsType.classic:
                    this._highButton.setSplitPrice(i.getBid(), i.getDigits()),
                    this._lowButton.setSplitPrice(i.getBid(), i.getDigits());
                    break;
                case e.OptionSettingsType.oneTouch:
                    var s = this.getBorder(!0, i.getBid()),
                    n = this.getBorder(!1, i.getBid());
                    this._highButton.setSplitPrice(s, i.getDigits()),
                    this._lowButton.setSplitPrice(n, i.getDigits());
                    break;
                case e.OptionSettingsType.range:
                    s = e.numberFormat(this.getBorder(!0, i.getBid()), i.getDigits(), "."),
                    n = e.numberFormat(this.getBorder(!1, i.getBid()), i.getDigits(), "."),
                    this._highButton.setPrice(n + "  - " + s),
                    this._lowButton.setPrice(n + "  - " + s)
                }
                this["_pre" + this._swiper.getSelectedPage().getId()].BinaryOptionImg.updateProperties({
                    symbol: i,
                    binaryOptionName: this._optionsSettingsSelect.getValue(),
                    binaryOptionType: this.getOptionTypeByPageNumber(this._swiper),
                    prices: {
                        currentPrice: i.getBid()
                    },
                    borders: {
                        top: s || "",
                        bottom: n || ""
                    }
                }),
                this["_pre" + this._swiper.getSelectedPage().getId()].BinaryOptionImg.UPDATE_IMAGE_SIZE()
            }
        }
    },
    s._onSwiperChangeSelectedPage = function(t) {
        var i = t.getSelectedPage()._Content,
        s = i.querySelector(".Top"),
        n = i.querySelector(".SumAndExpiryBlock"),
        o = i.querySelector(".BuyAndSellButtons");
        this._optionsSettingsSelect.addToNode(s),
        this._sumSelect.addToNode(n),
        this._periodSelect.addToNode(n),
        this._lowButton.addToNode(o),
        this._highButton.addToNode(o);
        var a = this.getOptionTypeByPageNumber(t);
        switch (a) {
        case e.OptionSettingsType.express:
        case e.OptionSettingsType.classic:
            this._lowButton.setText(e.LangManager.getStringByKey("cWCTOptionLow") || "Low"),
            this._highButton.setText(e.LangManager.getStringByKey("cWCTOptionHigh") || "High");
            break;
        case e.OptionSettingsType.range:
            this._lowButton.setText(e.LangManager.getStringByKey("cOPTOutside") || "Outside"),
            this._highButton.setText(e.LangManager.getStringByKey("cOPTInside") || "Inside");
            break;
        case e.OptionSettingsType.oneTouch:
            this._lowButton.setText(e.LangManager.getStringByKey("cOPTBottom") || "Bottom"),
            this._highButton.setText(e.LangManager.getStringByKey("cOPTTop") || "Top")
        }
        this.setCurrentQuote(),
        this._currentOptionType = a,
        this.fillOptionsSettingsName(),
        this._onOptionSettingsSelectChanged(),
        i.querySelector(".LabelCaption") && i.querySelector(".LabelValue") && this.setPayout()
    },
    s.setExpiryDate = function(t) {
        var i = t.getSelectedPage().getId(),
        s = this["_" + i];
        if (0 == this._periodSelect.getOptions().length) this._stopValueNode.innerHTML = "";
        else var n = this._periodSelect.getOptions()[this._periodSelect.getSelectedOption()].Data;
        var o = e.UtipFunctions.getOptionTime(this._currentOptionType, this._currentOptionSettings.getName(), e.SymbolsData._LastChangedTime, n);
        s._stopValueNode.innerHTML = new Date(o.timeBeforeStopTime).toLocaleFormat("%M:%S")
    },
    s._periodSelectChanged = function(t) {
        this._checkAvailabilityPeriodForThePurchase(e.SymbolsData.getLastChangedTime() + t.sender.getSelectedData().period) ? this._tradingAvailable(!0, t.event) : this._tradingAvailable(!1, t.event),
        this.checkTradeAllowed(),
        this._currentParamID = t.sender.getSelectedData().paramID,
        this.setPayout(),
        this.setCurrentQuote()
    },
    s._getPreContent = function(t, i) {
        var s = e.htmlToDOM('<div class="PagePreContent"></div>'),
        n = {};
        return n.pageName = t,
        n.BinaryOptionImg = new e.MobileImageForPositionDialog({
            symbol: "",
            type: e.POSITION_IMAGE_PACKAGE_TYPES.BINARY_OPTION,
            binaryOptionName: "",
            binaryOptionType: i
        }),
        s.appendChild(n.BinaryOptionImg.get()),
        this["_pre" + t] = n,
        s
    },
    s._getPageContent = function(t) {
        var i = e.htmlToDOM('<div class="PageContent"><div class="Top"></div><div class="SumAndExpiryBlock"></div><div class="PayoutBlock"></div><div class="StatusBlock"></div><div class="BuyAndSellButtons"></div></div>'),
        s = {};
        s.pageName = t,
        s.payoutNode = e.htmlToDOM(e._Templates.LabelsPanel),
        s.payoutLabelNode = s.payoutNode.querySelector(".LabelCaption"),
        s._payoutValueNode = s.payoutNode.querySelector(".LabelValue"),
        s.payoutLabelNode.innerHTML = e.LangManager.getStringByKey("cWCTOptionPayout") || "Payout",
        s._payoutValueNode.innerHTML = "0",
        i.querySelector(".PayoutBlock").appendChild(s.payoutNode),
        this._sumSelect._DomNode.style.display = this._periodSelect._DomNode.style.display = "inline-block";
        var n = this._sumSelect._DomNode.querySelector(".WTInputSelectCaption");
        n.classList.add("Out");
        var o = this._periodSelect._DomNode.querySelector(".WTInputSelectCaption");
        return o.classList.add("Out"),
        s._statusNode = e.htmlToDOM(e._Templates.mobileOperationStatus),
        s._statusNode.innerHTML = "",
        i.querySelector(".StatusBlock").appendChild(s._statusNode),
        this["_" + t] = s,
        i
    },
    s._onSumSelectChanged = function(e) {
        this.setPayout(),
        this.checkTradeAllowed()
    },
    s.setSeparatorWidth = function() {
        if (this._swiper) {
            var e = this._swiper.getSelectedPage()._Content,
            t = e.querySelector(".LabelCaption").clientWidth,
            i = e.querySelector(".LabelValue").clientWidth,
            s = window.innerWidth - (t + 23 + (i + 20));
            e.getElementsByClassName("Separator")[0].style.width = s + "px"
        }
    },
    s.show = function(s, n) {
        e.addCSSClass(document.body, "orderDialog"),
        e.DialogBuyOption.base.show.apply(this, arguments),
        this._swiper.setSelectedPage(e.OptionsSettings.getSelectedOptionType()),
        t([n]) || (this._currentSymbol = e.SymbolsData.getSymbols()[n], this._optionsSettingsSelect.setSelectedOption(this.getInputSelectCurrentOptionId(n)), this._onOptionSettingsSelectChanged()),
        i.apply(this, [])
    },
    s.hide = function() {
        e.removeCSSClass(document.body, "orderDialog"),
        e.DialogBuyOption.base.hide.apply(this, arguments)
    },
    s.showByNameAndType = function(s, n, o) {
        if (e.DialogBuyOption.base.show.apply(this, arguments), this._swiper.setSelectedPage(o), !t([n, o])) {
            var a = e.OptionsSettings.getOptionSettingsByNameAndType(n, o);
            this._currentSymbol = a.getSymbolName(),
            this._optionsSettingsSelect.setSelectedOption(this.getInputSelectCurrentOptionId(n)),
            this._onOptionSettingsSelectChanged()
        }
        i.apply(this, [])
    },
    s.getInputSelectCurrentOptionId = function(e) {
        for (var t = this._optionsSettingsSelect.getOptions(), i = 0; i < t.length; i++) if (t[i].Text === e) return i
    },
    s.setWidth = function() {},
    s.showQueryStatus = function(e) {
        if (this._swiper) {
            var t = this._swiper.getSelectedPage().getId(),
            i = this["_" + t];
            e ? (i._statusNode.innerHTML = e, i._statusNode.style.display = "") : (i._statusNode.innerHTML = "", i._statusNode.style.display = "none", this.setCurrentQuote())
        }
    },
    s._onWindowResize = function(t) {
        var i = e.getAppHeight(),
        s = window.innerWidth,
        n = this._sumSelect._DomNode.querySelector(".WTInputSelectField");
        n.style.width = (s - 34) / 2 - 8.5 + "px";
        var o = this._periodSelect._DomNode.querySelector(".WTInputSelectField");
        o.style.width = (s - 34) / 2 - 8.5 + "px",
        this.setWidth(s),
        this.setHeight(i),
        this._optionsSettingsSelect.setWidth(s - 1),
        this._tuneSwiperPagesButtons(i)
    },
    s._tuneSwiperPagesButtons = function(e) {
        this._swiper && this._swiper.getPages().forEach(function(t) {
            var i = t.getContent().querySelector(".BuyAndSellButtons"),
            s = t.getContent().querySelector(".StatusBlock");
            i.style.top = e - 72 + "px",
            s.style.top = e - 93 + "px"
        })
    },
    s = null,
    e.getMobileDialogBuyOption = function(t) {
        return e._dialogBuyOption || (e._dialogBuyOption = new e.MobileDialogBuyOption(t), e._dialogBuyOption._swiper._TabButtons.forEach(function(t) {
            t._DomNode.style.width = Math.round(100 / e._dialogBuyOption._swiper._TabButtons.length) + "%"
        })),
        e._dialogBuyOption
    },
    e
}),
define("mobile/mobileDialogNewOrder", ["dialog", "checkBoxGroup", "inputSelectNumber", "inputNumber", "symbolsData", "tradeFunctions", "dialogNewOrder", "resizer"],
function(e) {
    e.MobileDialogNewOrder = function(t) {
        e.MobileDialogNewOrder.base.constructor.apply(this, arguments),
        e.Resizer.register(this)
    },
    e.initClass(e.MobileDialogNewOrder, e.DialogNewOrder);
    var t = e.MobileDialogNewOrder.prototype;
    return t._render = function() {
        this._Width = parseInt(window.innerWidth),
        this._Height = parseInt(window.innerHeight),
        this._Top = 0,
        this._Left = 0,
        this._buttonsTextHeight = 19,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.DialogNewOrderContent);
        var t = this._Content.querySelector(".dialogLabel");
        t.innerHTML = e.LangManager.getStringByKey("cMFNewMarketOrder") || "New market order",
        this._symbols = this._symbols || e.SymbolsData.getSelectedSymbolExceptIndexes(),
        this._symbolSelect = new e.InputSelect({
            ParentNode: this._Content,
            Template: e._Templates.MobileInputSelect,
            Options: this._symbols,
            Width: window.innerWidth,
            Edit: !1,
            Class: "SymbolSelect",
            MenuClass: "SymbolSelect",
            ChangedValue: e.Delegate(this, this._onSymbolSelectChanged)
        }),
        this._volumeCombo = new e.InputSelectNumber({
            ParentNode: this._Content,
            Template: e._Templates.MobileInputSelect,
            Options: e.UtipFunctions.getVolumesList(e.SymbolsData.getSymbols()[this._symbolSelect.getValue()]),
            Width: window.innerWidth - 40,
            Caption: e.LangManager.getStringByKey("cWCTTradePositionsFormVolume") || "Volume",
            Edit: !0,
            Class: "InnerLabel",
            MenuClass: "VolumeSelect",
            DropDown: e.Delegate(this, this._onVolumeDropDown),
            ChangeValue: e.Delegate(this, this._onVolumeSelectChange),
            OnlyNumbers: !0,
            Decimals: e.UtipFunctions.getDecimalCount()
        }),
        this._volumeCombo._DomNode.querySelector(".WTInputSelectCaption").classList.add("Out"),
        this._volumeCombo._DomNode.querySelector(".WTInputSelectField").classList.add("Volume"),
        this._takeProfitNumEdit = new e.MobileStopOrderControl({
            ParentNode: this._Content,
            Id: "TakeProfitNumEdit",
            Label: "Take profit",
            Key: "cTOTakeProfit",
            type: e.STOP_ORDER_TYPES.TAKE_PROFIT,
            LabelPosition: "Template",
            MaxValue: 999999,
            Class: "TPField",
            IsMobile: !0,
            BeforeChange: e.Delegate(this, this.beforeTPChange),
            ChangedValue: e.Delegate(this, this._onTPSLChangedValue),
            ChangeValue: e.Delegate(this, this._refreshButtons),
            TumblerChanged: e.Delegate(this, this._onTumblerChanged),
            TumblerOn: !0,
            setWidth: this.setStopOrderWidth
        }),
        this._stopLossNumEdit = new e.MobileStopOrderControl({
            ParentNode: this._Content,
            Id: "StopLossNumEdit",
            Label: "Stop loss",
            Key: "cTOStopLoss",
            type: e.STOP_ORDER_TYPES.STOP_LOSS,
            LabelPosition: "Template",
            MaxValue: 999999,
            Class: "SLField",
            IsMobile: !0,
            BeforeChange: e.Delegate(this, this.beforeSLChange),
            ChangedValue: e.Delegate(this, this._onTPSLChangedValue),
            ChangeValue: e.Delegate(this, this._refreshButtons),
            TumblerChanged: e.Delegate(this, this._onTumblerChanged),
            TumblerOn: !0,
            setWidth: this.setStopOrderWidth
        }),
        this._statusNode = e.htmlToDOM(e._Templates.mobileOperationStatus),
        this._Content.appendChild(this._statusNode),
        this._Content.appendChild(e.htmlToDOM('<div class="BuyAndSellButtons"></div>')),
        this._SellButton = new e.Button({
            ParentNode: this._Content.querySelector(".BuyAndSellButtons"),
            Class: "WTButton SellBtn",
            Text: "Low",
            Price: "",
            Key: "cMDSell",
            Color: "#e84444",
            Click: e.Delegate(this, this._onSellBtnClick)
        }),
        this._BuyButton = new e.Button({
            ParentNode: this._Content.querySelector(".BuyAndSellButtons"),
            Class: "WTButton BuyBtn",
            Text: "High",
            Price: "",
            Key: "cMDBuy",
            Color: "#52bf31",
            Click: e.Delegate(this, this._onBuyBtnClick)
        }),
        this._onSymbolSelectChanged(),
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "rgb(167, 149, 133)",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this.hide)
        }),
        this._Content.insertBefore(this._getPreContent(), this._symbolSelect.getDomNode()),
        this._takeProfitNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
        this._stopLossNumEdit.setStep(this._currentSymbol.getFormattedPrecision()),
        e.addEvent(this._Content.querySelector(".HeadPanel"), "click", this.hide.bind(this)),
        e.DialogNewOrder.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogNewOrder"),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this.onDialogTouchMove.bind(this)),
        this._onWindowResize(),
        this.setCurrentQuote(this._currentSymbol)
    },
    t.setStopOrderWidth = function(e) {
        var t = this._fieldNode,
        i = this.inputControlNode;
        if (t && i) {
            var s = e / 2 - 8.5;
            i.style.width = s + "px",
            t.style.width = s - 52 + "px",
            this._Width = s - 17
        }
    },
    t._onTPSLChangedValue = function(e) {
        var t = e.sender;
        t.getValue();
        this._pre && this._currentSymbol && this._pre.MarketorderImg.render({
            currentPrice: this._currentSymbol._Bid
        },
        {
            takeProfit: this._takeProfitNumEdit.getValue() || "",
            stopLoss: this._stopLossNumEdit.getValue() || ""
        }),
        this._refreshButtons()
    },
    t.show = function(t, i) {
        e.addCSSClass(document.body, "orderDialog"),
        e.DialogNewOrder.base.show.apply(this, arguments),
        i && (this._currentSymbol = e.SymbolsData.getSymbols()[i], this._symbolSelect.setSelectedOption(this._symbolSelect.getOptions().indexOf(i)), this.setCurrentQuote(this._currentSymbol), this._symbolSelect.ChangedValue.fire({
            event: null,
            sender: this._symbolSelect
        }), this._takeProfitNumEdit.setDecimals(this._currentSymbol.getDigits()), this._stopLossNumEdit.setDecimals(this._currentSymbol.getDigits()))
    },
    t.hide = function() {
        0 === this._statusNode.childNodes.length && (e.removeCSSClass(document.body, "orderDialog"), e.DialogNewOrder.base.hide.apply(this, arguments))
    },
    t._onSymbolSelectChanged = function() {
        this.enableControls(!0),
        this._currentSymbol = e.SymbolsData.getSymbols()[this._symbolSelect.getValue()],
        this._symbolSelect.setDescription(this._currentSymbol._Description),
        this._volumeCombo.setSelectedOption(0),
        this._takeProfitNumEdit.setValue(0),
        this._stopLossNumEdit.setValue(0),
        this._takeProfitNumEdit.setDecimals(this._currentSymbol._Digits),
        this._stopLossNumEdit.setDecimals(this._currentSymbol._Digits),
        this.setSymbolForPositionImage(this._currentSymbol),
        this.setCurrentQuote(this._currentSymbol),
        this._refreshButtons()
    },
    t.setEnabled = function(t) {
        e.MobileDialogNewOrder.base.setEnabled.apply(this, arguments),
        this.enableControls(t)
    },
    t.enableControls = function(t) {
        if (this._DomNode) {
            var i = this._DomNode.querySelector(".TPField"),
            s = this._DomNode.querySelector(".SLField"),
            n = this._volumeCombo._DomNode;
            t === !0 ? (e.removeCSSClass(i, "Disabled"), e.removeCSSClass(s, "Disabled"), e.removeCSSClass(n, "Disabled")) : (e.addCSSClass(n, "Disabled"), e.addCSSClass(i, "Disabled"), e.addCSSClass(s, "Disabled"))
        }
    },
    t._onGetQuote = function(e) {
        e && this._currentSymbol && this._currentSymbol._SymbolName === e._SymbolName && this.setCurrentQuote(this._currentSymbol)
    },
    t._onSocketMessage = function(t) {
        switch (t.msgType) {
        case "symbols":
        case "mt4Symbols":
        case "deletedSymbol":
            this.updateSymbolList();
            break;
        case "positions":
        case "allMT4OpenOrders":
            if (!this.enabled()) {
                for (; this._statusNode.firstChild;) this._statusNode.removeChild(this._statusNode.firstChild);
                this.hide()
            }
            break;
        case "openPosition":
        case "openMT4Position":
            if (t.msgResult.toUpperCase() != "Success".toUpperCase()) this.unLock(),
            this.showQueryStatus("");
            else {
                var i = e.getTerminal().mainSwiper,
                s = e.MobileTerminalPage;
                i.getSelectedPageIndex() === s.QuotesPage && i.setSelectedPage(s.TradePage)
            }
        }
    },
    t.setSymbolForPositionImage = function(e) {
        this._pre && this._pre.MarketorderImg.updateProperties({
            symbol: e
        })
    },
    t.setCurrentQuote = function(e) {
        0 === this._statusNode.childNodes.length && (this._SellButton.setSplitPrice(this._currentSymbol._Bid, this._currentSymbol._Digits), this._BuyButton.setSplitPrice(this._currentSymbol._Ask, this._currentSymbol._Digits), this._pre && this._pre.MarketorderImg.render({
            currentPrice: this._currentSymbol._Bid
        },
        {
            takeProfit: this._takeProfitNumEdit.getValue() || "",
            stopLoss: this._stopLossNumEdit.getValue() || ""
        }), this._refreshButtons())
    },
    t._getPreContent = function() {
        var t = e.htmlToDOM('<div class="PagePreContent"></div>'),
        i = {};
        return i.MarketorderImg = new e.MobileImageForPositionDialog({
            symbol: this._currentSymbol,
            type: e.POSITION_IMAGE_PACKAGE_TYPES.MARKET_ORDER
        }),
        t.appendChild(i.MarketorderImg.get()),
        this._pre = i,
        t
    },
    t._onTumblerChanged = function(e) {
        var t = this._takeProfitNumEdit,
        i = this._stopLossNumEdit;
        if (t && i) {
            var s = this.setCurrentQuote.bind(this),
            n = this._currentSymbol;
            i.shown() || (i.setValue(0), s(n)),
            t.shown() || (t.setValue(0), s(n)),
            this._refreshButtons(e)
        }
    },
    t._refreshButtons = function(t) {
        e.MobileDialogNewOrder.base._refreshButtons.apply(this, t)
    },
    t.setWidth = function() {},
    t.getTakeProfitAndStopLoss = function(e) {
        var t = 0,
        i = 0;
        return t = this._takeProfitNumEdit.getValue() || 0,
        i = this._stopLossNumEdit.getValue() || 0,
        {
            takeProfit: t,
            stopLoss: i
        }
    },
    t._onWindowResize = function(t) {
        var i = e.getAppHeight(),
        s = window.innerWidth;
        screen.height = i,
        screen.width = s;
        var n = s - 34;
        this.setWidth(s),
        this.setHeight(i),
        this._symbolSelect.setWidth(s),
        this._volumeCombo.setWidth(n / 2 - 9.5),
        this._takeProfitNumEdit.setWidth(n),
        this._stopLossNumEdit.setWidth(n),
        this._BuyButton.getDomNode().parentNode.style.top = i - 72 + "px",
        this._statusNode.style.top = i - 93 + "px"
    },
    t = null,
    e.getMobileDialogNewOrder = function(t) {
        return e._dialogNewOrder || (e._dialogNewOrder = new e.MobileDialogNewOrder(t)),
        e._dialogNewOrder
    },
    e
}),
define("mobile/mobileInputIncrementer", ["base", "control"],
function(e) {
    e.MobileInputIncrementer = function(t) {
        void 0 !== t.Width ? this._Width = t.Width: this._Width = 122,
        this._FontSize = t.FontSize,
        this._InputWidth = this._Width - 52,
        this._Value = 0,
        this._MaxValue = 1e3,
        this._MinValue = 0,
        void 0 !== t.Step ? this._Step = t.Step: this._Step = 1,
        this._Decimals = e.UtipFunctions.getStepDecimals(this._Step),
        void 0 !== t.Label ? this.label = e.LangManager.getStringByKey(t.Key) || t.Label || "Price": this.label = "",
        this._defineEvents(["BeforeChange"]),
        e.MobileInputIncrementer.base.constructor.apply(this, [t]),
        this.KeyDown.add(e.Delegate(this, this.keyDown))
    },
    e.initClass(e.MobileInputIncrementer, e.Input);
    var t = e.MobileInputIncrementer.prototype,
    i = e._Templates;
    return t._render = function() {
        this._Template = i.MobileInputIncrementer,
        e.MobileInputIncrementer.base._render.apply(this, arguments);
        var t = this.node = this.getDomNode(),
        s = t.querySelector(".down"),
        n = t.querySelector(".up"),
        o = this.inputControlNode = t.querySelector(".input-control"),
        a = this._fieldNode = o.querySelector(".WTInputField");
        if ("" !== this.label) {
            var r = document.createElement("label");
            r.innerHTML = this.label,
            t.insertBefore(r, t.firstChild)
        }
        a.style.width = this._InputWidth + "px",
        void 0 !== this._FontSize && (a.style.fontSize = this._FontSize),
        s.addEventListener("touchstart", this.downTouchstart.bind(this)),
        s.addEventListener("touchcancel", this.downTouchend.bind(this)),
        s.addEventListener("touchend", this.downTouchend.bind(this)),
        n.addEventListener("touchstart", this.upTouchstart.bind(this)),
        n.addEventListener("touchcancel", this.upTouchend.bind(this)),
        n.addEventListener("touchend", this.upTouchend.bind(this)),
        t.addEventListener("touchmove", this.nodeTouchmove.bind(this), !0),
        t.addEventListener("touchend", this.nodeTouchend.bind(this), !0),
        a.min = this._MinValue,
        a.max = this._MaxValue,
        this.setWidth(this._Width)
    },
    t.nodeTouchmove = function(e) {
        this.moved = !0
    },
    t.nodeTouchend = function(e) {
        this.moved && (this.upTouchend(e), this.downTouchend(e), e.stopPropagation()),
        this.moved = !1
    },
    t.downTouchstart = function(e) {
        var t = this._fieldNode;
        t.blur(),
        clearInterval(this.downInterval),
        this.BeforeChange.fire({
            sender: this,
            direction: "down"
        }),
        this.down(),
        this.downInterval = setInterval(this.down.bind(this), 100),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.downTouchend = function(e) {
        clearInterval(this.downInterval),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.upTouchstart = function(e) {
        var t = this._fieldNode;
        t.blur(),
        clearInterval(this.upInterval),
        this.BeforeChange.fire({
            sender: this,
            direction: "up"
        }),
        this.up(),
        this.upInterval = setInterval(this.up.bind(this), 100),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.upTouchend = function(e) {
        clearInterval(this.upInterval),
        e.preventDefault(),
        e.stopPropagation()
    },
    t.up = function() {
        var e = this.validNumber((this.getValue() || 0) + this._Step);
        this._Value !== e && this.setValue(e),
        this.ChangedValue.fire({
            event: event,
            sender: this,
            changeDirection: "up"
        })
    },
    t.down = function() {
        var e = this.validNumber((this.getValue() || 0) - this._Step);
        this._Value !== e && this.setValue(e),
        this.ChangedValue.fire({
            event: event,
            sender: this,
            changeDirection: "down"
        })
    },
    t.refresh = function(t) {
        t = e.valueIsEmpty(t) ? 0 : e.parseFloat(t)
    },
    t.block = function(e) {
        e = !!e,
        e === !0 ? this.inputControlNode.classList.add("disabled") : this.inputControlNode.classList.remove("disabled")
    },
    t.validNumber = function(t) {
        if ("" === t) return "";
        var i = void 0 == t ? this.getValue() : t,
        s = this._MinValue,
        n = this._MaxValue;
        return i = "string" == typeof i ? e.parseFloat(i) : i,
        i < s ? i = s: i > n && (i = n),
        i
    },
    t.setValue = function(t) {
        var i = this._Value = this.validNumber(t);
        this._fieldNode.value = "" === i || isNaN(i) ? "": e.numberFormat(i, this._Decimals, ".", "")
    },
    t.getValue = function() {
        return e.parseFloat(this._fieldNode.value) || 0
    },
    t.setStep = function(e) {
        this._Step = e
    },
    t.getStep = function() {
        return this._Step
    },
    t.setMinValue = function(e) {
        this._fieldNode.min = this._MinValue = e
    },
    t.setMaxValue = function(e) {
        this._fieldNode.max = this._MaxValue = e
    },
    t.setDecimals = function(t) {
        this._Decimals = t,
        this.setValue(e.numberFormat(this._Value, t, ".", ""))
    },
    t.changedValue = function(e) {
        var t = this.validNumber();
        this._Value !== t && (this.setValue(t), this.ChangedValue.fire({
            event: event,
            sender: this
        }))
    },
    t._onTouchStart = function(t) {
        e.InputSelect.base._onTouchStart.apply(this, arguments),
        this._fieldNode.startTouchX = t.targetTouches[0].screenX,
        this._fieldNode.startTouchY = t.targetTouches[0].screenY
    },
    t.setWidth = function(e) {
        var t = this._fieldNode,
        i = this.inputControlNode;
        if (t && i) {
            var s = e;
            i.style.width = s + "px",
            t.style.width = s + "px",
            this._Width = s - 17
        }
    },
    t.keyDown = function(t) {
        var i = this._fieldNode,
        s = t.event,
        n = s.charCode,
        o = s.keyCode,
        a = s.which,
        r = n || o || a || 0,
        l = e.UtipFunctions.getDecimalIndex(i.value),
        h = 0;
        l > -1 && (h = i.value.substr(l + 1, 100).length),
        this._Decimals > 0 && h >= this._Decimals && 8 != r && 46 != r && 37 != r && 39 != r && 190 != r && 188 != r && s.preventDefault()
    },
    t = null,
    e
}),
define("mobile/mobileDialogPendingOrder", ["mobile/mobileDialogNewOrder", "swiper", "container", "dialogPendingOrder", "mobile/mobileImageForPositionDialog", "mobile/mobileInputIncrementer"],
function(e) {
    e.MobileDialogPendingOrder = function(t) {
        this._ModifyMode = this._ModifyMode || !1,
        e.MobileDialogPendingOrder.base.constructor.apply(this, arguments),
        e.Resizer.register(this);
        var i = "./res/img/imageForPositionDialogs";
        e.UtipFunctions.preloadImages(i + "/buyLimit.png", i + "/sellLimit.png", i + "/buyStop.png", i + "/sellStop.png")
    },
    e.initClass(e.MobileDialogPendingOrder, e.DialogPendingOrder);
    var t = e.MobileDialogPendingOrder.prototype;
    t._onChangeLang = function() {
        e.DialogNewOrder.base._onChangeLang.apply(this, arguments)
    },
    t._render = function() {
        var t = window.innerWidth,
        i = window.innerHeight,
        s = e._Templates,
        n = e.SymbolsData,
        o = e.UtipFunctions,
        a = e.LangManager,
        r = a.getStringByKey.bind(a),
        l = e.Delegate,
        h = this._ModifyMode;
        this._Width = t,
        this._Height = i >= 550 ? i: 550,
        this._Top = 0,
        this._Left = 0,
        this._buttonsTextHeight = 19,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(s.DialogPendingOrderContent);
        var d = this._Content;
        d.querySelector(".dialogLabel").innerHTML = r("cMFNewPendingOrder") || "New pending order";
        var c = this._symbols = this._symbols || n.getSelectedSymbolExceptIndexes() || [];
        h && (c = this._symbols = Object.keys(n.getSymbols()));
        var u = e.Button,
        g = e.MobileStopOrderControl,
        p = this._symbolSelect = new e.InputSelect({
            Template: s.MobileInputSelect,
            Options: c,
            Width: t,
            Edit: !1,
            Class: "SymbolSelect" + (h ? " Disabled": ""),
            MenuClass: "SymbolSelect",
            ChangedValue: l(this, this._onSymbolSelectChanged)
        });
        this._volumeCombo = new e.InputSelectNumber({
            Template: s.MobileInputSelect,
            Options: o.getVolumesList(n.getSymbols()[p.getValue()]),
            Width: t / 2 - 25.5,
            Caption: r("cWCTTradePositionsFormVolumeMobile") || "Volume",
            Edit: !0,
            Class: "InnerLabel",
            MenuClass: "VolumeSelect",
            IsMobile: !0,
            ChangeValue: l(this, this._onVolumeSelectChange),
            ChangedValue: l(this, this._onVolumeSelectChanged),
            DropDown: l(this, this._onVolumeDropDown),
            OnlyNumbers: !0,
            Decimals: o.getDecimalCount()
        }),
        this._PutButton = new u({
            Text: "Place",
            Key: "cNPFPut",
            Class: "WTButton PlaceBtn",
            Width: t,
            Height: 77,
            Click: l(this, this._onPutButtonClick)
        });
        var m = e.STOP_ORDER_TYPES,
        _ = this.stopOrderValueChanged,
        y = this.tumblerChanged,
        S = this.setStopOrderWidth,
        f = this._Order,
        v = !!f,
        C = f || {},
        b = C.takeProfit,
        T = C.stopLoss;
        this._takeProfitNumEdit = new g({
            Width: t,
            Height: 30,
            Id: "TakeProfitNumEdit",
            Label: "Take profit",
            Key: "cTOTakeProfit",
            type: m.TAKE_PROFIT,
            inputMarginLeft: 0,
            LabelPosition: "Template",
            Value: b,
            MaxValue: 999999,
            Class: "TPField",
            IsMobile: !0,
            Focus: l(this, this.setDefaultTP),
            BeforeChange: l(this, this.beforeTPChange),
            ChangedValue: l(this, _),
            ChangeValue: l(this, _),
            TumblerChanged: l(this, y),
            TumblerOn: v,
            setWidth: S
        }),
        this._stopLossNumEdit = new g({
            Width: t,
            Height: 30,
            Id: "StopLossNumEdit",
            Label: "Stop loss",
            Key: "cTOStopLoss",
            type: m.STOP_LOSS,
            inputMarginLeft: 0,
            LabelPosition: "Template",
            Value: T,
            MaxValue: 999999,
            Class: "SLField",
            IsMobile: !0,
            Focus: l(this, this.setDefaultSL),
            BeforeChange: l(this, this.beforeSLChange),
            ChangedValue: l(this, _),
            ChangeValue: l(this, _),
            TumblerChanged: l(this, y),
            TumblerOn: v,
            setWidth: S
        });
        for (var P, D, I = this._pageNames = ["BuyLimit", "SellLimit", "BuyStop", "SellStop"], w = [], M = 0, O = I.length; M < O; ++M) P = I[M],
        D = this._getPageTitle(P),
        w.push({
            Title: D.Title,
            Key: D.Key,
            Id: P,
            Content: this._getPageContent(P),
            PreContent: this.getPreContent(P)
        });
        this._Swiper = new e.Swiper({
            ParentNode: d,
            Template: s.SwiperPendingOrder,
            TabMode: "Normal",
            Class: "DPOSettsContent InsideDialog MobileSwiper",
            ChangeSelectedPage: l(this, this._onSwiperChangeSelectedPage),
            Pages: w
        }),
        this._backBtn = new u({
            ParentNode: d.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "#a79585",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: l(this, this.hide)
        }),
        h && p.setEnabled(!1);
        var L = e.addEvent;
        L(d.querySelector(".HeadPanel"), "click", this.hide.bind(this)),
        e.DialogNewOrder.base._render.apply(this, arguments);
        var k = this._DomNode;
        L(k, "touchstart", this.onDialogTouchStart.bind(this)),
        L(k, "touchmove", this.onDialogTouchMove.bind(this)),
        this.addCSSClass("mobileDialogPendingOrder"),
        this.resize(null)
    },
    t.setStopOrderWidth = function(e) {
        var t = this._fieldNode,
        i = this.inputControlNode;
        if (t && i) {
            var s = e / 2 - 25.5;
            i.style.width = s + "px",
            t.style.width = s - 52 + "px",
            this._Width = s - 17
        }
    },
    t.updatePreContentByStopOrders = function() {
        var e = this._Swiper;
        e && this["_pre" + e.getSelectedPage().getId()].PendingOrderImg.render(null, {
            takeProfit: this._takeProfitNumEdit.getValue(),
            stopLoss: this._stopLossNumEdit.getValue()
        })
    },
    t.stopOrderValueChanged = function(e) {
        this.updatePreContentByStopOrders(),
        this._refreshPutButton()
    },
    t.tumblerChanged = function(e) {
        e.sender.setValue(0),
        this.updatePreContentByStopOrders(),
        this._refreshPutButton()
    },
    t.show = function(t, i) {
        e.addCSSClass(document.body, "orderDialog"),
        e.MobileDialogPendingOrder.base.show.apply(this, arguments);
        var s = this._symbolSelect,
        n = s.getOptions().indexOf(i);
        if (i && n !== -1) {
            var o = this._currentSymbol = e.SymbolsData.getSymbols()[i],
            a = this._Swiper;
            s.setSelectedOption(n),
            this.setCurrentQuote(o),
            this.updateData(a);
            var r = a.getSelectedPageIndex(),
            l = this._pageNames[r];
            this["_pre" + l].PendingOrderImg.updateProperties({
                symbol: o,
                pendingOrderType: e.requestPendingOrderType[l],
                type: e.POSITION_IMAGE_PACKAGE_TYPES.PENDING_ORDER
            })
        }
        this.tuneControls()
    },
    t.hide = function() {
        e.removeCSSClass(document.body, "orderDialog"),
        e.MobileDialogPendingOrder.base.hide.apply(this, arguments)
    },
    t.enableControls = function(t) {
        var i = this._DomNode;
        if (i) {
            var s = i.querySelector(".VolAndPrice"),
            n = i.querySelector(".StopGroup");
            if (t === !0) {
                var o = e.removeCSSClass;
                o(s, "Disabled"),
                o(n, "Disabled")
            } else {
                var a = e.addCSSClass;
                a(s, "Disabled"),
                a(n, "Disabled")
            }
        }
    },
    t._onGetQuote = function(t) {
        e.MobileDialogPendingOrder.base._onGetQuote.apply(this, arguments)
    },
    t._onSocketMessage = function(t) {
        switch (t.msgType) {
        case "symbols":
        case "mt4Symbols":
        case "deletedSymbol":
            this.updateSymbolList();
            break;
        case "openPendingOrder":
        case "changePendingOrder":
        case "changeMT4PendingOrder":
        case "openMT4PendingOrder":
            if ("SUCCESS" == t.msgResult.toUpperCase()) {
                this.setEnabled(!1),
                this.hide();
                var i = e.getTerminal().mainSwiper,
                s = e.MobileTerminalPage;
                i.getSelectedPageIndex() === s.QuotesPage && i.setSelectedPage(s.TradePage)
            } else this.setEnabled(!0)
        }
    },
    t.setCurrentQuote = function(t) {
        var i = this._currentSymbol = "string" == typeof t ? e.SymbolsData.getSymbols()[t] : t,
        s = e.requestPendingOrderType;
        this._symbolSelect.setSelectedOption(this._symbols.indexOf(i.getSymbolName())),
        this._symbolSelect.setDescription(i.getDescription());
        for (var n, o, a = 0,
        r = this._pageNames,
        l = r.length; a < l; ++a) n = r[a],
        o = this["_pre" + n],
        o && o.PendingOrderImg.render({
            currentPrice: e.getCurrentPriceByOrderType(s[n], t)
        },
        null),
        this.setPageCurrentQuote(t, r[a])
    },
    t.getPreContent = function(t) {
        var i = e.htmlToDOM('<div class="PagePreContent"></div>'),
        s = new e.MobileImageForPositionDialog({
            symbol: e.SymbolsData.getSymbols()[this._symbolSelect.getValue()],
            pendingOrderType: e.requestPendingOrderType[t],
            type: e.POSITION_IMAGE_PACKAGE_TYPES.PENDING_ORDER
        }),
        n = {
            pageName: t,
            PendingOrderImg: s
        };
        return i.appendChild(s.get()),
        this["_pre" + t] = n,
        i
    },
    t._getPageContent = function(t) {
        var i = e.htmlToDOM,
        s = e.Delegate,
        n = i(e._Templates.MobileDialogPendingOrderPageContent),
        o = {
            pageName: t
        },
        a = this.priceControlValueChanged;
        return this["_" + t] = {
            pageName: t,
            currentSymbolPriceNode: i('<div class="SymbolPrice"></div>'),
            currentMyPriceNode: i('<div class="MyPrice"></div>'),
            PriceNE: new e.MobileInputIncrementer({
                Width: window.innerWidth / 2 - 25.5,
                Height: 30,
                Label: "Price",
                Key: "cMDPrice",
                MaxValue: 999999,
                LabelPosition: "Right",
                Class: "Price",
                IsMobile: !0,
                ChangedValue: s(this, a, o),
                ChangeValue: s(this, a, o),
                ParentNode: n.children[2]
            })
        },
        n
    },
    t.priceControlValueChanged = function(e) {
        var t = e.pageName;
        this["_pre" + t].PendingOrderImg.UPDATE_PRICES({
            openPrice: e.sender.getValue()
        }),
        this._refreshMyPrice(e)
    },
    t.updateData = function(e) {
        var t = e.getSelectedPage().getContent(),
        i = t.children,
        s = i[1],
        n = i[2],
        o = i[3],
        a = i[4],
        r = this._symbolSelect;
        r.addToNode(s);
        var l = this._PutButton;
        l.addToNode(a),
        this._takeProfitNumEdit.addToNode(o),
        this._stopLossNumEdit.addToNode(o),
        n.insertBefore(this._volumeCombo.getDomNode(), n.firstChild),
        a.style.height = l.getDomNode().style.height,
        this._currentSymbol || r.setSelectedOption(0),
        r.ChangedValue.fire({
            event: null,
            sender: r
        }),
        this.resize(null)
    },
    t._onSwiperChangeSelectedPage = function(e) {
        this.updateData(e)
    },
    t._onSymbolSelectChanged = function() {
        var t = e.SymbolsData,
        i = t.getSymbols(),
        s = this._symbolSelect.getValue(),
        n = this._currentSymbol = i[s],
        o = {
            BuyLimit: function(e, t) {
                return e.getAsk() - t
            },
            SellStop: function(e, t) {
                return e.getBid() - t
            },
            SellLimit: function(e, t) {
                return e.getBid() + t
            },
            BuyStop: function(e, t) {
                return e.getAsk() + t
            }
        };
        this.enableControls(!0),
        this.setCurrentQuote(n),
        this._symbolSelect.setDescription(n._Description);
        for (var a = e.requestPendingOrderType,
        r = e.UtipFunctions,
        l = 0,
        h = this._pageNames,
        d = h.length; l < d; ++l) {
            var c = parseInt(n.getStopLevel());
            c = c > 0 ? c: 1;
            var u = h[l],
            g = 1 / n.getPrecision(),
            p = n.getGPipsCount() * (c * g),
            m = o[u](n, p) || 0,
            _ = n.getDigits(),
            y = this["_" + u].PriceNE,
            S = this._takeProfitNumEdit,
            f = this._stopLossNumEdit;
            y.setDecimals(_),
            y.setValue(m),
            y.setStep(g),
            S.setDecimals(_),
            S.setValue(0),
            f.setDecimals(_),
            f.setValue(0),
            this._volumeCombo.setValue(r.getVolumesList(i[s], 5)[0]),
            this._refreshMyPrice({
                pageName: u
            });
            var v = a[u];
            this["_pre" + u].PendingOrderImg.updateProperties({
                symbol: n,
                pendingOrderType: v,
                type: e.POSITION_IMAGE_PACKAGE_TYPES.PENDING_ORDER,
                prices: {
                    currentPrice: e.getCurrentPriceByOrderType(v, n),
                    openPrice: m
                },
                borders: {
                    takeProfit: 0,
                    stopLoss: 0
                }
            })
        }
    },
    t._refreshPutButton = function() {
        var t = this._Swiper;
        if (t) {
            var i = this.allowCheck;
            if (i) {
                var s, n, o = this._currentSymbol,
                a = t.getSelectedPage().getId(),
                r = this["_" + a].PriceNE.getValue(),
                l = o.getStopLevel() / o.getPrecision(),
                h = this._takeProfitNumEdit.getValue(),
                d = this._stopLossNumEdit.getValue();
                if (r > 0 && e.parseFloat(this._volumeCombo.getValue()) > 0) switch (a) {
                case "BuyLimit":
                case "BuyStop":
                    s = "BuyLimit" == a ? 1 : -1,
                    n = r * s < o.getAsk() * s - l && (!d || l + d < r) && (!h || h - l > r);
                    break;
                case "SellStop":
                case "SellLimit":
                    s = "SellStop" == a ? 1 : -1,
                    n = r * s < o.getBid() * s - l && (!d || d - l > r) && (!h || h + l < r);
                    break;
                default:
                    n = !1
                }
            }
            var c = e.UtipFunctions;
            n = n && c.isAllowTrade(c.setServerFormatDate(e.SymbolsData.getLastChangedTime()), o),
            this._PutButton.setEnabled(n && i)
        }
    },
    t.resize = function(t) {
        var i = this._Swiper;
        if (i) {
            var s = i.getSelectedPage(),
            n = s.getId(),
            o = this["_" + n],
            a = this._PutButton,
            r = e.getAppHeight(),
            l = window.innerWidth;
            this.setWidth(l),
            this.setHeight(r),
            this._symbolSelect.setWidth(l),
            this._volumeCombo.setWidth(l / 2 - 25.5),
            this._takeProfitNumEdit.setWidth(l),
            this._stopLossNumEdit.setWidth(l),
            a.setBtnWidth(l),
            o.PriceNE.setWidth(l / 2 - 25.5);
            var h = s.getContent(),
            d = this["_pre" + n].PendingOrderImg,
            c = h.querySelector(".Button");
            c.style.height = a.getDomNode().style.height,
            d.UPDATE_IMAGE_SIZE(),
            this.tuneControls()
        }
    },
    t._onWindowResize = function(e) {
        this.resize(e)
    },
    t.tuneControls = function() {
        var t = this["_" + this._Swiper.getSelectedPage().getId()].PriceNE,
        i = this._PutButton,
        s = this._takeProfitNumEdit,
        n = this._stopLossNumEdit,
        o = this._volumeCombo;
        o.getInputNode().style.width = o.getWidth() - 30 + "px",
        t.getInputNode().style.width = t.getWidth() - 30 + "px",
        s.getInputNode().style.width = s.getWidth() - 30 + "px",
        n.getInputNode().style.width = n.getWidth() - 30 + "px",
        i.getDomNode().parentNode.style.top = e.getAppHeight() - 77 + "px"
    },
    t.setWidth = function(e) {
        var t = this._Width = Math.min(Math.max(0, e), window.innerWidth),
        i = Math.max(0, t),
        s = this._DomNode;
        s && (s.style.width = i ? i + "px": "")
    },
    t._onClosed = function() {
        var t = e.getTerminal();
        t._marketOrderBtn.removeCSSClass("Hovered"),
        t._pendingOrderBtn.removeCSSClass("Hovered"),
        t._buyOptionBtn.removeCSSClass("Hovered"),
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        this.removeFromDom(),
        delete e._dialogPendingOrder
    },
    t = null,
    e.getMobileDialogPendingOrder = function(t) {
        return e._dialogPendingOrder || (e._dialogPendingOrder = new e.MobileDialogPendingOrder(t)),
        e._dialogPendingOrder
    },
    e.MobileDialogModifyPendingOrder = function(t) {
        this._ModifyMode = !0,
        this._FixPageIdx = 0,
        this._Order = null,
        e.DialogModifyPendingOrder.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.Resizer.register(this)
    },
    e.initClass(e.MobileDialogModifyPendingOrder, e.MobileDialogPendingOrder);
    var i = e.MobileDialogModifyPendingOrder.prototype;
    return i._render = function() {
        e.MobileDialogModifyPendingOrder.base._render.apply(this, arguments);
        var t = e.LangManager,
        i = t.getStringByKey.bind(t);
        this._Content.querySelector(".dialogLabel").innerHTML = i("CWNOEditPendingOrder") || "Pending order modify",
        this._PutButton.setText(i("cPPCEditOrder") || "Modify order"),
        this._symbolSelect.setEnabled(!1),
        this._Swiper.fixPage(this._FixPageIdx);
        var s = this._conditionsChangeDelegate = e.Delegate(this, this._conditionsChange),
        n = this._takeProfitNumEdit,
        o = this._stopLossNumEdit;
        n.ChangedValue.add(s),
        n.ChangeValue.add(s),
        o.ChangedValue.add(s),
        o.ChangeValue.add(s)
    },
    i.tumblerChanged = function(e) {
        var t = this._Order;
        if (t) {
            var i = e.sender,
            s = 0;
            e.event.tumblerChanged ? (s = "TakeProfitNumEdit" === i.getId() ? t.takeProfit || 0 : t.stopLoss || 0, i.setValue(s)) : i.setValue(0),
            this.updatePreContentByStopOrders(),
            this.checkDifference(),
            this._refreshPutButton()
        }
    },
    i.show = function(t, i) {
        var s, n = e.requestPendingOrderType,
        o = this._FixPageIdx,
        a = this._pageNames,
        r = a[o],
        l = this["_" + r];
        switch (this.allowCheck = !1, this._Order = i, i.pendingOrderType) {
        case n.BuyLimit.toString():
            s = 0;
            break;
        case n.SellLimit.toString():
            s = 1;
            break;
        case n.BuyStop.toString():
            s = 2;
            break;
        case n.SellStop.toString():
            s = 3
        }
        var h = i.symbolName,
        d = i.openPrice,
        c = i.takeProfit,
        u = i.stopLoss,
        g = e.SymbolsData.getSymbols()[h],
        p = g.getDigits(),
        m = g.getFormattedPrecision(),
        _ = e.numberFormat;
        e.DialogPendingOrder.base.show.call(this, t, h),
        void 0 !== s && (o = this._FixPageIdx = s, r = a[o], l = this["_" + r]),
        this._Swiper.fixPage(o),
        this.setCurrentQuote(g),
        this._volumeCombo.setValue(_(1 * i.volume, 2, ".", " "));
        var y = l.PriceNE,
        S = _(1 * d, p, ".", " ");
        y.setDecimals(p),
        y.setValue(S),
        y.setStep(1 / g.getPrecision()),
        this._refreshMyPrice({
            pageName: r
        });
        var f = this._takeProfitNumEdit,
        v = this._stopLossNumEdit,
        C = _(1 * c, p, ".", " "),
        b = _(1 * u, p, ".", " ");
        f.setValue(C),
        f.setDecimals(p),
        f.setStep(m),
        f.refresh(C),
        v.setValue(b),
        v.setDecimals(p),
        v.setStep(m),
        v.refresh(b);
        var T = this["_pre" + r].PendingOrderImg,
        P = n[r];
        T.updateProperties({
            symbol: g,
            pendingOrderType: P,
            type: e.POSITION_IMAGE_PACKAGE_TYPES.PENDING_ORDER,
            prices: {
                currentPrice: e.getCurrentPriceByOrderType(P, g),
                openPrice: S
            },
            borders: {
                takeProfit: C,
                stopLoss: b
            }
        }),
        this.checkDifference(),
        this.tuneControls()
    },
    i._onClosed = function() {
        e.SymbolsData.unRegister(this),
        e.Socket.unRegister(this),
        this.removeFromDom(),
        delete e._dialogModifyPendingOrder
    },
    i = null,
    e.getMobileDialogModifyPendingOrder = function() {
        return e._dialogModifyPendingOrder || (e._dialogModifyPendingOrder = new e.MobileDialogModifyPendingOrder),
        e._dialogModifyPendingOrder
    },
    e
}),
define("mobile/mobileDialogSymbolsList", ["tree", "symbolsData", "dialog", "dialogSymbolList"],
function(e) {
    function t(e) {
        this.hide(),
        this.dispose()
    }
    e.MobileDialogSymbolsList = function(t) {
        e.MobileDialogSymbolsList.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this)
    },
    e.initClass(e.MobileDialogSymbolsList, e.DialogSimbolList);
    var i = 57,
    s = e.MobileDialogSymbolsList.prototype;
    return s._render = function() {
        this._Content = e.htmlToDOM(e._Templates.MobileTableSelectSymbols),
        this._Top = 0,
        this._Left = 0,
        this._buttonsTextHeight = 19,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Width = parseInt(window.innerWidth);
        var i = parseInt(e.getAppHeight());
        this._Height = i >= 200 ? i: 200,
        this._HeaderHeight = 55,
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "#A79585",
                Size: 15
            },
            Class: "LeftBtn",
            Click: e.Delegate(this, t.bind(this))
        }),
        e.DialogSimbolList.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogSymbolsList"),
        this._DomNode.querySelector(".MobileTableSelectSymbols").style.overflowY = "auto"
    },
    s.updateSymbolTree = function() {
        var t = this._SymbolTree;
        t && t.removeFromDom(),
        delete this._SymbolTree,
        t = new e.Tree({
            Data: e.getSymbolsListTree()
        }),
        t.addToNode(this._DomNode.querySelector(".MobileTableSelectSymbols")),
        this._SymbolTree = t,
        this.appendBorders(),
        this.setHeight(window.innerHeight - i);
        var s = e.getTerminal();
        s.checkSymbolsData(),
        s.saveSettings()
    },
    s._onWindowResize = function(e) {
        this.setHeight(window.innerHeight - i)
    },
    s.setWidth = function() {},
    s.setHeight = function(e) {
        if (null != e) {
            var t = this._DomNode.querySelector(".MobileTableSelectSymbols");
            t && (t.style.height = e + "px")
        }
    },
    s.Save = function() {
        if (e.SymbolsData.setSelectedSymbols(this._getCheckedSymbols()), e.SymbolsData.onRefreshSymbols(!0), e.getMobileChartSelect) {
            var t = e.getMobileChartSelect();
            t && t.setOptions(e.SymbolsData.getSelectedSymbols())
        }
        e.saveUserSettings(),
        e.getTerminal().changeTheGraphicIfNecessary()
    },
    s.appendBorders = function() {
        var t = this._SymbolTree._DomNode.getElementsByClassName("WTTreeNode"),
        i = this._SymbolTree._DomNode.getElementsByClassName("TitleEnvelope"),
        s = this;
        Array.prototype.forEach.call(t,
        function(t) {
            t.classList.contains("IsRoot") || (t.appendChild(e.htmlToDOM('<div class="ListBorder"></div>')), t.addEventListener("touchstart",
            function(e) {
                s._SymbolTree._SelectedItem && s._SymbolTree._SelectedItem.classList.remove("Selected"),
                t.classList.add("Selected"),
                s._SymbolTree._SelectedItem = t
            }))
        }),
        Array.prototype.forEach.call(i,
        function(t) {
            t.appendChild(e.htmlToDOM('<div class="ListBorder"></div>'))
        })
    },
    s.dispose = function() {
        e.SymbolsData.unRegister(this),
        this._DomNode.parentNode && this._DomNode.parentNode.removeChild(this._DomNode),
        delete e._mobileSelectSymbols,
        delete this
    },
    s.setTitle = function(e) {
        this._Title = e || "",
        this._titleNode = this._titleNode || this._DomNode.querySelector(".dialogLabel"),
        this._titleNode && (this._titleNode.innerHTML = this._Title)
    },
    s.show = function() {
        e.addCSSClass(document.body, "orderDialog"),
        this.setTitle(e.LangManager.getStringByKey("cQSSymbols") || "Symbols"),
        this.setHeight(window.innerHeight - i),
        e.DialogSimbolList.base.show.apply(this, arguments)
    },
    s.hide = function() {
        e.DialogSimbolList.base._hideDialog.apply(this, arguments),
        e.removeCSSClass(document.body, "orderDialog")
    },
    e.getMobileDialogSymbolsList = function(t) {
        return e._mobileSelectSymbols || (e._mobileSelectSymbols = new e.MobileDialogSymbolsList(t)),
        e._mobileSelectSymbols
    },
    s = null,
    e
}),
define("mobile/mobileDialogOptionsSettingsList", ["tree", "symbolsData", "dialog", "dialogOptionsSettingsList"],
function(e) {
    function t() {
        this.hide(),
        this.dispose()
    }
    e.MobileDialogOptionsSettingsList = function(t) {
        e.MobileDialogOptionsSettingsList.base.constructor.apply(this, arguments),
        e.SymbolsData.register(this),
        e.OptionsSettings.register(this),
        e.Resizer.register(this)
    },
    e.initClass(e.MobileDialogOptionsSettingsList, e.DialogOptionsSettingsList);
    var i = e.MobileDialogOptionsSettingsList.prototype;
    i._render = function() {
        var i = window.innerWidth,
        s = window.innerHeight;
        this._Content = e.htmlToDOM(e._Templates.MobileTableSelectOptions),
        this._Top = 0,
        this._Left = 0,
        this._buttonsTextHeight = 19,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Width = parseInt(i),
        this._Height = parseInt(s) >= 400 ? parseInt(s) : 400,
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "#A79585",
                Size: 16
            },
            mgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, t.bind(this))
        }),
        e.DialogOptionsSettingsList.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogOptionsSettingsList")
    },
    i.updateSymbolTree = function() {
        var t = e.getTerminal(),
        i = this._optionsSettingsTree,
        s = this.getDomNode(),
        n = s.querySelector(".MobileTableSelectOptions");
        i && i.removeFromDom(),
        delete this._optionsSettingsTree,
        i = this._optionsSettingsTree = new e.Tree({
            Data: e.getOptionsSettingsListTree()
        }),
        i.addToNode(n),
        this.appendBorders(),
        t.checkSymbolsData(),
        t.saveSettings()
    },
    i.Save = function(t) {
        for (var i = e.getTerminal(), s = i.getTableQuotes(), n = i.getHeaderPanel(), o = this._optionsSettingsTree.getAllItems(), a = o.length, r = 0; r < a; r++) this.setFavoritesOptionsSettingsByTypeName(o[r]);
        e.saveUserSettings(),
        e.saveServerSettings(),
        e.OptionsSettings.saveSettings(),
        i.updateOptionTypesMenu(),
        s.setOnlyOptions(),
        n && n.updateChartSelect()
    },
    i.setFavoritesOptionsSettingsByTypeName = function(t) {
        for (var i = e.OptionsSettings,
        s = i.byID.bind(i), n = t.length, o = 0; o < n; o++) {
            var a = t[o],
            r = s(a.getNodeID());
            r && (r.isShowOption = a.getIsChecked())
        }
    },
    i.getOptionsSettingsTree = function() {
        return this._optionsSettingsTree
    },
    i.appendBorders = function() {
        function t(e) {
            function t(t) {
                var s = n.getSelectedItem();
                s && s.classList.remove("Selected"),
                i.add("Selected"),
                n.setSelectedItem(e)
            }
            var i = e.classList;
            i.contains("IsRoot") || (e.appendChild(s('<div class="ListBorder"></div>')), e.addEventListener("touchstart", t))
        }
        function i(e) {
            e.appendChild(s('<div class="ListBorder"></div>'))
        }
        var s = e.htmlToDOM,
        n = this._optionsSettingsTree,
        o = n.getDomNode(),
        a = o.getElementsByClassName("WTTreeNode"),
        r = o.getElementsByClassName("TitleEnvelope");
        Array.prototype.forEach.call(a, t),
        Array.prototype.forEach.call(r, i)
    },
    i.setWidth = function() {},
    i.setHeight = function() {},
    i.setTitle = function(e) {
        var t = this.getDomNode(),
        i = e || "",
        s = this._titleNode || t.querySelector(".dialogLabel");
        s && (s.innerHTML = i),
        this._Title = i
    },
    i.show = function() {
        this.setTitle(e.LangManager.getStringByKey("cOPSOptionSumsSettings") || "Options settings"),
        e.DialogOptionsSettingsList.base.show.apply(this, arguments),
        e.SymbolsData.register(this),
        e.OptionsSettings.register(this),
        e.Resizer.register(this)
    },
    i.dispose = function() {
        e.SymbolsData.unRegister(this),
        e.OptionsSettings.unRegister(this),
        e.Resizer.unRegister(this);
        var t = this.getDomNode(),
        i = t.parentNode;
        i && i.removeChild(t),
        delete e._mobileDialogOptionsSettingsList,
        delete this
    },
    e.getMobileDialogOptionsSettingsList = function(t) {
        var i = e._mobileDialogOptionsSettingsList;
        return i || (i = e._mobileDialogOptionsSettingsList = new e.MobileDialogOptionsSettingsList(t)),
        i
    }
}),
define("mobile/mobileDialogChangeLang", ["dialog"],
function(e) {
    e.MobileDialogChangeLang = function(t) {
        e.MobileDialogChangeLang.base.constructor.apply(this, arguments),
        e.Resizer.register(this),
        e.LangManager.register(this),
        this.Closed.add(e.Delegate(this, this._onClosed))
    },
    e.initClass(e.MobileDialogChangeLang, e.Dialog);
    var t = e.MobileDialogChangeLang.prototype;
    return t._render = function() {
        this._Width = window.innerWidth,
        this._Height = Math.max(window.innerHeight, 450),
        this._Title = "Language",
        this._Top = 0,
        this._Left = 0,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.DialogChangeLangContent),
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "rgb(167, 149, 133)",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this.hide)
        }),
        this._langList = new e.DivTable({
            Template: e._Templates.MobileChangeLangTable,
            RowTemplates: [e._Templates.MobileChangeLangTableRow]
        });
        for (var t = [], i = e.LangManager.getLanguageItems(), s = 0; s < i.length; s++) t.push({
            rowId: i[s].Key,
            cellValues: {
                LangLabel: i[s].Text
            }
        });
        this._langList.setData(t);
        var n = this._langList._DomNode;
        this._Content.appendChild(n),
        e.MobileDialogChangeLang.base._render.apply(this, arguments),
        this._langList.ClickRow.add(e.Delegate(this, this._onRowClick)),
        this.addCSSClass("mobileDialogChangeLang"),
        this.setTitle(),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        this._DomNode.querySelector(".MobileChangeLangTable").style.overflowY = "auto"
    },
    t.markCurrentLang = function(t) {
        var i = this._langList._Rows,
        s = t || e.LangManager.getLang();
        for (var n in i) n == s ? e.addCSSClass(i[n].getDomNode().querySelector(".ActiveLangLabel"), "icon-circle_check_language") : e.removeCSSClass(i[n].getDomNode().querySelector(".ActiveLangLabel"), "icon-circle_check_language")
    },
    t._onRowClick = function(t) {
        e.LangManager.setLang(t.rowID),
        this.markCurrentLang(t.rowID)
    },
    t.dispose = function() {
        e.Resizer.unRegister(this),
        e.LangManager.unRegister(this),
        e._dialogMasterObject.unRegister(this),
        this.removeFromDom(),
        delete this,
        e._mobileDialogChangeLang = null
    },
    t._onClosed = function(e) {
        this.dispose()
    },
    t.show = function() {
        e.MobileDialogChangeLang.base.show.apply(this, arguments),
        this.markCurrentLang()
    },
    t.setTitle = function() {
        this._titleNode = this._Content.querySelector(".dialogLabel"),
        this._titleNode.innerHTML = "Language"
    },
    t.getTable = function() {
        return this._langList
    },
    t.setWidth = function(e) {},
    t.setHeight = function(e) {},
    t = null,
    e.getMobileDialogChangeLang = function() {
        return e._mobileDialogChangeLang || (e._mobileDialogChangeLang = new e.MobileDialogChangeLang),
        e._mobileDialogChangeLang
    },
    e
}),
define("mobile/mobileDialogIndicators", ["tree", "swiper", "dialog", "mobile/mobileDialogIndicatorSettings"],
function(e) {
    function t() {
        return [{
            Data: [{
                Title: "Adaptive Moving Average",
                Id: "adaptive_moving_average",
                Function: e.AdaptiveMovingAverage,
                Enabled: !0
            },
            {
                Title: "Alligator",
                Id: "alligator",
                Function: e.Alligator,
                Enabled: !0
            },
            {
                Title: "Average Directional Movement Index",
                Id: "average_directional_movement_index",
                Function: e.AverageDirectionalMovementIndex,
                Enabled: !0
            },
            {
                Title: "Envelopes",
                Id: "envelopes",
                Function: e.Envelopes,
                Enabled: !0
            },
            {
                Title: "Moving Average",
                Id: "moving_average",
                Function: e.MovingAverage,
                Enabled: !0
            },
            {
                Title: "Parabolic SAR",
                Id: "parabolic_sar",
                Function: e.ParabolicSAR,
                Enabled: !0
            },
            {
                Title: "Price Channel",
                Id: "price_channel",
                Function: e.PriceChannel,
                Enabled: !0
            },
            {
                Title: "Range Action Verification Index",
                Id: "range_action_vVerification_index",
                Function: e.RangeActionVerificationIndex,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cICTrend") || "Trend"
        },
        {
            Data: [{
                Title: "Accelerator Oscillator",
                Id: "accelerator_oscillator",
                Function: e.AcceleratorOscillator,
                Enabled: !0
            },
            {
                Title: "Aroon",
                Id: "aroon",
                Function: e.Aroon,
                Enabled: !0
            },
            {
                Title: "Awesome Oscillator",
                Id: "awesome_oscillator",
                Function: e.AwesomeOscillator,
                Enabled: !0
            },
            {
                Title: "Bears Power",
                Id: "bears_power",
                Function: e.BearsPower,
                Enabled: !0
            },
            {
                Title: "Bulls Power",
                Id: "bulls_power",
                Function: e.BullsPower,
                Enabled: !0
            },
            {
                Title: "Chaikin Oscillator",
                Id: "chaikin_oscillator",
                Function: e.ChaikinOscillator,
                Enabled: !0
            },
            {
                Title: "Commodity Channel Index",
                Id: "commodity_channel_index",
                Function: e.CommodityChannelIndex,
                Enabled: !0
            },
            {
                Title: "DeMarker",
                Id: "demarker",
                Function: e.DeMarker,
                Enabled: !0
            },
            {
                Title: "Detrended Price Oscillator",
                Id: "detrended_price_oscillator",
                Function: e.DetrendedPriceOscillator,
                Enabled: !0
            },
            {
                Title: "Gator Oscillator",
                Id: "gator_oscillator",
                Function: e.GatorOscillator,
                Enabled: !0
            },
            {
                Title: "MACD",
                Id: "macd",
                Function: e.MACD,
                Enabled: !0
            },
            {
                Title: "Momentum",
                Id: "momentum",
                Function: e.Momentum,
                Enabled: !0
            },
            {
                Title: "Moving Average of Oscillator",
                Id: "moving_average_of_oscillator",
                Function: e.MovingAverageofOscillator,
                Enabled: !0
            },
            {
                Title: "Price Oscillator",
                Id: "price_oscillator",
                Function: e.PriceOscillator,
                Enabled: !0
            },
            {
                Title: "Rate Of Change",
                Id: "rate_of_change",
                Function: e.RateOfChange,
                Enabled: !0
            },
            {
                Title: "Relative Strength Index",
                Id: "relative_strength_index",
                Function: e.RelativeStrengthIndex,
                Enabled: !0
            },
            {
                Title: "Relative Vigor Index",
                Id: "relative_vigor_index",
                Function: e.RelativeVigorIndex,
                Enabled: !0
            },
            {
                Title: "Stochastic Oscillator",
                Id: "stochastic_oscillator",
                Function: e.StochasticOscillator,
                Enabled: !0
            },
            {
                Title: "William''s Percent Range",
                Id: "williams_percent_range",
                Function: e.WilliamsPercentRange,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cICOscillators") || "Oscillators"
        },
        {
            Data: [{
                Title: "Average True Range",
                Id: "average_true_range",
                Function: e.AverageTrueRange,
                Enabled: !0
            },
            {
                Title: "Bollinger Bands",
                Id: "bollinger_bands",
                Function: e.BollingerBands,
                Enabled: !0
            },
            {
                Title: "Standard Deviation",
                Id: "standard_deviation",
                Function: e.StandardDeviation,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cICVolatility") || "Volatility"
        },
        {
            Data: [{
                Title: "Accumulation/Distribution",
                Id: "accumulation_distribution",
                Function: e.AccumulationDistribution,
                Enabled: !0
            },
            {
                Title: "Money Flow Index",
                Id: "money_flow_index",
                Function: e.MoneyFlowIndex,
                Enabled: !0
            },
            {
                Title: "On Balance Volume",
                Id: "on_balance_volume",
                Function: e.OnBalanceVolume,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cICVolumes") || "Volumes"
        },
        {
            Data: [{
                Title: "Fractals",
                Id: "fractals",
                Function: e.Fractals,
                Enabled: !0
            },
            {
                Title: "Ichimoku Kinko Hyo",
                Id: "ichimoku_kinko_hyo",
                Function: e.IchimokuKinkoHyo,
                Enabled: !0
            },
            {
                Title: "Market Facilitation Index",
                Id: "market_facilitation_index",
                Function: e.MarketFacilitationIndex,
                Enabled: !0
            },
            {
                Title: "Pivot Points",
                Id: "pivot_points",
                Function: e.PivotPoints,
                Enabled: !0
            },
            {
                Title: "ZigZag",
                Id: "zigzag",
                Function: e.ZigZag,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cICOther") || "Others"
        },
        {
            Data: [{
                Title: "Accelerator Oscillator",
                Id: "accelerator_oscillator",
                Function: e.AcceleratorOscillator,
                Enabled: !0
            },
            {
                Title: "Alligator",
                Id: "alligator",
                Function: e.Alligator,
                Enabled: !0
            },
            {
                Title: "Awesome Oscillator",
                Id: "awesome_oscillator",
                Function: e.AwesomeOscillator,
                Enabled: !0
            },
            {
                Title: "Fractals",
                Id: "fractals",
                Function: e.Fractals,
                Enabled: !0
            },
            {
                Title: "Gator Oscillator",
                Id: "gator_oscillator",
                Function: e.GatorOscillator,
                Enabled: !0
            },
            {
                Title: "Market Facilitation Index",
                Id: "market_facilitation_index",
                Function: e.MarketFacilitationIndex,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cMFBill") || "Bill Williams"
        },
        {
            Data: [{
                Title: "Bears Power",
                Id: "bears_power",
                Function: e.BearsPower,
                Enabled: !0
            },
            {
                Title: "Bulls Power",
                Id: "bulls_power",
                Function: e.BullsPower,
                Enabled: !0
            },
            {
                Title: "MACD",
                Id: "macd",
                Function: e.MACD,
                Enabled: !0
            },
            {
                Title: "Relative Strength Index",
                Id: "relative_strength_index",
                Function: e.RelativeStrengthIndex,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cICAlexander") || "Alexander Elder"
        },
        {
            Data: [{
                Title: "Accumulation/Distribution",
                Id: "accumulation_distribution",
                Function: e.AccumulationDistribution,
                Enabled: !0
            },
            {
                Title: "William''s Percent Range",
                Id: "williams_percent_range",
                Function: e.WilliamsPercentRange,
                Enabled: !0
            }],
            Title: e.LangManager.getStringByKey("cICLarry") || "Larry Williams"
        }]
    }
    function i(e) {
        this.hide(),
        this.dispose()
    }
    function s(t) {
        if (t) {
            var i = t.getId();
            return function(t) {
                var s = n(i);
                if (e.activeChart) {
                    var o = e.activeChart,
                    a = s.Function,
                    r = null,
                    l = new a(r);
                    l.getDrawInExistsGraphicArea() && (r = o.graphicAreas[0]);
                    var h = e.getMobileDialogIndicatorSettings(l, s.Title, r, o, !0);
                    h.show()
                }
            }
        }
        return function(e) {
            console.log("Indicator's ID is not defined")
        }
    }
    function n(e) {
        for (var i = t(), s = 0, n = i.length; s < n; s++) for (var o = i[s].Data, a = 0, r = o.length; a < r; a++) if (o[a].Id === e) return o[a]
    }
    e.MobileDialogIndicators = function(t) {
        e.MobileDialogIndicators.base.constructor.apply(this, arguments),
        e.LangManager.register(this),
        e.Resizer.register(this)
    };
    const o = 56,
    a = 46;
    e.initClass(e.MobileDialogIndicators, e.Dialog);
    var r = e.MobileDialogIndicators.prototype;
    return r._render = function() {
        this._Width = window.innerWidth,
        this._Height = Math.max(window.innerHeight, 200),
        this._Top = 0,
        this._Left = 0,
        this._WithBlock = !1,
        this._Content = e.htmlToDOM(e._Templates.DialogIndicatorsContent),
        this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "#A79585",
                Size: 15
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, i.bind(this))
        });
        var t = this;
        this._backBtn._DomNode.addEventListener("touchstart", e.stopCustomAndNativeEvents),
        this._backBtn._DomNode.addEventListener("touchend",
        function(s) {
            e.stopCustomAndNativeEvents(s),
            i.call(t)
        }),
        this._swiper = new e.Swiper({
            ParentNode: this._Content,
            Template: e._Templates.SwiperPendingOrder,
            TabMode: "Normal",
            Class: "DPOSettsContent InsideDialog",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            Pages: this._getSwiperPages()
        }),
        e.MobileDialogIndicators.base._render.apply(this, arguments),
        this.addCSSClass("MobileDialogIndicators"),
        this._swiper.addCSSClass("MobileSwiper"),
        this._swiper.getDomNode().querySelector(".WTSwiperContent").classList.add("subScrollingContainer"),
        this.setTitle(e.LangManager.getStringByKey("cMobileAddIndicator") || "Add indicator"),
        this.excludeTouchmove()
    },
    r.excludeTouchmove = function() {
        var t = this._Content,
        i = t.querySelector(".HeadPanel"),
        s = t.querySelector(".DPOSettsContent .WTSwiperTabsBlock");
        i.addEventListener("touchmove", e.stopCustomAndNativeEvents, !0),
        s.addEventListener("touchmove", e.stopCustomAndNativeEvents, !0)
    },
    r.setTitle = function(e) {
        this._Title = e || "",
        this._titleNode = this._titleNode || this._DomNode.querySelector(".dialogLabel"),
        this._titleNode && (this._titleNode.innerHTML = this._Title)
    },
    r._onSwiperChangeSelectedPage = function(e) {
        this.updateSelectedPageContent(e)
    },
    r._onWindowResize = function(e) {
        this.setHeight(window.innerHeight - o - a)
    },
    r._bindEvents = function() {
        function t(t) {
            t._graphicArea.deleteGraphicObject(t),
            e.activeChart.deleteIndicator(t);
            var i = e.getTerminal();
            i.saveSettings()
        }
        function i(t) {
            var i = e.activeChart,
            s = null;
            t.getDrawInExistsGraphicArea() && (s = i.graphicAreas[0]);
            var n = e.getMobileDialogIndicatorSettings(t, t._indicatorName, s, i, !1);
            n.show()
        }
        var s = this,
        n = this._DomNode.getElementsByClassName("SelectedIndicator");
        Array.prototype.forEach.call(n,
        function(n) {
            var o = n.querySelector(".DeleteIndicator div"),
            a = n.querySelector(".Parameters"),
            r = n.querySelector(".Title").innerHTML,
            l = e.activeChart.getIndicators().filter(function(e) {
                return e._indicatorName === r
            })[0];
            o.addEventListener("click",
            function(e) {
                t(l);
                var i = s.getDomNode().querySelector(".WTSwiperContent"),
                n = i.firstChild;
                n.removeChild(e.target.parentNode.parentNode),
                0 === n.childNodes.length && s.drawNonSelectedLabel(),
                e.stopPropagation()
            }),
            o.addEventListener("touchstart",
            function(e) {
                e.preventDefault(),
                e.stopPropagation()
            }),
            o.addEventListener("touchend",
            function(e) {
                e.preventDefault(),
                e.stopPropagation(),
                t(l);
                var i = s.getDomNode().querySelector(".WTSwiperContent"),
                n = i.firstChild;
                n.removeChild(e.target.parentNode.parentNode),
                0 === n.childNodes.length && s.drawNonSelectedLabel(),
                e.stopPropagation()
            }),
            a.addEventListener("click",
            function(e) {
                i(l)
            }),
            a.addEventListener("touchstart",
            function(e) {
                e.preventDefault(),
                e.stopPropagation()
            }),
            a.addEventListener("touchend",
            function(e) {
                e.preventDefault(),
                e.stopPropagation(),
                i(l)
            })
        })
    },
    r.drawNonSelectedLabel = function() {
        var t = (e.LangManager.getStringByKey("cMobileNoneIndicators") || "No indicator is active") + "...",
        i = '<div class="NoneIndicators"><div>' + t + "</div></div>";
        this._DomNode.querySelector(".WTSwiperContent").innerHTML = i
    },
    r.updateSelectedIndicators = function() {
        var t = e.getTerminal(),
        i = "";
        e.activeChart.getIndicators().forEach(function(t) {
            i += e._Templates.SelectedIndicatorRow.replace(/#IndicatorName/gi, t._indicatorName)
        }),
        "" !== i ? (this._DomNode.querySelector(".WTSwiperContent").innerHTML = '<div className="SelectedIndicatorsContent">' + i + "</div>", this._bindEvents()) : this.drawNonSelectedLabel(),
        t.saveSettings()
    },
    r.updateSelectedPageContent = function(e) {
        e = e || this._swiper;
        var t = e.getSelectedPage().getId();
        "all" === t ? this._IndicatorsTree ? this._IndicatorsTree.addToNode(this._DomNode.querySelector(".WTSwiperContent")) : this.updateIndicatorsTree() : this.updateSelectedIndicators()
    },
    r.dispose = function() {
        e.LangManager.unRegister(this),
        e.Resizer.unRegister(this),
        this._DomNode.parentNode && this._DomNode.parentNode.removeChild(this._DomNode),
        delete e._dialogIndicators,
        delete this
    },
    r.updateIndicatorsTree = function() {
        if (this._IndicatorsTree && this._IndicatorsTree.removeFromDom(), delete this._IndicatorsTree, this._DomNode) {
            this._IndicatorsTree = new e.Tree({
                Data: t()
            }),
            this._IndicatorsTree.addToNode(this._DomNode.querySelector(".WTSwiperContent"));
            var i = this._IndicatorsTree._DomNode.getElementsByClassName("WTTreeNode"),
            n = this._IndicatorsTree._DomNode.getElementsByClassName("TitleEnvelope"),
            o = this._IndicatorsTree.getAllItemsAsArray(),
            a = 0,
            r = this;
            Array.prototype.forEach.call(i,
            function(t) {
                if (!t.classList.contains("IsRoot")) {
                    t.appendChild(e.htmlToDOM('<div class="ListBorder"></div>'));
                    var i = s(o[a]);
                    t.addEventListener("click", i),
                    a++,
                    t.addEventListener("touchstart",
                    function(e) {
                        r._IndicatorsTree._SelectedItem && r._IndicatorsTree._SelectedItem.classList.remove("Selected"),
                        t.classList.add("Selected"),
                        r._IndicatorsTree._SelectedItem = t
                    })
                }
            }),
            Array.prototype.forEach.call(n,
            function(t) {
                t.appendChild(e.htmlToDOM('<div class="ListBorder"></div>'))
            })
        }
    },
    r.setWidth = function() {},
    r.setHeight = function(e) {
        if (null != e) {
            var t = this._swiper.getContentNode();
            t && (t.style.height = e + "px")
        }
    },
    r._getSwiperPages = function() {
        return [{
            Title: "All",
            Key: "cAllGroup",
            Id: "all",
            Content: e.htmlToDOM(e._Templates.AllIndicatorsPage)
        },
        {
            Title: "Active",
            Key: "cMobileSelectedIndicators",
            Id: "selected",
            Content: e.htmlToDOM(e._Templates.AllIndicatorsPage)
        }]
    },
    r.show = function() {
        e.addCSSClass(document.body, "orderDialog"),
        this.updateSelectedPageContent(),
        this.setHeight(window.innerHeight - o - a),
        e.MobileDialogIndicators.base.show.apply(this, arguments)
    },
    r.hide = function() {
        e.MobileDialogIndicators.base._hideDialog.apply(this, arguments),
        e.removeCSSClass(document.body, "orderDialog")
    },
    e.getMobileDialogIndicators = function() {
        return e._dialogIndicators || (e._dialogIndicators = new e.MobileDialogIndicators),
        e._dialogIndicators
    },
    r._onChangeLang = function() {
        this.setTitle(e.LangManager.getStringByKey("cMobileAddIndicator") || "Add indicator"),
        this.updateIndicatorsTree()
    },
    r = null,
    e
}),
define("mobile/mobileDialogStart", ["base", "dialog"],
function(e) {
    e.MobileDialogStart = function(t) {
        e.MobileDialogStart.base.constructor.apply(this, arguments),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileDialogStart, e.Dialog);
    var t = e.MobileDialogStart.prototype;
    return t._render = function() {
        this._Width = window.innerWidth,
        this._Height = Math.max(window.innerHeight, 450),
        this._Top = 0,
        this._Left = 0,
        this._WithBlock = !1,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.MobileDialogStartContent);
        var t = this._Content.querySelector(".DStartControls");
        this._signInBtn = new e.Button({
            ParentNode: t,
            Class: "SignInButton",
            Text: "Sign in",
            Key: "cMobileLogIn",
            Click: e.Delegate(this, this._onSignInClick)
        }),
        this.PressEnter.add(e.Delegate(this, this._onSignInClick)),
        UtipConfig.BrokersSettings.isVisibleOpenDemo && (this._openDemoBtn = new e.Button({
            ParentNode: t,
            Class: "OpenDemoButton",
            Text: window.UtipConfig.BrokersSettings.OpenDemoAccountCaption[e.LangManager.getLang()] || e.LangManager.getStringByKey("cCFOpendemo") || "Open a demo account",
            Click: e.Delegate(this, this._onOpenDemoClick)
        })),
        this._languageInput = new e.InputSelect({
            ParentNode: t,
            Options: e.LangManager.getLanguageItems(),
            Edit: !1,
            NeedNotEditedStyle: !1,
            Class: "LanguageSelect",
            MenuClass: "LangSelect",
            BeforeOpen: e.Delegate(this, this._onLanguageSelectOpen),
            AutoWidthMenu: !0,
            Width: 122,
            ItemsHeight: 48,
            ChangedValue: e.Delegate(this, this._onLanguageChanged)
        }),
        e.MobileDialogStart.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogStartContent"),
        e.addCSSClass(this.getDomNode().querySelector(".WTInputSelectArrowImg"), "icon-drop_down_shaded_arrow"),
        this._onLanguageChanged(null),
        this._onWindowResize(null),
        this._languageInput._showMenu = function(e) {
            x = (window.innerWidth - 192) / 2;
            var t = window.screen.orientation ? window.screen.orientation.angle: window.orientation,
            i = 0 === t || 180 === t ? 2 : 1.1;
            y = window.innerHeight / i,
            this._optionsMenu.show(x, y)
        },
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this.onDialogTouchMove.bind(this))
    },
    t._onLanguageChanged = function(t) {
        if (t) {
            var i = this._languageInput.getValue(),
            s = "en";
            switch (i) {
            case "Русский":
                s = "ru";
                break;
            case "English":
                s = "en";
                break;
            case "Français":
                s = "fr";
                break;
            case "العربية":
                s = "ar";
                break;
            case "Polski":
                s = "pl";
                break;
            case "ქართული":
                s = "gr";
                break;
            case "中文":
                s = "zh";
                break;
            case "Español":
                s = "es";
                break;
            case "فارسی":
                s = "fa";
                break;
            case "Deutsch":
                s = "de";
                break;
            case "한국어":
                s = "ko";
                break;
            default:
                s = "en"
            }
        } else {
            var s = e.LangManager.getLang();
            this._languageInput.setSelectedOptionByKey(s)
        }
        var n = window.UtipConfig.BrokersSettings.OpenDemoAccountCaption[s] || e.LangManager.getStringByKey("cCFOpendemo") || "Open a demo account";
        this._openDemoBtn && this._openDemoBtn.setText(n),
        e.LangManager.setLang(s),
        e._menuMasterObject.hideAll(),
        e.saveUserSettings()
    },
    t._onSignInClick = function() {
        e.getMobileSignInDialog().show()
    },
    t._onOpenDemoClick = function() {
        e.getMobileOpenDemoDialog().show()
    },
    t.dispose = function() {
        e.Resizer.unRegister(this),
        e.LangManager.unRegister(this),
        e.MobileDialogAbout.base.dispose.apply(this, []),
        e._mobileDialogStart = null
    },
    t.show = function() {
        e.Resizer.register(this),
        this._onWindowResize(),
        e.MobileDialogStart.base.show.apply(this, arguments),
        document.querySelector("html").scrollTop = 0,
        document.body.scrollTop = 0
    },
    t.setWidth = function() {},
    t.setHeight = function() {
        var t = this.getDomNode();
        t && (t.style.height = (e.getAppHeight() > e.getAppWidth() ? e.getAppHeight() : e.getAppWidth()) + "px")
    },
    t._onWindowResize = function(t) {
        "Safari" === e.Browser.Browser && document.activeElement.blur(),
        e.getMobileOpenDemoDialogWithoutInit() || e.getMobileSignInDialogWithoutInit() || e.getMobileChangePassDialogWithoutInit() || e.getMobileLoginPasswordDialogWithoutInit() || e.getMobileDialogStartWithoutInit() || (document.querySelector("html").scrollTop = 0, document.body.scrollTop = 0),
        e._menuMasterObject.hideAll(),
        this.setHeight()
    },
    t = null,
    e.getMobileDialogStart = function() {
        return e._mobileDialogStart || (e._mobileDialogStart = new e.MobileDialogStart),
        e._mobileDialogStart
    },
    e.getMobileDialogStartWithoutInit = function() {
        return e._mobileDialogStart
    },
    e
}),
define("mobile/mobileTerminal", ["base", "socket", "authorization", "statusBar", "dialogChart", "resizer", "requests", "mobile/mobileTableQuotes", "mobile/mobileStatusPanel", "mobile/mobileTableTrade", "mobile/mobileTableReport", "mobile/mobileSettingsPage", "mobile/mobileHeaderPanel", "mobile/mobileMenuOptionTypes", "mobile/mobileDialogBuyOption", "mobile/mobileDialogNewOrder", "mobile/mobileDialogPendingOrder", "mobile/mobileDialogSymbolsList", "mobile/mobileDialogOptionsSettingsList", "mobile/mobileDialogChangeLang", "mobile/mobileDialogIndicators", "mobile/mobileTradePanel", "mobile/mobileDialogStart"],
function(e) {
    function t(e, t) {
        for (var i = t.length,
        s = 0; s < i; ++s) {
            var n = t[s];
            try {
                e[n].unregister()
            } catch(e) {}
            delete e[n]
        }
    }
    e.MobileTerminalPage = {
        QuotesPage: 0,
        ChartPage: 1,
        TradePage: 2,
        ReportPage: 3,
        SettingsPage: 4
    },
    e.MobileMenuPanelPosition = {
        bottom: "bottom",
        right: "right",
        left: "left",
        top: "top"
    },
    e.MobileTerminal = function(t) {
        this._chartPanelCollapsed = !1,
        this.isKeyboardOpened = !1,
        e.Resizer.register(this),
        e.MobileTerminal.base.constructor.apply(this, arguments),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileTerminal, e.Terminal);
    var i = e.MobileTerminal.prototype;
    return i._render = function() {
        e.Terminal.base._render.apply(this, arguments),
        this._HeaderPanel = this._Content = this._StatusBar = null,
        this._Token = e.Auth.token,
        e.Socket.register(this)
    },
    i.requireAll = function() {
        this.createTerminal(),
        this.openSocket()
    },
    i.getHeaderButtons = function() {
        return {
            marketOrder: this._marketOrderBtn,
            pendingOrder: this._pendingOrderBtn,
            binaryOption: this._buyOptionBtn
        }
    },
    i.createTerminal = function() {
         console.log("a7a2_1");
        document.documentElement.scrollTop = document.body.scrollTop = 0,
        e.removeAllEventsByNode(document.body, "mousemove", null),
        e.removeAllEventsByNode(document.body, "touchmove", null),
        e.Browser.IsMobile && document.getElementById("WTDialogsContainer") && (document.getElementById("WTDialogsContainer").style.display = "none"),
        this.clearOldData(),
        this.destroyControls(),
        e.Resizer.register(this),
        this._restart = !1;
        var t = e.htmlToDOM(e._Templates.QuotesPage),
        i = e.htmlToDOM(e._Templates.ChartPage),
        s = e.htmlToDOM(e._Templates.TradePage),
        n = e.htmlToDOM(e._Templates.ReportPage),
        o = e.htmlToDOM(e._Templates.SettingsPage),
        a = e._dialogMasterObject.getBlockscreen();
        a.style.display = "none",
        a.classList.remove("RestartMode"),
        e.TerminalContainer.style.visibility = "hidden",
        this.mainSwiper = new e.Swiper({
            ParentNode: e.TerminalContainer,
            Class: "MobileSwiper",
            TabMode: "Compact",
            ChangeSelectedPage: e.Delegate(this, this._onSwiperChangeSelectedPage),
            Pages: this._getSwiperPages(t, i, s, n, o)
        }),
        this.mainSwiper.getTabsBlock().addEventListener("touchmove", e.stopCustomAndNativeEvents, !0),
        this.mainSwiper.ChangeSelectedPage.add(e.Delegate(this, this.excludeHeaderTouchMove)),
        this.excludeHeaderTouchMove(null),
        e.addEvent(document.body, "touchstart", this._onTouchStart.bind(this)),
        e.addEvent(document.body, "touchmove", this._onTouchMove.bind(this)),
        e.serversMode == e.serversModes.fromLocalStorage && document.addEventListener("pause", this.saveSettings.bind(this), !1),
        this.headPanel = t.querySelector(".HeadPanel"),
        this.headPanel.style.width = window.innerWidth - 24 + "px",
        this.accountNode = this.headPanel.querySelector(".Account"),
        this._symbolBtn = new e.Button({
            ParentNode: this.headPanel,
            ImageUrl: "res/img/mobileImg/buttons/symbolBtn.png",
            PressedImageUrl: "res/img/mobileImg/buttons/symbolBtn.png",
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "SymbolBtn",
            Text: "Symbols",
            Key: "cQSSymbols",
            Click: e.Delegate(this, this._onSymbolBtnClick)
        }),
        this._buyOptionBtn = new e.Button({
            ParentNode: this.headPanel,
            Enabled: !1,
            ImgWidth: "26px",
            ImgHeight: "26px",
            FontIcon: {
                Content: e.FontIcons.m_BuyOption,
                Color: "#A79585",
                Size: 26
            },
            Class: "OrderBtn OptionBtn Disabled",
            Click: e.Delegate(this, this.onBuyOptionBtnClick),
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd)
        }),
        this._optionTypeButton = new e.Button({
            ParentNode: this.headPanel,
            Class: "OptionTypes",
            MenuClass: "VolumeSelect",
            FontIcon: {
                Content: e.FontIcons.m_OptionTypes,
                Color: "rgb(167, 149, 133)",
                Size: 18
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Menu: e.getMobileMenuOptionTypes()
        }),
        this._pendingOrderBtn = new e.Button({
            ParentNode: this.headPanel,
            Enabled: !1,
            ImgWidth: "26px",
            ImgHeight: "26px",
            FontIcon: {
                Content: e.FontIcons.m_PendingOrder,
                Color: "#A79585",
                Size: 26
            },
            Class: "OrderBtn Disabled",
            Click: e.Delegate(this, this.onPendingOrderBtnClick),
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd)
        }),
        this._marketOrderBtn = new e.Button({
            ParentNode: this.headPanel,
            Enabled: !1,
            FontIcon: {
                Content: e.FontIcons.m_NewOrder,
                Color: "#A79585",
                Size: 26
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "OrderBtn Disabled",
            Click: e.Delegate(this, this.onMarketOrderBtnClick),
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd)
        }),
        this._periodSelect = new e.InputSelect({
            Width: 145,
            Class: "SymbolSelect",
            MenuClass: "VolumeSelect ReportMenu",
            Edit: !1,
            ArtificialMenuScroll: !0,
            Options: [{
                Text: "Today",
                Key: "cPDTCurrent",
                Id: "Today"
            },
            {
                Text: "Last week",
                Key: "cPDTWeek",
                Id: "Last_week"
            },
            {
                Text: "Last month",
                Key: "cPDTmonth",
                Id: "Last_month"
            },
            {
                Text: "Last 3 months",
                Key: "cPDT3month",
                Id: "Last_3_months"
            },
            {
                Text: "All operations",
                Key: "cPDTAll",
                Id: "All_operations"
            }],
            ChangedValue: e.Delegate(this, this._onReportPeriodChanged)
        }),
        this._buyOptionBtn.investorModeDependency = !0,
        this._pendingOrderBtn.investorModeDependency = !0,
        this._marketOrderBtn.investorModeDependency = !0,
        this._periodSelect.setSelectedOption(4),
        this.downloadBtn = new e.Button({
            Text: e.FontIcons.m_Download,
            Key: "",
            Class: "DownloadBtn",
            Click: e.Delegate(this, this._onDownloadBtnClick),
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd)
        }),
        this.timeFrameOverlayBtn = new e.Button({
            Text: "",
            Class: "overlayBtn timeFrameOverlayBtn",
            Menu: e.getMobileTimeFrameMenu(),
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchMove: e.Delegate(this,
            function(e) {
                e.Event.preventDefault()
            }),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd)
        }),
        this.currentPriceOverlayBtn = new e.Button({
            Text: "",
            Class: "overlayBtn currentPriceOverlayBtn",
            FontIcon: {
                Content: e.FontIcons.m_Aim,
                Color: "#ffffff",
                Size: 24
            },
            ImgWidth: "100%",
            ImgHeight: "24px",
            TouchStart: e.Delegate(this, this._onButtonTouchStart),
            TouchMove: e.Delegate(this,
            function(e) {
                e.Event.preventDefault()
            }),
            TouchEnd: e.Delegate(this, this._onButtonTouchEnd),
            Click: e.Delegate(this,
            function(t) {
                e._menuMasterObject.hideAll(),
                e.activeChart.goToCurrentPrice()
            })
        });
        var r = parseInt(this._swiperContentHeight) - this.headPanel.clientHeight + "px";
        this._TableQuotes = new e.MobileTableQuotes({
            ParentNode: t
        }),
        this._UlSelectSymbols = new e.MobileDialogSymbolsList({
            ParentNode: t
        }),
        this._optionTypeButton.setVisible(!1),
        this._SelectSymbolsVisible = !1,
        this.mainSwiper.getContentNode().style.height = this._swiperContentHeight,
        this._TableQuotes._DomNode.style.height = r,
        this._TableQuotes._DomNode.style.top = this.headPanel.clientHeight + "px",
        document.documentElement.offsetWidth > document.documentElement.offsetHeight ? this.setMenuPanel(e.MobileMenuPanelPosition.right) : this.setMenuPanel(e.MobileMenuPanelPosition.bottom),
        e.addEvent(document.body, "touchmove", this._bodyTouchMove.bind(this)),
        this.getTableTrade(),
        e.TerminalContainer.style.width = e.getAppWidth() + "px",
        e.TerminalContainer.style.height = e.getAppHeight() + "px"
    },
    i._onButtonBlock = function() {
        var t = e.getTerminal().getHeaderButtons(),
        i = e.SymbolsData.isShowSymbols();
        t.marketOrder.setEnabled(i),
        t.pendingOrder.setEnabled(i)
    },
    i.checkSymbolsData = function() {
        if (this.mainSwiper) {
            var t = e.getTerminal(),
            i = e.SymbolsData,
            s = e.OptionsSettings,
            n = t.mainSwiper,
            o = n.getPages(),
            a = o[1];
            t.getTableTrade();
            var r = i.getSymbols(),
            l = Object.keys(r).map(function(e, t, i) {
                return r[e]
            }),
            h = l.some(function(e, t, i) {
                return e.canUse()
            }),
            d = i.getSelectedSymbols().some(function(e, t, i) {
                return r[e].allowTrade()
            }) && h,
            c = this.useOnlyOptions,
            u = s.getOptionsSettings(),
            g = Object.keys(u).map(function(e, t, i) {
                return u[e]
            }),
            p = g.some(function(e, t, i) {
                var s = r[e.getSymbolName()];
                return s && s.canUse() && e.canUse()
            }),
            m = s.checkAreOptionsEnabledExceptForbidden(),
            _ = !0,
            y = !0,
            S = !0;
            c ? (y = p, S = m, _ = m) : (this._marketOrderBtn.setEnabled(d), this._pendingOrderBtn.setEnabled(d), this._buyOptionBtn.setEnabled(d), y = h, S = d, _ = d),
            this._symbolBtn.setEnabled(y),
            this.statusPanel.button.setEnabled(_),
            this._buyOptionBtn.setEnabled(m),
            this._optionTypeButton.setEnabled(m),
            a.setEnabled(S);
            var f = e.activeChart;
            f && this.verificationTradeAccess(f.getMainSymbolName())
        }
    },
    i.redrawTerminal = function() {
        if (this._ParentNode) {
            for (e._menuMasterObject.hideAll(), e._menuMasterObject.reRenderAll(); this._ParentNode.firstChild;) this._ParentNode.removeChild(this._ParentNode.firstChild); (e.Auth._checkAuth || this._restart) && this.mainSwiper && (this.mainSwiper.addToNode(this._ParentNode), this.recalcSwiperDimensions())
        }
    },
    i.destroyTerminal = function() {
        var t = document.getElementById("WTDialogsContainer");
        if (t) {
            for (; t.firstChild;) t.removeChild(t.firstChild);
            t.style.display = "none"
        }
        for (; e.TerminalContainer.firstChild;) e.TerminalContainer.removeChild(e.TerminalContainer.firstChild);
        e._dialogMasterObject.hideAll(),
        e.removeAllEventsByNode(document.body, "touchmove", !0)
    },
    i._onWindowResize = function(t) {
        function i() {
            e.TerminalContainer.style.width = e.getAppWidth() + "px",
            e.TerminalContainer.style.height = e.getAppHeight() + "px",
            e.isPortrait() ? innerWidth <= innerHeight && s.setMenuPanel(e.MobileMenuPanelPosition.bottom) : s.setMenuPanel(e.MobileMenuPanelPosition.right),
            s.recalcSwiperDimensions(),
            e.getMobileOpenDemoDialogWithoutInit() || e.getMobileSignInDialogWithoutInit() || e.getMobileChangePassDialogWithoutInit() || e.getMobileLoginPasswordDialogWithoutInit() || e.getMobileDialogStartWithoutInit() || (document.body.scrollTop = 0),
            void 0 != s.statusPanel && s.mainSwiper.getSelectedPageIndex() == e.MobileTerminalPage.TradePage && s.statusPanel.calculateContainerSize()
        }
        e._menuMasterObject.hideAll();
        var s = this;
        if (document.activeElement && document.activeElement instanceof HTMLInputElement && WT_Device.iphone()) {
            document.activeElement.blur();
            var n = window.cordova;
            n && n.plugins.Keyboard.close();
            var o = setTimeout(function() {
                i(),
                clearTimeout(o)
            },
            1100)
        } else i()
    },
    i.setAccountNumber = function() {
        e.TraderData && e.TraderData._TraderInfo && (this.accountNode.innerHTML = (e.LangManager.getStringByKey("cOSAccount") || "Account") + " - " + e.TraderData._TraderInfo.id)
    },
    i._onChangeLang = function() {},
    i.recalcSwiperDimensions = function() {
        var t = this.mainSwiper;
        if (t) {
            var i = t.getContentNode().style,
            s = t.getTabsBlock(),
            n = s.childNodes,
            o = e.keyboardIsShown(),
            a = this.getTabWidthAndHeight(),
            r = this.headPanel;
            if (r && (e.isPortrait() ? r.style.width = document.documentElement.clientWidth - 24 + "px": r.style.width = document.documentElement.clientWidth - 24 - parseInt(a.width) + "px"), e.isPortrait()) {
                var l = e.getTerminal(),
                h = parseInt(a.height);
                l.isKeyboardOpened && (s.style.display = "none", a.height = 0, h = 0),
                this._swiperContentHeight = e.getAppHeight() - h + "px",
                i.height = this._swiperContentHeight,
                i.width = document.documentElement.clientWidth + "px";
                var d = a.width,
                c = a.height,
                u = document.documentElement.clientWidth / 5 + "px",
                g = this.tabPosition == e.MobileMenuPanelPosition.top || this.tabPosition == e.MobileMenuPanelPosition.bottom ? c: "auto";
                Array.prototype.forEach.call(n,
                function(e) {
                    var t = e.style,
                    i = e.querySelector(".WTButtonImage div").style;
                    t.width = u,
                    t.height = g,
                    i.width = d,
                    i.height = c,
                    i.backgroundPosition = ""
                }),
                s.style.width = document.documentElement.clientWidth + "px",
                s.style.height = c,
                this.statusPanel && (this.statusPanel.getDomNode().style.width = document.documentElement.clientWidth + "px")
            } else {
                o && (s.style.display = "none", a.width = 0),
                this._swiperContentHeight = e.getAppHeight() + "px",
                i.height = this._swiperContentHeight,
                i.width = document.documentElement.clientWidth - (o ? 0 : parseInt(a.width)) + "px";
                var p = a.width,
                m = a.imageOffsetX + "px  0px",
                _ = e.getAppHeight() / 5 - 1 + "px";
                Array.prototype.forEach.call(n,
                function(e) {
                    var t = e.style,
                    i = e.querySelector(".WTButtonImage div").style;
                    t.width = "auto",
                    t.height = _,
                    i.width = p,
                    i.height = _,
                    i.backgroundPosition = m
                }),
                s.style.width = a.width,
                s.style.height = "",
                this.statusPanel && (this.statusPanel.getDomNode().style.width = document.documentElement.clientWidth - parseInt(a.width) + "px")
            }
            this.tabPosition == e.MobileMenuPanelPosition.left && (i.left = a.width),
            this.tabPosition == e.MobileMenuPanelPosition.top ? (i.top = a.height, this.headPanel.style.top = a.height) : (i.top = "", this.headPanel.style.top = "");
            var y = window.getComputedStyle(this.headPanel),
            S = parseInt(y.paddingTop) + parseInt(y.height) + parseInt(y.paddingBottom),
            f = this._symbolBtn.getPressed(),
            v = this._TableQuotes;
            if (v) {
                var C = v.getDomNode().style;
                C.height = parseInt(this._swiperContentHeight) - S + "px",
                C.top = S + "px",
                C.display = f ? "none": "block"
            }
            this._HeaderPanel && null != document.getElementById("0") && e._tradePanel && e._tradePanel.calcControlsSize(),
            o || (s.style.display = "block")
        }
    },
    i.getLastOpenedChart = function() {
        var t, i = e.UserSettings.Terminal.OpenedCharts;
        if (i && i.length > 0) {
            t = i[i.length - 1].symbolName;
            var s = this._HeaderPanel._chartSelect.getOptions().indexOf(t);
            s != -1 ? this._HeaderPanel._chartSelect.setSelectedOption(s) : (t = this._HeaderPanel._chartSelect.getOptions()[0], this._HeaderPanel._chartSelect.setSelectedOption(0))
        } else t = this._HeaderPanel._chartSelect.getValue();
        return t
    },
    i.getChartContainerHeight = function() {
        var t = this._HeaderPanel,
        i = t.clientHeight || t.getDomNode().getBoundingClientRect().height ||
        function(e) {
            var t = getComputedStyle(e);
            return parseInt(t.paddingTop) + parseInt(t.height) + parseInt(t.paddingBottom) || 0
        }.apply(this, [t.getDomNode()]) || 53,
        s = 0,
        n = 0;
        return e.isPortrait() && (s = parseInt(e.getTerminal().getTabWidthAndHeight().height) || 0, e._tradePanel && (n = e._tradePanel.getHeight())),
        e.getAppHeight() - i - s - n
    },
    i.getTabWidthAndHeight = function() {
        var t, i, s = 0;
        if (e.isPortrait()) {
            var n = 8.6 * e.getAppHeight() / 100;
            t = i = n < 55 ? "55px": n + "px"
        } else {
            var o = 8.6 * e.getAppWidth() / 100;
            t = i = o < 55 ? "55px": o + "px"
        }
        return {
            width: t,
            height: i,
            imageOffsetX: s
        }
    },
    i._onSocketOpen = function(t) {
        e.Auth.resetAttempt();
        var i = e.getMobileSignInDialogWithoutInit(),
        s = e.getOpenDemoDialogWithoutInit();
        i && i.dispose(),
        s && s.dispose(),
        e.OptionsSettings.clearOptionsSettings(),
        e.TerminalContainer.style.visibility = "";
        var n = document.getElementById("WTDialogBlockscreen");
        n && (n.style.zIndex = "", n.style.opacity = ""),
        e.Auth._checkAuth = !0,
        this.loadServerSettings(),
        this.startPingTimer(),
        this._restart ? this._restart = !1 : this.mainSwiper ? this.redrawTerminal() : this.requireAll()
    },
    i._onSocketClose = function(t) {
        e.Charts2.updateGraphicWindowsPause = !0,
        e._tradePanel && e._tradePanel.dispose();
        var i = e._dialogMasterObject.getBlockscreen(!0);
        if (i.style.display = "inline", this._restart = !!e.Auth.getCheckAuth(), this._restart === !0 && i.classList.add("RestartMode"), this._TableReport && (this._TableReport.unregister(), delete this._TableReport), this._TableQuotes.unregister(), delete this._TableQuotes, this._restart) e.requester.sendTerminalVersion(e.requester.authorization, [e.AccountManager.getCurrentAccount(), !1, !1, !1], !0);
        else {
            this._Token = e.Auth.token = "",
            e.activeChart = null,
            e.Charts2.saveOpenedCharts();
            var s = [];
            this.showChartsAs == e.chartsMode.windows && (s = e.cloneObject(e.UserSettings.Terminal.OpenedCharts)),
            e.Charts2.unRegisterAllCharts(),
            this.closeAllDialogs();
            var n = e.AccountManager.getCurrentAccount(),
            o = e.getMobileSignInDialogWithoutInit();
            o && !o.isShow() && o.dispose(),
            this.showChartsAs == e.chartsMode.windows && (e.UserSettings.Terminal.OpenedCharts = s),
            clearInterval(this._pingTimerID),
            delete e._newChartMenu,
            e.AccountManager.clearToken(),
            e.Auth.check(),
            this.wantToReconnect ? (e._dialogMasterObject.hideAll(), e.requester.sendTerminalVersion(e.requester.authorization, [n, !1, !1, !1], !0)) : this.destroyControls()
        }
        e.SymbolsData._LastChangedTime = 0,
        e.SymbolsData.setSymbols([]),
        clearInterval(this._pingTimerID),
        console.log("Close", t),
        e.Socket.unRegister(this),
        e.removeAllEventsByNode(document.body, "touchmove", !0)
    },
    i._getSwiperPages = function(t, i, s, n, o) {
        this._swiperContentHeight = e.getAppHeight() - parseInt(this.getTabWidthAndHeight().height) + "px";
        var a = [{
            Title: "Quotes",
            Key: "CWNQuotes",
            Id: "quotes",
            FontIcon: {
                Content: "0xe944",
                Size: 16
            },
            Content: t
        },
        {
            Title: "Chart",
            Key: "cMobileChart",
            Id: "chart",
            FontIcon: {
                Content: "0xe933",
                Size: 19
            },
            Content: i
        },
        {
            Title: "Trade",
            Key: "cMFTrade",
            Id: "trade",
            FontIcon: {
                Content: "0xe946",
                Size: 22
            },
            Content: s
        },
        {
            Title: "Report",
            Key: "cMFReport",
            Id: "report",
            FontIcon: {
                Content: "0xe945",
                Size: 19
            },
            Content: n
        },
        {
            Title: "Settings",
            Key: "cBTNSettingsMobile",
            Id: "settings",
            FontIcon: {
                Content: "0xe947",
                Size: 20
            },
            Content: o
        }];
        return a
    },
    i.isChartPage = function() {
        var t = this.mainSwiper,
        i = t.getSelectedPageIndex();
        return i == e.MobileTerminalPage.ChartPage
    },
    i._onSwiperChangeSelectedPage = function(t) {
        e.Charts2.updateGraphicWindowsPause = !0,
        e._menuMasterObject.hideAll(),
        t.getSelectedPageIndex() != e.MobileTerminalPage.QuotesPage && this._SelectSymbolsVisible === !0 && this._onSymbolBtnClick(null);
        var i = this.getTabWidthAndHeight();
        if (t.getSelectedPageIndex() == e.MobileTerminalPage.QuotesPage) {
            if (this.headPanel) {
                this.tabPosition == e.MobileMenuPanelPosition.top ? (this.headPanel.style.top = i.height, this.mainSwiper.getContentNode().style.top = parseInt(i.height) + this.headPanel.clientHeight + "px") : (this.headPanel.style.top = "", this.mainSwiper.getContentNode().style.top = "");
                var s = this._TableQuotes;
                s.fillTable(s.getData())
            }
            this._TableQuotes && (this._TableQuotes._onRefreshSymbols(!0), this._TableQuotes.refreshRows())
        } else if (t.getSelectedPageIndex() == e.MobileTerminalPage.ChartPage) {
            e.updateWindowsTemplates();
            var n = t.getSelectedPage().getContent();
            if (this._HeaderPanel) e.activeChart = this.graphicWindow;
            else {
                this._HeaderPanel = new e.MobileHeaderPanel({
                    ParentNode: n
                });
                var o = this._HeaderPanel;
                this.chartContainer = e.htmlToDOM(e._Templates.ChartContainer),
                n.appendChild(this.chartContainer);
                var a = e.htmlToDOM('<canvas id="0"></canvas>');
                this.chartContainer.appendChild(a);
                var r = e.cloneObject(e.UserSettings.WindowsTemplates || e.getDefaultWindowsTemplate());
                e.Charts2.closeAllGraphicWindows();
                var l, h = this.setAvailableSymbolForChart(r),
                d = e.VERIFICATION_RESULTS;
                if (h || (l = d.NO_SYMBOL), h && (e.activeChart = this.graphicWindow = e.Charts2.addGraphicWindow(0, this.chartContainer, r, h.symbolName)), !h || !e.activeChart) {
                    switch (l = this.verificationTradeAccess()) {
                    case d.NO_SYMBOL:
                        var c = this.mainSwiper,
                        u = c.getPages(),
                        g = u[1];
                        c.getSelectedPageIndex() === e.MobileTerminalPage.ChartPage && c.setSelectedPage(e.MobileTerminalPage.QuotesPage),
                        g.setEnabled(!1);
                        break;
                    case d.HAS_ERRORS:
                    }
                    return
                }
                e.activeChart.loadSettings(h),
                e.activeChart.charts[0].setSymbolName(h.symbolName),
                e.SymbolsData.updateSelectedSymbolsByGraphicWindow(e.activeChart),
                l = this.verificationTradeAccess(),
                l === d.HAS_ERRORS && o._chartSelect.setOptions([h.symbolName]);
                var p = o._chartSelect.getOptions().indexOf(h.symbolName);
                p != -1 ? o._chartSelect.setSelectedOption(p) : o._chartSelect.setSelectedOption(0),
                e.Charts2.redraw(h.symbolName, e.activeChart.options.period);
                var m = e.periodNames[e.getPeriodCode(e.activeChart.getPeriod())];
                this.tuneChartOverlayButtons(m),
                this.timeFrameOverlayBtn.addToNode(n),
                this.timeFrameOverlayBtn.setText(m),
                this.currentPriceOverlayBtn.addToNode(n),
                e.activeChart.options.userTurnOffAutoScroll = h.options.userTurnOffAutoScroll || !1,
                e.SymbolsData.updateSelectedSymbolsByGraphicWindow(e.activeChart)
            }
            e.Charts2.updateGraphicWindowsPause = !1
        } else t.getSelectedPageIndex() == e.MobileTerminalPage.TradePage ? (this.statusPanel || (this.statusPanel = new e.MobileStatusPanel({
            ParentNode: t.getSelectedPage().getContent()
        })), this.setOptionsVisible(), this._TableTrade ? (this._TableTrade.refreshData(), this.statusPanel.afterScroll()) : this._TableTrade = new e.MobileTableTrade({
            ParentNode: t.getSelectedPage().getContent()
        }), this.recalcTableTradeGeometry()) : t.getSelectedPageIndex() == e.MobileTerminalPage.ReportPage ? (this._TableReport || (this._periodSelect.addToNode(t.getSelectedPage().getContent().querySelector(".HeadPanel")), this.downloadBtn.addToNode(t.getSelectedPage().getContent().querySelector(".HeadPanel")), this._TableReport = new e.MobileTableReport({
            ParentNode: t.getSelectedPage().getContent().querySelector(".ReportContent")
        }), this._TableReport.setLabels()), this._periodSelect.setSelectedOption(this._periodSelect.getSelectedOption()), this.recalcTableReportGeometry()) : t.getSelectedPageIndex() == e.MobileTerminalPage.SettingsPage && (this._SettingsPage || (this._SettingsPage = new e.MobileSettingsPage({
            ParentNode: t.getSelectedPage().getContent()
        })));
        this.recalcSwiperDimensions(),
        this.checkSymbolsData()
    },
    i.setMenuPanel = function(t) {
        this.mainSwiper && (this.mainSwiper._tabsBlock.style.display = "none", this.tabPosition = t, this.mainSwiper._tabsBlock.className = "WTSwiperTabsBlock " + t, this.isBookOrientation = t == e.MobileMenuPanelPosition.bottom || t == e.MobileMenuPanelPosition.top, this.isAlbumOrientation = t == e.MobileMenuPanelPosition.right || t == e.MobileMenuPanelPosition.left)
    },
    i.recalcTableTradeGeometry = function() {
        this.mainSwiper.getContentNode().style.height = this._swiperContentHeight;
        var e = this._TableTrade;
        e && this.statusPanel.calculateContainerSize()
    },
    i.recalcTableReportGeometry = function() {
        if (this.mainSwiper) {
            var t = this.mainSwiper.getPages()[e.MobileTerminalPage.ReportPage].getContent().querySelector(".HeadPanel"),
            i = this.isAlbumOrientation ? 0 : parseInt(this.getTabWidthAndHeight().height);
            this._swiperContentHeight = e.getAppHeight() - i + "px",
            this.mainSwiper.getContentNode().style.height = this._swiperContentHeight,
            this._TableReport && (this._TableReport._DomNode.parentNode.style.top = t.clientHeight + "px", this._TableReport._DomNode.parentNode.style.height = parseInt(this._swiperContentHeight) - t.clientHeight + "px", t.style.width = this.isAlbumOrientation ? window.innerWidth - parseInt(this.getTabWidthAndHeight().width) + "px": "100%")
        }
    },
    i.tuneChartOverlayButtons = function(t) {
        var i = e.activeChart.options.colorScheme.overlayButtons || "#ffffff",
        s = e.hexToRgba(i, .3);
        this.timeFrameOverlayBtn.getDomNode().style.borderColor = s,
        this.currentPriceOverlayBtn.getDomNode().style.borderColor = s;
        var n = this.currentPriceOverlayBtn.getFontIconNode(),
        o = this.timeFrameOverlayBtn.getTextNode();
        n.style.color = i,
        o.style.color = i,
        t.length <= 2 ? e.removeCSSClass(o, "smallerFont") : e.addCSSClass(o, "smallerFont")
    },
    i.checkIsOptionsEnabled = function() {
        console.log("a7a2_2");
        e.OptionsSettings.checkAreOptionsEnabledExceptForbidden() ? this._buyOptionBtn.setEnabled(!0) : this._buyOptionBtn.setEnabled(!1),
        this.checkSymbolsData()
    },
    i.setOptionsVisible = function() {
        console.log("a7a2_3");
        this.platformType == e.PlatformTypes.ptUTIP && this.useOptions && e.OptionsSettings.getCount() > 0 ? this.showOptionsPanels() : this.hideOptionsPanels()
    },
    i.setAvailableSymbolForChart = function(t) {
        var i = null,
        s = e.SymbolsData,
        n = s.getSymbols(),
        o = e.UserSettings.Terminal.OpenedCharts[0],
        a = !1;
        n = function(e) {
            var t = {};
            for (var i in e) if (e.hasOwnProperty(i)) {
                var s = e[i];
                s.canUse() && (t[i] = s)
            }
            return t
        }.apply(this, [n]),
        o && n[o.symbolName] && (i = o, a = !0);
        var r = this._HeaderPanel.getSelectedSymbolName(),
        l = n[r],
        h = function(e, t) {
            return !! e && (t(r), !0)
        },
        d = function(e) {
            try {
                return !! n[e]
            } catch(e) {
                return ! 1
            }
        },
        c = function(e) {
            return e.canUse()
        },
        u = s.getSelectedSymbols().filter(d),
        g = function(e) {
            i = {
                symbolName: e,
                options: t
            }
        },
        p = function(e) {
            i.symbolName = e
        },
        m = function(e, t, i) {
            h(l, t) || (i.getHeaderPanel().setChartSelectValue(e), t(e))
        },
        _ = function(e, t) {
            return i ? i.symbolName = e: i = {
                symbolName: e,
                options: t
            },
            i
        };
        if (0 === n.length) return null;
        var y, S = this.useOnlyOptions,
        f = e.OptionsSettings,
        v = f.getOptionsSettings().filter(c);
        if (S) {
            if (0 === v.length) return null;
            var C, b = f.getAllFavoriteSymbolsNames();
            if (0 === b.length) return this._HeaderPanel.setChartSelectValue(y = v[0].getSymbolName()),
            _(y, t);
            switch (C = b[0], a) {
            case ! 0 : var T = function(e) {
                    return e.canUse()
                },
                P = f.getOptionsSettingsBySymbolName(i.symbolName).filter(T).length > 0;
                if (P) {
                    this.getHeaderPanel().setChartSelectValue(i.symbolName);
                    break
                }
                m(C, p, this);
                break;
            case ! 1 : m(C, g, this)
            }
            return i
        }
        if (0 === u.length) return this._HeaderPanel.setChartSelectValue(y = n[0].getSymbolName()),
        _(y, chartOption);
        switch (a) {
        case ! 0 : break;
        case ! 1 : m(u[0], g, this)
        }
        return i
    },
    i.setOnlyOptionsVisible = function(t) {
        if (1 != t) return this._marketOrderBtn.setVisible(!0),
        this._pendingOrderBtn.setVisible(!0),
        this._symbolBtn.setText("Symbols"),
        void this._symbolBtn.setKeyAndRefreshText("cQSSymbols");
        this._marketOrderBtn.setVisible(!1),
        this._pendingOrderBtn.setVisible(!1),
        this._symbolBtn.setText("Options"),
        this._symbolBtn.setKeyAndRefreshText("cOFOptions"),
        delete this._UlSelectSymbols;
        var i = e.TerminalContainer.querySelector(".WTQuotesPage");
        this._UlSelectSymbols = new e.MobileDialogOptionsSettingsList({
            ParentNode: i
        });
        parseInt(this._swiperContentHeight) - this.headPanel.clientHeight + "px";
        this._UlSelectSymbols.updateSymbolTree(),
        this.updateOptionTypesMenu(),
        this.getTableQuotes().setOnlyOptions(),
        this._optionTypeButton.setVisible(!0);
        var s = e.LangManager.getStringByKey("cMFOptionPositions");
        this.mainSwiper.getPages()[0]._Key = "cMFOptionPositions",
        this.mainSwiper.getPages()[0]._TabButton._Key = "cMFOptionPositions",
        this.mainSwiper.getPages()[0].setTitle(s)
    },
    i.updateOptionTypesMenu = function() {
        var t = e.getMobileMenuOptionTypesWithoutInit();
        t && t.reRender()
    },
    i.setControlButtonsVisible = function() {
        this._buyOptionBtn.setVisible(!1),
        this._pendingOrderBtn.setVisible(!1),
        this._marketOrderBtn.setVisible(!1)
    },
    i.showOptionsPanels = function() {
        if (!e.investorAccount) {
            this._buyOptionBtn && (this._buyOptionBtn.getDomNode().style.display = "inline-block");
            var t = !e.OptionsSettings.checkAreOptionsEnabledExceptForbidden();
            t ? this._buyOptionBtn.setEnabled(!1) : this._buyOptionBtn.setEnabled(!0)
        }
    },
    i.hideOptionsPanels = function() {
        this._buyOptionBtn && (this._buyOptionBtn.getDomNode().style.display = "none")
    },
    i.saveSettings = function() {
        this.saveOpenedChart(),
        e.saveUserSettings()
    },
    i.saveOpenedChart = function() {
        this.graphicWindow && (e.UserSettings.Terminal.OpenedCharts = [], e.UserSettings.Terminal.OpenedCharts.push(this.graphicWindow.getSettingsForSave()))
    },
    i._loadOpenedChart = function(e) {},
    i._onButtonTouchStart = function(e) {
        e.Sender.setPressed(!0)
    },
    i._onButtonTouchEnd = function(e) {
        e.Sender.setPressed(!1)
    },
    i._onTouchStart = function(e) {
        this.startTouchX = e.targetTouches[0].screenX,
        this.startTouchY = e.targetTouches[0].screenY
    },
    i._onTouchMove = function(e) {
        this.endTouchX = e.targetTouches[0].screenX,
        this.endTouchY = e.targetTouches[0].screenY;
        var t = this.endTouchX - this.startTouchX,
        i = this.endTouchY - this.startTouchY,
        s = this.mainSwiper.getDomNode(),
        n = 20;
        Math.abs(t) > n && (e.preventDefault(), s.scrollTop = s.scrollTop + i)
    },
    i._onSymbolBtnClick = function(t) {
        this._UlSelectSymbols.updateSymbolTree(),
        this._UlSelectSymbols.show(),
        e.saveUserSettings()
    },
    i.onMarketOrderBtnClick = function(t) {
        e.getMobileDialogNewOrder().show()
    },
    i.onPendingOrderBtnClick = function(t) {
        e.getMobileDialogPendingOrder().show()
    },
    i.onBuyOptionBtnClick = function(t) {
        e.getMobileDialogBuyOption().show()
    },
    i._onDownloadBtnClick = function(e) {
        this._TableReport && (e.Sender.setEnabled(!1), this._TableReport.getDatesFromCombobox(this._periodSelect.getSelectedOption()), this._TableReport.downloadData())
    },
    i._onReportPeriodChanged = function(e) {
        this._TableReport && (this._TableReport.getDatesFromCombobox(this._periodSelect.getSelectedOption()), this._TableReport.refreshData("executedOrders"))
    },
    i.changeChart = function(t, i) {
        var s = e._tradePanel,
        n = (this._HeaderPanel, t ? t.sender.getValue() : i),
        o = this.verificationTradeAccess(n);
        if (o !== e.VERIFICATION_RESULTS.NO_SYMBOL) {
            var a = this.graphicWindow;
            if (a) {
                var r = a.charts[0];
                if (r.setSymbolName(n), r.setPeriod(this.graphicWindow.getPeriod()), r.resetMinMax(), "chart" === this.mainSwiper.getSelectedPage().getId() && this.graphicWindow.show(), s = e._tradePanel) {
                    s.block(!1);
                    var l = s.getType();
                    if (l === e.PANEL_TYPES_ENUM.newOrder) s.setCurrentQuote(e.SymbolsData.getSymbols()[n]),
                    s.updateVolumesForSymbol();
                    else {
                        var h = e.OptionsSettings.getOptionsTypesBySymbolName(n),
                        d = e.PANEL_TYPES_ENUM.newOrder;
                        if (0 !== h.length && (d = h.indexOf(l) !== -1 ? l: h[0]), e.getMobileTradePanelMenu().updateItemsList(), s.dispose(), this.useOnlyOptions && 0 === h.length) return;
                        e.getMobileTradePanel({
                            panelType: d
                        }).initData().show()
                    }
                }
            }
            this.saveSettings()
        } else try {
            var c = e.activeChart,
            u = this.mainSwiper,
            g = u.getPages(),
            p = g[e.MobileTerminalPage.ChartPage];
            c && c.deleteEvents(),
            s && s.dispose(),
            u.getSelectedPageIndex() === e.MobileTerminalPage.ChartPage && u.setSelectedPage(e.MobileTerminalPage.QuotesPage),
            p.setEnabled(!1)
        } catch(e) {}
    },
    i.configureChartContainerBackground = function() {},
    i._bodyTouchMove = function(t) {
        function i(e, t, i) {
            var s = e.scrollTop,
            o = i.targetTouches[0].screenY - n.startTouchY;
            s >= t && o < 0 ? (e.scrollTop = t - 1, i.preventDefault(), i.stopPropagation()) : s <= 0 && o > 0 && (e.scrollTop = 1, i.preventDefault(), i.stopPropagation())
        }
        function s(e, t) {
            return e instanceof HTMLElement && Array.prototype.some.call(e.classList,
            function(e) {
                var i = t.indexOf(e);
                return i !== -1 && (t.splice(i, 1), !0)
            })
        }
        var n = this,
        o = e._dialogMasterObject.isAnyDialogOpen(),
        a = e.MobileTerminalPage,
        r = this.mainSwiper.getSelectedPageIndex();
        if (o) {
            var l = document.querySelector("#WTDialogsContainer");
            if (l && l.childNodes.length > 0) {
                for (var h, d = t.target;
                "WTDialogsContainer" !== d.id && "body" !== d.tagName.toLowerCase() && d !== document;) {
                    if (s(d, ["WTDialog", "mobileDialog", "subScrollingContainer"])) {
                        d && (h = d, e.getMobileOpenDemoDialogWithoutInit() || e.getMobileSignInDialogWithoutInit() || e.getMobileChangePassDialogWithoutInit() || e.getMobileLoginPasswordDialogWithoutInit() || i(d, d.scrollHeight - d.offsetHeight, t));
                        break
                    }
                    d = d.parentNode
                }
                if (h) {
                    if (h.classList.contains("mobileDialogChangeLang")) return;
                    e.getMobileOpenDemoDialogWithoutInit() || e.getMobileSignInDialogWithoutInit() || e.getMobileChangePassDialogWithoutInit() || e.getMobileLoginPasswordDialogWithoutInit() || e.getMobileDialogStartWithoutInit() || e.preventDefaultMoveNode(h, d, t)
                }
            }
        } else switch (r) {
        case a.QuotesPage:
            var c = this._SelectSymbolsVisible ? this._UlSelectSymbols.getDomNode() : this._TableQuotes.getDomNode();
            i(c, c.scrollHeight - c.offsetHeight, t);
            break;
        case a.ChartPage:
            e._tradePanel && document.activeElement.blur();
            break;
        case a.TradePage:
            var u = this.statusPanel.container;
            i(u, u.scrollHeight - u.offsetHeight, t);
            break;
        case a.ReportPage:
            var g = this._TableReport.getDomNode().parentNode;
            i(g, g.scrollHeight - g.offsetHeight, t);
            break;
        case a.SettingsPage:
            var p = this._SettingsPage.getDomNode();
            i(p, p.scrollHeight - p.offsetHeight, t)
        }
    },
    i.getTableTrade = function() {
        return this._TableTrade || (this.statusPanel || (this.statusPanel = new e.MobileStatusPanel({
            ParentNode: this.mainSwiper.getPages()[2].getContent()
        })), this._TableTrade = new e.MobileTableTrade({
            ParentNode: this.statusPanel.getDomNode().querySelector(".container")
        })),
        this._TableTrade
    },
    i.changeTheGraphicIfNecessary = function() {
        var t = e.SymbolsData.getSymbols(),
        i = Object.keys(t).map(function(e, i, s) {
            return t[e]
        }).filter(function(e, t, i) {
            return e.allowTrade()
        });
        if (0 === i.length) return ! 1;
        var s = e.activeChart;
        if (!s) return ! 1;
        var n = t[s.getMainSymbolName()];
        if (n && n.allowTrade()) return ! 1;
        var o = i[0].getSymbolName(),
        a = e.getMobileChartSelect();
        a.setValue(o),
        a.ChangedValue.fire({
            event: null,
            sender: a
        })
    },
    e.VERIFICATION_RESULTS = {
        NO_SYMBOL: 2,
        HAS_ERRORS: 1,
        NO_ERRORS: 0
    },
    i.verificationTradeAccess = function(t) {
        function i(e, t) {
            return ! e.getSymbols()[t || ""]
        }
        var s, n, o, a = this._HeaderPanel,
        r = e.SymbolsData,
        l = e.OptionsSettings,
        h = r.getSelectedSymbols(),
        d = e.activeChart,
        c = !0; ! t && d && (t = d.getMainSymbolName()),
        t && (c = i(r, t));
        var u = r.getSymbols(),
        g = u[t],
        p = l.getOptionsSettingsBySymbolName(t).filter(function(e, t, i) {
            return e.canUse()
        }).length > 0;
        if (n = !!g && "index" === g.getCalculationTypeName(), s = c, !s) {
            var m = this.useOnlyOptions ? l.getAllFavoriteSymbolsNames().indexOf(t) !== -1 : h.indexOf(t) !== -1;
            s = s || !m && null !== t,
            s = s || !g.allowTrade(),
            s = s || this.useOnlyOptions && !l.checkAreOptionsEnabledExceptForbidden()
        }
        var _ = n && !p;
        a && (a.blockSymbolChartSelectControl(s), a.blockIndicatorButtonControl(c), a.blockChartStyleButtonControl(c), a.blockTradePanelButtonControl(s || _), a.blockChartMenuButtonControl(s || _)),
        this.timeFrameOverlayBtn.setEnabled(!c),
        this.currentPriceOverlayBtn.setEnabled(!c),
        c ? (d && d.deleteEvents(), o = e.VERIFICATION_RESULTS.NO_SYMBOL) : o = s ? e.VERIFICATION_RESULTS.HAS_ERRORS: e.VERIFICATION_RESULTS.NO_ERRORS;
        var y = e._tradePanel;
        return _ && y && y.dispose(),
        o
    },
    i.excludeHeaderTouchMove = function(t) {
        var i = this.mainSwiper,
        s = i.getSelectedPage(),
        n = e.MobileTerminalPage,
        o = s.getContent(),
        a = "HeadPanel";
        if (!s.touchmoveWillBeExclude) {
            switch (i.getSelectedPageIndex()) {
            case n.ChartPage:
                a = "WTHeaderPanel";
                break;
            case n.TradePage:
                a = "header"
            }
            var r = o.querySelector("." + a);
            r && (r.addEventListener("touchmove", e.stopCustomAndNativeEvents, !0), s.touchmoveWillBeExclude = !0)
        }
    },
    i.destroyControls = function() {
        e.Resizer.unRegister(this),
        e.Resizer.unRegister(this._TableTrade),
        t(this, ["mainSwiper", "statusPanel", "downloadBtn", "_symbolBtn", "_buyOptionBtn", "_pendingOrderBtn", "_marketOrderBtn", "_optionTypeSelect", "_periodSelect", "_UlSelectSymbols", "_TableTrade", "_SelectSymbolsVisible", "accountNode", "headPanel"]),
        t(e, ["_signInDialog", "_mobileSelectSymbols"])
    },
    i = null,
    e
}),
define("mobile/mobileDialogChangePass", ["dialog", "dialogChangePass"],
function(e) {
    e.MobileDialogChangePass = function(t) {
        e.MobileDialogChangePass.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.Resizer.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileDialogChangePass, e.DialogChangePass);
    var t = e.MobileDialogChangePass.prototype;
    return t._render = function() {
        this._Width = parseInt(window.innerWidth),
        this._Height = parseInt(window.innerHeight) >= 580 ? parseInt(window.innerHeight) : 580,
        this._Title = "Change password",
        this._Key = "cLPFChangePass",
        this._Top = 0,
        this._Left = 0,
        this._WithBlock = !1,
        this._ImageList = null,
        this._activeTypeBtn = null,
        this._Content = e.htmlToDOM(e._Templates.MobileDialogChangePass);
        var t = this._Content.querySelector(".DControls");
        if (this._backBtn = new e.Button({
            ParentNode: this._Content.querySelector(".BackBtnPlace"),
            FontIcon: {
                Content: e.FontIcons.m_GoToBack,
                Color: "#FFFFFF",
                Size: 16
            },
            ImgWidth: "26px",
            ImgHeight: "26px",
            Class: "LeftBtn",
            Click: e.Delegate(this, this._onGoBack)
        }), this._needUsePassTypes()) {
            var i = this._Content.querySelector(".PasswordTypePlace");
            this._mainPassBtn = new e.Button({
                Id: "main",
                Height: 48,
                Width: 124,
                ParentNode: i,
                Class: "AccountTypeBtn",
                Text: "Main",
                Key: "cLPFMain",
                Click: e.Delegate(this, this._onChangePassType)
            }),
            this._investorsPassBtn = new e.Button({
                Id: "investor",
                Height: 48,
                Width: 124,
                ParentNode: i,
                Class: "AccountTypeBtn",
                Text: "Investor's",
                Key: "cLPFInvestors",
                Click: e.Delegate(this, this._onChangePassType)
            })
        }
        this._currentPassInput = new e.InputPassword({
            ParentNode: t,
            Width: 248,
            Label: "Current",
            Key: "cMobileCurrentPassword",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: e.LangManager.getStringByKey("cMobileCurrentPassword") || "Current",
            InputType: "Password",
            ChangeValue: e.Delegate(this, this._checkFields),
            Click: e.Delegate(this, this._onInputFocus),
            Focus: e.Delegate(this, this._onInputFocus)
        }),
        this.writeText(t),
        this._newPassInput = new e.InputPassword({
            ParentNode: t,
            Width: 248,
            Label: "New",
            Key: "cMobileNewPassword",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: e.LangManager.getStringByKey("cMobileNewPassword") || "New",
            InputType: "Password",
            ChangeValue: e.Delegate(this, this._checkFields),
            Click: e.Delegate(this, this._onInputFocus),
            Focus: e.Delegate(this, this._onInputFocus)
        }),
        this._newPassInput2 = new e.InputPassword({
            ParentNode: t,
            Width: 248,
            Label: "Repeat",
            Key: "cMobileConfirmPassword",
            LabelPosition: "Top",
            LabelPostfix: "",
            Placeholder: e.LangManager.getStringByKey("cMobileConfirmPassword") || "Repeat",
            InputType: "Password",
            ChangeValue: e.Delegate(this, this._checkFields),
            Click: e.Delegate(this, this._onInputFocus),
            Focus: e.Delegate(this, this._onInputFocus)
        }),
        this._modifyBtn = new e.Button({
            ParentNode: t,
            Key: "cCDModify",
            Text: "Modify",
            Class: "ChangePassBtn",
            Click: e.Delegate(this, this._onModifyPasswordButtonClick)
        }),
        e.DialogChangePass.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogChangePass"),
        e.addEvent(this._DomNode, "touchstart", this.onDialogTouchStart.bind(this)),
        e.addEvent(this._DomNode, "touchmove", this._onDialogTouchMove.bind(this)),
        this.setTitle()
    },
    t._needUsePassTypes = function() {
        var t = void 0 === e.investorAccount;
        return ! t
    },
    t._onDialogTouchMove = function(t) {
        WT_Device.iphone() && document.activeElement.blur(),
        e.MobileDialogChangePass.base.onDialogTouchMove.apply(this, arguments)
    },
    t._getPassType = function(e) {
        var t = {
            main: 0,
            investor: 1
        };
        return t[e] || 0
    },
    t.show = function(t, i, s, n) {
        s ? this._currentPassInput.removeCSSClass("HiddenLabel") : this._currentPassInput.addCSSClass("HiddenLabel"),
        this._newPassInput.addCSSClass("HiddenLabel"),
        this._newPassInput2.addCSSClass("HiddenLabel"),
        this._onWindowResize(null),
        e.MobileDialogChangePass.base.show.apply(this, arguments),
        this._mainPassBtn && this._mainPassBtn.addCSSClass("ActiveBtn"),
        this._currentPassType = this._getPassType("main"),
        this._modifyBtn.setEnabled(!1),
        document.querySelector("html").scrollTop = 0,
        document.body.scrollTop = 0
    },
    t._onChangePassType = function(t) {
        e.removeCSSClass(this.getDomNode().querySelector(".ActiveBtn"), "ActiveBtn"),
        t.Sender.addCSSClass("ActiveBtn"),
        this._currentPassType = this._getPassType(t.Sender._Id),
        this._newPassInput.setValue(""),
        this._newPassInput.addCSSClass("HiddenLabel"),
        this._newPassInput2.setValue(""),
        this._newPassInput2.addCSSClass("HiddenLabel")
    },
    t._onInputFocus = function(t) {
        var i = t.sender.getDomNode();
        e.removeCSSClass(i, "HiddenLabel")
    },
    t._onModifyPasswordButtonClick = function(t) {
        var i = function() {
            e.MobileDialogChangePass.base._onModifyPasswordButtonClick.apply(this, arguments)
        }.bind(this);
        this.blockButtons(),
        e.keyboardIsShown() ? setTimeout(function() {
            i()
        },
        400) : i()
    },
    t._onSocketMessage = function(e) {
        var t = e,
        i = t.msgType;
        switch (i) {
        case "changePassword":
        case "changeMT4Password":
            this.unblockButtons()
        }
    },
    t.setTitle = function() {
        var t = this._Content.querySelector(".dialogLabel");
        t.innerHTML = e.LangManager.getStringByKey("cMFEditPAssword") || "ChangePassword"
    },
    t.writeText = function(t) {
        this._textNode || (this._textNode = e.htmlToDOM('<div class="RulesArea"><div class="Text"></div></div>'), t.appendChild(this._textNode)),
        this._rulesKey1 = "cCPFPassMust",
        this._rulesKey2 = "cCPFPassMust2",
        this._Content.querySelector(".Text").innerHTML = (e.LangManager.getStringByKey(this._rulesKey1) || "The password must contain at list 5 charasters") + ": " + (e.LangManager.getStringByKey(this._rulesKey2) || "letters, numbers, underscore")
    },
    t._checkFields = function() {
        var e = this._newPassInput.getValue(),
        t = this._currentPassInput.getValue(),
        i = this._newPassInput2.getValue();
        null != t && "" != t && null != e && "" != e && e == i ? this._modifyBtn.setEnabled(!0) : this._modifyBtn.setEnabled(!1)
    },
    t._onWindowResize = function(t) {
        "Safari" === e.Browser.Browser && document.activeElement.blur()
    },
    t._onChangeLang = function() {
        this.setTitle(),
        this.writeText()
    },
    t._onClosed = function() {
        document.getElementById("WTDialogsContainer").style.position = "",
        this.dispose(),
        this.removeFromDom(),
        delete this,
        delete e._changePassDialog
    },
    t.setHeight = function() {},
    t.setWidth = function() {},
    t = null,
    e.getMobileChangePassDialog = function() {
        return e._changePassDialog || (e._changePassDialog = new e.MobileDialogChangePass),
        e._changePassDialog
    },
    e.getMobileChangePassDialogWithoutInit = function() {
        return e._changePassDialog
    },
    e
}),
define("mobile/mobileDialogLoginPassword", ["dialog", "dialogLoginPassword", "mobile/mobileDialogChangePass"],
function(e) {
    e.MobileDialogLoginPassword = function(t) {
        e.MobileDialogLoginPassword.base.constructor.apply(this, arguments),
        this.Closed.add(e.Delegate(this, this._onClosed)),
        e.Resizer.register(this),
        e.LangManager.register(this)
    },
    e.initClass(e.MobileDialogLoginPassword, e.DialogLoginPassword);
    var t = e.MobileDialogLoginPassword.prototype;
    return t._render = function() {
        this._Width = parseInt(window.innerWidth),
        this._Height = parseInt(window.innerHeight) >= 580 ? parseInt(window.innerHeight) : 580,
        this._Title = "Account information",
        this._Key = "cCIFCaption",
        this._Top = 0,
        this._Left = 0,
        this._ImageList = null,
        this._Content = e.htmlToDOM(e._Templates.MobileDialogLoginPassword),
        this._WithBlock = !1;
        var t = this._Content.querySelector(".DControls");
        JSON.parse(localStorage.getItem("DemoAccount")).investorMode;
        if (this.writeText(t), this._loginInput = new e.Input({
            ParentNode: t,
            Width: this.width,
            Label: "Login",
            Key: "cLPFLOgin",
            LabelPosition: "Top",
            LabelPostfix: "",
            Class: "Login",
            ReadOnly: !0,
            Disabled: !0,
            Value: this._login
        }), this._passwordInput = new e.InputPassword({
            ParentNode: t,
            Width: this.width,
            Label: "Password",
            Key: "cLPFPAss",
            LabelPosition: "Top",
            LabelPostfix: "",
            InputType: "Password",
            ReadOnly: !0,
            Disabled: !0,
            Value: this._password
        }), this._investorPasswordInput = new e.InputPassword({
            ParentNode: t,
            Width: this.width,
            Label: "Investor",
            Key: "cLPFInvestor",
            LabelPosition: "Top",
            LabelPostfix: "",
            InputType: "Password",
            ReadOnly: !0,
            Disabled: !0,
            Value: this._investorPassword
        }), this._closeBtn = new e.Button({
            ParentNode: t,
            Text: "Log In",
            Key: "cMobileLogIn",
            Click: e.Delegate(this, this.hide)
        }), this._modifyPasswordBtn = new e.Button({
            ParentNode: t,
            Text: "Modify",
            Key: "cCDModify",
            Click: e.Delegate(this, this._onOpenModifyPasswordClick)
        }), !this._investorPasswordInput.getValue()) {
            var i = this._investorPasswordInput._DomNode;
            i.parentNode.removeChild(i),
            this._Height = 215
        }
        e.DialogLoginPassword.base._render.apply(this, arguments),
        this.addCSSClass("mobileDialogLoginPassword"),
        this._storageAcc = e.jsonParse(localStorage.getItem("ConnectionsInfo") || "{ }") || {},
        this._onWindowResize(),
        this.setTitle(),
        this.setHeight(this._Height)
    },
    t.setTitle = function() {
        var t = this._Content.querySelector(".dialogLabel");
        t.innerHTML = e.LangManager.getStringByKey("cCIFCaption") || "Account information"
    },
    t.writeText = function(t) {
        this._textNode || (this._textNode = e.htmlToDOM('<div class="RulesArea"><div class="Text"></div></div>'), t.appendChild(this._textNode)),
        this._Content.querySelector(".Text").innerHTML = e.LangManager.getStringByKey("cLPFRegSuccess") + ".<br>" + e.LangManager.getStringByKey("cLPFyouLogin")
    },
    t.setHeight = function() {},
    t._onWindowResize = function(t) {
        "Safari" === e.Browser.Browser && document.activeElement.blur();
        var i = window.innerHeight,
        s = window.innerWidth;
        this.setWidth(s),
        this.setHeight(i)
    },
    t.buildCaption = function() {
        try {
            this.setTitle(),
            this._Content.querySelector(".Text").innerHTML = (e.LangManager.getStringByKey("cLPFRegSuccess") || "Account is successfully registered") + ".<br>" + (e.LangManager.getStringByKey("cLPFyouLogin") || "Below is the your account number (username) and password")
        } catch(e) {}
    },
    t._onChangeLang = function() {
        this.writeText(),
        this.setTitle()
    },
    t._onClosed = function() {
        this.dispose(),
        this.removeFromDom(),
        delete this
    },
    t._onOpenModifyPasswordClick = function() {
        this.hide(),
        this.dispose(),
        e.getMobileChangePassDialog().show(this, this._login, this._password, this._investorPassword)
    },
    t = null,
    e.getMobileLoginPasswordDialog = function(t, i, s) {
        return e._loginPasswordDialog || (e._loginPasswordDialog = new e.MobileDialogLoginPassword(t, i, s)),
        e._loginPasswordDialog
    },
    e.getMobileLoginPasswordDialogWithoutInit = function() {
        return e._loginPasswordDialog
    },
    e
}),
define("authorization", ["ajax", "terminal", "authContainer", "mobile/mobileDialogSignIn", "requests", "mobile/mobileTerminal", "mobile/mobileDialogLoginPassword"],
function(e) {
    function t() {
        e._Terminal && (e._Terminal.clearOldData(), e._Terminal.destroyControls && e._Terminal.destroyControls())
    }
    function i() {
        var i = e.getTerminal();
        i && (e._menuMasterObject._Listeners = [], i.unregister(), e.LangManager.unRegisterAll(), e.Socket.unRegisterAll(), e.LangManager.unRegisterAll(), e.TraderData.unRegisterAll(), e.OptionsSettings.unRegisterAll(), e.SymbolsData.unRegisterAll(), e.Resizer.unRegisterAll(), t(), e._Terminal = null, delete e._Terminal, e.AuthModule.reRegister(), e.SymbolsData.register(e.QuotesArchive))
    }
    e.Authorization = function(t) {
        if (! (this instanceof e.Authorization)) return new e.Authorization(t);
        t = t || {},
        this._Server = t.Server,
        this._attempt = 0;
        var i = e.serversMode == e.serversModes.fromLocalStorage && (e.Browser.IsMobile || e.Browser.IsTablet) ? e.savedServers: e.Config.Servers;
        if (!this._Server) {
            var s = e.jsonParse(localStorage.getItem("ConnectionsInfo")) || {},
            n = 0;
            if (s.Last) {
                var o = sessionStorage.getItem("ServerName") || s.Last.Server || null;
                if (s.Last && o) for (var a = 0; a < i.length; a++) i[a].Name == o && (n = a)
            }
            this._Server = i[n]
        }
        this._requireTerminalBind = this._requireTerminal.bind(this),
        e.Socket.register(this),
        e.Browser.IsMobile || (e.WebOfficeController = this._webOfficeController = new e.WebOffice),
        this.setCheckAuth = function(t) {
            t = !e.valueIsEmpty(t) && !!t,
            this._checkAuth = t
        },
        this.getCheckAuth = function() {
            return this._checkAuth
        }
    };
    var s = e.Authorization.prototype;
    return s.setStateAfterAuthorization = function(t, i) {
        var s = e.Browser.IsMobile ? e.getMobileSignInDialog() : null,
        n = e.Config,
        o = n.TerminalSettings;
        if (e.Auth.getCheckAuth()) s && s.hide(),
        o && o.IntegratedWebOfficeEnabled && e.getAuthContainer().hideAuthContainer(),
        require(["terminal"], this._requireTerminalBind);
        else if (t) if (o && o.IntegratedWebOfficeEnabled) {
            var a = e.getAuthContainer();
            a.setSubjectTitle(e.LangManager.getStringByKey("cMobileError") || "Error"),
            a.setHelpText(t),
            a.unblockActionButtons()
        } else s ? (e.Browser.IsMobile ? source = e._mobileDialogStart: source = null, s.show(source, i, {}), e.showErrorDialog(t)) : (e.AuthModule.show(0), e.AuthModule.error(t))
    },
    s._requireTerminal = function(e) {
        if (e.Browser.IsMobile) i(),
        e._Terminal = new e.MobileTerminal,
        e._Terminal.mainSwiper ? e._Terminal.redrawTerminal() : e._Terminal.requireAll();
        else {
            var t = e.getTerminal();
            e.activeChart = null,
            e.Charts2.closeAllGraphicWindows(),
            t && t.showChartsAs == e.chartsMode.windows && t.saveAndCloseOnlyChartsDialogs(),
            i(),
            e._Terminal = new e.Terminal,
            e._Terminal._HeaderPanel && e._Terminal._TradeSplitter ? e._Terminal.redrawTerminal() : e._Terminal.requireAll()
        }
        e.getTerminal().setOptionsVisible()
    },
    s.check = function() {
        var i = e.Socket._socket,
        s = e.getTerminal(),
        n = e.Config.TerminalSettings,
        o = e.Browser.IsMobile;
        if (this.token = e.AccountManager.extractTokenFromStorage(), this.token) {
            if (s) s.openSocket();
            else {
                o ? (t(), e._Terminal = new e.MobileTerminal) : e._Terminal = new e.Terminal,
                s = e.getTerminal(),
                o && s.closeAllDialogs(),
                s.requireAll();
                var a = e.AccountManager.getWebofficeAccount();
                a && this._webOfficeController.restoreWebOfficeConnection(a.login, a.password, !0)
            }
            var r = e.AccountManager.getDemoInfo();
            if (null != r) {
                if (i && i.readyState != i.OPEN) {
                    r = null,
                    hidePreloader();
                    var l = e.LangManager.getStringByKey("cCUTCantConnectToServer") || "Unable to connect to server";
                    if (e.Browser.IsMobile) {
                        var h = e._dialogMasterObject.getBlockscreen();
                        h.classList.remove("RestartMode"),
                        e.getMobileSignInDialog().show(),
                        e.showErrorDialog(l)
                    } else e.AuthModule.show(0),
                    e.AuthModule.error("Unable to connect to server");
                    return
                }
                1 == r.NeedToShow && (o ? e.getMobileLoginPasswordDialog(r.Login, CryptoJS.RC4.decrypt(r.Password, e.SecretString).toString(CryptoJS.enc.Utf8), CryptoJS.RC4.decrypt(r.investorPassword, e.SecretString).toString(CryptoJS.enc.Utf8)).show() : e.getLoginPasswordDialog(r.Login, CryptoJS.RC4.decrypt(r.Password, e.SecretString).toString(CryptoJS.enc.Utf8), CryptoJS.RC4.decrypt(r.investorPassword, e.SecretString).toString(CryptoJS.enc.Utf8)).show()),
                e.AccountManager.removeDemoInfo()
            }
        } else {
            for (var d = e.TerminalContainer; d.firstChild;) d.removeChild(d.firstChild);
            if (s) s.wantToReconnect || (hidePreloader(), n && n.IntegratedWebOfficeEnabled ? (e.getAuthContainer().showAuthContainer(), e.WebOfficeController.clearWebOfficeAccount()) : e.Browser.IsMobile ? e.getMobileDialogStart().show() : e.AuthModule.show(0));
            else if (hidePreloader(), n && n.IntegratedWebOfficeEnabled && !o) {
                if (!e.WebOfficeController.tryLoadStoredAccount()) {
                    e.getAuthContainer()
                }
            } else e.Browser.IsMobile ? e.getMobileDialogStart().show() : e.AuthModule.show(0)
        }
    },
    s.attemptToConnect = function(t, i) {
        var s = this;
        return s._attempt > 4 ? (s._attempt = 0, s._checkAuth = !1, void e.UtipFunctions.connectionLost()) : void(this.timeout = setTimeout(function() {
            clearTimeout(s.timeout),
            delete s.timeout,
            s._attempt > 4 || (e.AuthModule.showed || showPreloaderCircle(), e.requester.sendTerminalVersion(t, i, !0))
        }.bind(this), 2500))
    },
    s.incAttempt = function() {
        this._attempt++
    },
    s.resetAttempt = function() {
        this._attempt = 0
    },
    s._onSocketError = function(t) {
        if (!e._Terminal) {
            var i = e.Browser.IsMobile ? e.getMobileSignInDialog() : e.AuthModule.show(0);
            i.show()
        }
    },
    s.exit = function() {
        this._checkAuth = !1,
        e.AccountManager.clearToken(),
        e.Socket.close(),
        this.setStateAfterAuthorization(!1)
    },
    s.setServer = function(e) {
        e && (this._Server = e)
    },
    s.getServer = function() {
        return this._Server
    },
    s = null,
    e.Auth = e.Config ? e.Authorization() : null,
    e
});
var requireConfigParams = {
    baseUrl: "scripts/controls",
    waitSeconds: 0
};
window.UtipConfig.TerminalSettings.DebugMode !== !0 && (requireConfigParams.urlArgs = "bust=" + (new Date).getTime()),
require.config(requireConfigParams);
var wt; !
function(e, t) {
    if (e) showPreloader(),
    window.onload = function(i) {
        function s() {
            requirejs(["authorization", "authModule"],
            function(i) {
                i.setConfig(e),
                i.setTerminalContainer(t),
                i.Auth.check(),
                wt = i
            })
        }
        s()
    };
    else {
        var i = (document.documentElement.clientHeight - 20) / 2 + "px",
        s = (document.documentElement.clientWidth - 200) / 2 + "px",
        n = ' style="display: inline-block; position: absolute;font-family: Roboto; font-size: 16px; color: white; font-weight: bold;top: ' + i + "; left: " + s + ';" ',
        o = "<div" + n + ">Config is not defined!</div>";
        document.write(o)
    }
} (window.UtipConfig, document.getElementById("container")),
define("main",
function() {});